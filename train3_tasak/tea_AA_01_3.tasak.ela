kirjak	tea_AA_01_3.tasak.ela	Paul Leis Itanium Lõpuks ometi ! Kolmeaastase hilinemisega on tootmisse jõudnud serverid ja tööjaamad , mis on ehitatud Inteli <arv>bitise protsessori Itanium baasil . Algselt oli Inteli <arv>bitise protsessori koodnimeks Merced . Protsessori nime muudeti <arv>.aasta oktoobris , millal esialgsete plaanide järgi pidi Merced juba ilmavalgust nägema . Mitmesugustel põhjustel , sealhulgas ka <arv>bitiste protsessorite projekteerimistarkvara puudumise tõttu Itaniumi valmimine venis . Esimesteks Itanium-pääsukesteks on Hewlett-Packardi serverid rx<arv> ( kuni <arv> protsessorit ) ja rx<arv> ( kuni <arv> protsessorit ) ning tööjaam i<arv> ( kuni <arv> protsessorit ) . Peagi järgnevad Delli , IBMi , Compaqi jt. firmade serverid ning tööjaamad - aasta lõpuks on oodata <arv> Itanium-põhist toodet <arv> firmalt . Suurtegijatest pole vaid Sun teatanud Itaniumi-põhiste serverite loomisest . Itaniumile järgnevad <arv>. aastal McKinley ning <arv>. aastal Deerfield ja Madison . Võib loota , et Itaniumi järglased ei ilmu mitmeaastase hilinemisega , sest nüüd on Intelil olemas tarkvara <arv>bitiste protsessorite disainiks/kavandamiseks ja ka tootmiseks . Miks siis ikkagi Itaniumi nii oluliseks peetakse ? On ju Sunil ( UltraSparc ) , IBMil ( PowerPC ) , Compaqil ( Alpha ) ja Hewlett-Packardil ( PA-RISC ) <arv>bitised protsessorid ammu olemas . Põhjus on lihtne - Itaniumi vaieldamatud väärtomadused pluss Winteli ( Windows + Intel ) arendus-/tootmisvõimsused . Mida võib saavutada riistvara/tarkvara masstootmisega , on Wintel PC-maailmas juba ilmekalt näidanud . Winteli kõrgtaseme serverimaailma tungimise edukuse üheks tingimuseks on Microsofti <arv>bitise Windows-platvormi evitamine . Ka siin on esimene pääsuke pesast lahkumas : Microsoft on lubanud lähiajal välja tuua oma esimese <arv>bitise opsüsteemi Windows Advanced Server Limited Edition . Kui asjad arenevad Winteli kava kohaselt , siis tänu riistvara/tarkvara masstootmisele saab teiste firmade süsteemidega konkureerivaid ( neid ületavaid ? ) süsteeme luua tunduvalt odavamalt - siit pole aga raske järeldusi teha . Kuid ega Intel pea ainult Microsoftile lootma , sest enamik serveritootjaid loob ka oma Unix-opsüsteemi Itanium-versiooni : Hewlett-Packard - HP-UX <arv>i v<arv>.<arv> , IBM - AIX-<arv>L . Ka on Itanium-serveritele valmimas mitmeid Linux-opsüsteemi realisatsioone ( Red Hat , Caldera , SuSE , TurboLinux ) . Seega võib tõdeda , et Itanium on multiopsüsteemne platvorm . Hewlett-Packard tegi varakult oma strateegilise otsuse - loobuda ( mingi aja jooksul ) oma protsessorite arendamisest ning minna üle Itaniumi-põhiste serverite/tööjaamade tootmisele . Seetõttu andis Itaniumi hilinemine Hewlett-Packardi serverimüükidele üsna valusa hoobi . Konkurendid , eriti Sun , suurendasid oma serverimüüke peamiselt Hewlett-Packardi arvel . Lähema <arv>-<arv> aasta jooksul peaks selguma , kas oma protsessorite arendamine on otstarbekas või mitte . Sun , kes Winteliga kuidagi ühte paati ei mahu , ei hakka ( vähemalt esialgsete kavade kohaselt ! ) Itanium-süsteeme looma . IBM ja Compaq on äraootaval seisukohal : nad jätkavad paralleelselt Itanium-süsteemide loomisega ka oma protsessorite ( PowerPC ja Alpha ) arendamist . Eelnevat arvestades pole üllatav , et kõige entusiastlikum Itanium-serverite arendaja on Hewlett-Packard . IA-<arv> ( Intel Architecture-<arv> ) on Inteli <arv>bitiste protsessorite arhitektuur . IA-<arv> olulisemad väärtomadused ( tõhusust tagavad tehnoloogiavõtted ) : paralleelsus masinakäskude tasemel ( Explicitly Parallel Instruction Computing , EPIC ) - on IA-<arv> tõhususe alus , samaaegselt saab sooritada kuni <arv> käsku ennetav hargnemiste töötlus ( predication ) laadimiskäskude ja andmete ennetav laadimine ( speculation ) <arv>bitine aadressruum ( Very Large Memory , VLM ) - näiteks võib andmebaas tervikuna ( kümned gigabaidid ) olla põhimälus , mis arusaadavalt tagab andmebaasioperatsioonide tõhususe teistest protsessoritest tunduvalt suurem registrite hulk ( <arv> üld- , <arv> ujupunkti- , <arv> hargnemis- ja <arv> predikaatregistrit ) - arvutusmahukaid algoritme ( sealhulgas äriintellektialgoritme ) saab tõhusamalt realiseerida , sest enamasti on käsu operandid registrites IA-<arv> tõhususest : loetletud väärtomadused pluss <arv>bitine käsk Integer Multiply Add võimaldab realiseerida krüpteerimisalgoritme Itaniumil ligi suurusjärk kiiremini kui sama sagedusega Suni protsessoril UltraSparc III . Krüpteerimisalgoritmide ( mis aga on PKI , VPN jt. internetiseerumist tagavate turvatehnoloogiate aluseks ) , andmebaasi operatsioonide ja äriintellektialgoritmide realiseerimise tõhusus ongi Itaniumi Interneti-ajastu protsessoriks kuulutamise ajendiks . Kokkuvõttes . Kas IA-<arv> saavutab monopoolse seisundi ? Mida kavatsevad ette võtta Sun , IBM ja Compaq , et Inteli õnne häirida ? Tuleb tõdeda , et me elame põneval ajal. Jaak Tepandi Tuhat aastat hiljem Jaak Tepandi - sündinud <arv>. veebruaril <arv> Tallinnas . Lõpetanud <arv> Tartu Riikliku Ülikooli matemaatikuna . Tehnikateaduste kandidaat ( <arv> ) , Chartered Engineer ( MIEE , CEng , <arv> ) , sertifitseeritud infosüsteemide audiitor ( CISA , <arv> ) . Töötanud valdavalt Tallinna Tehnikaülikooli informaatikainstituudis , alates <arv> rakendusliku tehisintellekti õppetooli professor . Eesti Arvutifirmade Assotsiatsiooni aasta tegija ( <arv> ) . Eesti infosüsteemide auditi ühingu juhatuse esimees ( <arv> juulist ) ja aseesimees ( <arv> märtsist ) , Eesti Informaatikaseltsi president ( <arv>-<arv> ) , Infotehnoloogia standardimise tehnilise komitee esimees ( septembrist <arv> ) . Teadus- ja õppetegevuses enim huvitatud infosüsteemide auditist , globaalsest e-kaubandusest ning intelligentsetest agentidest . Ajakirja “ ACM Communication ” märtsikuu number oli pühendatud teemale “ The Next <arv> Years ” . Allpool mõned ideed sellest väljaandest . Digitaalne surematus , mille puhul inimese kogemused on digitaalselt salvestatud ning mis jätkavad edaspidi eraldi isiksusena iseseisvat elu , on võimalik sellel sajandil ( Gordon Bell ja Jim Gary ) . Kui praegu tehakse sportlastele dopinguainete teste , siis tulevikus tuleb võib-olla teha kogu keha tomograafiat , tuvastamaks kehasse istutatud mikroskoopilisi seadmeid , mis võivad parandada koordinatsiooni , jõudu ja mõistust ( Donald A. Norman ) . “ Ekraanid ” istutatakse silmaläätsedesse , helid ja lõhnad viiakse otse kõrva või ajusse ( Martin Cooper ) . Uusi radikaalseid tehnoloogiaid , mille abil luuakse vahendid vähi ning teiste praegu ravimatute haiguste raviks , saab samavõrd kasutada ka pahatahtlikel eesmärkidel ( Ray Kurzweil ) . Nende ideede täitumine ei võta muidugi tuhandet aastat . “ Meie generatsioon võib olla viimane , kes näeb ja tõeliselt teab , mis on erinevus reaalsete ja virtuaalsete asjade vahel , ” ütleb samas numbris Norman I. Badler . Aga mida meie arvame ? Ilmselt on küsitav , kas on üldse võimalik pika aja peale midagi sisukat prognoosida . Tuntud näide on sir George Airy <arv>. aasta novembris antud hinnang Charles Babbage'i taotlusele . Taotluses sooviti uue projekti rahastamist , projektis kirjeldatud leiutist loetakse meie aja arvutite eelkäijaks . Hinnang koosnes ühest sõnast : “ Väärtusetu ” . Projekti ei rahastatud ( tõele au andes tuleks siiski täpsustada , et taotlusele eelnenud projektile oli tulemusteta juba antud <arv> <arv> naela , mis oli tolle aja kohta suur summa ) . Sellest on möödas vähem kui <arv> aastat . Häid ennustusi on ka lähemast minevikust . Ken Olson , Digital Equipment Corporation president , ennustas <arv>. aastal : “ Pole mingit põhjust , miks keegi peaks tahtma arvutit endale koju ” . Nii et ennustamine on üsna tänamatu töö . Ka tulevikunägemused ise tunduvad muutuvat . Kunagistes ulmelugudes oli põhirõhk robotitel , kosmoserännakutel ja muul sarnasel . Tänapäeval hakkab üha enam ja enam tunduma , et olulised muutused on toimumas siinsamas , meie vahetus läheduses , isegi meie sees . Pakun näitena kaks stsenaariumi . Esimene stsenaarium : sipelgapesa raielangil , millele varsti hakatakse ehitama maja . Sipelgapessa on sattunud paberitükk maja ehitamise otsusega . Sipelgad ronivad selle paberi peal , tunnetades ( võib-olla ) paberi pinna omadusi ning musta ja valge pinna vaheldumist . Neil pole siiski mingit vahendit , lugemaks sellelt paberilt neile nii olulist infot , mis sunniks neid kohe asukohta vahetama . Kas ka meie ümber võib olla infot , mis on meile eluliselt oluline ja mida me ei suuda tajuda , vähemalt mitte veel praegu ? Kui inimeste käsitlemine sipelgatena tundub liiga pessimistlik , vaatame siis vastupidist stsenaariumit . Inimesed on juba tänapäeval võimelised looma intelligentseid kooslusi . Näiteks üks paljulubav suund tänapäeva robootikas on väikeste , suhteliselt väheintelligentsete robotite kolooniate loomine ja uurimine . Koostöös võivad sellised robotsipelgad ilmutada märkimisväärset intelligentsitaset . Veelgi huvitavam on virtuaalsete objektide koosluste uurimine . Nii pole keerukas kirjutada programmi , mis käivitamisel loob suure hulga virtuaalseid objekte . Objektid tegutsevad oma virtuaalses programmimaailmas . Nad võivad omavahel suhelda , nad võivad ammutada teistelt objektidelt energiat , nendega võib seostada positiivseid ja negatiivseid seisundeid . Tekib hulk huvitavaid küsimusi : näiteks , kas need objektid võiksid mingitel tingimustel tulla mõttele , et neid võib keegi olla loonud ? Osutub , et see ongi põhimõtteliselt võimalik . Mõelge järele , milline võiks olla sellise objekti ja programmeerija suhe . Ja mis siis , mis sellest kõigest järeldub ? Eriti ei midagi . Lihtsalt on mõnus aeg-ajalt võtta tempo maha ja mõelda , et meie konfliktidest haaratud maailm võib olla palju avaram ja huvitavam kui esmapilgul paistab . Konfliktid näivad siis vähem olulised ja lahendused võivad olla lähemal kui me arvame ... näiteks õhus , mida hingame . Äkki tuhande aasta pärast oskame neid lahendusi lugeda ? Teemakohast kirjandust : The Next <arv> Years . A Collection of Essays . // Communications of the ACM , vol. <arv> , March <arv> , No <arv>. <hyperlink> <hyperlink> Tepandi , J. Requirements for a Software Agent System with Self-Consciousness . // Proceedings of the <arv>rdAnnual Conference of the International Society for the Systems Sciences , June <arv> - July <arv> , <arv>. Asilomar , California . Arvo Toomsalu , TTÜ arvutitehnika instituut Post-RISC-arhitektuur ( <arv> ) Käskude ettevalmistamine töötluseks Üheks võtteks protsessori jõudluse tõstmisel on rööpselt töödeldavate käskude arvu suurendamine . Mitmest käsust koosneva käsugrupi rööptöötluse korraldamiseks vajab protsessori juhtüksus lisainfot käskude omavaheliste sõltuvuste kohta . Seepärast lisataksegi nii üksikutele käskudele kui ka nende gruppidele lisabitte . Lisabitid näitavad , kas tegu on siirdekäsuga või mitte , kas käsus toimub mälupöördusi , millist töötlusüksust käsk vajab . Täiendav informatsioon lisatakse käsusõnasse käskude eeldekodeerimisel . Muudatused käsuvormingus ja formaadis kajastuvad ühtlasi käsuvahemälu ( ICM ) struktuurses korralduses . Otseselt avaldavad need mõju käsuvahemälu mälurea korraldusele ( selles säilitatakse käsuplokki ) . Tavaliselt on käsuplokki kuuluvate käskude arv võrdne ( või kordne ) lähetamisüksuse poolt rööpselt väljastatavate käskude arvuga ( käsugrupi suurusega ) . Igale käsuplokile lisatakse keskmiselt <arv>-bitine kirje , mis kirjeldab käsuvoo eeldatavat käitumist ( väli FH ) . Üksikuid käske täiendatakse kahe lisaväljaga : <arv>-<arv>bitise BH-väljaga , mis kirjeldab käsu hargnemiste eellugu ( ajalugu ) ja <arv>-<arv>bitise eeldekodeerimise PD-väljaga . Joonisel <arv> on toodud neljakäsulise käsuploki ( I<arv> , I<arv> , I<arv> , I<arv> ) vorming klassikalise RISC-protsessori esimese taseme ( L<arv>-taseme ) käsuvahemälu mälureas ( a ) ja sama käsuplokk post-RISC-protsessori käsuvahemälus ( b ) . Informatsioon saabub L<arv>-taseme käsuvahemällu kas mikroprotsessorsüsteemi põhimälust ( MM ) või L<arv>-taseme vahemälust ( L<arv>CM ) . Enne L<arv>-taseme käsuvahemällu salvestamist läbivad käsud eeldekodeerimise üksuse ( PDCU ) , mis varustabki käsuplokke lisainfoga . L<arv>-taseme käsuvahemälus säilitatakse seega eeldekodeeritud ( predecoded ) käsuplokke . Näiteks protsessoris R<arv> eeldekodeeritakse iga <arv>-bitine käsusõna <arv>-bitisesse formaati . Käsule lisatavad neli bitti näitavad , millises protsessori funktsionaalses üksuses tuleb käsku töödelda . Käskude eeldekodeerimise rakendamine aitab kaasa protsessori jõudluse tõstmisele , sest see vähendab järgneva käskude dekodeerimise operatsiooni töömahukust ja lihtsustab käsuvoo juhtimise üksuse talitlust . Käsuvõtt ja käsuvoog Käsuvahemälust mitme käsu üheaegse võtu korraldamisel võib tekkida raskusi , eriti kui hargnemiste tulemusena muutub programmis käsuvoo suund . Nimelt ei tarvitse siirde sihtaadressid olla joondatud vahemälu rea-aadresside järgi . Segaduste vältimiseks on hakatud kasutama nn. isejoondavaid käsuvahemälusid ( self-aligned instruction cache ) . Isejoondavas käsuvahemälus sooritatakse ühel taktil informatsiooni lugemine ja konkateneerimine vahemälu kahest järjestikusest naaberreast . Vahemälu peab sellisel juhul olema kas kaksport-struktuuriga või koosnema kahest mälusegmendist . Post-RISC-arhitektuurile on tüüpiline käskude ennetusvõtt . See suurendab oluliselt käsuvõtuoperatsioonide efektiivsust . Käskude ennetusvõtul analüüsitakse tervikuna kogu vahemälurea sisu , avastamaks hargnemisi käsuvoos . Samaaegselt käsuvõtuga toimub eeldatava siirdesuuna ja siirde sihtaadressi arvutamine . Sihtaadressi arvutamisel kasutatav algoritm sõltub sellest , kas on tegemist naasmisega alamprogrammist , tingimusliku siirdekäsuga või tingimusteta siirdekäsuga . Arvutuste jaoks varustatakse käsuvõtuüksus individuaalse summaatorlülituse ja naasmisaadresside pinuga . Hargnemiskäsu esmaesinemisel peab käsuvõtuüksus sooritama siirde sihtaadressi arvutamise , hiljem saab kasutada sihtaadresside väärtusi , mis on salvestatud hargnemiste sihtaadresside vahemällu ( BTAC ) . Viimases säilitatakse hargnemiskäskudele järgnevate ( prognoositud ) käskude aadresse . BTAC-i iga rida sisaldab hargnemiskäsu aadressi ( ABR) ja selle vastaval hargnemissuunal asuva sihtkäsu aadressi ( ABRD) . Käsuvõtul võrreldakse protsessori käsuloenduris olevat koodi BTAC-i salvestatud koodidega ( ABR) . Kui koodikombinatsioonid langevad kokku , siis suunatakse käsuloendurisse sihtaadressi väärtus ( ABRD) ning käsuvõttu alustatakse sellelt aadressilt . BTAC-is säilitatakse nii tingimuslike kui ka tingimusteta siirdekäskude sihtaadresse . Ilmselt suureneb tulevikus käsuvahemälust samaaegselt loetavate käsuplokkide arv veelgi , sest jõudluse tõstmiseks peab protsessor ühel taktil töötlema üha enam käske . Järelikult peab protsessor olema võimeline korraldama mitmete rööpselt toimuvate hargnemiste ohjet . Käsuvoo töötlemise seisukohalt on kriitilised need käsud , mis muudavad käskude täitmise järjekorda . Käsud , mis ennetusvõtu tulemusena moodustunud käsujadas paiknevad käsuvoo kulgu muutvate käskude järel , võivad teatud juhtudel osutuda kasutuks , sest nad asusid programmiharus , mis ei kuulu täitmisele . Mittevajaliku töö tegemist protsessoris aitab vähendada käsuvoo edasise käitumise prognoosimine käsuvõtu faasis . See toimub käsikäes hargnemiste prognoosiga . Infotöötluse parem korraldus post-RISC-protsessoreis saavutatakse tänu järgmiste meetmete rakendamisele : võimalikult varajane tõenäoseima hargnemissuuna tuvastamine efektiivsete prognoosimeetodite ja käskude spekulatiivse töötluse mehhanismide rakendamine hargnemissuuna sihtaadressi kiire puhverdamine nii BTAC-i kui ka käsuloendurisse ( kui tegelik hargnemissuund on tuvastatud ) et tihti tuleb tegeleda juba järgmise hargnemissuuna prognoosiga , samas kui eelnevgi pole määratud , siis rakendatakse vahendeid , mis võimaldavad protsessoris käskude mitmetasemelist spekulatiivset töötlust ajakadude vähendamiseks hargnemissuuna vääral prognoosil püütakse leida meetodeid , mis kiirendaksid käskude kokkurullimist ( rerolling ) . Selleks et prognoosida pikemate programmilõikude käitumist , ei piisa üksnes üksiku siirdekäsu eeldatava hargnemissuuna teadmisest . Oluline on teada , kuidas käituvad käsuvoos suuremad käskude kogumid . Nende eeldatava käitumise kirjeldamiseks lisatakse eeldekodeerimisel käsugruppidele käsuvoo kulgu kirjeldavad FH-bitid . Neis sisalduva informatsiooni alusel otsustab käsuvõtuüksus , kus paikneb mälus järgmine käsugrupp . Juhul kui käsuvoo eeldatavat kulgu kirjeldav juhtinfo osutus vääraks , siis korrigeeritakse FH-väljade sisu . Nagu märgitud , lihtsustab eeldekodeeritud käskude rakendamine hilisemat käskude dekodeerimist . Näiteks mikroprotsessoris Power PC<arv> , kus toimub käskude eeldekodeerimine , sooritatakse käsu dekodeerimine , ümbernimetamine ja väljastus käsukonveieri ühes astmes , erinevalt Power <arv>-st ( ei toimu käskude eeldekodeerimist ) , kus selleks vajatakse konveieri kahte astet . Käskude dekodeerimine Konveieri selles astmes toimub käsukoodide dekodeerimine ja täpsema hargnemissuuna ( tingimuslike siirdekäskude korral ) hindamine . Kuni hargnemissuund pole lõplikult määratud , ei ole ka käskude tegelik järjestus käsuvoos täpselt tuvastatav . Mida rohkem käske hoitakse käsuaknas , seda rohkem informatsiooni on programmi võimaliku käitumise kohta . Seda kergem on leida sobivaid käsukogumeid , mida rööpselt lähetada töötlusüksustesse . Reeglina sooritab protsessor märksa suurema arvu käskude käsuvõtu ja dekodeerimise , kui ta samal ajal käske püsitab . Vajadus suure arvu käskude ( tüüpiliselt kaks korda rohkem ) käsuvõtu järele on põhjustatud “ kaotustest ” , mis tekivad vääralt prognoositud hargnemiste läbi . Käsukonveieri dekodeerimisastmes dekodeeritakse kõiki käske sõltumata sellest , kas neid töödeldakse kohe või mitte . Käskude lähetamine töötlusüksustesse Töötlusseadmeisse suunatavad käsud paiknevad käsupuhvris . Käskude lähetamise üksus valib sellest käske , mida saab töötlemisele suunata . Käsk on töödeldav ainult siis , kui : töötlusüksuse ootepuhvris ( RS ) on vaba register käskude ümberjärjestamise puhvris ( IRBR ) on vaba ruumi leidub vaba register tulemi tarvis ümbernimetamise puhvris ( RNBR ) . Käskude lähetamine ( väljastamine ) on protsess , mis käivitab käsu töötlusprotsessi funktsionaalses üksuses . Lähetatav käsk suunatakse kas otse töötlevasse üksusesse või ootepuhvrisse ( näiteks kui vajatavad operandid pole käideldavad ) . Eristatakse käskude staatilist ja dünaamilist lähetamist ning käskude staatilist ja dünaamilist järjestamist . Käskude dünaamilisel lähetamisel võivad väljastatavad käsud olla kas staatiliselt või dünaamiliselt järjestatud . Esimesel juhul ( staatilisel järjestamisel ) väljastatakse käsud sellises järjestuses , nagu see määrati kompilaatori poolt . Teisel juhul ( dünaamilisel järjestamisel ) on võimalik käskude järjekorraväline väljastamine . Enamik praegu valmistatavaid superskalaarseid mikroprotsessoreid lähetab käsuaknast , milles võib sisalduda <arv> kuni <arv> käsku , töötlusüksustesse neli kuni kuus käsku . Käsuaken võib olla kas ühtne ( tsentraalne ) või koosneda mitmest sõltumatust alamaknast ( käsupuhvrist ) . Kui rakendatakse tsentraalset käsuakent , siis võib käskude lähetamine toimuda erinevalt : <arv>. Mitmeastmeline lähetus Käsule vajalike operandide ressursside käideldavust kontrollitakse kahes etapis . Ressursisõltumatul lähetusel kasutatakse ootepuhvreid . Viimased jaotatakse kas üksikute funktsionaalsete üksuste kaupa või funktsionaalsete üksuste gruppide kaupa . Lähetuse teises etapis jagatakse väljastatavad käsud konkreetsete üksuste vahel ning käivitatakse nende töötlemine . <arv> . Käsuakende lahtisidestamine ( decoupling ) Kasutusel on väike arv käsuaknaid . Igat käsuakent kasutab grupp funktsionaalseid üksusi . <arv> . Mitmeastmeline lähetamine koos käsuakende lahtisidestamisega Käsuakende lahtisidestamine võib ulatuda kuni nende täieliku jaotamiseni funktsionaalsete üksuste vahel . Käske endid saab jaotada ainult kindlate funktsionaalsete üksuste vahel . Igast käsuaknast saab käske väljastada kas järjekorrapäraselt või selle väliselt . Kaheetapilisel väljastusel , kus ressursisõltumatu väljastus eelneb andmesõltumatute käskude jaotamisele , toimub esimesel etapil käskude järjekorrapärane väljastus , teisel võib kasutada ka järjekorravälist väljastust . Juhul kui käsule vajalikud operandid on käideldavad ja vajalik töötlusüksus vaba , siis saab käsu kohe suunata töötlusesse , st. jätta jaotamise etapi vahele . Lähetatavate käsugruppide moodustamisel võetakse arvesse samuti käskude prioriteete . Kõrgema prioriteediga käskudeks on laade- ja “ vanemad ” ( kauem käsuaknas viibinud ) käsud . IDPU ülesannete hulka kuulub veel käsu töötlusega seotud puhvrite hõivatust näitava juhtinformatsiooni pidev uuendamine vastavalt käsu liikumisele käsukonveieris . Töötlusüksused Post-RISC-protsessorite töötlusüksused on sarnased RISC-protsessoreis kasutatavatega . Informatsiooni töötlus toimub neis kas ühe või mitme takti jooksul , kas konveieriseeritult või mitte . Enamik täisarve töötlevaid üksusi suudab infoteisendusi sooritada ühe taktiga . Üksustes , kus töötluseks kulub rohkem takte , kasutatakse konveiertöötlust . Neisse võib põhimõtteliselt suunata igal taktil uue käsu . Kasutatakse samuti mitmetaktilisi töötlusüksusi , kus informatsiooni töötlus ei toimu konveieris , sellisteks on näiteks jagamisoperatsioone või andmete plokkedastusi sooritavad lülitused . Põhilisteks töötlusüksusteks post-RISC-protsessoris on : ühetaktilised täisarvulisi operande töötlevad üksused , sh lülitused lihtsamate multimeediumioperatsioonide sooritamiseks konveieriseeritud mitmetaktilised töötlusüksused keerukate püsipunkt- , ujupunkt- või multimeediumioperatsioonide sooritamiseks konveieriseeritud mitmetaktilised töötlusüksused , kuhu käske ei suunata mitte igal taktil ( näiteks üksused topelttäpsusega ujupunktoperandidega opereerimiseks ) mittekonveieriseeritud mitmetaktilised jagamis- , juurimis- või keerukaid multimeediumioperatsioone täitvad üksused . Viimasel juhul töödeldakse ühes käsus mitut sõltumatut andmeüksust ( SIMD-käsud ) üheaegselt . Lisaks SIMD-käskudele täidetakse multimeediumiüksutes maskimis- , selekteerimis- , ümberjärjestamis- , teisendamis- , küllastusaritmeetika- jt. operatsioone muutuva taktide arvuga eristruktuuriga ujupunkttöötlus- ja laade-salvestusüksused ( LSU ) . Infoedastusele kulutatavate taktide arv sõltub viimastes möödalaskudest andmevahemälu ( DCM ) poole pöördustel . Laade-salvestusüksused suudavad korraga hallata võrdlemisi suurt arvu mälupöördusi ( <arv>-<arv> ) . Laade-salvestusüksuses moodustatakse andmetest laade-salvestuse järjekord ( LSQ ) . Et mälupöörduse operatsioone võib lõpetada suvalises järjekorras , siis on post-RISC-protsessoreis mugav organiseerida mälukonveiereid . Korrektseks hargnemiste tagasikerimiseks või erandolukordade töötluseks sooritatakse andmete salvestamine andmevahemällu alles pärast salvestuskäsu püsitamist . Muidugi võib seetõttu salvestuskäsule järgnev laadekäsk osutuda blokeerituks . Et seda ei juhtuks , lubatakse laadekäskudel “ mööduda salvestuskäskudest ” . Laadekäsu töötlust alustatakse tingimusel , et möödutav salvestus ja mööduv laadekäsk kasutavad erinevaid mäluaadresse . Laadekäsk ei saa salvestuskäsust mööduda juhul , kui viimases pole välja arvutatud andmete salvestusaadress . Küll on lubatud laadekäsu spekulatiivne sooritamine eeldusel , et laadeaadress erineb kõigist salvestusaadressidest , millest laadekäsk peab mööduma . Kui seda nõuet pole täidetud , siis kuuluvad laadekäsuga mälust loetud andmed kõrvaldamisele hargnemisüksused . Hargnemisüksuse ( IBU ) oluliseks komponendiks on hargnemiste eelloo tabel ( BHT ) , milles säilitatavat informatsiooni vajatakse hargnemiste ohjel . Tabeli sissekannetes lisatakse iga sellesse kantud siirdekäsu tarvis <arv>-<arv> lisabitti . Lisabitte kasutatakse eeldatava hargnemissuuna määramisel , kui programmi töötlusel on jõutud siirdekäsuni , mis omab sissekannet BHT-s . Kui kasutada ainult ühte lisabitti , siis on võimalik valida vaid kahe võimaluse vahel - siire uuele käsujärgnevusele kas toimub või ei toimu . Märksa täpsemat informatsiooni hargnemisi põhjustavate käskude eelneva käitumise kohta ( nende eelloo kohta ) saab kirjeldada kahe lisabiti abil . Kahe bitiga on eristatavad neli võimalikku sündmust : hargnemine on tõenäoline - KT hargnemine on vähetõenäoline - VT hargnemise mittetoimumine on vähetõenäoline - VMT hargnemise mittetoimumine on tõenäoline - KMT . Joonisel <arv> on näidatud , kuidas prognoositakse hargnemise eeldatav suund kahebitisel kodeerimisel . Tähega Y on joonisel tähistatud vastava tingimuse täidetus jatähega N mittetäidetus . Veelgi paremaid tulemusi tagab hargnemissuuna korrelatiivse prognoosimise meetod . Kui kahe prognoosibiti korral tuginetakse ühele viimati aset leidnud hargnemistest , siis korrelatiivsel prognoosil arvestatakse seoseid erinevate hargnemissuundade vahel . Kui kahebitine prognoos lähtub vaadeldava hargnemissuuna eelloost , siis korrelatiivsel arvestatakse lisaks veel naaberharudes toimunud sündmusi . Valdav osa kasutatavaid prognoosimeetodeid sobib otseselt määratava hargnemissuuna kindlakstegemiseks , st. hargnemise sihtaadress sisaldub hargnemist põhjustavas käsus endas . Palju keerulisem on määrata kaudselt kirjeldatud hargnemise suunda , kus hargnemise sihtaadressi säilitatakse mingis teatavas registris . Õnneks esineb kaudseid hargnemisi programmides siiski harva . Hargnemisüksuse puhul ei tohi ära unustada tema talitluse tihedat seotust protsessori teiste üksustega . Käsukonveieri talitlusel teeb hargnemisüksus nendega tihedat koostööd , informeerides : a. käsuvõtuüksust vääralt prognoositud hargnemissuundadest , et viimane saaks korrigeerida käsuvoo kulgemist ( modifitseerides käsuvahemälus käsuplokkide BH- ja FH-väljade sisu ) b. dekodeerimisüksust ( vajab teavet hargnemiste kohta ja seda ka õigesti prognoositud hargnemiste korral ) c. käskude lähetamise üksust ( vajab teavet täitmisele mittekuuluvate käskude kohta ) d. erustamisüksust erustamisele mittekuuluvate käskude määramiseks ( pole võimalik täita nende erustamistingimusi ) e. mitmetaktilisi töötlusüksusi ( neis võivad sisalduda käsud , mida pole vaja lõpuni töödelda , sest nad paiknevad täitmisele mittekuuluvas programmiharus ) . Registrite ümbernimetamine Registrite ümbernimetamise eesmärgiks on dünaamiliselt kõrvaldada käskudevahelisi WAR- ja WAW-tüüpi andmesõltuvusi . Registrite ümbernimetamine on protsess , mille käigus dünaamiliselt vastendatakse protsessori füüsilisi registreid ( nimetatakse sageli ümbernimetamise registreiks ) arhitektuursetele ehk loogilistele registritele ( viimased määratakse käsus ) . Erinevalt protsessori üldotstarbelistest registritest ( kogumid FPRGF ja IRGF ) ei ole protsessori füüsilised registrid otseselt programmisti või kompilaatori poolt juhitavad . Füüsilised registrid võivad paikneda kas ootepuhvrites või kujutada täiesti eraldiseisvaid registreid . Registrite ümbernimetamisel eraldatakse käsus etteantud loogilisele operandi- või tulemiregistrile kindlad füüsilised registrid . Vastendamisel omistatakse käskudes esinevatele loogilistele registritele füüsilisi registreid vabade ( kasutuses mitteolevate ) füüsiliste registrite hulgast . Kui vaadeldavale käsule eelnevas käsus kasutati samanimelist loogilist registrit ( kas operandi või tulemi tarvis ) , siis antakse vaadeldava käsu loogilisele registrile kasutada mingi teine ( kasutatust erinev ) füüsiline register . Käsuvoos olevad käsud suhtlevad füüsiliste registritega nagu harilike registritega . Alljärgnevas näites on toodud üks ja sama programmifragment enne ja pärast registrite ümbernimetamist . Ümbernimetamise käigus kasutusele võetud füüsilisi registreid tähistab täht “ X ” , millele järgneb registri number . Pärast loogiliste ja füüsiliste registrite vastendust on hõlpsasti avastatavad ka käskudevahelised andmesõltuvused . Piisab kui võrrelda omavahel füüsiliste registrite numbreid , seejuures pole oluline , millises järjestuses käsud paiknevad . Loogiliste ja füüsiliste registrite vastendamiseks ei kasutata käsukonveiereis eraldi astet , see toimub käskude dekodeerimisastmes . Registrite ümbernimetamise mehhanismi rakendamine hõlbustab samuti käskude spekulatiivset töötlust . Kui hargnemiskäsus määratakse kindlaks tegelik hargnemise suund , siis kõik füüsilised registrid , mis eraldati mittetoimuvas hargnemissuunas olevate käskude tarvis , vabastatakse , st. antakse tagasi üldisesse kasutusse . Reeglina on post-RISC-protsessoreis füüsilisi registreid rohkem kui loogilisi . Näiteks mikroprotsessor R<arv> sisaldab <arv> loogilist registrit püsipunktarvude ja <arv> loogilist registrit ujupunktarvude säilitamiseks . Füüsilisi registreid on aga vastavalt <arv> ja <arv> , seega kaks korda rohkem . Registrid nimetatakse ümber kahe meetodi kohaselt : <arv> ) kasutatakse eraldi loogiliste ja füüsiliste registrite kogumeid . Füüsilistes registrites säilitatakse üksnes käskude töötlusel saadud vahetulemusi ( lõpetatud , kuid mitte erustatud käskude tulemeid ) . Loogilistes registrites seevastu säilitatakse ainult püsitatud käskude tulemeid . Pärast käsu püsitamist salvestatakse ( kopeeritakse ) tulem käsu poolt kasutatud füüsilisest registrist loogilisse registrisse <arv> ) on ainult üks registrikogum , loogiliste ja füüsiliste registrite vastendamine selles toimub dünaamiliselt . Füüsilistes registrites säilitatakse arvutuste vahetulemusi ja püsitatud tulemusi . Pärast käsu püsitamist loetakse füüsilises registris olev tulem muutumatuks ( püsivaks ) . Seega pole tarvidust tulemi kopeerimise järele , nagu eelnevas variandis . Taoliselt töötab registrite ümbernimetamise mehhanism mikroprotsessoris R<arv> . Tulemeid hoitakse ümbernimetamise registreis kuni käskude erustamiseni . Käskude erustamine Vaadeldava käsukonveiri viimaseks astmeks on käskude erustamise üksus ( IRU ) . Et käsukonveieris töödeldakse käske nii järjekorraväliselt kui ka spekulatiivselt , siis oluline ülesanne on erustamisüksus täita lõpetatud käskude puhvril ( CIBR ) . Selles hoitakse ka neid käske , mida on töödeldud spekulatiivselt . Puhvris säilitatavate käskude tulemid paiknevad ümbernimetamise registreis . Lõpetatud käskude puhvris olevad käsud , mis põhjustasid protsessoris erandolukorra tekke , varustatakse lisatunnusega ( lipuga ) . Käskude erustamisel arvestatakse nende tunnustega programmi algse käsujärgnevuse taastamisel ja käskude püsitamisel . Seega on erustamisüksuse põhifunktsiooniks käsuvoo esialgse kuju taastamine . Erustamisüksus eemaldab töödeldud käsud lõpetatud käskude puhvrist üksnes sellises järjestuses , nagu seda nägi ette lähteprogramm , st. algse käsujärjestuse kohaselt . Korraga erustatakse sama arv käske , nagu neid rööpselt töötlusesse suunati . Käsk loetakse lõpetatuks , kui funktsionaalne üksus on lõpetanud käsu töötlemise ning käsu poolt formeeritud tulem on muutunud käideldavaks , st. seda saab suunata kas otse järgmise käsu käsutusse või salvestada sobivasse mälulülitusse . Käsu lõpetamine võib toimuda nii programmis ettenähtud järjekorras kui ka sellest erinevalt ( järjekorraväliselt ) . Käsu püsitamine tähendab , et käsuga formeeritud tulem on fikseerunud ja käsk ise on erustatud . Erustamine seisneb käsu püsitatud käskude puhvrist kõrvaldamises kas koos käsutulemi püsitamisega või ilma selleta . Sageli toimub käsu erustamine ja püsitamine üheaegselt . Käsu tulem loetakse fikseerunuks ( püsivaks ) siis , kui see kopeeritakse füüsilisest registrist loogilisse registrisse ( kasutatakse eraldi füüsilisi ja loogilisi registreid ) või kui on toimunud füüsilise registri vastendus loogilisele registrile ( kasutatakse ühist füüsiliste ja loogiliste registrite kogumit ) . Füüsilise registri sisu kopeerimist loogilisse registrisse sooritatakse sageli käsukonveieri tulemite tagasisalvestamise astmes ( write-back stage ) pärast käsu püsitamist . Eraldi tagasisalvestamise astme lülitamisega käsukonveierisse saavutatakse seda , et füüsiline register vabastatakse antud käsuga seotud andmetest üks takt pärast käsu püsitamist . Erustamisüksuse talitlus on tihedalt seotud käsuvoo juhtimise üksuses asuva käskude ümberjärjestamise puhvriga ( IRBR ) . Puhvrit vajatakse selleks , et tagada käskude järjekorrapärast erustamist , taastada käskude algset järjestust programmis ja fikseerida nende töötlusolekuid . IRBR abil saab korrektselt ohjata infotöötlusel tekkivaid erandolukordi . Ümberjärjestamise puhvreis säilitatakse töötlusüksustesse lähetatud käskude programse järjestuse kirjeldust . Viimane on vajalik selleks , et käskude erustamisel saaks käskude poolt genereeritud tulemid taas õigesse järjekorda seada . Käskude ümberjärjestamise puhvris säilitatakse iga käsu olekubitte . Need näitavad , kas antud käsk asub spekulatiivselt täidetavate käskude jadas või normaalselt täidetavas käsujadas , kas toimub hargnemissuuna määramine või kuulub käsk hoopiski käsujadast kõrvaldamisele . Kui käsk lõpetatakse , siis seegi saab fikseeritud olekusõnas . Ümberjärjestamise puhvris kajastatakse samuti erandolukordi . Eriti tähtis on erandolukordade fikseerimine järjekorraväliselt täidetavate käskude puhul . Spekulatiivselt täidetavate käskude töötlemisel eeldatakse , et käsujadas neile eelnevad käsud ei põhjusta erandolukorra teket . Spekulatiivselt töödeldud käsud kuuluvad erustamisele vaid siis , kui eelnev tingimus oli täidetud . Käskude ümberjärjestamise puhver korraldatakse ringselt töötava FIFO-puhvrina . Informatsioon liigub puhvris edasi vaid siis , kui puhvrist püsitatakse mingi käsk . Puhvri ületäitumisel peatatakse käskude suunamine töötlusesse seniks , kuni puhvrisse pole tekkinud vaba ruumi . Käskude erustamisel analüüsitakse puhvri ülaosas paiknevaid käske , neist valitakse püsitatav käsk . Kui käsujadas asub käsk , mis kuulub vääralt prognoositud käsujadasse , siis kuulub selline käsk ümberjärjestamise puhvrist kõrvaldamisele , temale eraldatud füüsiline register antakse aga tagasi üldisesse kasutusse . Sama kehtib ka kõigi käskude kohta , mis järgnevad käsujadas käsule , mille töötlus peatati eriolukorra poolt . Ühtlasi antakse käsuvõtuüksusele korraldus alustada edasist käsuvõttu õigest programmiharust . Käskude ümbernimetamise puhvrite korraldus võib olla erinev . Nii näiteks säilitatakse mõnedel juhtudel neis ümbernimetamise puhvrite asemel lõpetatud käskude tulemeid . POST-RISC-ARHITEKTUURIGA PROTSESSOR JA ANDMEVOOPROTSESSOR Post-RISC-protsessorite arhitektuuri ja infotöötluse korralduse põhimõtete analüüsil torkab silma , et need sarnanevad paljuski andmevooprotsessoreis kasutatavatega . Andmevooprotsessorite erinevaid arhitektuurseid lahendusi on uuritud alates möödunud sajandi <arv>. aastatest . Praeguseks on välja töötatud nende mitmeid huvitavaid lahendusi . Kõige lähedasemateks moodsatele post-RISC-protsessoritele on RISC-andmevoo arhitektuuriga protsessorid , eriti aga Massachusettsi Tehnoloogiainstituudis loodud paralleelse RISC-arhitektuuriga ehk P-RISC-arhitektuuriga andmevooprotsessor . Käskude dünaamilise järjekorravälise töötluse põhimõtete poolest sarnanevad post-RISC-protsessorid kõige rohkem lokaalse andmevoo ehk mikroandmevoo arhitektuuriga andmevooprotsessoreile . Klassikalises andmevooprotsessoris koosneb töödeldav programm käskude kogumist , mida võidakse täita mis tahes järjestuses . Käsu täitmise vajalikuks eelduseks on selles kasutatavate andmete käideldavus . Seda nõuet tuntakse andmevooarhitektuuris ka käskude “ süütamise ” reeglina ( instruction firing rule ) . Korraga võib andmevooprotsessoris töödelda mitut käsku . Iga käsu töötlusel saadakse kas mingi tulem või määratakse uus täitmisele tulev käsk . Uus käsk lisatakse üldisesse käsujadasse , kust see siis tulevikus , kui tema süütamise tingimus on täidetud , suunatakse töötlusesse . Kui kõrvutada andmevoo- ja post-RISC-arhitektuure , siis neid ühendavateks joonteks on : mõlema arhitektuuri korral toimub käskude töötlus järjekorravälisuse põhimõttel , kusjuures : käsk kas ootab operande või on töötluseks valmis mis tahes käsku saab töödelda vaid siis , kui talle vajalikud operandid on käideldavad ja töötluseks vajalikud ressursid on vabad käskude töötluse korraldusele avaldavad mõju sisendandmetevahelised sõltuvused . Klassikalisel andmevooprotsessoril on post-RISC-protsessoritega võrreldes on kaks olulist puu- dust . Esiteks on neis suhteliselt keeruline tuvastada hetke , millal käskudele vajalikud operandid muutuvad käideldavaks . Et post-RISC-protsessoreis säilitatakse andmeid registreis , siis neis pole see probleemiks . Teine seondub andmevooprotsessoris keerukate andmestruktuuride töötluse korraldamisega . Post-RISC-arhitektuur erineb andmevoo-arhitektuurist kahe omaduse poolest : post-RISC-protsessorite käskude ümberjärjestamise puhvrite mahutavus on piiratud , seega saab protsessoris töödelda kindlat arvu aktiivseid käske . Seevastu andmevooprotsessoris pole aktiivsete käskude arv piiratud . Tänu aktiivsete käskude piiratusele on post-RISC-protsessoris kerge tuvastada , millal üks või teine käsk on töötluseks valmis post-RISC-protsessoreis ei kasutata keerukaid või dünaamilisi andmestruktuure , nagu maatriksid , kirjed ja ahelloendid . Tuleb tõdeda , et post-RISC-protsessorite arhitektuuris on tagasi pöördutud andmevooarhitektuuri põhimõtete juurde , kuid neis töödeldakse üheaegselt suhteliselt väikest arvu käske . Arhitektuurselt on post-RISC-protsessoreil enamik andmevooprotsessorite eeliseid , lisaks suudetakse neis aga vältida viimaste mõningaid puudusi . KOKKUVÕTTEKS Kaasaegsete superskalaarsete post-RISC-mikroprotsessorite arhitektuurne analüüs toob esile ne- li iseloomulikku tunnust , mis eristab neid klassikalistest CISC- , RISC- ja andmevooprotsessoreist . Käskude dünaamiline järjestamine ja nende järjekorraväline töötlusprintsiip post-RISC-protsessoreis sarnaneb üldjoontes andmevooprotsessorites kasutatavatega . Mõned andmevooarhitektuuris tekkivad kitsaskohad on post-RISC-arhitektuuris ( vähemalt osaliselt ) välditavad . Post-RISC-protsessorite kõrgete jõudlusnäitajate üheks olulisemaks allikaks on infotöötluse käigus toimuv käskude dünaamiline järjestamine ja nende järjekorraväline töötlemine . Post-RISC-arhitektuuris on oluliseks jõudlusnäitajaks ajaühikus rööpselt erustatavate käskude arv . Seevastu RISC-arhitektuuris võetakse jõudluse hindamisel aluseks rööpselt töötlusesse suunatavate käskude arv . Klassikaline RISC-protsessor töötleb käske vaid programmis ettenähtud järjekorras , seega on neis ajaühikus töötlusesse suunatavate ja sellest väljuvate käskude arv võrdne . Tänu käskude järjekorravälisele töötlemisele õnnestub post-RISC-arhitektuuriga mikroprotsessorsüsteemides leevendada RISC-süsteemides esinevaid jõudluskadusid , mis tekivad protsessor- ja mäluallsüsteemide talitluskiiruste suurest erinevusest . Käskude sobiv ümberjärjestamine ja puhverdatavad laade-salvestusoperatsioonid leevendavad mälulülituste suhteliselt pikki latentsusaegu ning sellest põhjustatud mulle käsukonveieris . Talitluskiiruste erinevusest tingitud vastuolusid ei suudeta neiski täielikult ületada . Vahest leitakse probleemidele lahendus , kui arenevad edasi PIM- ( PIM - Processor-in-Memory ) ehk IRAM-arhitektuuriga ( IRAM - Intelligent RAM ) süsteemid . Nii nagu varasematel aastatel ei selgunud kindlat võitjat CISC- ja RISC-arhitektuuride omavahelises konkurentsis , pole praegu seda võimalik määrata RISC- ja post-RISC-arhitektuuride vahel . Esialgu on post-RISC-arhitektuuriga protsessoreil veel piisavalt arenguruumi . Huvi ja nõudlus nende järele on kõrge , seda arvestavad juhtivad mikroprotsessorkiipide tootjad , pöörates oma tulevikukavades post-RISC-mikroprotsessorite arendamisele erilist tähelepanu .  Arvo Toomsalu , TTÜ arvutitehnika instituut MSP - mikrokontrolleri ja signaaliprotsessorihübriid Enamiku juhtimis- ja mõõtesüsteemide ohjel tuleb paralleelselt sooritada mitmete protsesside juhtimist reaalajas ja kiiresti töödelda suures mahus analoogkujul esitatud andmeid . Traditsiooniliselt kasutatakse selliste süsteemide arhitektuuris standardseid mikrokontrollereid ja signaaliprotsessoreid . Esimesed tegelevad süsteemis juhtimisülesannetega , teised aga infotöötlusega . Kuna tihti kasutatakse erinevate firmade mikrolülitusi , siis süsteemide loomisel tuleb lisaks põhiülesannete lahendamisele tegeleda veel kontrollerite ja signaaliprotsessorite riist- ning tarkvaralise ühildamise probleemiga . See muudab loodavate süsteemide struktuure keerukamaks , suurenevad ajalised ja materiaalsed kulutused projekteerimisele ja toodete valmistamisele . Teisalt peavad firmad , et olla turul konkurentsivõimelised , minimeerima uute toodete väljatöötamise ajakulu , kahjustamata nende kvaliteeti . Üheks võtteks , mis kiirendab keerukate juhtimis- ja mõõtesüsteemide projekteerimist ning evitamist , on loobumine klassikalistest lahendustest ja üleminek uutele , efektiivsematele integreeritud mikrolülitustele . Mikrolülitustele , mis omaksid piisavat funktsionaalset paindlikkust ja võimsust , et toime tulla ka komplitseeritud juhtimis- ja signaalitöötluse ülesannetega . Sellistes lülitustes ühendatakse mikrokontrollerite ja signaaliprotsessorite arhitektuurid ühtseks tervikuks , st. moodustatakse uus infotöötlusseadmete klass - mikrokontroller-signaaliprotsessorid . Tegemist ei ole mitte lihtsalt kahe arhitektuuri mehaanilise ühendamisega , vaid põhimõtteliselt uudse originaalse arhitektuuri loomisega . Veendumaks , et see ei ole lihtne ülesanne , piisab , kui võrrelda kaasaegsete mikrokontrollerite ja signaaliprotsessorite olulisemaid arhitektuurseid erinevusi . MIKROKONTROLLER VERSUS SIGNAALIPROTSESSOR Esimene <arv>-bitine mikrokontroller TMS<arv> valmistati ligi kolmkümmend aastat tagasi ( <arv> ) firmas Texas Instruments . Neli aastat hiljem ( <arv> ) laskis Intel turule esimese <arv>-bitise mikrokontrollerkiibi <arv> , mille baasil arendati hiljem välja täiuslikumad mikrokontrollerlülitused . Kulus veel kuus aastat ( <arv> ) , enne kui Texas Instruments sai valmis esimese signaaliprotsessori TMS<arv> . Nüüdseks on esimestest lihtsa arhitektuurilis-struktuurse lahendusega mikrokontrollereist ja signaaliprotsessoreist välja arenenud lai valik kõige erinevamate omadustega mikrolülituste peresid . Kui kõrvutada mikrokontrollerite ja signaaliprotsessorite mikroarhitektuure , siis torkavad silma võrdlemisi märgatavad erinevused . Mikrokontrollereid kasutatakse eeskätt juhtimisülesannetele orienteeritud rakendustes , kus leiab aset intensiivne andmevahetus mikrokontrolleri sisekeskkonna ja väliskeskkonna ( juhitava objekti ) vahel . Väliskeskkonnas toimuvad muutused edastatakse kontrollerile digitaalsete S/V-liinide , katkestussignaalide või analoogsisendliinide vahendusel . Mikrokontrollerite arhitektuurilised lahendused valitakse selliselt , et maksimaalselt hõlbustada andmesidet väliskeskkonnaga . Signaaliprotsessoreid kasutatakse traditsiooniliselt süsteemides , kus tuleb piiratud aja jooksul sooritada digiteeritud analoogsignaalide töötlust suure täpsusega . Signaaliprotsessorite arhitektuuris kajastub soov saavutada kõrge jõudlus - võimalikult suure hulga aritmeetiliste operatsioonide sooritamine minimaalse taktide arvuga . Signaaliprotsessorites eeldatakse , et nende töötlusüksused on pidevalt varustatud töödeldava informatsiooniga . Protsessorite andmeteede korraldus tagab suure infoläbilaskevõime . Viimastel aastatel on erilist tähelepanu pööratud sardsüsteemidele ja neile sobivate sardmikrokontrolleri- ja sardsignaaliprotsessoriperede arendamisele . Sardrakendustesse valitakse mikrokontrollerid , lähtudes kiipide maksumuse ja jõudluse suhtest . Üheks oluliseks valikukriteeriumiks on ka rakendusprogrammide maht , mis kuulub salvestamisele mikrokontrolleri programmimällu . Olenevalt mikrokontrolleri arhitektuursest lahendusest , võib ühe ja sama programmi tarvis kuluda kas rohkem või vähem mäluruumi . Signaaliprotsessoreid valiti sardsüsteemidesse varemalt põhiliselt jõudluse alusel , kiibisisesed S/V-ressursid etendasid valikul teisejärgulist osa . Vanemate signaaliprotsessorite võimalused katkestusnõudluste töötlemiseks ja talitluseks reaalajas olid minimaalsed . Praegu on olukord sardsüsteemides muutumas . Järjest suuremaks on kasvanud nõudlus kiipide järele , mis oleksid sündmusjuhitavad ja samas varustatud mitmekesiste võimalustega analoogsignaalide kiireks ja suuremahuliseks töötluseks . Nii lülitatakse uusimatesse sardmikrokontrolleritesse järjest sagedamini kiireid korrutusüksusi , keerukaid nihutuslülitusi ja teisi funktsionaalseid sõlmi , mis tõstavad kontrollerite arvutuslikku võimsust . Signaaliprotsessorite mikroarhitektuuri rikastatakse integreeritud S/V-üksustega , mahukate registrikogumitega ja arenenud katkestussüsteemidega . Pikkamisi hakkab kaduma terav piir valdkondade vahel , kus kasutatakse kas ainult mikrokontrollereid või ainult signaaliprotsessoreid . SIGNAALIPROTSESSORI ARHITEKTUURIST Erinevalt mikrokontrollereist tuntakse signaaliprotsessoreid , nende arhitektuurilis-struktuurseid iseärasusi ja kasutusvõimalusi enamasti ebapiisavalt . Nii nagu on kiiresti laienenud mikrokontrolleriperede liikmeskond , nii arenevad edasi ka signaaliprotsessorite omad . Hoolimata erinevate signaaliprotsessorite suurest hulgast võib nende arhitektuurides täheldada teatavate üldisemate põhimõtete järgimist . Neist olulisemad oleksid järgmised : Harvardi arhitektuurile tuginev mälustruktuur ( duaalsed andmemälud ehk XY-mälud , mitme rööpselt talitleva andmesiini rakendamine Infotöötluse konveieriseerimine , käskude töötlus ühe taktiga Rööpselt talitlevate funktsionaalsete üksuste ( mälud , ALS , MAC-üksus ) rakendamine . Spetsialiseeritud akumulaatorite rakendamine , kus saab säilitada andmesõnu , mille pikkus ületab protsessori põhiandmesõna pikkuse . Aritmeetika-loogikaüksust toetab sageli trummelnihuti Aadressigeneraatorite kasutamine . Aadressigeneraatorid sisaldavad mitmeid eriregistreid ( indeksi- , modifikaatori- jt. registrid ) . Aadresside formeerimisel kasutatakse spetsiifilisi adresseerimise viise ( ringpuhver , bitipööre ) . Iga mälu võib omada individuaalset aadressigeneraatorit S/V-süsteemis on levinud DMA-kanalid , mis on otseselt ühendatud jadaportidega Protsessorite käsustikud sisaldavad liitkäske , nende abil saab rööpselt juhtida mitme üksuse talitlust . Kasutatakse rakendusorienteeritud käske ( näiteks Viterbi dekodeerimine ) , võrdlemisi lai on aritmeetikaoperatsioonide valik ( MAC-tüüpi käsud jt. ) . Käsuformaadid on koodi kokkusurumiseks sageli andmeformaatidest lühemad . MIKROPROTSESSORI JA SIGNAALIPROTSESSORI ÜHENDAMINE Mikrokontrollerid tagavad hea jõudluse juhtimisülesannete töötlusel , ent kui on vaja sooritada ka signaalitöötlust , siis jääb neil jõudlusest vajaka . Signaaliprotsessorite korral on olukord vastupidine , neil tekib raskusi juhtimisülesannetega . Praegu on mikrolülituste tootjate huviorbiiti tõusnud uus lülituste klass - mikrokontroller-signaaliprotsessorid ehk MSP-d . MSP-des püütakse ühendada mikrokontrollerite ja signaaliprotsessorite parimaid funktsionaalseid omadusi . Nad peavad olema reaalaja süsteemide ohjamisel niisama paindlikud , kui seda on moodsad mikrokontrollerid , ja saavutama analooginformatsiooni töötlemisel jõudluse , mida pakuvad signaaliprotsessorid . Mikrokontrolleri ja signaaliprotsessori integreerimine ühte kiipi pakub kasutajaile mitmeid uusi võimalusi : lihtsustub mikrokontrollersüsteemide projekteerimine ühe kiibiga saab lahendada keerukaid ülesandeid väheneb süsteemide energiatarve ( see on eriti oluline tegur sardsüsteemide korral ) väheneb valmiksüsteemide maksumus . Süsteemsel tasemel võib mikrokontroller- ja signaaliprotsessorfunktsioone täita erinevate meetmete rakendamisel : Kasutatakse universaalset sardmikrokontrollerit , mis püüab ( osaliselt ) täita ka signaaliprotsessori ülesandeid . Kasutatakse universaalset signaaliprotsessorit , mis püüab ( osaliselt ) täita ka mikrokontrolleri ülesandeid . Kasutatakse mikrolülitust , mis sisaldab eraldi mikrokontrollerit ja signaaliprotsessorit , üks neist täidab põhiprotsessori funktsioone , teine on kaasprotsessoriks . Kasutatakse mikrolülitust , kus mikrokontroller- ja signaaliprotsessortuumade baasil on moodustatud ühtne struktuur - MSP . Variandid A ja B on kõige lihtsamad traditsioonilised lahendused , mis suudavad pakkuda süsteemis suhteliselt piiratud võimalusi . Praktikast on teada lahendusi , kus Inteli mikrokontrollerit <arv> on kasutatud lihtsaks signaalitöötluseks , samuti on Texas Instruments i signaaliprotsessor TMS<arv>C<arv>x toime tulnud mitte eriti keerukate juhtimisülesannetega . Ent nii esimese kui teise lahendusvariandi korral tekib süsteemides mitmeid täiendavaid komplikatsioone . Variandis A on aluseks võetud mikrokontroller , seega süsteemi ülesehitusel peab arvestama mikrokontrolleri arhitektuurilis-struktuursete iseärasustega . Tüüpilisel mikrokontrolleril on regulaarne käsustik , see võib olla orienteeritud kas akumulaator- või registerstruktuuri kasutamisele . Selleks et mikrokontroller saavutaks signaalitöötluseks nõutava jõudluse , on vajalik : korrutusoperatsioonide täitmise võimalus kas tarkvaraliselt või , mis veel parem , riistvaraliselt käskude töötlus regulaarsetes töötlustsüklites , s.t kõiki käske töödeldakse ühesuguse taktide arvuga kiirete DMA-kanalite olemasolu kiibi struktuuris , mis tagaks töötlusüksuse pideva varustatuse andmetega võimalikult kõrge takteerimissagedus . Vajaliku jõudluse saavutamine on lihtsam mikrokontrollereis , mille mikroarhitektuur tugineb mitte akumulaatori(te)le , vaid registritele . Aga kui isegi leidub sobiv mikrokontroller , mis rahuldab enamikku loetletud nõudeist , võib tekkida siiski raskusi näiteks MAC-tüüpi käskude töötluse korraldamisega . Sellest tulenevad omakorda piirangud analooginformatsiooni töötlemise kiirusele . Nagu näitab praktika , saab lihtsamaid signaalitöötluse ülesandeid lahendada isegi <arv>- ja <arv>-bitistel sardmikrokontrolleritel . Variandi B korral lähtutakse signaaliprotsessorist või selle tuumast , mille funktsionaalseid võimalusi püütakse laiendada . Ajal , kui alles hakati signaaliprotsessorite arhitektuuri välja töötama , ei peetud vajalikuks , et protsessorid peaksid lisaks intensiivsele andmetöötlusele suhtlema välismaailmaga reaalajas . Seepärast on klassikaliste signaaliprotsessorite S/V-allsüsteemid küllaltki nõrgalt arenenud . Edukaks suhtlemiseks välismaailmaga vajavad signaaliprotsessorid täiendavaid taimerlülitusi , universaalseid asünkroontransiivereid ja teisi S/V-lülitusi . Mikrokontrollerfunktsioonide täitmiseks tuleks valida selline signaaliprotsessorkiip ( või täiendada sobivat protsessortuuma ) , mis sisaldaks : piisavas koguses üldotstarbelisi registreid universaalseid taimerloendureid , valvetaimerit , asünkroonset S/V-liidestust , süsteemset teenindusliidest paindlikku bititöötluse käskudega , sh. vahetult S/V-portidel tehtavate bitioperatsioonidega varustatud käsustikku . Kolmandal juhul ( variant C ) on tegemist erimikrolülitusega , kus universaalset mikrokontrollerit toetab väike signaaliprotsessor . Ühele kiibile moodustatakse multiprotsessorsüsteem , milles on duaalne protsessortuum ( eraldi mikrokontrollertuum ja signaaliprotsessortuum ) . Tuumade omavaheline infovahetus toimub nagu tavaliselt põhi- ja kaasprotsessori vahel . Protsessortuumadena kasutatakse sageli juba toodetavate mikrokontrollerite ja signaaliprotsessorite protsessortuumi . See lühendab uute mikrolülituste projekteerimise ja tootmisse evitamise aega ning vähendab vastavaid kulutusi . Samas on paratamatu , et duaalse protsessortuumaga süsteemides esinevad jõudluskaod . Jõudluse langust tingivad nii ajakaod , mis tekivad protsessorite omavahelisel suhtlemisel , kui ka kaasprotsessoreis olevate käsukonveierite mullistumised . Raske on vältida ka mittevajalikke dubleerimisi tuumprotsessorite riistvaras . Kõige radikaalsemalt muudab mikrolülituse arhitektuuri neljas , D-lahendusvariant . Selles kasutatakse ühtset protsessortuuma , mis suudab töödelda ühises käsuvoos sisalduvaid mikrokontrollerile ja signaaliprotsessorile määratud käske . Pole ohtu , et riistvaras tekiks liigseid ressursside dubleerimisi ja liigseid ajakadusid andmete edastamisel erinevate töötlusüksuste vahel . Üksnes MSP-arhitektuur suudab tagada protsessorkiibile vajaliku jõudluse . MSP-lülitused sisaldavad rööpselt talitlevaid töötlusüksusi , mis suhtlevad kiibisiseste mälulülitustega suure infoläbilaskevõimega andmeteede vahendusel . Keskseks lülituseks MSP-s on protsessortuum , mille iseloomulikeks arhitektuurseteks tunnusteks on : registerpõhise mikrokontrollerimudeli rakendamine struktuursed lahendused , mis toetavad massiliste MAC-operatsioonide sooritamist arenenud ( mitmetasemeline ) katkestussüsteem kõrgkeeli toetav käsustik . Päris puudusteta pole aga seegi lahendus . Väga raske on valmistada protsessorkiipi , mis suudaks üheaegselt rahuldada niivõrd erinevaid nõudeid - lai kasutusvaldkond , sobiv hind , minimaalne energiatarve ja kõrge jõudlus . MÕNINGAID NÄITEID MSP-DEST Tüüpilist duaalset kiipsüsteemi esindab näiteks firmas Samsung Electronics väljatöötatud mikrolülitus , kus <arv>-bitist mikrokontrollertuuma toetab kaasprotsessorina signaaliprotsessor MACxy-perest . Signaaliprotsessori tähistuses olev tähepaar “ xy ” näitab , et protsessoris sooritatakse ühe taktiga x- ja y-bitiste püsipunktvormingus esitatud operandide korrutamine . Näiteks protsessoris MAC<arv> korrutatakse <arv>- ja <arv>-bitised operandid ( x = <arv> , y = <arv> ) . Kiipsüsteemidena valmistatavaid mikrokontrollerid nimetatakse CalmRISC , sest nende kontrollertuum on RISC-arhitektuuriga . CalmRISC-is sooritab mikrokontrollertuum käsuvõtte ja kui ta avastab käsuvoos kaasprotsessorile määratud käsu , siis teavitatakse sellest signaaliprotsessortuuma . Käsu edasine töötlemine siirdub kaasprotsessorisse . Andmevahetusi põhiprotsessori ( mikrokontrollertuuma ) ja kaasprotsessori ( signaaliprotsessortuuma ) vahel juhitakse eraldi käskudega . Kaasprotsessorina leiavad kasutamist mikrolülitused MAC<arv> ja MAC<arv>. <arv>-bitiseid integreeritud tuumaga MSP-sid esindavad näiteks firma Hitachi mikrolülitused , mis on loodud SH-DSP-arhitektuuri baasil . Kiibis SH-DSP-s kasutavad täisarvude töötlusüksus ja signaaliprotsessor ( signaalitöötlusüksus ) ühist <arv>-astmelist käsukonveierit . SH-DSP-s ei ole signaaliprotsessor enam iseseisev kaasprotsessor . Integreeritud protsessori käsuvõtu- ja dekodeeri- misüksus ohjab ühtset käsuvoogu mõlema töötlusüksuse tarvis . SH-DSP täisarvude töötlusüksus tugineb laiendatud SH-<arv> protsessortuumale . Kui täisarvude töötlemisel rakendatakse <arv>-bitiseid käske , siis on signaaliprotsessori käsud <arv>-bitised . SH-<arv> protsessortuum tugineb von Neumanni arhitektuurile , signaaliprotsessor aga modifitseeritud Harvardi arhitektuurile ( teineteisest füüsiliselt lahutatud käsu- ja andmemälud talitlevad ühtses aadressiruumis ) . Erinevalt SH-<arv> kiibist on SH-DSP-s <arv>-kilobaidine vahemälu asendatud eraldi adresseeritavate X- ja Y-mäludega . X-mälu aadresside arvutamine toimub täisarvude töötlusüksuses , Y-mälu aadresside töötlus on pandud täiendavale <arv>-bitisele aritmeetikaüksusele . Mikrolülitus sisaldab nelja sisesiini - universaalset <arv>-bitist siini käskude ja andmete edastuseks , eraldi siine X- ja Y-mälude tarvis ( edastavad <arv>-bitiseid andmeid ja <arv>-bitiseid aadresse ) ning <arv>-bitist perifeeriaandmesiini ( andmevahetuseks mälu aadressiruumis paiknevate registritega ) . Vaatamata sellele , et täisarvude töötlusüksuse ja signaaliprotsessori andmeteed on teineteisest eraldatud , ei saa neis kahte käsku rööpselt töödelda . Oluliselt erineb eelkirjeldatuist firma Infineon Technologies Corp . ( endine Siemens Semiconductor ) <arv>-bitine hübriidse mikroarhitektuuriga TriCore . Sarnaselt SH-DSP-le on ka TriCore-s vaid üks käsuvoog , kuid infotöötlus toimub superskalaarselt . Nii suudab <arv>-megahertsil töötav TriCore arendada ligikaudu samasugust jõudlust kui poole kõrgemal taktsagedusel talitlev SH-DSP . Informatsiooni superskalaarne töötlus tõstab märgatavalt protsessori jõudlust , kuid reaalajas töötavates rakendustes võib see tekitada täiendavaid probleeme . Kuidas TriCore protsessortuum sidestatakse programmi- ja käsumäludega ning välisseadmete siiniga , on näidatud joonisel <arv>. Protsessortuum suhtleb andmemäluga ( DM ) ja käsumäluga ( IM ) läbi välisseadmete siini ( FPI Bus ) . Siinis on ühised liinid <arv>-bitiste andmesõnade ja <arv>-bitiste aadressisõnade jaoks . TriCore-arhitektuuris toimub programmi- ja andmemälu ning välisseadmete adresseerimine ühtses neljagigabaidises aadressiruumis . Erinevalt klassikalistest signaaliprotsessoreist on TriCore-s vaid üks andmemälu ja üks andmesiin . See-eest on andmesiin lai - <arv> kahendjärku . Siini läbilaskevõime on sama suur kui neljal <arv>-bitisel tavalise signaaliprotsessori andmesiinil . TriCore protsessortuumas talitleb kaks neljaastmelist põhikonveierit ja üks lihtsam konveier programsete silmuste töötluse ohjeks . Kõik kolm konveierit töötavad paralleelselt . Korraga suunatakse töötlusesse kaks käsku , üks täisarvtöötluse ja üks laade-salvestuskäsk . Andmetöötluseks on protsessortuumas duaalne MAC-üksus ( MAC<arv> , MAC<arv> ) , aritmeetika-loogikaüksus ( ALUI ) ja bititöötluse üksus ( BMU ) . Korraga on võimalik täita kaht ( <arv>x<arv> ) -bitist MAC-operatsiooni , neid võib ühendada ka üheks <arv>-bitise tulemiga operatsiooniks . Sellisel juhul täidetakse operatsiooni järgmiselt : O<arv>( <arv> ) + O<arv>( <arv> ) x O<arv>( <arv> ) + O<arv>( <arv> ) x O<arv>( <arv> ) = T ( <arv> ) , kus O<arv>- O<arv>tähistavad operande ja T tulemit . Sulgudes on näidatud andmesõna pikkus bittides . Jaotatud struktuuriga ALUI toetab pakitud ühetaktilisi operatsioone . Rööpselt sooritatakse kas kaks tehet <arv>-bitiste andmesõnadega või neli tehet <arv>-bitiste andmesõnadega . ALUI-d täiendab bitioperatsioonide üksus . Lihtsustamaks kompilaatoril tarkvara ettevalmistamist töötluseks , on loobutud mitme akumulaatoriga struktuurist . Lähteandmete , vahe- ja lõpptulemuste hoidmiseks on protsessortuumas kuueteistkümnest <arv>-bitisest registrist koosnev registrikogum ( DRG ) . Protsessoris piirdutakse kolme adresseerimisviisiga , see lihtsustab märgatavalt aadresside generaatori ( AGU ) tööd . AGU talitlust ohjatakse erikäskudega . Aadresside arvutamine toimub spetsiaalses aritmeetika-loogikaüksuses ( AALU ) . Aadresside säilitamiseks on eraldi <arv>x<arv>-bitise struktuuriga registrikogum ( ARG ) . TriCore käsustik toetab kõrgkeeltes koostatud rakendusprogramme . Keerukad signaalitöötluse käsud on TriCore-s asendatud kahe rööpselt täidetava käsuga . Protsessor suudab ühe taktiga sooritada <arv>-bitiste operandide korrutamise ( sh ka liitkäske nagu “ korrutamine-liitmisega ” või “ korrutamine-lahutamisega ” ) . Aritmeetikakäsud opereerivad kas ühe <arv>-bitise , kahe <arv>-bitise või nelja <arv>-bitise andmesõnaga . Suhtluseks mäludega kasutatakse vaid kahte käsku - tüüpiline RISC-arhitektuuriga protsessorite tunnus - “ Load ” ja “ Store ” . TriCore arhitektuursed võimalused on äratanud huvi tarkvaratootjais . Kompanii CMX töötas spetsiaalselt TriCore-põhiste süsteemide tarvis välja reaalajaoperatsioonisüsteemi CMX-RTX . Selle kasutamise TriCore-le tuginevais süsteemikiipides muudab ahvatlevaks asjaolu , et operatsioonisüsteem vajab vähem kui <arv> baiti mälumahtu . TriCore-s on projekteerijail õnnestunud ühtseks hästitoimivaks tervikuks siduda signaaliprotsessori komplitseeritud struktuuri , RISC-mikroprotsessori optimeeritud mudelit ja mikrokontrolleri funktsionaalset paindlikkust . Esialgu on integreeritud tuumaga MSP-de hind veel võrdlemisi kõrge , see on ka üks põhjusi , miks kiipe kasutatakse sardsüsteemides seni vähe . MSP-kiipide arendamine ja tootmine on esialgu jõukohane vaid tugevamatele firmadele . Kuid nagu prognoosivad analüütikud , võib juba lähitulevikus tõusta nõudlus nende kiipide järele . Eeskätt oodatakse nõudluse kasvu sellistes valdkondades nagu erinevad sidesüsteemid , multimeediumiseadmed , digitaalkaamerad , kettaseadmed , turvasüsteemid , robootikaseadmed , laengsidestuspõhised skannerid ja mitmesugused sardjuhtimissüsteemid . gap desc='references'&gt; Kaido Kikkas , TTÜ informaatikainstituut Inimene võrgus - mõned mõtted võrgusuhtluse erijoontest ALUSTUSEKS Internet on oma algusest alates olnud suhtlusvahend . Ehkki pakettvõrgu esmane idee oli pärit militaarsfäärist , algas tänapäevaste jututubade ja foorumite eellugu juba professor Kleinhornist ja tema California ülikooli tudengitest , kes püüdsid <arv>. aastal võrku pidi Stanfordi arvutisse logida ( ja see “ G ” tähe sisestamisel kokku kukkus ) . E-posti leiutajateks olid ilmselt samuti mõned hüperkommunikatiivsed persoonid , kes ei hoolinud põrmugi tähtsateks teadusarvutusteks mõeldud võrgu plaanijärgsest otstarbest . Olgu kuidas sellega on , kuid tänaseks on Internetist saanud suhtlus- ja meediakanal . KOMMUNIKATSIOONIST Kommunikatsiooni defineerivad eri valdkondade teadlased erinevalt , kuid Interneti kontekstis võib ilmselt rahumeeli kasutada selle sõna kõige igapäevasemat tähendust - info või sõnumi edastamist . Inimestevaheline kommunikatsioon näeb kõige lihtsama skeemina välja nii : Kommunikatsioonikanaleid võime jaotada näiteks : kiiruse järgi - tavakõne ja telefon on kiired ja vahetud , kiri ja ajaleht seevastu aeglasemad suuna järgi - näost-näkku suhtlus on kahesuunaline , telesaade ühesuunaline osalussuhte järgi - telefonikõne on üks-ühele , raadiosaade aga üks-mitmele suhtega mahtuvuse järgi - telefonikõne edastab oma jadalise loomuse tõttu korraga vähem infot kui faksilehekülg filtreerivuse järgi - videokonverents edastab rohkem taustainfot ( žestid , näoilme ) kui telefonikõne , viimane omakorda rohkem kui faks või telegramm . Kommunikatsioonikanali eripära mõjutab suuresti ka sõnumiedastust . Heaks näiteks oleks lause “ Oled ikka totu ! ” ( vm ) , mis vastavalt kontekstile võib mõjuda sootuks erinevana . Sõpradevahelise nöökamise käigus ei ole tal olulist mõju , telefonis öelduna on efekt juba märksa suurem ning faksi või kirjaga saadetuna võib põhjustada eluaegse vihavaenu . INTERNETI KUI KOMMUNIKATSIOONIKANALI ERIPÄRAST Internet on avatud ja piiranguteta ühiskonna musternäidis , sealne sõnavabadus on alati olnud lausa äärmustesse kalduv . Totalitaarsed ühiskonnad nagu Nõukogude Liit , Kuuba ja Põhja-Korea pole mitte juhuslikult teinud kõike , et seda ohtlikku nähtust oma maalt eemal hoida . Kuid mitte ainult diktatuurimaad ei pea pelgama - isegi suur ja vägev USA jäi kahel korral hätta Interneti “ suud kasida ” üritanud Communication Decency Act'i läbisurumisega . Lisades siia juurde veel häkkerikultuuris kanda kinnitanud umbuskliku suhtumise mis tahes autoriteetidesse , saamegi pooldemokraatliku , poolanarhistliku koosluse , kus igaühel on õigus pea kõike välja öelda . Internet on lisanud inimõiguste hulka ühe uue õiguse - kaklemisõiguse . Sellist tulisust nagu omandavad paljud online-diskussioonid , ei kannatataks enamikus tavaelu vaidlustes välja . Kuid kõigel on piirid - kaklemisõigusele vastukaaluks eksisteerib ka õigus öelda “ Palun tehke seda kusagil mujal ! ” Ning ka sellele üldiselt kuuletutakse . Levinuim praktika on lubada lühiajalist konfliktsituatsiooni , kuid selle laienedes antakse selgelt mõista , et jätkamine ei ole teretulnud . Internet kui küllaltki spetsiifilise suhtlusmehhanismi ning tugeva filtrifunktsiooniga kommunikatsioonikanal tekitab sageli olukordi , mida üks osapool võib tõlgendada kui teise poole otsest rünnakut . Ehkki on ka selliseid juhtumeid ( neil kordadel loodab küberhuligaan võrgu teisele omadusele - anonüümsusele ) , tuleb suur osa võrgukonfliktidest kanda algse möödarääkimise arvele , mis hiljem eskaleerus tõeliseks vastasseisuks . Möödarääkimine omakorda aga tekib enamasti konteksti vähesusest või isegi suhtluspartneri näpuveast ( “ Loll ! J ” ja “ Loll ! L “ mõjuvad üsna erinevalt , tehniliselt eristab neid aga vaid üksainus tähemärk ) . Niisiis on Interneti omapäraks suurem vabadus ja vastutus . Nagu tavaelus , on need kaks ka võrgus üldiselt tasakaalus , kuid mõlemad on suurema ulatusega . Internetti võib mingis mõttes võrrelda Texase osariigiga USA-s - relvaseadus on leebe , kuid karistused karmid . Inimene ise peab hoiduma tegemast pöördumatute tagajärgedega asju . KUIDAS OLLA ? Internetis käitumise üldisi reegleid nimetatakse netiketiks ( network + etiquette ) . Need kirjutamata seadused kujunesid varsti pärast seda , kui e-posti hakati laiemalt pruukima - algselt hõlmasid need nõuded üksnes e-posti ja uudisegruppe , hiljem aga laienesid kogu võrgukommunikatsioonile . Virginia Shea on toonud oma raamatus “ Netiquette ” sõnastanud Interneti kümme käsku järgmiselt : Ole inimene ( Remember the human ) . Käitu sama malli järgi nagu igapäevaelus ( Adhere to the same standards of behavior online that you follow in real life ) . Tea , kus sa oled ( Know where you are in cyberspace ) . Austa teiste inimeste aega ja võrguühendust ( Respect other people's time and bandwidth ) . Näe võrgus hea välja ( Make yourself look good online ) . Jaga oma teadmisi ( Share expert knowledge ) . Aita piirata sõimusõdu ( Help to keep flame wars under control ) . Austa teiste inimeste privaatsust ( Respect other people's privacy ) . Ära kuritarvita oma võimu ( Don't abuse your power ) . Andesta teistele nende eksimused ( Be forgiving of other people's mistakes ) . Netiketi -alastest levinud soovitustest võiks veel mainida järgmisi : Kui saad mõne “ kurja kirja ” , tõuse püsti ja mine kohvikusse ( mida kaugemale , seda parem ) tassikest kohvi/teed jooma . Kui pead töötama koos mõne ebameeldiva inimesega , on e-post oma filtreeriva loomu tõttu selleks parim vahend . Üldiselt väide “ lolle küsimusi pole olemas ” küll kehtib , kuid siiski ei tasu küsida a ) ilmselgeid asju , b ) selgelt kirjapandud asju . Ära tee oma meilisignatuuri pikemaks kui <arv>-<arv> rida . Ära saada suvalise sisuga suuri faile ( videoklipid , naljapildid ) kogu aadressiraamatu inimestele . Ära saada kirjaga faile , kui võid info kopeerida kirja sisse . ÄRA SAADA MEILIGA MIDAGI , MIDA EI SOOVIKS NÄHA HOMSE PÄEVALEHE ESIKÜLJEL . IDENTITEET CONTRA ANONÜÜMSUS Sageli tekib just algajatel ja noortel netikodanikel kiusatus proovida võrgus suheldes ära ka lubatu ja lubamatu piir . Tüüpiline mõtteviis on : “ Teen natuke nalja - ega ta mind tegelikult kunagi ei näe ! ” Vastukaaluks aga võib tuua välja järgmised asjaolud : Esmalt on küberhuligaansus muidugi netiketi rikkumine , pätipoisse aga karistab võrguühiskond samuti kui võrguväline . Piisava huvi korral ei ole anonüümsus sageli vettpidav - iial ei saa kindel olla , et jälgedesegamisoskus kaalub üles tõeliselt motiveeritud ( harilikult tähendab see välja- vihastatud olemist ) otsija püüdlused . Võib minna vastuollu ka omaenese sihtidega - jututoas anonüümselt sigatsenud noormehel ei ole pikka aega erilist šanssi kellegagi lähemalt tutvust teha . Klassikaline häkkerikultuur ei soosi anonüümsust , sest see takistab inimesel saavutamast hoopis vastupidist sihti - üldist teadmistel ja isiksusel põhinevat respekti . Seega on anonüümsus seal Paha Asi ( Bad Thing ) . INTERNET JA “ TEISTMOODI INIMESED ” Inimene kaldub üldiselt eelistama harjumuspärast . Erinevus teeb ettevaatlikuks ja peletab eemale , olgu siis tegemist teise nahavärvi , kummalise kõnnaku või veidra jutuga . Tihtipeale ei antagi “ karvasele külalisele ” võimalust end rehabiliteerida - esmamulje määrab kontakti ( õigemini sellest hoidumise ) . Ning suurem osa esmamuljest laekub läbi nägemismeele . Internetis on asjad veidi teistmoodi . “ Filtrisse ” jääb kinni eelkõige just visuaalne komponent - välimus , miimika , žestid ja näoilme . Läbi kanali jõuab vaid inimese mõttemaailm . Esmakontakt on verbaalne , samas annab tavalisest näost-näkku suhtlusest mõnevõrra pikem reageerimisaeg ( mõnekümnest sekundist jututoas kuni minutite , tundide või päevadeni e-posti korral ) osapooltele aega mõtteid korrastada ja õigesse ritta seada . Tulemuseks on väga sageli kiirem kontakti areng kui otsesuhtluse puhul - on piisavalt aega mõtteid koguda ning end seeläbi heast küljest näidata , teisalt aga ei ole eriti lihtne pikemat aega kellegi teisena esineda ( selge , et viieminutilise kerge vestluse jooksul võib end esitleda kellena tahes , kuid pikemaajalise kübertutvuse käigus on see palju raskem ! ) . Internet on olnud algusest peale “ kiiksuga ” ja seetõttu tunduvalt sallivam igasuguste erinevuste suhtes . Kõikvõimalikud vähemus- ja ka äärmusgrupid on leidnud endale seal rahuliku eksisteerimiskoha , lisaks on võrk sobivaks võimaluseks end maailmale teadvustada . Need Interneti tunnusjooned teevad temast üliolulise abivahendi näiteks puuetega inimeste ühiskonda integreerimises - “ filtrisse ” jäävad kinni ka paljud eelarvamused . On siiski üks erinevus , mille suhtes on Internet ehk sallimatumgi kui reaalmaailm - selleks on aktiivne lollus ehk enda võhiklikkuse süüdimatu demonstreerimine . Seda laadi käitumise eest karistatakse võrgus üsna karmilt - eelkõige süüdlase äramärkimisega , “ lollimärgist ” vabanemine on aga väga raske . INTERNET JA LÄHISUHTED Eespool mainitud filtreeriv funktsioon ja verbaalse kommunikatsiooni ülekaal suhtluses teevad Internetist omalaadse kontaktivõimendi - inimestevahelised suhted kujunevad justkui kontsentreeritud vormis . Tee esmatutvusest lähedase sõpruseni või ka veel lähedasemate suheteni võib võrgusuhtluse puhul olla tunduvalt lühem kui tavaelus . Vastavalt aga on ka ohte rohkem ja negatiivne lõpptulemuski võib olla raskemini üleelatav - sageli jääb ka lõpplahendus “ õhku rippuma ” ja tulemuseks on pikk ning vaevaline vindumine . Küberkontakti teeb eriliseks just Internetis suhtlemise paradoks - näiliselt on inimesele antud piiramatu võimalus olla keegi teine , kuid tegelikkuses viib sihile üksnes iseendaks jäämine . Märksõnadeks on AUSUS , VIISAKUS ja SELGUS . Vastupidi sageli arvatule on võrgukontakt edukalt üle kantav reaalsesse ellu . Kuid edu eelduseks on eespool mainitud kolme märksõna järgimine - vastasel juhul on tulemus määratud läbikukkumisele . Võrgusuhtluse negatiivne pool on eelkõige seotud eespool anonüümsuse juures mainitud “ kuvaripeituse ” sündroomiga . Kui mõlemad osapooled on varjunud kuvarite taha , ei nähta enam oma sõnumi mõju teisele inimesele ja tulemuseks võivad kergesti olla sõnad ja mõtted , mida näost näkku iialgi välja ei öeldaks . Valus rünnak kutsub esile vastulöögi ja viimaks võib tulemuseks olla ka reaalellu üle kanduv tõsine konflikt . LÕPETUSEKS Internet kui suhtlusvahend on tänaseks saavutanud kindla positsiooni teiste kommunikatsioonikanalite hulgas , seda peamiselt tänu oma paindlikkusele ja mitmekülgsetele võimalustele . Võrku kasutatakse ärialasteks läbirääkimisteks ja sõpradega vestlemiseks . Tundes võrgusuhtluse iseärasusi ning tema tugevaid ja nõrku külgi , on võimalik vältida mitmeid karisid ja saavutada soovitud tulemus .  Tõlkinud Vello Hanson I.Hannula , R.Linturi / SADA NÄHTUST <arv> - <arv> / Virtuaal-Helsingi ja kübermutt <arv> Hobuse aasta Islami aasta <arv> Taliolümpia Graviton avastatud , universumi massi saab arvutada Virtuaalrahutused virtuaalvalvurite vastu andmevõrkudes Internetis on <arv> miljardit inimest Filosoof Pekka Himanen saab <arv>-aastaseks Valgustaimede nõudlus ületab pakkumise Hallitusesööbik ähvardab Kesk-Euroopa viinamägesid Ungaris hallitusesööbiku tõttu hädaolukord Hologrammid liiguvad lõpuks ometi Vaprad ja ilusad tervikuna hologrammil WHO uuring : mälutablett tugevdab mälu , kuid mitte mõistust Super-tehisihu tajub uusi võnkeid Iga vorm on niisama habras kui suitsupilv : ta ükskõik millise osa märkamatuimgi ja tühiseimgi muutmine muudab teda oluliselt . Vassili Kandinsky . Kunsti vaimsest sisust . <arv> Reklaam CompuMedias - <arv>.<arv>.<arv> HOLOGRAMMID LIIGUVAD LõPUKS OMETI Maailma esimesed liikuvad hologrammid on veel selle nädala nähtaval Helsingi teadus- keskuses Heureka . Liikuvat hologrammi peetakse üheks kümnendi suurimaks leiutiseks . Kümneid aastaid üritasid teadlased asjatult luua liikuvaid hologrammpilte . Üksvahe peeti seda ülesannet isegi võimatuks . Lõpuks sai Hiina professor Lee Cheng idee holopildi liikumapanemiseks oma maa rahvauskumustest , mille kohaselt eri värvid tähendavad eri omadusi ja värvide vaheldumine mõjutab Hiinas inimsaatusi . Professor Lee töötas Pekingi Tehnikainstituudi laboris välja arvutimudeli , millega lahutati hologrammi saamiseks vajalikud laserikiire mõlemad harud erikaameras värvusteks , värvused aga eripikkusteks lõikudeks . Neid tükeldades ja taas ühendades tekitatigi liikuv hologramm . Näitusel Heureka teaduskeskuses on välja pandud üheksa liikuvat holopilti . Kolm esimest neist kujutavad liikuvaid esemeid ja on mustvalged - või õigemini musthallid , sest algul ei suudetud luua liikuvat valget värvust . Kuus hilisemat hologrammi kujutavad samuti liikuvaid esemeid , aga ka liikuvaid inimesi , näiteks einetavat last . Professor Lee teatas pressikonverentsil , et liikuva hologrammi arendus edeneb nüüd kiiresti . Tema sõnul võib esimesi holofilme näha hiljemalt viie aasta pärast . Algul , tõsi küll , ainult erikinodes , sest võrgud ei suuda veel edastada vajalikke infokoguseid . Lisateavet : sat.web.FI-<arv>-<arv>-HE TV-Weekly - <arv>.<arv>.<arv> VAPRAD JA ILUSAD TERVIKUNA HOLOGRAMMIL Aastatetagune rekordpikk seebiooper “ Vaprad ja ilusad ” on tervenisti salvestatud nelja optilisse mälukuupi . Sarja kogukestus on umbes <arv> tundi ja teda esitati pidevalt kuni aastani <arv>. Esitamise aegadel väideti , et ta tekitab sõltuvust , sest sari tõmbas esitusmaades märkimisväärse osa elanikkonnast iga päev teleri ette . Sarja õigused kuuluvad kompaniile Microsoft Disney , kelle suhtekorraldaja Robin C. Winnie ütles , et salvestised holokuupides on tehtud eeskätt kollektsionääride jaoks . Sarja avaldamist on soovinud ka iseõppivate arvutite omanikud , sest nende arvates on selle kõnekeel väga selge ja siin käiakse põhjalikult läbi inimestevahelise suhtluse , ilmete ja vääritimõistmiste kogu kirevus . Sellisena sobib see hästi arvutite õppematerjaliks . Suhtekorraldaja Winnie teatas ka , et kuupide esimene partii on müüdud peamiselt eakatele . Paljud neist on omal ajal vaadanud telerist kogu sarja ning tahavad seda nüüd vaadata ühes tükis uuesti . Noorsugu ei ole sarjast eriti vaimustatud . Mõningat huvi on äratanud Sony multivisioonile mõeldud variant , kus saab algseid näitlejaid vahetada videotelefoni registrite abil näiteks naabrite või sugulastega . Noortele ei meeldi ka sarja vanaaegne ühesuunalisus . Nad soetavad meelsamini interaktiivseid simulatsioone , näiteks virtuaalseiklusi , või ruumilise taju elemente sisaldavaid multivisioonsalvestisi . Vanade filmidega võrreldes nõuavad need tunduvalt suuremat salvestusmahtu , seetõttu mahub uuemaid saateid ühte holokuupi ainult kolm tundi , sellal kui “ Vapraid ja ilusaid ” saab sellesse salvestada <arv> tunni pikkuses . Microsoft Disney on omandanud õigused ka paljudele muudele vanadele seriaalidele ja kavatseb osa neist järgmisel kevadel turule lasta . Tulemas on muu hulgas “ Star Trek ” kõigi oma jätkuosadega , “ Peyton Place ” ja lastele mõeldud “ Sesame Street ” . Sony töötab neist välja variante , kus vaataja võib asetuda sarja mingi tegelase asemele ja videotelefoniga juhituna vestelda selle sarja teiste tegelastega . SatWeb - <arv>.<arv>. <arv> WHO uuring : MäLUTABLETT TUGEVDAB MäLU , KUID MITTE MõISTUST WHO äsjaavaldatud laialdane uuring kinnitab ammutuntud tõde , et hea mälu pole sama mis arukus . Uuring sooritati seetõttu , et mitmete maade tarbijakaitse oli nõudnud mälutablettide turustuse keeldu . Tablettide reklaamis väideti , et nende tarvitamine lisab intelligentsust . Valmistajad eesotsas Semi Medi Co-ga nõuavad turustuskeelu tühistamist , viidates sellele , et mitmel maal on tõdetud laste õpitulemuste paranemist tablettide abil . Õpilased ja üliõpilased kokku kasutavad juba peaaegu <arv> miljonit mälutabletti päevas ja nõudlus kasvab kiiresti . WHO korraldas mälu- ja intelligentsiuuringu <arv> riigis . Katsetes osales üle <arv> eri vanuses ja erineval sotsiaalsel positsioonil inimese . Kõik katseisikud tegid läbi <arv> testi enne mälutableti sissevõtmist ja pärast seda . Testide hulgast uuris mälu kõige puhtamalt MC-Memory , arukust aga seostamise ja otsustamise test VarSapiens . Tulemustest ilmnes , et mälutablett tugevdas mälu keskmiselt umbes <arv>% , intelligentsitesti tulemus seevastu tõusis ainult <arv>,<arv>% . WHO nendib siiski oma kokkuvõttes , et mälutablettidel võib lisaks mälu tugevdamisele olla ka muid soodsaid toimeid , sest asjade mäletamise kasv võib suurendada huvi uute asjade õppimise vastu . Mälutablettide toimet tervisesse uuritakse siiski edasi , sest mõnel juhul on põhjust arvata , et liigne tablettide tarvitamine on esile kutsunud psühhoositaolisi seisundeid . Semi Medi Co ja teised mälutablettide valmistajad teatasid äsja , et nad on rahul WHO uuringu tulemustega ja tarbijakaitseametnike varasemate otsustega . SatWeb - <arv>.<arv>.<arv> SUPER-TEHISIHU TAJUB UUSI VõNKEID Super-tehisihu saabumine turule on loonud mitmeid uusi elukutseid Uutest elukutsetest on tähelepanuväärseim elektroonika- ja elektrituvastaja . Selleks otstarbeks väljatöötatud super-tehisnahk tajub ka väga väikest elektrivoolu , -takistust ja -laengut . Kogenud tuvastaja suudab teha kõike , mida teeb tester , ainult et pinge ülapiir on <arv> volti . Väga edukad tuvastajad tajuvad isegi <arv>-mikrovoldist pinget . Tuvastaja eelis mõõteriistadega võrreldes on kiirus . Mõõturi kasutamisel tuleb sageli otsida kohta mõõtejuhtmete jaoks , tuvastajal aga piisab kahe sõrme asetamisest õigesse kohta . Peale selle on tuvastaja kogu aeg “ sisse lülitatud ” , s.t tajub pidevalt . Paljud elektroonikaseadmete valmistajad on juba palganud ja välja õpetanud sadu tuvastajaid . Tuvastajate teeneid kasutavad ka mitmesugused elektrotehnikale ja elektroonikale spetsialiseerunud remonditöökojad . Mõningaid uusi kutsealasid on tekitanud ka super-tehisnaha jaoks väljatöötatud rõhutaju ja temperatuuritaju . Rõhutajunahaga inimesi töötab kohalike õhurõhuhälvete mõõtjaina näiteks lennuväljadel , kus nad võivad liikuda kogu territooriumil , muu hulgas otsides mikroturbulentside algeid . Temperatuuritaju aga rakendatakse näiteks ehitiste hallituskahjustuste otsimisel . Esimese rakukultuuris valmistatud tehisnaha töötas <arv>. a. välja Novartis Pharma Ltd. Tollal leiutatud nahk Apligrafia ja selle modifikatsioonid on olnud juba pikemat aega kasutusel muu hulgas raskete haavade ja põletustraumade ravis . Firma alustas super-tehisnaha väljatöötamist kuus aastat tagasi , kui oli selgunud , et tehisnaha omadusi saab modifitseerida loomadelt saadud geenidega . Viivi Jokk , TTÜ informaatikainstituut Dokumendimallide kasutamine MALL Mall ( Template ) on eri liiki dokument , mis määrab lehekülje parameetrid , laadide jms. kasutamise , kirjeldades dokumendi struktuuri ning dokumendil paiknevaid püsivaid ja muutuvaid objekte . Malli kasutamine hoiab kokku palju aega sama struktuuriga failide loomisel ja sama meeleolu ning mulje tekitamisel . Näiteks MS Word'i dokumendimall sisaldab dokumendi püsivaid osi ( nt. kirjablanketi mallil firma rekvisiidid ning logo ) , muutuvaid tekste ( väljad ) ja selliseid määranguid nagu leheküljemäärangud ( suurus , orientatsioon , veerised ) , fondid , laadid , makrod jms. Dokumendimall on kasulik säilitada niisuguste dokumentide jaoks , mida tuleb sageli luua või mida kasutavad erinevad tarbijad . Office <arv> malli objektid ( text , graafika , formaatimine jms. ) sõltuvad konkreetsest Office'i programmist nagu Word , Excel , PowerPoint või Access . Käesolevas artiklis vaadeldakse Word'i globaal- ja dokumendimallide kasutamist , dokumendimalli muutmist ja loomist ning olemasolevale dokumendile uue malli rakendamist . Peale selle vaadeldakse ka PowerPoint'i mallide rakendamist , muutmist ja loomist . MALLIDE KASUTAMINE MS Word'i mallid jaotatakse kahte põhiliiki : globaalmallid ja dokumendimallid - kasutaja poolt loodud või Word'is olemasolevad mallid . Globaalmallid sisaldavad määranguid , mis on kättesaadavad kõikidele loodavatele dokumentidele . Dokumendimallid , nagu näiteks kirjamall , sisaldavad määranguid , mis rakenduvad ainult sellel mallil baseeruvatele dokumentidele ( kirjadele ) . Kui ei valita mingit dokumendimalli , siis Word rakendab dokumendile vaikimisi globaalmalli ( Normal Template ) . Globaalmalli korral saab tüüpiliselt kasutada ainult neid määranguid , mis sisalduvad dokumendiga seotud mallis . Dokumenti alustatakse nagu enamasti uue dokumendi loomisel - tühjalt lehelt nupuga Võimalik on kasutada ka mõnes teises mallis sisalduvaid määranguid , kui see mall laadida globaalmallina . Mistahes malli saab laadida globaalmallina kas käesoleva tööperioodi jaoks ( kuni Word on avatud ) või üldse tööks Word'iga ( alati , kui Word starditakse ) . Kõigepealt valida menüüst käsk Tools ja Templates and Add-ins . Kui loetelus vajaliku malli nimi puududb , siis klõpsata nupul Add ja valida avanenud kaustast Template vajaliku malli nimi ja klõpsa OK . Sel juhul on kõik valitud malli määrangud ( nt. laadid ) kasutatavad konkreetse tööperioodi ajal. Pärast Word'i sulgemist ja uut avamist need määrangud puuduvad globaalmallis . Juhul kui soovitakse kasutada neid määranguid iga kord , kui Word starditakse , tuleks valitud mall kopeerida kausta Startup , mille asukoha saab määrata käsuga Tools , Options valikust File Locations . Ülalpool oleval joonisel on näha PDFMarker.dot , mis on kaustas Startup . Mallid paiknevad kindlas kaustas , mille asukoha saab leida käsuga Tools , Options ja valikuga File Locations : C : WINDOWSApplication DataMicrosoftTemplates . Dokumendimallidena saab kasutada tekstitöötlussüsteemis MS Word olemasolevaid dokumendimalle , neid muuta või luua malle päris ise . Word <arv> dokumendimallid on grupeeritud näiteks järgmistesse kaustadesse : General , Letters &amp; Faxis , Memos , Reports , Publications , Other Documents , Web Pages , Office <arv> Templates . Dokumendimallid salvestatakse Microsoft Windows <arv> või <arv> korral kausta Templates , mis vaikimisi paikneb kas C : WindowsApplication DataMicrosoft või C : WindowsProfilesUser_nameApplication DataMicrosoft . Malli fail , mis on salvestatud kausta Templates ( avaneb automaatselt , kui salvestamisel valida faili tüübiks Document Template ( . dot ) ) , on kasutamiseks valmis , kui valida käsk File , New . Muide , mis tahes dokument ( . doc ) , mis on salvestatud kausta Templates , toimib samuti mallina . Peale käsu File , New valikut avaneb aken , millest saab valida sobiva dokumendimalli , kasutamaks seda uue dokumendi loomiseks ( Document on märgitud vaikimisi ) või olemasoleva dokumendimalli muutmiseks ja selle põhjal oma dokumendimalli loomiseks ( märkida Template ) . Esimesel juhul avatakse Word'i aknas uus dokument ( . doc ) , teisel juhul dokumendimall ( . dot ) . Oma dokumendimallide organiseerimiseks võib luua uue kausta , et oleks mugavam leida vajalikku malli ja seda mitte otsida teiste hulgast ( nt. Linnavalitsus ) . Kui oma kausta ei ole loodud , siis salvestatakse mall vaikimisi kausta General . DOKUMENDIMALLI LOOMINE JA MUUTMINE Käsuga File , New avatakse dokumendimallide aken , millest valida mall ja märkida nupp Template . Sel juhul avatakse dokumendimall ( . dot ) , milles saab teha vajalikud muudatused ja salvestada see uue nimega . Nii saab luua olemasoleva dokumendimalli põhjal uue dokumendimalli . Olemasoleva dokumendimalli muutmiseks tuleks avada dokumendimall käsuga Open , teha vajalikud muudatused ja salvestada käsuga Save . Sel juhul peab täpselt teadma , millises kaustas dokumendimall paikneb ( Tools , Options , File Locations ) . Oma dokumendimalli loomiseks võib kasutada ka olemasolevat dokumenti , millelt selle konkreetse dokumendi muutuv tekst on kustutatud , kuid see sisaldab loodud laade , formaate jms. ja muutumatuid tekstielemente ( nt. kirjablanketil Meie ja Teie , firma rekvisiidid , logo ) . Dokumendimallil salvestatakse ka lehemäärangud : lehe suurus , orientatsioon ja veerised . Malli salvestamiseks anda käsk Save As ja tüübiks valida Document Template ( . dot ) . Selle tulemusena avatakse kaust Templates , kuhu dokumendimall salvestatakse . Kui tegemist on sellise dokumendiga , kus ka sisulised määrangud on üsna täpselt ette antud , nagu näiteks haldusdokumentide , vormide , arvete jms. korral , siis on dokumendi komponentide asukoha ja formaadi määramiseks kasulik kasutada välju ( Field ) . Välja saab sisestada dokumendiväljana kas käsuga Insert , Field , või koodidega või vormi väljana . UUE MALLI RAKENDAMINE OLEMASOLEVALE DOKUMENDILE Olemasolevale dokumendile on võimalik rakendada ka uut malli . Selleks valida menüüst käsk Tools ja Templates and Add-ins . Klõpsata nupule Attach ning järgmisena avanevast aknast valida dokumendimalli fail ning Open . Selleks et rakendatava malli laade rakendataks automaatselt , tuleks aknas Templates and Add-ins valida nupp Automatically update document styles . Word lisab siis rakendatud dokumendimalli laadid dokumenti . Uue dokumendimalli rakendamisel ei kandu üle selle malli lehemäärangud . Automaatselt uuendatakse dokumendis leiduvaid sama nimega laade . LAADIDE KOPEERIMINE ÜHEST MALLIST TEISE Peale eespool vaadeldud tööde mallidega saab ühest mallist teise kopeerida ka üksikuid laade . Selleks anda käsk Format , Style ja valida nupp Organizer . Avanenud aknas saab valida vasakult vajaliku laadi ja kopeerida selle paremalt valitud malli . Samas saab laade ka kustutada ja ümber nimetada . Veel kord tuntud põhimõtte rakendamine - kui arvutis on juba midagi olemas ( loodud ) , siis ei tule seda uuesti teha , vaid sobivalt uuesti kasutada . MALLID ESITUSGRAAFIKAS Järgnevalt vaadeldakse PowerPoint'i mallide rakendamist , muutmist ja oma disainimalli loomist . Juhul kui slaidikomplekt on loodud vastavalt slaidide loomise reeglitele ega ole kasutatud käsitsi formaatimist , siis ei ole mingiks probleemiks olemasoleva disainimalli rakendamine käsuga Format , Apply Design Template , valides kasutamiseks sobiva malli . Probleemiks võib siin olla hoopis “ sobiva ” malli ja värvilahenduse valik . Neid probleeme on vaadeldud artiklites [ <arv> ] ja [ <arv> ] . Valitud malli muutmiseks on mitu võimalust . Kõigepealt taustavärvi ja värviskeemi muutmine . Taustavärvi muutmise võimalust ( Format , Background ) oleks soovitatav kasutada ainult üksikutel slaididel ( nt. tabelite või graafikute taust ) , mitte aga kõigil slaididel , sest üksiku värvi muutmise tulemusena ei pruugi ülejäänud kasutatud värvid olla kooskõlas või mõni komponent võib selle tulemusel üldse visuaalselt kaduda . Parem variant kõigi slaidide korral oleks värviskeemi muutmine käsuga Format , Slide Color Scheme . Sel juhul saab valida kas standardskeemide hulgast ( vasakul ) või koostada ise värviskeem ( paremal ) . Omapoolsel värvide valikul on kohe näha tulemus ja samuti ka kõik võimalikult kasutatavad värvid . Nii ei teki ohtu , et mõni võimalik värv jääb vaatluse alt välja . Kui peale värvide tahetakse muuta ka laade ja paigutust , siis tuleks kasutada käsku View , Master ja seejärel muudetav objekt ( nt. slaidi jaoks Slide Master ) . Tulemuseks on vaade slaidile nagu parempoolsel pildil . Näha on kõigi võimalike slaidi tekstikomponentide fondid , paigutused ja tekstikastid . Näha on slaidi pealkirja tekstikast ja täpitud ( punktitud ) tekst oma hierarhiaga ning tekstikast punktitud teksti paigutamiseks , samuti kuupäeva , jaluse ja slaidi numbri tekstikastid , määramaks nende komponentide asukohta . Tekstiga seotud muudatuste tegemiseks klõpsata kursorit vajalikul tekstil ja anda käsk Format , mille alammenüüst ( vasakpoolsel pildil ) võib valida fondi muutmiseks Font , täppimise muutmiseks Bullets and Numbering , paigutuse muutmiseks Alignment jne. Võimalik on teha fontide asendus käsuga Format , Replace Fonts , mille tulemusega kuvatakse parempoolsel pildil olev aken . Selles saab valitud fondi ( Times New Roman ) asendada teisega ( nt. Arial ) slaidi kõikidel tekstikomponentidel korraga . Tekstikastidega saab toimida nagu tavaliselt - muuta suurust peale aktiveerimist tekkinud pidemetest ning viia neid hiirega lohistades teise kohta . Sama käsu ( ) valikul saab muuta ka slaidi taustal paiknevat vektorgraafikat , kasutades MS Office'i joonistamisvahendeid [ <arv> , lk. <arv>-<arv> ] . Rastergraafikat ei saa muuta , küll aga kustutada ja/või asendada uuega . Rastergraafika muutmiseks tuleks kasutada nt. Adobe PhotoPaint'i või CorelPhoto-Paint'i . Kui kõikidele slaididele tahetakse paigutada näiteks eelnevalt ettevalmistatud hajutatud fotot , siis tuleks seda tööd alustada loomulikult käsuga View , Master , Slide Master ja seejärel jätkata käsuga Insert , Picture . Tiitlislaidile näiteks logo paigutamiseks tuleks alustada analoogilise käsuga View , Master , Title Master ja lisada seejärel logo . Käsuga View , Master , ... tehtud muudatused mõjuvad kõigile slaididele , juhul kui üksikutel slaididel ei ole tehtud muudatusi käsitsi . Kui kõik vajalikud muudatused on tehtud ja kujundatud oma slaidiesituse laadid ja mall , siis tuleks see mall salvestada , nii et seda saaks kasutada ka teiste esituste korral . Selleks anda käsk File , Save As , valida faili tüübiks Design Template , kaustaks Presentation Designs , anda mallile nimi ja salvestada ( Save ) . Tulemuseks on esituse mall , mida on edaspidi võimalik rakendada käsuga Format , Apply Design , nagu eespool kirjeldatud . Disainimalli loomiseks peab slaidikomplektis olema vähemalt kaks slaidi - tiitlislaid ja üks esituse slaid , mis on skemaatiliselt järgneval pildil , nagu käsu Insert , New Slide korral tekib . KOKKUVÕTE Alati on kasulik oma tööd selle pilguga üle vaadata , et teha selgeks , milline on tööde esitus ja vastavalt sellele luua oma vajalikud laadid ja mallid . Võib-olla tundub see esialgu ajaraiskamise ja ülearuse tööna , aga kui hiljem ei tule iga dokumendi korral enam pead ja käsi vaevata formaatide valiku ja formaatimise ning muude määrangutega , siis on eelnevalt tehtud töö ennast kuhjaga ära tasunud . Peale selle on kujundatud kindel dokumentide disain ja kõigil ühte tüüpi dokumentidel on ühesugune väljanägemine ning kogu ettevõttel , olgu ta suur või väike , oma äratuntav stiil .  Kaarel Allik , TTÜ informaatikainstituut Java kui programmeerimiskursusi integreeriv vahend ? On fakt , et viimastel aastatel on toimunud ja lähiaastatel kindlasti jätkub Eesti kõrgkoolidesse infotehnoloogia ( IT ) erialadele vastuvõetavate üliõpilaste arvu märgatav kasv ( vt. nt. [ <arv> ] ) . Samuti ei vaja vist tõestamist , et programmeerimine on vastavate õppekavade lahutamatu ( ja ka õige mahukas ! ) osa . Kuidas õpetatakse TTÜ-s tulevasi “ proffe ” ( st. informaatikaeriala tudengeid ) ISE looma programme ? Selge see - programmeerimise algkursustes ei õpetata mitte programmeerimiskeeli kui selliseid , vaid eelkõige algoritmimist John von Neumanni ( JvN ) poolt defineeritud järjestikuse protsessi mõttes ( ehk sammhaaval protsessori poolt täidevate programmeerija poolt esitatavate käskude - tegelikult vist ikka “ palvete ” [ <arv> ] - jadana ) ja vastava algoritmi realiseerimist mõnes programmeerimiskeeles . Keeli , mida kasutatakse vahendina programmeerimise algkursuses algoritmi realiseerimiseks , on traditsiooniliselt kaks : Pascal ja/või C pluss ehk mingi nn. “ pseudokood ” , mis võimaldab tudengitele suhteliselt hõlpsasti selgeks teha programmeerimise “ tuuma ” ja struktuurprogrammeerimise põhimõtted . Järgmise õpetamisprotsessi sammuna tuleb süvendada algõpetuse saanute programmeerimistehnikat , andes tudengitele korraliku ülevaate programmeerimises kasutatavatest andmestruktuuridest ja nende realiseerimise meetoditest erinevates programmeerimiskeeltes . Siin aga ei saa enam hästi läbi ilma elementaarse objektorienteeritud programmeerimise ( OOP ) ideoloogiata . Tuleb ka mainida , et esimeseks programmeerimist sisaldavaks kursuseks TTÜ informaatikutele on praegusel ajal hoopis kahesemestriline “ informaatika ” üldkursus , kus eelkõige “ laiuti ” tutvustatakse õige mitmeid andmetöötluse vahendeid ja meetodeid ( täpsemalt vt. [ <arv> ] ) . Sellele üsna pikale venivale “ algõpetusele ” järgneb hulk aineid , kus otsesel kujul on sees mingi programmeerimine : Keel C ja objektorienteeritud programmeerimine ( OOP ) Internet-programmeerimine ( Java ) I - Java süntaks ja semantika , graafilise kasutajaliidese loomine , objektide kollektsioonid , eriolukordade käsitlemine , elementaarne failindus , lõimed ( threads ) , TCP/IP rakendused Visuaalne programmeerimine - eelkõige Visual Basic'u ( VB ) baasil Tabelarvutussüsteemid ( ja VBA ) Andmebaasisüsteemid ja SQL Internet-programmeerimine ( Java ) II - võrgurakenduste loomine Javas ( märksõnad : serialization , servlets , JSP , RMI , JDBC , EJB - vt. allpool ) Internetirakenduste arhitektuur ja realiseerimine ( sest Java pole ju ainumõeldav vahend selliste asjade tegemiseks ! ) . Muretsema paneb see , et vaatenurk programmeerimisele deviisi all “ Objektid eelkõige ! ” ( ehk OOP ) jääb natuke liiga pikaks ajaks TTÜ informaatikatudengite kui tulevaste proffide eest peaaegu varjatuks . Peaaegu selles mõttes , et kuigi Pascal ja C++ on OOP-keeled , on OOP-i “ mõnu ” täielikult tunnetatav alles Javas , kus teatavasti “ Everything is an Object ” . Samas aga infosüsteemide projekteerimise kursustes minnakse juba vähemalt teisel kursusel üle CASE-ideoloogiale läbi OO-lähenemise ja UML-i . Seega peaks “ klassikalisele ” programmide realiseerimise ( paluks mitte ära segada algoritmimise mõistega ! ) ideoloogiale “ Käsud eelkõige ! ” leiduma ka alternatiive . Nii see muidugi ka on - näiteks on IT Kolledži ( ITK ) [ <arv> ] ja TTÜ võrgutarkvara eriala [ <arv> ] esimeseks programmeerimiskeeleks hoopis Java ! Aga kas see viimane variant on ikka õige tee ? PROGRAMMEERIMISE ALGÕPE Sellest , mida me tahame tudengitele kõigepealt programmeerimisest raudselt selgeks teha , oli juttu juba selle loo alguses : algoritmi mõiste ja selle “ iseleiutamise ” mudelid ning leiutatud algoritmide realiseerimine JvN-i järjestikuse protsessina mõnes algoritmikeeles , soovitatav ( sest praktika on teatavasti ikka veel tõe kriteerium ) mõne(de)s programmeerimiskeel(te)s . Igal juhul õpetame me sõltumata valitud programmeerimiskeelest seda , mis asi on muutuja ( deklareerimine , tüüp , skoop , kasutamine avaldises , omistamisoperaator ! ) . Paralleelselt muutuja mõistega seletame lahti ka avaldise ja lausete jada ( JvN-i järjestikprotsess ! ) mõiste . Siis räägime valiku- ja korduslausetest , kus ei saa läbi ka ilma liitlause mõisteta ( NB ! muutuja skoop ! ) . Loomuliku jätkuna eelnimetatule järgnevad alamprogrammi ( NB ! formaalsed ja tegelikud parameetrid ! ) , mooduli ja alles seejärel objektitüübi ( klassi ) mõiste ning muud OOP-i “ vigurid ” . Selliste piisavalt keeruliste ( sic ! ) mõistete tudengitele selgeks tegemine pole sugugi lihtne ülesanne . Ja seda isegi nendele tudengitele , kes on enne ülikooli natuke algoritmimise aluseid “ nuusutanud ” . Seega programmeerimiskeele valik , mille abil tudengid realiseerivad algkursuse äsjaleiutatud algoritme , võib osutuda küllalt oluliseks . Seetõttu on õigustatud küsimus : millised programmeerimiskeeled üldse sobivad ESIMESEKS algkursuses kasutatavaks programmeerimiskeeleks ? Alljärgnevalt püüangi hinnata mõne hästituntud keele plusse ja miinuseid sellest vaatepunktist . <arv>. PASCAL JA/VÕI C Kõik vahendid eelpüstitatud eesmärkide saavutamiseks on nendes keeltes olemas . Keelte vaieldamatuks plussiks on ka see , et on olemas väga hästi läbi töötatud metoodika ( mis muuhulgas väldib viitmuutuja ja eriti keelele C omase aadressaritmeetika liiga varajast kasutuselevõttu ! ) ja õppematerjalid programmeerimise algõpetuse andmiseks nendes keeltes ( vt. nt. [ <arv> , <arv> ] ) . Kõhnavõitu on aga nende keelte sisend/väljund , mis “ elab ” endiselt DOS-i ajas ja ruumis . <arv>. VISUAL BASIC ( VB ) Toetudes isiklikele kogemustele julgen väita , et algajad saavad suhteliselt kiiresti aru VB sündmusorienteeritusest ja võtavad seetõttu peaaegu silmapilkselt omaks neile atraktiivse graafilise sisend/väljundi . See , et tegemist on OO-elementidega ( objektide omadused ja meetodid /ka sündmusprotseduurid/ , et ühe objekti komponendiks võib olla teist tüüpi objekt ) , ei eksita neid kursuse “ peasuunalt ” kuidagi . Pealegi , tutvumine seda tüüpi objektorienteeritusega loob suurepärase eelduse sujuvaks üleminekuks “ tõelisele/tõelistele ” OOP-keelele/-keeltele ( kus lisaks VB vahenditele on ka võimalus uute klasside tuletamiseks juba olemasolevatest klassidest ja polümorfismi “ isetekitamiseks ” ) . Võrreldes Pascali ja C-ga on VB-s programmeerides küll natuke varjatum JvN-i järjestikprotsessi olemus , aga sellest peaks kogenud õppejõud hõlpsasti üle saama . Keele VB esimese programmeerimiskeelena õpetamise plussiks on kahtlemata võimsa kõrvalvahendi VBA ( Visual Basic for Application ) olemasolu , mille kasutuselevõtt sobivates kursustes ( NB ! kogu MS Office ) on pärast VB tuuma omandamist õige lihtne ja loomulik . <arv>. JAVA Valides aga esimeseks tudengitele õpetatavaks programmeerimiskeeleks selle ehtsa OOP-keele , vajub neile kaela kõik korraga : algoritmimine , muutuja ja sellele väärtuse omistamine , keele süntaks ja semantika , objektitüübid , objektide loomine ja viitmuutujad , alamprogrammid ( meetodid ) ja veel mingi “ tuletamine ” ning “ pärimine ” ! OK , mõned Taibud saavad asjast niikuinii aru , aga ülejäänud ? Sellepärast julgen väita , et õpetada Javat kõige esimese programmeerimiskeelena on üpris küsitav lahendus . Alternatiivina jäi mainimata veel keel C++ , aga see on põhjendatav . Sest ühelt poolt on keel C keele C++ pärisalamhulk , ilma milleta C++ pole mõeldav . Teiselt poolt , kuigi C++ on vähe “ ägedam ” OOP-keel kui Pascal , pole keel C++ sugugi nii järjekindel OOP-keel , nagu seda on Java . Arvan , et keel C++ esimese programmeerimiskeelena on veelgi kahtlasem kui Java . Ja jumal hoidku meid keele Visual C++ eest esimese programmeerimiskeele rollis ! Mis muidugi ei tähenda , et tulevaste proffide õppeprotsessis tohiks ignoreerida sellist süsteemprogrammeerimise peaaegu et “ absoluutset ” valitsejat , nagu seda on C/C++ ( UNIX-i tuum ju ! ) , ja selle klooni - keelt MS Visual C++ . Pigem vastupidi , mina ja minu enam-vähem kõik kolleegid-programmeerimisõppejõud on veendunud , et kõik eelnimetatud keeled ( ja lisaks veel ka Delphi ) peaksid kuuluma TTÜ informaatikatudengite kohustuslikku “ repertuaari ” . Või kuidas ? AGA PÄRAST ALGÕPETUST ON JAVA JU LAUSA SUUREPÄRANE ! No mida veel ühelt programmeerimiskeelelt nõuda , et õpetada OOP-i , paralleelseid konkureerivaid protsesse ja “ võrgutamist ” ? Ja ilma et kuulajad peaksid süvenema mingi konkreetse ( mõne jaoks lausa “ totaka ” ) operatsioonisüsteemi nüanssidesse ? Javasse on ju “ sisse ehitatud ” toetus eelnimetatud ja veel paljudele muudele asjadele , mis võimaldab selles keeles suhteliselt lihtsalt luua niisuguseid rakendusi , millest “ muukeelne ” programmeerija võib vaid unistada ! Mida kaugemale mööda TTÜ informaatikute praegust õppekava seilata , seda kaunimaks Java võimalik roll õppekavas muutub . Sest sellest õppekavast on väga lihtne leida teemasid ja aineid , kus Java valdamine võiks või lausa peaks olema KOHUSTUSLIK : operatsioonisüsteemid : dünaamilise mälu haldamine ( sorry - kuid garbage collector on mu nooruspõlve kiindumus [ <arv> ] ) ; aga mis siinkohal eriti tähtis - “ sõltumatute ” protsesside ( lõimede ) loomine ja sünkroniseerimine näiteks Dijkstra semaforid või mingi muu mutex [ <arv> ] pole Javas ju mingi probleem graafilise kasutajaliidese ehitamine : frames ja Application Windowing Toolkit ( AWT ) , uuemal Java-ajal ka ( ja tegelikult ainult ) Swing näiteks VB ei seleta , kuidas satuvad kasutajaliidese graafilised komponendid ( juhtijad , controls ) vormile ja kust tekivad nende komponentidega seotud sündmusprotseduurid . Java kuularid ( listeners ) teevad selle mehhanismi aga üheselt selgeks ! protokollipere TCP/IP kasutamine : sockets , datagrams kursuse “ Java I ” järel ( <arv>+<arv> tundi , vt. eespool ) peab iga tudeng oskama Javas teha näiteks mingit primitiivset jututuba Webi lehekülgede interaktiivseks muutmine : applets elementaarne , Watson ! tarkvara korduvkasutuse tehnoloogia : JavaBeans siinjuures tuleks ka tähele panna , kui tähtis roll võib olla tegelikult poolformaalsetel standarditel tarkvara korduvkasutuses ( vt. nt. Swingi arhitektuuri ) hajusinfosüsteemi kliendi projekteerimine/realiseerimine : JDBC , RMI JDBC ( Java DataBase Connectivity ) on küll veidi kohmakas vahend AB-süsteemide realiseerimiseks , aga see SQL-süsteem töötab ! Ja JDBC on lahutamatult seotud RMI-ga ( Remote Method Invocation ) , mis pakub enneolematu võimaluse : käivitada “ kaugarvutis ” mingi tegevus ( meetod ) , mille parameetriks on Java-objekt , mis “ sõidab ” koos oma olekuga ( st. jättes meelde oma olekumuutujate hetkeväärtused ! ) “ serverisse ” ja tegutseb seal , nagu vahepeal poleks midagi juhtunud ! Märksõna : jadastamine ( serialization ) . Ning me ei tohiks unustada : kogu võrgutamine võib juba lähitulevikus baseeruda Jini tehnoloogial [ <arv> ] , mille kandetalaks on ju omakorda RMI ! hajusinfosüsteemi serveri ( ka WWW-serveri ) programmeerimine : servlets , JSP ( Java Server Page ) , HTTPServlets no kuidas muidu saaks Java konkureerida reaalsel hajussüsteemide turul ? mitmekihiliste hajusinfosüsteemide projekteerimine/realiseerimine : EJB EJB ( Enterprise Java Beans ) aga ongi just mõeldud mitmekihiliste kliendiserveri rakenduste loomiseks ( vt. nt. [ <arv> ] ) . Internetirakenduste arhitektuur ja realiseerimine vt. eespool Kindlasti ei ole see loetelu ammendav . Kuid see viitab minu arvates siiski sellele , et keelel Java peaks olema eriline roll tarkvarakesksete IT-erialade õppekavas . Salamisi loodangi , et siinesitatud lugu osutub uute õppekavade ( mis järjekordse kõrgkoolireformi käigus on ju paratamatud ! ) koostajatele üheks inspiratsiooniallikaks ja et uutes õppekavades leiab Java oma ÕIGE koha . gap desc='references'&gt; Meenutusi TI eriala ajaloost AVANG Äsja täitus <arv> aastat majandusliku infotöötluse eriala loomisest tehnikaülikoolis . Peod on peetud ja üht-teist meenutatud . Eesti andmetöötluse lühikeses ajaloos on <arv> aastat suhteliselt pikk ajavahemik . Et ma olen praegu ainus TTÜ informaatikainstituudi liige , kes asja juures algusest peale on olnud , siis tundus mulle endalegi huvitavana mõte neid meenutusi paberile panna . Õigupoolest ärgitas mind selleks ootamatult raskeks tööks dr. Rein Paluoja . Loomulikult saab ilma korraliku arhiivita kirjapandu olla vaid isiklikust vaatevinklist nähtu ja tunnetatu . Pärisajalugu jääb ilmselt ootama mõne hakkaja magistritööd . START Esimesed elektronarvutid saabusid Eestisse <arv>. aastal . Just siis õnnestus Tartu Ülikoolil hankida endale URAL-<arv> ( <arv> operatsiooni sekundis ) ja Küberneetika Instituudil ise ehitada Minski seeria arvuti ( <arv> operatsiooni sekundis ) . Tehnikaülikoolis võttis mingipärast ärgitamine veidi rohkem aega ja alles <arv>. a. majandusteaduskonna juurde loodud arvutustehnika kateeder vanameister Karl Alliku juhtimisel asus asja teoks tegema . <arv>. aastaks õnnestus tellida Minsk-<arv> arvuti , mis saabuski <arv>. aasta kevadel . Vahepeal palgati Tartust Leo Võhandu , Enno Saareste ja Peet Piirikivi arvutuskeskust käivitama . Kõik need mehed meelitati kohale riigipoolse korteripakkumisega . Mul uue kateedrijuhatajana ( millisele kohale mind rektor Agu Aarna poolvägisi pani ) läks õnneks oma elamine kohe septembri esimesel nädalal kätte saada , Saareste ja Piirikivi aga söötsid ühiselamus veel päris pikalt lutikaid . ( Need elukad näivad olevad vägagi intelligentsed . Voodijalgade veenõudesse panek ei aidanud . Lutikad kukutasid end laest otse voodisse . ) Peamine ja nähtavasti ka ainus põhjus , miks TPI-le arvuti eraldati , oli <arv>. aasta sügisel uue eriala nr. <arv> avamine . Selle nimetus oli nii pikk , et tasub vist siinkohal täielikult välja kirjutada : “ Majandusliku informatsiooni mehhaniseeritud töötlemise organiseerimine ” . Peainstituudiks oli Moskvas Majanduse ja Statistika Instituut , mille rektoriks oli just saanud noor kindralmajor šurakov ( parimad arvutid olid ju armeel ! ) . Kogu nõks oli selles , et ilma Statistikavalitsuse nõusolekuta ei saanud osta ühtegi arvutit . Meilegi anti luba ainult selleks , et rahuldada rajooni tabulaatorkeskuste ( elektromehaanilised summeerimismasinad ! ) kaadrivajadusi . Algusest peale sihtisime muidugi hoopis kõrgemate eesmärkide poole ja nii saigi TI ( majandusliku infotöötluse ) eriala heaks süsteemiprogrammeerijate taimelavaks . Alates esimese aasta viiekümnesest vastuvõtust , mis pärast kahandati kahekümne viiele , on sel erialal alati olnud tugev sisseastumiskonkurss ja ka õppetulemused pidevalt ülikooli parimad . Esimesel vastuvõtul jätkus veel ruumi poistelegi , aga siis surusid tüdrukud nad oma paremate koolihinnetega halastamatult välja . Ei olnud sugugi ime , kui mõnes rühmas ainult <arv>-<arv> poissi leidus . Tagantjärele võib tunnistada , et palusime matemaatikaeksamil poiste <arv>,<arv> ja <arv>,<arv> -lised hinded ikka ülespoole ümardada . Muidu oleks ju sama seis kui lavakunstikateedris , et vastuvõtul tuleks nõuda sugudevahelist võrdsust . Egas see tüdrukute elu ilma poisteta kah suurem asi oleks olnud . Tähtis oli ka see , et kateeder võttis üliõpilasi lihtsalt nooremate kolleegidena . Õppida ja töötada tuli ju kogu aeg koos . Meie õppejõudude pere tuli faktiliselt iseõppimise teel ümber kvalifitseerida , nii et nad saaksid tõelise infotöötlusega hakkama . Selleks sai algusest peale hoolega tehtud infosüsteemidealast lepingulist tööd . See printsiip , et õppejõud peab olema oma ala professionaal , on väga oluline ja hoiab õppetöö taset piisavalt kõrgel . Teiselt poolt on see muidugi ohtlik , sest heale spetsialistile on nii riigiasutused kui nüüdisajal eriti erasektor alati valmis ülikooliga võrreldes oluliselt paremat kohta ja palka pakkuma . Nii ongi aegade jooksul teaduskraadiga töötajatest parematele jahimaadele lahkunud isegi rohkem inimesi , kui kateedrisse paigale jäi . Muidugi ongi ju ülikooli üks põhiülesandeid iseenese taastootmine ja noorte pideva pealetuleku organiseerimine . ALGUSAASTATE RASKUSED Ega ta kerge olnud . Infotöötlejaid praeguses mõttes ju veel ei olnud . Tartust tulid siia matemaatikud , kes muude ainete hulgas olid ka ühe programmeerimiskursuse läbinud . Mis seal siis ikka , ühe semestriga loeti masinakäsud ette ja läks lahti - matemaatika tegemiseks . Meie õnneks olid tollaste arvutite ( või nagu siis ametlikult öeldi - kiiretoimeliste elektronarvutusmasinate ) sisemälud väga väikesed ning välismälu oli üpris ebakindla toimerežiimiga . See sundis meid juba algusest peale mõtlema andmete pakkimisele ja sellega koos dünaamilisele mälujaotusele . Tegime oma esimese andmetöötluspaketi Tartus juba <arv>-ndate aastate algul ( koos A. Laumetsaga ) . Nende ideede põhjal tegi Toomas Kala autori juhtimisel TPI esimese statistikapaketi . Õige tõsiselt asusime asja juurde <arv>-ndate lõpul , kui Eesti Raadio tellis endale tollases mõistes suurarvuti Razdan-<arv> . Meie kateedrilt telliti sotsioloogidele andmetöötlussüsteem . Selleks sai “ SODI ” ( Sistema Obrabotki Diskretnoi Informatsii ) . Niisuguse suure süsteemi tegemine on kaadri kasvatamiseks väga kasulik . Selle süsteemi tegemisega käivitus meil tugev translaatorite kirjutamise grupp ( A. Korjus , A. Vooglaid , T. Lume , L. Prisk , U. Jürgenson , M.Tombak , M. Lepp , M. Heinsoo , A. Renzer , D. Liib ) . Viimased on juba kraadigi kaitsnud TI-kad . Tugev translaatoritegijate grupp oli ka TA Küberneetika Instituudis , kust saime õppetööks vägagi kõlblikud MALGOL- ja VELGOL- translaatorid . Teise ja hiljem peasuunaks kujunenud infosüsteemide gruppi kuulusid T. Mikli , J. Tepandi , G. Veiner , P. Võhandu , M. Räbovõitra ja noored TI-kad R. Laev- Sarevet , J. Laast-Laas , T. Lutškovski , E. Õunapuu , T. Vapper , K. Regi , R. Kuusik . Tagantjärele peab tunnistama , et meil vedas mitmeti . Kõigepealt õnnestus mul ühelt turismireisilt hankida D. Knuthi nimistute tehnoloogiat käsitlev raamat ja panna käima ülelinnaline programmeerimisseminar . Selles osalesid linna tugevamad jõud ja uute ideede omandamine kulges edukalt . Teiseks oli meil toeks Ustus Agur , kelle kateeder pidi TI-katele lugema <arv> tundi elektroonikat ja arvutielemente ( ! ? ) . Minu palvel võttis Agur kätte ja kujundas tüüpilise insenerkäsitluse asemel täiesti mõistliku kursuse ning kirjutas riistvarast kõigile arusaadava raamatu . See raamat oli ühtlasi kogu korrektse eestikeelse terminoloogia loomise alustalaks . Oskuskeele printsiibid olid ju meie alal alles paika panemata . Nii võis eriti inseneride jutus kuulda ridamisi väljendeid EVM , ATSPU jne. , jne. Mäletan selgelt , milline homeeriline naer puhkes seminaris , kui ma lugesin ette enda koostatud paarikümnesõnalise eestikeelse tekstijupi Aguri uudse sõnavaraga . Ega midagi , nüüd oleme kõik selle terminoloogiaga harjunud ja ka keelemehed on meiega üldiselt rahul . ( Erandi võite leida eelmisest A &amp; A numbrist . ) Teine suur vedamine oli selles , et me võisime kaunis vabalt endi õppeainetega ümber käia . Moskva peainstituudi kindralist rektor toetas me uuenduspüüdlusi tublisti ja nii kuulusime me NLiidu paarisaja TI-alase õppekoha hulgas nn. suurde nelikusse . Meil neljal oli luba ja kohustus vanade ainenimede all aineid sisuliselt varjatult uuendada , järele proovida ja siis ametlikud õppekava muudatusesitused teha . Nii tuli sisse struktuurprogrammeerimine Jacksoni stiilis ( L. Võhandu ja T. Mikli ) , tugevalt struktureeritud keeled ( R. Jürgenson ) , andmebaasid ( T. Mikli ) , tehnoloogiate programmeerimine ( A. Vooglaid , M. Lepp ) . Laisa programmeerimise ideoloogia andis aluse suhteliselt kõrgele tööviljakusele . ( Enne mõtle ja alles siis programmmeeri , ning nii vähe kui võimalik ! ) . Suurema jao andmetöötlusülesandeid lahendasime osavalt generaatorsüsteemidega , kus arvuti genereeris probleemi lahenduse kirjelduse põhjal ise vajaliku korrektse lahendusprogrammi . Paljudki ideed olid omast ajast ees . Näiteks loogiliste tingimustega määratud aruanded tulid alles hiljuti EXCEL-isse kui vägev uudis . Meil jooksid nad juba üle <arv> aasta tagasi . Siia ka huvitav vaheseik . Ühel järjekordsel lepingulise töö üleandmisel suvises Armeenias ( +<arv> C ! ) olid Moskva mehed koostanud meile suure testprobleemi ja kirjutanud selle jaoks optimeeritud masinkoodiprogrammi . Tehnilistes tingimustes oli öeldud , et sõltuvalt sellest , kui palju meie generaatorsüsteem aeglasemalt töötab , otsustatakse , kas töö üldse vastu võtta või mitte . Meie Fortranis tehtud generaatorprogramm “ SHODI ” töötas aga ligemale viis korda kiiremini kui testprogramm . Seda ei tahetud uskuda ja algul keelduti testi tulemusi vastuvõtuakti panemastki . Lõpuks saime ikka asja korda . Tollase elu-olu kohta veel üks näide . Ühel heal päeval taheti Statistika Keskvalitsusest saada kiiresti ankeeditöötlust . Kutsusime TPI-sse . Vastati , et ei saa , sest endal on arvuti olemas . Ütlesime , et ostke me programm ära ja lahendage . Vastati , et ei saa , sest endal on projekteerimisinstituut olemas . Mida teha ? Läksime T. Lutškovskiga oma magnetlindiga SKV-sse , lahendasime ülesande ja kustutasime lõpuks programmi nende arvuti mälust . Lahendus saadeti tähtajaks ilusasti Moskvasse . Aga oh häda , sealt tuli vastus , et kuidas te nii vara valmis saite . Nemad Moskvas tegevat alles ankeedis vastamata küsimuste ( nn. aukude ) täitmise eeskirja ! ? Tuligi siis sundvastuste vihik kohale . Teodor pani tollase kolmanda kursuse tudengi , praeguse auväärse Eesti suursaadiku USA-s Sven Jürgensoni meie uute tunnuste loomise mehhanismiga Moskva soove täitma . Teisel päeval läksime ja lahendasime vajalikud ülesanded Moskva meeste suureks ehmatuseks uuesti . Paraku meilt süsteemi siiski ei ostetud , eeskirjad ei lubanud . Minul aga kadus pärast sellist sunniviisilist aukude lappimist igasugune usk tollaste statistiliste aruannete suhtes . Vahekord SKV-ga muutus normaalseks alles pärast seda , kui direktoritoolile asus TI-kas Rein Veetõusme . MONOTOONSED SÜSTEEMID JA STRUKTUURIUURINGUD Andmetöötlusega tegelemine näitas , et mida rohkem on objektidel kirjeldustunnuseid , seda vähem osatakse nende andmetega midagi mõistlikku peale hakata . Meenub , kuidas kord Riiklik Plaanikomitee nõudis oodatavat personaalarvutite arvu hinnangut Eesti jaoks . Inimeste arv oli teada , asutuste arv oli ülisalajane . Ega midagi , lasin siis telefoniraamatut pisikesel pojapojal kümnest kohast juhuslikult avada , lugesin asutused kokku ja tegin lihtsa prognoosi . Kõrge riigiametnik küsis ehmatusega , kust ma selle asutuste arvu sain , ja lisas , et seda ei tohi üldse avaldada . Pealegi olin ma tema arvates arvutite oodatavat arvu umbes <arv>-kordselt üle hinnanud . Jah , hinnang oli vale , aga õnneks oli see liiga väike . Eespool ma juba nimetasin kahte suuremat töösuunda . Kolmandaks ja võib-olla kõige teoreetilisemaks suunaks said nn. monotoonsed süsteemid . Proovisime analoogiliselt generaatorsüsteemidega luua andmeanalüüsiks niisugust käsitlusviisi , mis kõlbaks igasuguste andmete puhul . ( Iseendast kaunis hull idee . ) Tartust oli mul juba kogemusi konsulteerimise alal . Meil tuli tegemist teha kõikvõimalike probleemidega sünnitusabist kuni kosmoseni . Keegi aga ei saa ju olla tõsitasemel kodus kõigi nende teemadega . Järelikult tuli leida korralik ja üldine lähenemisviis teemadele , millest sul aimugi ei ole , aga päris loll ei taha kah välja näha . Omal ajal sai Tartus välja mõeldud üks päris kaval variatsiooniprintsiip paljuparameetriliste süsteemide näitajate koosuurimiseks , nn. maksimaalse korrelatsiooni meetod . ( Oli päris südantkosutav näha , et seda <arv> ilmunud lugu veel praegugi Citation Index'is tsiteeritakse . ) Üldise lähenemisviisi idee on lihtne . Igale andmetabeli objektile saab luua mõõdu , nii et ühe objekti kõrvaldamisel teiste objektide mõõdud kahanevad või jäävad samaks . See nn. nõrk monotoonsus võimaldab suvalisest süsteemist objektide järjestikust elimineerimist ja korra loomist , kui seda seal on . Omaaegne aspirant Jossif Mullat tõestas hea matemaatikuna selle meetodi matemaatiliste omaduste kohta ilusa põhiteoreemi , mida me siiani halastamatult ja vägagi efektiivselt ekspluateerime . Selgub , et metoodikat saab rakendada praktiliselt suvalistes diskreetse optimeerimise ülesannetes ja intellektitehnikas . Eriti kasulik on see tehnika suurte andmekogumite tükeldamisel ja andmetest etteantud statistilise stabiilsusega tõeste lausete genereerimisel . Viimastel aastatel on juurde tulnud intellektitehnika ja agendid , ekspertsüsteemid , tarkvara auditeerimine , e-kaubandus jne. , jne. Rahvusvahelise akrediteerimiskomisjoni äsjane hinnang instituudi teadustööle oli piisavalt hea . Kaitstud magistritööde osas oleme ülikooli esimeste hulgas , uusi doktoritöid on kaitstud neli . Vanu kandidaaditöid oli kah üle kümne . Hakatuseks käib küll . Lõpuks oleme saatnud Tartu Ülikoolile appi prof. Mati Tombaku , Tiigrihüppe aktiivseima daami Anne Villemsi , majandusinformaatiku Ain Isotamme ja täppisteaduste doktori kraadi kaitses paar aastat tagasi meie doktorant Ahto Buldas , kes pidas ka TÜ-s matemaatikutele loenguid ning kellest tänavu saab meie instituudi noorim professor infoturbe õppetooli juhatajana . TI TUDENGID LÄBI AEGADE Nagu öeldud , olid tudengid tragid ja asjalikud . Iseseisva töö harjumused said üsna varakult kätte koolitatud ja oma peaga tehtud uute lahenduste juurde jõudmist sai igati toetatud . Meie tudengite hulgast on tulnud diplomaate ( S. Jürgenson ) ja teadustajaid ( S. Eesmaa ) , valitsemishoovad infotöötluses on TI-kate käes - R. Veetõusme , R. Kasemaa , M. Kajandu , L. Viik , Ü. Laur , A. Urvak , L. Orro . Suur hulk aktiivseid inimesi töötab panganduses , finantsalal , ärinduses ja erialases täienduskoolituses . Järjepidevuse garanteerimiseks on meil muidugi parasjagu doktorante - K. Rava , P. Krusberg , M. Roost , G. Lind , T. Veskioja , A. Laidre . Ma parem ei püüagi peast hakata mingit isikulist nimekirja koostama , see oleks nagunii vigane , sest nii mõnigi asjalik konkreetne tegija jääks kindlasti välja . Peamine , mis juba sellest lühikesest loetelust silma torkab , on see , et tänu infotöötluslikule haridusele , millele lisandus parasjagu majandusliku mõtlemise pressi , on meil suhteliselt palju inimesi strateegiliselt tähtsatel kohtadel . Loodame siis , et nad mõjutavad positiivselt meie kõigi infoühiskonna poole liikumist . Et nad aktiivsed on , see on selge . Toome kas või paar näidet spordi vallast . Oli aeg , mil Eesti Spordi Keskliidu erialaföderatsioonide presidentideks olid korraga T. Lume , K. Vaikjärv , P. Pungar ja L. Võhandu . Ei ole just paha ca <arv> föderatsiooni kohta . Bridžimängijaid on TI-kate hulgas õige kõrge protsent . Paar päeva tagasi nägin televiisorist , et informaatik Jaan Jääts on uue spordiala - tulistel sütel kõndimise eestvedajaks . Eks ta mõttekorrastuseks üks hea ala ole . ÕHTUSEST OSAKONNAST Eraldi peab rääkima meie tollal eksisteerinud õhtusest osakonnast . Selles õppisid peamiselt mitmetes arvutuskeskustes praktilist tööd tegevad programmeerijad ja arvutioperaatorid . Peab tunnistama , et nende õppijate meie õppejõudude omast erinev praktiline kogemus tuli meilegi kasuks ja meie üldisemad vaated nendele hüvanguks . Hiljem , kui arvutuskeskuste inimesed kadusid , langes ka õhtuse õppetöö tase ja meil tuli see osakond isegi sulgeda . Nüüd , mil paljud noored meelitatakse juba teisel ja kolmandal kursusel firmadesse tööle suhteliselt kõrge palgaga , jääb nende haridustee kahjuks pooleli just enne seda , kui nad hakkaksid üldisemaid lahendusi võimaldavaid meetodeid õppima . Nähtavasti tuleb päris tõsiselt mõtelda Avatud Ülikooli raames TI eriala avamisele . See annaks noortele arenguvõimaluseega laseks neid ei füüsiliselt ega vaimselt tühjaks pumbata . EPILOOGI ASEMEL Eesti aja tulekul hakati seoses ülikoolireformiga TI eriala tasapisi välja suretama . Nüüd võime rõõmuga teatada , et alates <arv>. aasta vastuvõtust on avatud äriinfotehnoloogia eriala . Seda eeskätt meie infotehnika teaduskonna dekaani , tulihingelise TI-ka professor Rein Jürgensoni ja informaatikainstituudi direktori TI-ka prof. Rein Kuusiku eestvedamisel . Vastuvõtt pole küll suur , riiklik tellimus on ainult <arv> õppekohale , kuid suhteliselt odava raha eest saab ka ise tulla vabalt õppima . Siin on jälle korralik majandusaluste ja infotehnoloogia segaõpe , mis annab head eeldused äriilmas kõrgele jõuda . Leo Võhandu emeriitprofessor <hyperlink> külastaks . “ Monotone System ” termin , mida ma kasutusele võtsin alates <arv> aastast “ Automatika ja Telemekhanika ” ajakirjas <hyperlink> peale minu “ seminal ” artikli avaldamist TTÜ toimetistest , Seria A , <arv> aastal oli tegelikult kasutusel teaduslikudes rinkondades seoses “ Reliability Theory ” problemeedega . Monotoonse Süsteemi põhiline omadus on nimelt L.Vöhandu citaat “ Igale andmetabeli objektile saab luua mõõdu , nii et ühe objekti kõrvaldamisel teiste objektide mõõdud kahanevad või jäävad samaks . See nn. nõrk monotoonsus võimaldab suvalisest süsteemist objektide järjestikust elimineerimist ja korra loomist , kui seda seal on ” . Tegelikult on just see omadus “ refrased ” minu artiklis TTÜ Toimetistes <arv> aastal . Monotoonsed funktionid ja citaadis toodud omadused on üldtuntud . Ajnult minu teoreemi alusel toodud omadus eraldab ennast kõikidest muudest monotoonsetest süsteemidest omapärase matemaatilise objektina : “ Monotone System ” on abstraktne mudel , mille järgi tegelikust tuleb justeerida - ega siis monotoonsed süsteemid Mullat'i mõttes olid mailma tekkinud enne <arv> aastat ? Veel üks väjke sõnum . Lugejal oleks vaja lugeda lehküljelt <hyperlink> tsitaati algus : “ What Is a Paraphrase , Anyway ? Paraphrase is stating someone else's ideas in your own words . If you think about it a little , you will realize that it's something that we all do , all the time . You watch the NBA finals on TV , you tell me the story of how Malone fell short and Jordan was a hero again , and I retell the story to my friend in my own way . I probably don't stop to give you credit . If we were constantly stopping to give credit , then our discourse would bog down . However , since we are having a conversation , if you need to know more , you can ask me : What's the source of that stuff , man ? And I can say : it was Jimmy , he watched the game so he should know . And you say : Jimmy is an idiot , and I say ... well , so it goes . tsitaati löpp Artiklis toodud monotoonse süsteemi definitsioon et “ Igale andmetabeli objektile saab luua mõõdu , nii et ühe objekti kõrvaldamisel teiste objektide mõõdud kahanevad või jäävad samaks . See nn. nõrk monotoonsus võimaldab suvalisest süsteemist objektide järjestikust elimineerimist ja korra loomist , kui seda seal on ” täpselt allub parafraseerimise mõistele , sest just selline on Mullati monotoonse süsteemi definitsioon artiklis <hyperlink> Peale kauba , korraloomine on ka Mullati artiklis nn. “ defining sequence ” i ehatamine . Lugejal vöib ette tulla , at korraehitamine on iseenesest arusaadav ide , mis juba eelnevalt teada oli . Mullat oli aga ainult se isik kes sellist L.V. omadust tõestanud ?? Korraloomine on kirjanduses tuntud , näiteks Greedy tüüpi algoritmides . Monotoonsed korraloomist nagu Mullat'i “ defining sequencies ” teada ej olnud enne <arv> aastat . Kui õunad pähe kukkuvad siis oli see Newton kes selgitas et õunte kukkumine on gravitatsooni jõudu tagajärk , mitte et gravitatsiooni jõud on õunte kukkumisest tekkinud . Artiklis toodud ide on just see viimane absurdne mõtte rõhutatud et montoonsed süsteemid olid monotoonsest omadusest tekkinud . Vastupidi : monotoonsed süsteemid olid tekkinud ja ka kirjeldavad mis on see monotoonne omadus just Mullati moodi , ega mitte ka kellegi mu kui Mullati moodi . Õige küll et L.V. oli ülesande püstitanud , kuid kasulik lahendus oli Mullati poolt leitud ja kuulub ka Mullatile ega mitte kellegile teisele . Se olkes minu sõnumi lõpp . Uudised valis ja pani kokku Uuno Vallner , Riigikantselei riigi infosüsteemide osakonna nõunik Uudised E-RIIK PRESSIB ANDMEKOGUSID TEENUSTEKESKSEKS Tahan teada . Inimestel on ürgne kirg teada saada , mida arvab ja teab temast naabrimees , kolleeg , kallim , meedia , firma , konkurendid ... Põhjused on inimlikud -- uudishimu , edevus , hirm ... Inimese kohta tekib elu jooksul üsna palju infot firmadesse , telefonikompaniidesse , pankadesse , tervishoiuasutustesse , riiklikesse institutsioonidesse . Igasugune info talletatakse tänapäeval andmekogudesse . Valitsus on otsustavalt asunud seni pehmelt koordineeritavaid andmekogusid moderniseerima . Kui õnnestub realiseerida püstitatud uudesd ideed , muutuvad riigi andmekogud näiliselt ühtseks tervikuks . Idee muutuks veelgi fantastilisemaks , kui selle protsessiga õnnestuks kaasata erasektor . Vaata ka <hyperlink> Riik kodaniku jaoks . Riik kui kodanikku teenindav institutsioon peaks tänapäeva arusaamade järgi andma kodanikule aru , milliseid andmeid tema kohta kogutakse ja kes tema kohta kogutud andmeid kasutab . Riik talletab kogutavad andmed andmekogudesse . Kuid enamasti kasutavad praegu neid ainult ametiasutused ise . Andmekogude kasutamise liidesed on orienteeritud tihti süsteemi haldajatele , on keerulised , kodaniku jaoks liiased ja raskesti arusaadavad . Kodaniku kontrolli puudumine muudab andmekogude sisu ebaadekvaatseks . Aeg-ajalt leitakse sama isikukoodiga isikuid , aastaid surnud saavad maksuteatisi , likvideeritud firmad toimivad edasi , varastatud autosid müüakse ... Oled see Sina ? Andmekogud põhinevad suuresti arvutitel ja seetõttu võiks üritada teha nad Interneti kaudu juurdepääsetavaks kõigile . Muidugi ei saa lubada , et Sinu kohta kogutud andmeid saaksid kätte kaaskodanikud või isegi pahategusid plaanivad isikud . Kuna arvuti ei näe Sind , siis on tal Sinu isiku tuvastamiseks vaja mingeid reegleid . Selleks võib kasutada võtteid , mida kasutatakse isiku autentimiseks pankades , mobiiltelefonides ja mujal . See seisneb teatud salajaste koodide esitamises süsteemile . Teise üsna perspektiivse variandina on oma päringu kinnitamine digitaalallkirjaga . Aastal <arv> hakatakse kodanikele väljastama nn. ID-kaarte , mis võimaldavad infotehnoloogiliste vahenditega usaldatavalt autentida kodanikku . Mida riik teab minust ? Sel aastal algatas teede- ja sideministeerium projekti X-tee ( vaata <hyperlink> ) . X-tee on omamoodi ristmik , kust kodanik valib talle sobiva teeharu teda huvitava infoni , toiminguni . Kuid see on ka koht , kus põrkavad kokku andmekogude töötlejate , arendajate ja kasutajate huvid . Analüüs näitas , et tegelikult ei huvitagi kodanikku andmekogud , vaid teenused . Ma tahan lapsele saada sünnitunnistust , ma tahan edaspidi olla lätlane ( oma rahvuse muutmiseks piisab isiku tahteavaldusest ) , mul on vaja kinkelepingu sõlmimiseks mingeid tõendeid ... Andmekogude teenused . X-tee eesmärgiks on teha kolme aastaga inventuur kõikidest riigi andmekogude teenustest , avalikustada see loetelu loodavas kodanikuportaalis ning varustada iga teenus tema sisu , andmete ja juurdepääsu kirjeldusega koos päringu esitamise võimalusega . Teenuste avamise eest vastutavad andmekogud ja avalikustamine allub ühtsetele reeglitele . Selle tulemusena paistavad kodanikule kõik andmekogud ühtse tervikuna . Toiminguahelad . Tihti on mingi toimingu sooritamiseks vaja ametnikule esitada täiendavaid tõendeid , maksta riigilõivu ja teenustasu , muuta oma andmeid mitmetes registrites . Nähtavasti võib kodanik e-riigis kopeerida traditsioonilist skeemi ja hankida Interneti kaudu kõik vajalikud tõendid ( nüüd küll digitaalsed ja digitaalallkirjaga ) , kuid loogilisem on tekitada mingite toimingute ahel , mille käigus erinevad andmekogud omavahel suheldes teevad kindlaks Sinu õigused soovitud tõendit saada ja genereerivad selle Sulle . Andmekogud ühtse organismina . Kõik see nõuab andmekogude ja infosüsteemide tugevat reglementeerimist , infosüsteemide turvanõuete täitmise kontrolli ja tahet koostööks . Andmekogud on riigiametniku tööprotsessi tulemus . Ideaaljuhul andmekogud tekivad ja andmeid uuendatakse ametnike armee töö käigus . Andmekogud ei tohiks tekkida täiendava töö tulemusena . See nõuab infosüsteemide töö läbivaatamist ja ümberkorraldamist ega olegi nii lihtne . Toome mõned näited . Õigusinfo käsitlemine riigis . Riigis eksisteerib üllatavalt mitmeid infosüsteeme , kus teavet töödeldakse samal moel , kui seda tehti hanesule ajastul . Üheks koloriitsemaks näiteks on praegu riigis toimiv õigusinfo süsteem . Hanesule ajal ei jaksanud kloostris mungad seadusi ümber kirjutada . Nende töö kergendamiseks otsustati tol ajal defineerida nn seaduse parandused . See võimaldas seadust enam mitte ümber kirjutada , vaid kirjutada lisaleht parandustega . See leht lisati terviktekstile . Arvutite ajastul oleks palju lihtsam võtta terviktekst , parandada nõutavad tähed/sõnad/lõigud ja salvestada see tekst õigusakti uue versioonina . Skaneerimine . Isegi sellistes ülimodernsetes süsteemides , nagu presidendi kantselei infosüsteem , valitsuse istungite süsteem jt. kasutatakse teises institutsioonis arvutil koostatud ja seejärel paberile prinditud dokumentide skaneerimist . Skaneerimise kasutamine infosüsteemis on süsteemi võimaliku ebaratsionaalsuse tunnuseks . X-tee idee formuleeriti aastal <arv>. Esimesed sammud programmi käivitamiseks astuti <arv>. aastal , kui peaministri nõuniku Linnar Viigi initsiatiivil algatati pilootprojekt , mida finantseeriti teede- ja sideministeeriumi , riigikantselei ja siseministeeriumi eelarvest ning mida koordineeris RISO . Pilootprojekti elluviimise põhiraskust kandsid : Vello Kadarpik , AS Softshark ; Hannu Krosing , OÜ IT Meedia ; Tanel Tammet , Tallinna Tehnikaülikool ; Ain Järv , kodakondsus- ja migratsiooniamet . Pilootprojekt realiseeriti esimese etapi ulatuses ja see võimaldas ligipääsu valikule kodakondsus- ja migratsiooniameti ning autoregistri andmetest . Käesoleva aasta alguses kiitis X-tee põhimõtted heaks vabariigi valitsus . Programmi eesmärgiks on muuta riigi andmekogud avatud , ühtseks ning teenust pakkuvaks ressursiks . Lähtutakse järgmistest nõuetest : Infoühiskonna ülesehitamiseks on vaja korraldada mittehomogeensetel riist- ja tarkvara- platvormidel realiseeritud andmetöötlusprotsesside vaheline koostöö . Kõik infoteenused kodanikule , ettevõtjale , ametnikule ja teistele andmetöötlusprotsessidele peavad olema kättesaadavad Interneti kaudu . Suletud ja asutusekesksed andmekogud on vaja muuta avatuks ja orienteerida teenuseid pakkuvaks nendele , kes andmeid vajavad ning on volitatud neid saama . Riigi andmekogud peavad toimima ühtse tervikuna . Kallis , aeganõudev ja kohmakas andmekogude arendamise protsess vajab optimeerimist . Keeruline , ebamugav ja kallis infovahetus andmekogude vahel vajab asendamist . Töömahukas unikaalsete tarkvaraliste liideste loomine tuleb asendada standardsete liideste kasutamisega . Visioon aastaks <arv>. Riigil on juurdepääs andmekogudele kui ühtsele tervikule <arv> päeva nädalas ja <arv> tundi ööpäevas , mis tagab , et : kodanik saab ja annab teavet seadusega antud õiguste piires ; riigiametnik saab otsustamisprotsessis kasutada riigi andmekogusid oma volituste piires ; ettevõtja saab äritoimingut oma volituste piires kasutada riigi andmekogudes sisalduvat informatsiooni . Riik on muutunud läbipaistvamaks , terviklikumaks ja kodanikele arusaadavamaks . Andmekogude ühtlustatud kasutamisel paraneb oluliselt riigi haldussuutlikkus ning väheneb teenindamisele kulutatav ressursivajadus . Tänu ühtlustatud kasutajaliidesele on lihtsustunud andmekogude kasutamine . Kuulutati välja X-tee kaheetapiline riigihange . Oma pakkumised X-tee hankekonkursile esitasid : Tietoenator Eesti AS , Türi <arv>C , <arv> Tallinn AS Microlink Süsteemid , Pärnu mnt. <arv> , <arv> Tallinn AS BCS Ärilahendused , Narva mnt. <arv> , <arv> Tallinn AS Assert , Luise <arv>/Toompuiestee <arv> , <arv> Tallinn IBM Eesti OÜ , Pirita tee <arv> , Tallinn Itera Süsteemid , Ristiku<arv> , <arv> Tallinn KAS E-KODANIK HAKKAB VALITSEMA TULEVIKURIIKI ? Valitsus on algatanud nn. e-kodaniku programmi . Aasta <arv> kulub eelkõige ettevalmistustöödele . Programmi üldiseks eesmärgiks on võimaldada kõigil inimestel aktiivset osalemist infotehnoloogia abil avalikus elus nii riigi , regiooni kui ka kohalikul tasandil . Rohkem teavet aadressil : <hyperlink> Visioon : Aastaks <arv> pakuvad kõik riigi- ja kohaliku omavalitsuse asutused teenuseid Interneti kaudu . <arv>% elanikkonnast kasutab igapäevases tegevuses ja olmes Internetti . Töötab individuaalsetele vajadustele häälestatav kodanikuportaal . Läbiviijad : siseministeerium ning teede- ja sideministeerium koostöös riigiasutuste , omavalitsusliitude ja omavalitsustega . Aastal <arv> : Luuakse koostööorganisatsioon , kuhu kaasatakse riigi- ja kohaliku omavalitsuse asutused , avalik-õiguslikud institutsioonid , kolmas sektor ja ettevõtted . Lähtudes haldusreformi eesmärkidest koostatakse strateegia , valitakse prioriteetsed teenused , määratakse koostöö teiste oluliste projektidega ( digitaalallkiri , ID-kaart , andmekogude reform , andmeside reform , dokumendihalduse programm jt. ) . Koostatakse tegevuskava ja töötatakse välja tegevuste rahastamise võimalikud skeemid . Algatatakse pilootprojektid omavalitsuse tasandil järgmistes valdkondades : tervishoid , maakorraldus , arendus ja planeerimine , haridus . Käivitatakse “ e-kodaniku ” alane koolitusprojekt asutuste ja omavalitsuste ametnikele . Luuakse avalike teenuste kodanikukeskne ligipääsupunkt Internetis . Avaliku teabe seaduse täitmise toetamiseks antakse omavalitsustele võimalus oma dokumentide avalikustamiseks ühtses keskkonnas ja ühises serveris ( vaata <hyperlink> ja <hyperlink> ) Siseministeeriumi algatusel toimusid <arv>. aasta kevadel e-kodaniku teabepäevad kõikides maakondades . DIGITAALALLKIRI JA ID-KAART MUUTUB REAALSUSEKS Digitaalallkirja rakendamise seisust . Digitaalallkirja seadust hakati välja töötama <arv>. aasta kevadel Võeti Riigikogu poolt vastu <arv>. märstil <arv> Seadus hakkas kehtima <arv>. detsembril <arv> <arv>. aasta lõpus loodi sertifitseerimise riiklik register eesmärgiga pidada arvestust sertifitseerimis- ja ajatempliteenuste osutajate üle ning tagada ajatempliteenuse osutajate poolt väljaantavate ajatemplite ajalise järgnevuse võrreldavus <arv>.<arv>.<arv> moodustati teede- ja sideministeeriumi käskkirjaga nr. <arv> töörühm digitaalallkirja seaduse rakendamiseks ning siseministeeriumis väljatöötatava elektroonilise isikutunnistuse infotehnoloogiliste lahenduste kooskõlastamiseks Tekkimas on esimesed sertifitseerimisteenuse osutajad ID-kaarte hakatakse väljastama <arv>. aastal . ID-kaartide väljaandmine kestab kuni <arv> aastat . Fikseeritud on töögrupi seisukohad ID-kaardile kirjutatavate sertifikaatide osas : ID-kaardile kirjutatakse KAKS sertifikaati . Kaardil on ka sertifikaatidele vastavad isiklikud võtmed . Kaart ei ole selle omaniku jaoks kirjutatav , seega kaardile sertifikaate ega muid andmeid lisada ei saa . Sertifikaadid kirjutatakse kaardile igal juhul . Kodanikul on õigus ja võimalus sertifikaadid kohe ( kättesaamisel ) peatada või tühistada , kuid tal ei ole võimalust neid mitte saada . Mõlemal sertifikaadil ( õigemini , vastaval isiklikul võtmel ) on oma pääsukood . Pääsu- koodid on numbrilised . Mõlemad sertifikaadid saavad olema digitaalallkirja seaduse mõistes kehtivad sertifikaadid . Mõlemasse sertifikaati lisatakse kohustusliku väljana selle omaniku isikukood . Vaata ka <hyperlink> ja <hyperlink> EESTI INFORMAATIKANÕUKOGU UUENES Nõukogu liikmed : Teede- ja sideminister Toivo Jürgenson Tartu Ülikooli rektor Jaak Aaviksoo Teede- ja sideministeeriumi asekantsler Mait Heidelberg Küberneetika AS juhataja Ülo Jaaksoo Dateli tegevdirektor Urmas Kõlli Riigikogu liige Marju Lauristin Eesti Ühispanga asepresident Tõnu Liik Teede- ja sideministeeriumi riigi infosüsteemide osakonna juhataja Arvo Ott Baltic Computer Systems AS-i nõukogu esimees Ants Sild ORACLE BALTICS'i juhatuse esimees Ants Urvak peaministri nõunik Linnar Viik Nõukogu ülesanded : ettepanekute väljatöötamine Eesti Vabariigi informatiseerimise üldaluste ja strateegia koostamiseks informaatika ja infotehnoloogia valdkonda reguleerivate õigusaktide eelnõude läbivaatamine ja nende kohta arvamuste andmine vabariigi valitsuse nõustamine informaatika arenduskavade elluviimise küsimustes , arvestades Euroopa Liiduga integreerumise vajadust riigi infosüsteemide arengukavade läbivaatamine . Nõukogu teenindab teede- ja sideministeeriumi riigi infosüsteemide osakond . E-VALIMISED JUBA JÄRGMISEL AASTAL ! Valitsuse istungil <arv>.<arv>.<arv> arutati kohaliku omavalitsuse volikogu valimise seaduse eelnõu . Justiitsministeerium , siseministeerium ja vabariigi valimiskomisjon on teinud üsna mahuka eeltöö ja e-valimiste läbiviimise võimaluste analüüsi . Teede- ja sideministeeriumi ning justiitsministeeriumi kohustati koostöös vabariigi valimiskomisjoniga koostama <arv>. juuniks <arv> e-valimiste kulude analüüs ning esitama see valitsusele . MIDA TEEB VALITSUSASUTUSTE DOKUMENDIHALDUSE PROGRAMM ? Riigikantselei jätkab valitsusasutuste koostööprogrammi üleminekuks digitaalsele dokumendihaldusele . Vaata ka <hyperlink> Olulisemad tegevussuunad aastal <arv> : Digitaalse dokumendivahetuse standardite loomine Digitaalse asjaajamise strateegiline koolitusprogramm Infosüsteemi õigusaktide tervikarendus VALDO PRAUST “ DIGITAALALLKIRI . TEE PABERIVABASSE MAAILMA ” Aadressil <hyperlink> tutvustatakse <arv>-leheküljelist raamatut järgmiselt : Metoodiline tutvustusraamat võttest , mis võimaldab asendada vananenud ning aeglase bürokraatia moodsa , odava ja kiire arvutitel põhineva asjaajamisega . On esimene eestikeelne digitaalallkirja põhjalikult tutvustav õpik , olles ka maailmas üks esimesi . Vajalik lugemisvara igale dokumentide ja asjaajamisega tegelejale , kes tahab tulevikku vaadata . Sisaldab lisana Eesti digitaalallkirja seaduse kommenteeritud väljaande , mis jõustus <arv>. detsembril <arv>. Sisukord : Saateks Paberdokumendid failideks Lihtsalt ei saa - puudub andmekandja Teeme siis keeruliselt - seome allkirja andmete endaga Appi tuleb salakirjateadus Salakirjateadus ei tegele ainult salastamisega Pikk fail lühendiks Allkirja andmise ja kontrollimise vahendid Fail ja teave : kuidas seotud ? Allkirja seos selle andjaga Kui kaotan allkirja andmise vahendi Digitaalne ajaarvamine Elektroonilise notari kinnitused Õiguslik reguleerimine Mis saab edasi - elemente digitaalsest asjaajamisest Kokkuvõte : digitaalallkirja ja selle infrastruktuuri põhifakte Lisa A. Meelespea digitaalallkirja kasutajale Lisa B. Eesti digitaalallkirja seaduse kommenteeritud variant Sõnastik ( aineregister )