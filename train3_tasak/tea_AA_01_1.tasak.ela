kirjak	tea_AA_01_1.tasak.ela	Paul Leis Ründetuvastussüsteemid Interneti-ajastu nõuab infosüsteemidelt <arv>-käideldavust . Kobaratehnoloogia ( clustering ) , võrgukeskne infrastruktuur ( Storage Area Networks ) ja tehinguhaldurid ( Transaction Processing Monitors ) loovad võimaluse kõrgkäideldavate infosüsteemide loomiseks . Reaalseks käideldavuse tagamiseks nendest tehnoloogiatest kahjuks ei piisa : Internetis on piisavalt kurikaelu , kes meie infosüsteemi mitmesugustel motiividel ( ka naljapärast ) ründavad ja sellega infosüsteemi talitlust häirivad või seda halvavad . Kui <arv>ndatel aastatel olid ründajateks vaid kõrge kvalifikatsiooniga arvutispetsid , siis tänapäeval on vabalt saada ründevara , millega iga koolipoisski võib nuritegusid toime panna . Ründajatel on mitmeid “ suursaavutusi ” , mis tõendab , et isegi hoolikalt kaitstud süsteemid pole ründekindlad . Ka kinnitab statistika rünnete sagenemist : <arv>. aastal kasvas Computer Security Institute'i ( <hyperlink> ) andmetel rünnetest tekitatud kahju <arv>% , ulatudes <arv> miljoni dollarini . Pole kahtlust : rünnete vastu on vaja infosüsteeme kaitsta - aga selleks , et kaitsta , tuleb esmalt teada saada , et meid rünnatakse . <arv>. aastal sai ründetuvastuse probleem ka rahvusvahelise “ tunnustuse ” : loodi Intrusion Detection Systems Consortium ( IDSC ) , mille eesmärgiks on ründetuvastussüsteemide loojate vahelise koostöö korraldamine . Vastavalt kasutatavale tehnoloogiale jagunevad ründetuvastussüsteemid väärkasutuse ja anomaalia tuvastussüsteemideks . Väärkasutuse tuvastussüsteemide põhiidee on lihtne : võrku siirdatakse agendid , mis jälgivad võrguliiklust ja võrdlevad seda teadaolevate ründekäekirjadega ( intrusive signatures ) . Anomaalia tuvastussüsteemid on kasutatavad võrkudes , mille “ normaalne ” ( baas- ) seisund on määratletav . Baasseisundit võrreldakse perioodiliselt hetkeseisundiga ja genereeritakse avariiteade , kui hälve baasseisundist ületab teatava läviväärtuse . Mõned ründetuvastussüsteemide müüjad : Axent Technologies , Bind View Development Corporation , Centrax Corporation , Cisco Systems , Internet Security Systems , Memco Software , Network Associates , Qwest Communications International , IBM , Security Dynamics , Tripwire Security Systems . Märgime , et piisavat turvataset tagavat ründetuvastussüsteemi pole - ega saagi olema . Tõhusaks ründetõrjeks on lisaks tuvastussüsteemidele vaja ka kõrge kvalifikatsiooniga spetsialiste-võrguadministraatoreid . Kahjuks süveneb võrguadministraatorite defitsiit - infosüsteemide arv kasvab eksponentsiaalselt , administraatorite arv vaevalt lineaarselt . Nii et tulevik on üsna tume , eriti kui silmas pidada ründajate kõrget kvalifikatsiooni . Alates <arv>. aastast on A &amp; A tugisambaks olnud Silvia Roosve , kes oma entusiasmi ja energiaga nii mõnigi kord ajakirja “ elu päästis ” . Kahjuks ei võimalda halvenenud tervis tal enam A &amp; A väljaandmisel aktiivselt osaleda . Toimetuse nimel avaldan Silvia Roosvele tänu tehtu eest . Peeter Lorents Andmete ja teadmiste formaalne kirjeldamine ... * * - Andmete ja teadmiste formaalne kirjeldamine tähistuseks-tähenduseks olemise fundamentaalseose abil Peeter Lorents - sündinud <arv>. septembril <arv>. aastal . Õppinud muusikat ja matemaatikat , üsna põhjalikult ka seda , mis on seotud riikide julgeoleku ja riigikaitsega . Väitekirja matemaatilise loogika alal kaitses Leningradi Riikliku Ülikooli matemaatikateaduskonnas <arv>. On avaldanud mitmeid teaduslikke , populaarteaduslikke ja publitsistlikke kirjutisi ning raamatuid . Viimastel aastatel on tema poolt juhitud töörühmad kujundanud Eesti haridusmaastikul mitu uut ja perspektiivset ala : IT juhtimine/korraldamine ning haldusinformaatika . Aastatel <arv> - <arv> Riigikogu liige , riigikaitsekomisjoni esimees . Alates <arv>. aastast Eesti Kõrgema Kommertskooli professor , infotehnoloogia õppetooli juhataja . SISSEJUHATUS Käesolevas kirjutises käsitletakse andmete ja teadmiste mõiste määratlemist hulgateoreetilisel pinnal . Niisuguse lähenemise aluseks on usk , et millegi olemine tähistuseks või tähenduseks on süvaolemuselt niisama fundamentaalne kui ühtede hulkade olemine teiste elementideks . Kui nii , siis vastav seos - tähistuseks-tähenduseks olemise seos - on samalaadselt elemendiks olemise seosega fundamentaalseos , mida ei defineerita . Nagu öeldud , on seejuures tegemist asjaga , mida võib uskuda või mitte uskuda . Kirjutise esimesed kaks osa ongi pühendatud kõnealuse fundamentaalseose olulisemate ( ja loodetavasti usutavate ) omaduste kirjeldamisele . Kolmandas osas esitatakse andmete määratlus ning sellest lähtuv põhjendus info koguse logaritmilisele mõõdule . Kirjutise viimases , neljandas osas antakse teadmiste mõistele tähistuseks-tähenduseks olemise seosele tuginev määratlus ning analüüsitakse põgusalt selle sobivust . Esitatava materjali aluseks on raamatu [ <arv> ] kolmas peatükk , milles on omakorda olulisel määral edasi arendatud artiklites [ <arv> ] ja [ <arv> ] kirjapandud mõtteid . <arv>. TÄHISTUSEKS -TÄHENDUSEKS OLEMISE FUNDAMENTAALSEOS Fundamentaalseosteks nimetame edaspidi selliseid seoseid ehk predikaate , mis ühes või teises teoorias ei kuulu defineerimisele , kuid samas on lähtealuseks vaadeldavate teooriate ülejäänud seoste määratlemisel . Nii näiteks on hulgateoorias fundamentaalseoseks binaarne seos , mis väljendab ühe hulga olemist teise hulga elemendiks . Samas pole hulgateoorias fundamentaalseoseks , mis väljendab ühe hulga olemist teise hulga osahulgaks . Tõepoolest , vastavalt hulgateoorias esitatud määratlusele tähistatakse kirjutise “ ” abil kirjutist “ ” ( ehk asjaolu , et mis tahes hulga x korral järeldub sellest , et x on hulga A element , tõsiasi , et x on ühtlasi ka hulga B element ) . Siinkohal paneme tähele , kuidas elemendiks olemise seoses figureerivad hulgad jaotuvad piltlikult öeldes järgmistesse rollidesse : ühed hulgad osutuvad elementideks , teised aga sellisteks , mille elementideks ollakse . Samas võime nii teoreetilistes käsitlustes kui ka praktilises elus sageli täheldada , kuidas ühed hulgad on teiste tähisteks ja samas on teised hulgad esimeste tähendusteks . Nii näiteks tähistavad eluslooduses teatavas järjestuses esitatavate tegevuste , pooside ja paiknemiste hulgad isendite hulga soovi või valmis- olekut ründeks , kaitseks , soojätkamiseks vms. Formaalsetes teooriates on tavaline , kuidas ühe kirjutisega ( milleks on ju sümbolite hulk ! ) tähistatakse mingit teist kirjutist , kusjuures seda teist loetakse niisugusel juhul esimese tähenduseks . Sedalaadi tähelepanekute alusel võtame kasutusele spetsiaalse binaarse hulkadevahelise seose , mida edaspidi nimetame tähistuseks-tähenduseks olemise seoseks ning , lähtudes ingliskeelsete sõnade sign ( tähis ) ning significance ( tähendus ) esitähest , märgime sümboliga . Niisiis , kui A ja B on hulgad , siis abil oleme fikseerinud asjaolu , et hulk A on hulga B tähiseks ning samas on hulk B hulga A tähenduseks . Filosoofilistest kaalutlustest lähtudes lepime kokku , et näol on tegemist fundamentaalseosega , mida ei määratleta teiste seoste ( näiteks ) abil . Fundamentaalseoste olemuse ja omaduste avamise üheks tavapäraseks viisiks on asjakohaste põhipostulaatide , printsiipide ehk aksioomide formuleerimine ja fikseerimine . Formuleerides ja fikseerides ühed või teised aksioomid , saame vastavalt ühe või teise aksiomaatika , millest omakorda tuleneb üks või teine teooria ( vt [ <arv> ] §§<arv>-<arv> ) . Nii näiteks on olemas mitmed hulgateooriad ( vt [ <arv> ] ) , aritmeetikad , geomeetriad ( nt eukleidiline geomeetria ja Lobatševski geomeetria ) . Analoogiliselt on võimalik arendada ka erinevaid teooriaid tähistuste-tähenduste seose ning vastavate aksioomide baasil . <arv>. SEOSE OLULISEMAD OMADUSED Alustame seisukohast , et mitte kõik asjad siin maailmas - seejuures ka hulgad - ei pea alati iseenda tähenduseks olema . Kui oleme sellega päri , siis võime postuleerida seose arefleksiivsuse : Mitte iga hulga A korral . Otsides siinkohal “ toetavaid ” analoogiaid hulgateooriast , võime märkida , et pole kunagi õige ! Järgmine asjaolu , mida tuleks esile tuua , seisneb seose mitteühesuses : Hulkadel võib esineda mitmeid erinevaid tähistusi ja tähendusi . Nii näiteks võib arvu kaks ( milleks hulgateoorias on hulk ] , ] } } ) tähiseks olla “ rooma number ” II ( ehk kaheelemendiline jada , mille esimeseks liikmeks on I ja teiseks samuti I ) . Kuid nn kahendesituse raames võib arvu kaks tähistuseks võtta hoopis teistsuguse kaheelemendilise jada , mille esimeseks liikmeks on <arv> , teiseks aga <arv>. Kõnealusel kaheelemendilisel jadal , mille liikmeteks on vastavalt <arv> ja <arv> , võib omakorda tähenduseks olla nii naturaalarv kaks kui ka naturaalarv kümme ( olenevalt sellest , kas vaadeldakse kahendesitust või kümnendesitust ) . Ingliskeelses keskkonnas on neljast sümbolist koosneva jada KING tähenduseks teatavat tüüpi monarh , eesti keelt kõnelejatele aga teatavat tüüpi jalats . Äsjamainitud monarhi tähistamiseks kasutatakse eesti keeles hoopis kaheksast sümbolist koosnevat jada - KUNINGAS . Seose järgmine omadus , millest juttu tuleb , on seotud tähistuste ja tähenduste n-ö edasikantavuse ehk transitiivsusega : Mis tahes hulkade A , B , C korral , kui A tähendus on B ja B tähendus on omakorda C , siis A tähenduseks on C. Ehk lühemalt - . Kuigi transitiivsusega võiks iseenesest siinkohal päri olla , tekib ometi küsimus : “ Kui kaugele saab hulkadele ikka järgmisi tähendusi otsides minna ? ” Üheks võimalikuks vastuseks oleks : mitte lõputult kaugele . Ehk teiste sõnadega - ükskord jõuame ikka kohani , kus küsimus “ Mida see omakorda tähendab ? ” jääb vastuseta ! Niisugusel juhul peame tõdema , et iga tähistuste-tähenduste ahel jõuab lõpliku arvu sammude järel mingi fundamentaalse tähenduseni , millest edasi pole enam võimalik uusi asjakohaseid tähendusi otsides minna . Nimetades kõnealust omadust edaspidi tähenduste fundeerituseks , saame öelda , et : Mitte ühegi hulga H korral ei leidu lõpmata palju erinevaid liikmeid sisaldavat hulkade jada H<arv>, H<arv>, ... , Hn, Hn+<arv>, ... , mille korral H H<arv>, H<arv>H<arv>, ... , HnHn+<arv>, ... . Märgime , et mingis mõttes analoogiline omadus , kuigi n-ö vastupidises suunas , on elemendiks olemise seosel ( ühelegi hulgale ei ole võimalik lõputult leida erinevaid elementide elemente , elementide elementide elemente jne ) . Eespool kõnelesime sellest , et üldjuhul pole vist mõistlik eeldada hulkade iseenda tähenduseks olemist . Sedalaadi lähenemisega sobib üsna hästi nn asümmeetria : Pole õige , et iga kahe hulga A ning B korral , kui A tähendus on B , siis B tähendus on A ehk lühemalt ( “ A ) ( “ B ) [ ( A B ) É ( B A ) ] . Olles kõnelnud asümmeetriast , lisame mõne sõna ka sümmeetria ning antisümmeetria kohta : ütleme , et hulgad A ning B on sümmeetriliselt seoses , kui ning antisümmeetriliselt seoses , kui . Seejuures on tavaks , et mingi binaarse seose © korral mõistetakse seose antisümmeetria omadusena seda , et mis tahes hulkade A ning B korral ( A © B ) &amp; ( B © A ) É ( A = B ) . Kasutades lihtsaid loogilisi teisendusi , saab näidata , et tingimus ( A © B ) &amp; ( B © A ) É ( A = B ) on samaväärne tingimusega ( A = B ) É [ ( A © B ) &amp; ( B © A ) ] ehk sõnade abil : kui pole õige , et A = B , siis on A ja B antisümmeetriliselt seoses © . Niisiis oleneb hulkade A ning B antisümmeetrilisus seoses © asjaolust , kas A = B või mitte . Mitmed tähelepanekud näitavad , et tähistuseks-tähenduseks olemise seose korral peaks mingite hulkade A ja B antisümmeetria ( seoses ) olenema sellest , kas neil leidub ühine tähendus või mitte . Seega võime formuleerida seose ühistähendusest oleneva antisümmeetria omaduse : Kui osutub , et A tähendus on B ja samas B tähendus on A , siis peab neil leiduma vähemalt üks ühine tähendus D. Ehk lühemalt . Teoreem <arv>. Kui hulkadel A ning B puudub ühine tähendus , siis ei saa nad olla ka vastastikku teineteise tähendusteks . Tõestus . Tuleneb seose ühistähendusest oleneva asümmeetria omadusest ja lihtsatest loogilistest samaväärsustest . Näide <arv>. Võime julgelt kirjutada , et II ja samal ajal II , kuna teame , et leidub hulk , nimelt , mille korral nii kui ka II . Näide <arv>. Võime väita , et akronüümi UN tähenduseks on ÜRO ja vastupidi , kuna mõlemaga tähistatakse Ühinenud Rahvaste Organisatsiooni . Lõpetades antud osa märgime , et valitud printsiipide hulk pole ainumõeldav tähistuseks-tähenduseks olemise seose olulisemate omaduste formuleerimiseks ja fikseerimiseks . Kuid kahtlemata on see üks võimalus tähistuste ja tähenduste teooria rangete matemaatiliste ( hulgateoreetiliste ) aluste loomiseks . Järgnevalt astume sammukese tähistustest-tähendustest edasi ning asume käsitlema lõplikke tähenduste hulki ja nendega seotud arvulisi karakteristikuid , mis loomulikul viisil viivad meid infokoguse logaritmilise mõõduni . Märgime , et infokoguste hindamisel logaritmfunktsiooni abil hakkasid sideinsenerid praktilistest kaalutlustest lähtudes juba kahekümnenda sajandi esimestel aastakümnetel ( vt Hartley artiklit [ <arv> ] , mis ilmus <arv> ) . <arv>. LÕPLIKUD TÄHENDUSTE HULGAD , ANDMED JA KLASSIKALINE INFO MÕÕT Lepime kokku , et edaspidi tegeleme lõplike hulkadega . Seejuures olgu hulga H elementide arvuks E ( H ) . Kui on teada , et H on osa mingist hulgast M , mille elementide arv on E ( M ) , siis võime küsida , kui eriline niisugune väljaeraldatud osa on . Vastuse leidmiseks lepime kokku kasutada arvulist suurust S M ( H ) =E ( M ) : E ( H ) , mida nimetame edaspidi osahulga erilisuseks . Näeme , et väljaeraldatud osahulk H on seda erilisem , mida vähem on selles elemente , võrreldes kogu hulgaga M. Erilisuse vähim võimalik väärtus on võrdne arvuga <arv>. See vastab olukorrale , mida iseloomustavad sõnad : ei midagi erilist ! Ehk täpsemalt , kui oleme väljaeraldatava osahulga H moodustanud eranditult kõikidest hulga M elementidest , siis niisuguse triviaalse osa erilisus on <arv>. Vaatleme nüüd mingit hulka A ning moodustame hulga H nii , et selle elementideks tohivad olla ainult hulga A tähendused . Lepime kokku , et sellisel juhul kõneleme : H on hulga A tähenduste hulk ning kirjutame . Kui seejuures on oluline silmas pidada , et hulga H elemendid pärinevad ise kõik veel mingist hulgast M , siis kirjutame . Näeme , et näol on samuti tegu hulkadevahelise seosega , kusjuures - nagu veenduda võime - ning . Nüüd saame esitada ühe olulise määratluse : hulka , mille tähenduste hulk pole tühi , nimetame andmeteks . Teoreem <arv>. A on andmed parajasti siis , kui . Tõestus . Tuleneb vahetult määratlustest . Andmete korral on ikka küsitud , et mida neis andmetes erilist on või siis , et kui palju need andmed infot sisaldavad . Katsume leida vastused , tuginedes eeltoodud mõistetele . Loomulik oleks siduda andmete erilisus nende tähenduste erilisusega . Teiste sõnadega - lepime kokku , et andmete A erilisuse all mõistame A tähenduste hulga erilisust . See aga eeldab vastava ülemhulga M määratletust , mille elementide seast pärinevad hulga A tähendused . Täpsemalt : kui A on andmed , see tähendab , et kui leidub niisugune mittetühi hulk , mille korral , siis vastavat erilisust tähistame ja arvutame järgmisel viisil : . Järeldus . Andmed A on seda erilisemad , mida erilisem on vastav tähenduste hulk H eelnevalt fikseeritud ülemhulga M suhtes . Ja veel üks oluline kokkulepe : kui asjaolu , et ei olene sellest , et ning vastupidi , siis olgu , et . Ehk teiste sõnadega - sellise asjaolu erilisus , et esimese hulga tähendused on “ niisugused ” ja teise hulga tähendused on samal ajal sõltumatult “ naasugused ” , on kokkuleppe kohaselt võrdne vastavate tähenduste hulkade ristkorrutise erilisusega ( ülemhulkade ristkorrutise suhtes ! ) . Teoreem <arv>. Eelkirjeldatud tingimustel kehtib võrdus . Ehk - tähenduste hulkadeks olemise konjunktsiooni erilisus võrdub vastavate konjunktide erilisuste korrutisega . Tõestus . Tuleneb määratlustest ja järgmistest võrdustest  . Nüüd on meil piisavalt vahendeid , et alustada vastamist küsimusele : “ Kui palju sisaldub andmetes infot ? ” Selleks sõnastame järgmised tähelepanekud ja eeldused . ( <arv> ) Andmetes sisalduva info koguse arvuliseks mõõduks ei ole otstarbekas võtta vastavat erilisust , kuna sellisel juhul tuleks mitmete andmete üheaegsel vaatlemisel nende kogumahtu hinnata korrutisega ( vt teoreem <arv> ) . See ei ole aga kooskõlas näiteks sideinseneride ettekujutusega ( vt [ <arv> ] ) asjade olemusest , mille kohaselt tuleks mitmetes andmetes sisalduva info kogumahu määramiseks neis andmetes sisalduva info kogused hoopis kokku liita ! ( <arv> ) Küll aga võiks info mõõt üheselt määratud viisil oleneda andmete erilisusest . Teiste sõnadega : kui I on andmetes A sisalduva info mõõt , siis I = f(z) , kus z on andmete A erilisus ja f on eelnimetatud “ üheselt määratud viisi ” esitav funktsioon . ( <arv> ) Info mõõt peaks olema monotoonselt kasvav funktsioon . Tõepoolest : mida erilisemad andmed , seda enam infot . Ehk lühemalt : kui z<arv> z<arv>, siis f ( z<arv>) f ( z<arv>) . ( <arv> ) Mitmetest samaaegselt käsitletavatest andmetest saadav koguinfo peab võrduma vastavate infokoguste summaga . Seega , kui andmetes , mille erilisused on vastavalt z<arv>ja z <arv> , sisalduva info kogused on vastavalt f ( z<arv>) ja f ( z<arv>) , siis peab koguinfo mõõduks olema f ( z<arv>) + f ( z<arv>) . Kusjuures paneme tähele , et samal ajal on selleks suuruseks eelneva põhjal f ( z<arv>·z<arv>) ( kuna mitmete koos käsitletavate andmete erilisus oli teoreemi <arv> põhjal võrdne vastavate erilisuste korrutisega ) ! Niisiis - f ( z<arv>·z<arv>) = f ( z<arv>) + f ( z<arv>) . ( <arv> ) Kui mingite andmete erilisus on minimaalne ehk kui neis ei ole mitte midagi erilist ( st kui z = <arv> ) , siis sellistes andmetes sisalduva info kogus olgu <arv>. See tähendab , et f ( <arv> ) = <arv>. ( <arv> ) Kui andmeid üldse pole - see tähendab , et vaadeldaval hulgal üleüldse puuduvad tähendused , siis pole vastava info mõõt määratud . J. Dieudonné raamatus esitatud teoreemi põhjal ( vt [ <arv> ] ptk <arv> ) võime väita , et kui mingi korral osutub , et f ( ) = <arv> , st , et mingid andmed on sedavõrd erilised , et nende korral võiksime kõnelda ühikulisest infokogusest , siis leidub täpselt üks ( ning ainus ! ) funktsioon , mis rahuldab ülaltoodud tingimusi . Ja selleks on f(x) = log x . Seega oleme näidanud , et andmetes sisalduva info mõõduks võime võtta nende andmete erilisuse ( ehk vastavate tähenduste hulga erilisuse ) logaritmi . <arv>. TEADMISED Meenutame , et andmed olid eespool esitatud määratluse kohaselt hulgad , mille tähenduste hulk polnud tühi . Sellest asjaolust aga ei tulene , et omades andmeid omate kindlasti ka vastavaid tähendusi ! Sageli ongi just nii , et andmed peavad olema rangelt eraldatud nende tõelistest tähendustest . Ning ainult vähesed väljavalitud omavad juurdepääsu mõlemale poolele . Siit järeldus : selleks , et midagi tegelikult teada , tuleb omada nii andmeid kui ka nende tähendusi . Seega on teadmiste moodustamiseks vaja tekitada mõlemad komponendid ( tähistused ning tähendused ) ja need üheskoos esitada . Järelikult - teadmiste saamiseks on vaja vähemalt kahte hulka , näiteks A ning B , mille korral on õige , et . Kuna eelnevast teame ( vt p. <arv> ) , et tähistuseks-tähenduseks olemise seos on asümmeetriline , siis pole sugugi ükskõik , millises järjekorras me hulgad A ning B võtame . Seetõttu tuleb vastava kokkuleppega fikseerida , kumb hulkadest on esimene ja kumb on teine . Ilmselt sobivad niisuguseks otstarbeks järjestatud paarid . Siit jõuamegi sobiva määratluseni : järjestatud paari nimetame teadmiseks , kui . Nii näiteks võivad teadmise moodustada kaks teksti , millest teine on esimese tähenduseks . Sellest tulenevalt võime rääkida teadmiste olemasolust entsüklopeediates , leksikonides , arvuti mälus , inimese peas jne. Loomulikult ei pruugi teadmised koosneda ainult tekstidest . Näiteks baromeetri näitude kahanev jada tähendab tavaliselt ilma halvenemist . Mündi viskamise statistilise tõenäosuse silmapaistev erinevus viiekümnest protsendist , tähendab seda , et münt pole “ õige ” jne jne. Enne tõsisemate küsimuste juurde asumist vaatleme pisut , kuidas äsjaesitatud määratluse abil võiks proovida kvantitatiivselt hinnata selliseid ( igale eksamil viibijale teatavat peavalu valmistavaid ) asju , nagu näiteks : teadmiste kogust ( kui palju keegi teab ) teadmiste sügavust ( kui sügavad on olemasolevad teadmised ) teadmiste fundamentaalsust ( kui n-ö alusteni ulatuvad on kõnealused teadmised ) teadmiste laiust ( kui laialdased või mitmekülgsed on ülesnäidatud teadmised ) teadmiste puudulikkust ( kui puudulikud või lünklikud on vaadeldavad teadmised ) . Teadmiste kogus on võrdne vastavalt vaadeldava teadmiste hulga elementide arvuga . Ei midagi enamat ! Teadmiste sügavus võiks vaadeldavas teadmiste hulgas olla määratletud selliste ahelate A , B , C , ... pikkusega , kus , , ... . Kas seejuures on jutt maksimaalsest või minimaalsest pikkusest või hoopis mingist keskmisest pikkusest , on eraldi kokkuleppe küsimus . Teadmiste fundamentaalsus peaks vaadeldavas teadmiste hulgas olema määratletud selliste ahelate arvuga A , B , C , ... , F , G , kus , ... ... , ning G on antud ahelas ( seose fundeerituse omadusest tulenevalt ilmtingimata eksisteeriv ) “ lõpptähendus ” . Ilmselt võib siinjuures tugineda kõikide “ hindamiseks esitatud ” teadmiste ahelate arvu ning nende hulgast n-ö põhjani küündivate ahelate arvude võrdlemisele . Mida suurem või väiksem on teise ja esimese arvu suhe , seda suurema või väiksema põhjani küündivusega on meil tegemist . Teadmiste laius võiks olla määratud erinevate valdkondade arvuga , millest pärinevad kõnealuste teadmiste tähendused . Teadmiste puudulikkus on määratletav n-ö puudulike paaride arvuga ehk sellega , kui paljudele vaadeldavatest tähistest ei esitata tähendusi või vastupidi . Teadmiste määratlemine järjestatud paarina on põhimõttelise tähtsusega . Just siit kulgeb nii teoreetilisi kui ka praktilisi probleeme tekitav eraldusjoon , millest ühele poole jäävad sellised määratlused , milles tähenduste olemasolust küll kõneldakse , kuid nende konkreetset kokkukuuluvust määratletavate teadmistega ei fikseerita . Niisugust liiki määratluse ühe näite leiame M. Firebaugh' raamatust [ <arv> ] lk.<arv> : knowledge is information in a meaningful context . Teise näitena esitame siinkohal K. Kase ja P. Lorentsi artiklist [ <arv> ] pärit määratluse : teadmised on tähendusega tekstid . Niisugusel juhul osutub mingi konkreetne tekst teadmiseks , kui sellel tekstil leidub vähemalt üks tähendus . Samas jääb aga selgusetuks , milline see kõnealune tähendus ikkagi on ja kuidas seda kätte saada . Antud olukorda iseloomustab järgmine tekst : on irratsionaalarv ja on irratsionaalarv ja on ratsionaalarv . Dirk van Daleni raamatus [ <arv> ] lk <arv> on tõestatud , et niisugused irratsionaalarvud eksisteerivad . Seega on vaadeldaval tekstil vähemalt üks tähendus . Paraku , nagu märgib van Dalen , ei selgu mainitud tõestusest mitte ükski tüvenumber . Ei arvule ega arvule . Teisele poole ülalkirjeldatud eraldusjoonest peaksid jääma niisugused teadmiste määratlused , mille korral tähendused esinevad koos vaadeldavaid teadmisi esitavate tähistustega . Just selliseks osutus määratlus , mille kohaselt teadmiseks on hulkadest A ning B moodustatud järjestatud paar , kui ( ehk A tähenduseks on B ning B tähistuseks on A ) . Olemuselt samalaadseks võib lugeda mõistete määratlemist arvutites . Siinkohal sobib nimetada kontseptuaalses programmeerimises kasutatavaid kirjeldusi ( vt lähemalt E. Tõugu raamatust [ <arv> ] peatükke III ja IV ) , mille raames mingi uus mõiste kirjeldatakse selliste mõistete abil , mis on eelnevalt juba ära kirjeldatud või kokkuleppeliselt ei nõua kirjeldusi . Näiteks võtame lõigu bar : ( P<arv> : point ; P<arv> : point ; length : numeric ; angle : numeric ; rel<arv> : length<arv>= ( P<arv>.X - P<arv>.X ) <arv>+ ( P<arv>.Y- P<arv>.Y ) <arv> rel<arv> : ( P<arv>.Y-P<arv>.Y ) / length = sin(angle) ) Näeme , et sisuliselt seotakse siin tekst bar selle tähenduseks võetava tekstiga ( P<arv> : point ; ( angle ) ) . Viimase , lõigu tähenduseks oleva teksti sees on omakorda tähendust vajav osa , nimelt punkt ehk point . Selle tähendus antakse järgmiselt : point : ( X : numeric ; Y : numeric ) Pole raske märgata , et äsjakirjeldatud ( sisuliselt tähistusi ja tähendusi seostavate ) konstruktsioonide korral on täidetud mitmed seost iseloomustavad omadused , nagu näiteks fundeeritus , transitiivsus jt. See tähelepanek kinnitab vastavate valikute otstarbekust ning seose kasutuselevõtu ja teadmiste mõiste määratluse kooskõla praktikas rakendatavate asjadega . gap desc='references'&gt; Arvo Toomsalu , TTÜ arvutitehnika instituut SuperH-arhitektuuriga protsessortuum kiipsüsteemidele KIIPSÜSTEEMID JA PROTSESSORTUUMAD Firmade Hitachi ja ST Microelectronics koostöös on loodud kõrgjõudlusega SuperH-arhitektuuriga mikroprotsessor SH-<arv> . Uus RISC-mikroprotsessor , mis kasutab <arv>-bitiseid käsusõnu ja <arv>-bitiseid andmesõnu , on varasemate <arv>/<arv>-arhitektuuriga SuperH-protsessorite edasiarendus . <arv>/<arv>-arhitektuuriga RISC-mikroprotsessorite käsusõna pikkus on <arv> ja andmesõna pikkus <arv> bitti . Eriti populaarsed on sellise arhitektuuriga mikroprotsessorid mitmesugustes valmiksüsteemides . Lisaks Hitachile on paljud firmad välja töötanud oma <arv>/<arv>-protsessorpere sarju , näiteks FR-pere Fujitsul või M<arv>R/D Mitsubishil . Kuid nagu näitab praktika , on <arv>/<arv>-arhitektuuriga protsessoreil järjest raskem sammu pidada üha kõrgenevate nõuetega jõudluse osas . Iseäranis piiravalt toimib käsuformaadi lühidus just multimeediarakendustes . Võrreldes aga traditsiooniliste ( <arv>-bitiseid käsusõnu kasutatavate ) RISC-protsessoritega , vähendab <arv>-bitine käsuformaat programmide poolt hõivatavat mäluruumi . Eriti oluline on mäluruumi optimaalne kasutamine sardsüsteemides . Mitte väiksema tähtsusega pole ka töötlustulemuste täpsus . Suurema täpsuse saavutamiseks tuleb laiendada töödeldavate andmete kujutamisdiapasooni , st üle minna <arv>-bitistelt operandidelt <arv>-bitistele . Püüe parandada mikroprotsessori jõudlust ja arvutuste täpsust tingisidki selle , et SuperH-protsessoreis loobuti <arv>/<arv>-arhitektuurist ja mindi üle <arv>/<arv>-arhitektuurile . Protsessori arhitektuuri kavandamisel peeti silmas , et loodav mikrolülitus sobiks kiipsüsteemide protsessortuumaks . Protsessortuumi ( tuumprotsessoreid ) on mikroprotsessortehnikas juba pikemat aega edukalt kasutatud , eriti populaarsed on need sardkontrollerlülitustes . Harilikult täidab neis protsessortuuma funktsiooni mõne tuntud mikroprotsessorpere esindaja , mille struktuuri on optimeeritud lähtuvalt mikrokontrollereile esitatavaist nõuetest . Nii kasutab Motorola <arv>xx-pere mikrokontrollerites protsessortuumana universaalset <arv>-bitist mikroprotsessorit MC<arv> , Intel <arv>-pere <arv>-bitist mikroprotsessorit <arv> ja Zilog Z<arv>-pere <arv>-bitist Z<arv> . Analoogilist praktikat kasutab enamik firmasid , kes tegelevad mikroprotsessor- ja mikrokontrollerlülituste projekteerimise ning valmistamisega . Kiipsüsteemid on tähelepanu keskmesse tõusnud eriti viimasel ajal ja seda tänu edusammudele lausintegraallülituste valmistamise tehnoloogias . Terminiga kiipsüsteem ehk SOC tähistatakse ülikõrge integratsioonitasemega lausintegraallülitusi ( ULSI ) , kus ühele kristallile integreeritakse loodava süsteemi põhilised funktsionaalsed plokid : universaalsed protsessortuumad , signaaliprotsessorite tuumad , mälulülitused ( RAM , ROM , EPROM jms ) , liideslülitused ja mitmesuguseid erifunktsioone täitvad lülitused ( A/D- ja D/A-muundurid , kodekid jne ) . Kiipsüsteemide rakendamine kiirendab uute infotöötlussüsteemide evitamist , sest nende loomisel ei pea alustama enam mitte n-ö tühjalt kohalt , vaid kasutatakse ära eelnevalt projekteeritud ja põhjalikult kontrollitud suuremaid standardseid funktsionaalseid üksusi ( protsessortuumi , S/V-lülitusi , mälulülitusi jne ) . Mida mitmekesisemate funktsionaalsete võimalustega on standardüksuste kogum , seda odavamalt ja kiiremini saab uue kiipsüsteemi valmistada . Seni valmistatud kiipsüsteemidele on ette heidetud , et need on liialt protsessortuumakesksed . Protsessortuuma ümbritsevad funktsionaalsed üksused , eriti S/V-lülitused , on jäigad , st orienteeritud üksnes konkreetsele rakendusele . Püüdes vähendada uute kiipsüsteemide projekteerimise ja valmistamisega seotud ajalisi ja rahalisi kulutusi , on uuritud mitmeid viise , kuidas muuta süsteeme paindlikumaks , kergemini kohaldatavaks erinevaile rakendustele . Suured reservid peituvad kiipsüsteemide S/V-allsüsteemides . Laialdasemad peavad olema tarbija võimalused kiibisiseste riistvaraliste ressursside operatiivseks programselt juhitavaks dünaamiliseks ümberkorraldamiseks ( vastavalt valmiksüsteemi muutuvatele vajadustele ) . Uut suunda kiipsüsteemide arengus esindavad programmeeritavad kiipsüsteemid ehk PSoC-id . Programmeeritavas kiipsüsteemis on tähelepanu keskmes mitte niivõrd protsessortuum kui just programselt operatiivselt rekonfigureeritavad S/V-allsüsteemid . Üheks pioneeriks PSoC-ide väljatöötamisel on olnud firma Cypress MicroSystems Inc. Hitachi SH-<arv> mikroprotsessor esindab uue põlvkonna protsessortuuma , mis on ette nähtud moodsate kõrgjõudlusega kiipsüsteemide ülesehitamiseks . Mikrolülituse põhilisteks kasutusvaldkondadeks on mitmesugused digitaalsed televisiooniseadmed , mänguautomaadid , elektronmärkmikud , aga samuti võrgutööde ja lihtsamate infosüsteemide ohje jms. PROTSESSORI SH-<arv> ARHITEKTUURIST Esimesed <arv>/<arv>-arhitektuuriga RISC-protsessortuumad töötavad taktsagedustel <arv> kuni <arv> MHz . Tegemist on skalaarprotsessoriga , kus korraga töödeldakse üht käsku <arv>-astmelises käsukonveieris . Taktsagedusel <arv> MHz ulatub protsessortuuma jõudlus <arv>,<arv> MIPS-ni . <arv>,<arv> - m CMOS-tehnoloogias valmistatava protsessortuuma energiatarve on ligikaudu <arv> mW . Protsessortuuma ja tema toetusmoodulite ( DMA-kontroller , siluliides , mäluliides , S/V-liidesed ) vahelist infovahetust korraldab <arv>-bitine siin SuperHyway . Infoedastusi sooritatakse selles jaosedastuse põhimõttel , korraga saab üle kanda kuni <arv> andmebaiti . Siini tippsagedusel ( <arv> MHz ) saavutab SuperHyway edastuskiiruseks <arv>,<arv> GB/s . Joonisel <arv> on lihtsustatult kujutatud SH-<arv> protsessortuuma sisestruktuur . Selle keskseteks funktsionaalseteks üksusteks on : <arv> . <arv>-järgulisi operande töötlev püsipunkt/multimeediumi töötlusüksus ( IMU ) , mida toetab <arv>-registriline registrikogum ( IRGF ) . <arv> . Soovi korral võib protsessori varustada ujupunkttöötluse üksusega ( FPU ) koos selle juurde kuuluva individuaalse registrikogumiga ( FRGF ) . Viimane sisaldab kolmkümmend kaks <arv>-bitist registrit . FPUs esitatakse andmeid vastavalt standardile IEEE-<arv> , üksus tagab kvaliteetse <arv>D-graafika . <arv>. RISC-arhitektuurile iseloomulikud käsu- ( IC ) ja andmevahemälud ( DC ) on kumbki <arv>-kilobaidised . Virtuaalaadressidega juhitavad vahemälud on üles ehitatud <arv>-kanalilise moodulassotsiatiivse struktuuri alusel . Kui pöördusel vahemällu leiab aset möödalask , siis käivitub automaatselt pöördumine vastavasse aadressivahemällu . Iga vahemälulülitus on varustatud individuaalse täisassotsiatiivse aadressivahemäluga ( vastavalt ITLB ja DTLB ) . Aadressivahemälus säilitatakse kuni <arv> sagedamini kasutatavat põhimälu füüsilist aadressi . Möödalasul aadressivahemälus viiakse põhimälu füüsilise aadressi arvutamine läbi individuaalses mäluohjurilülituses ( MMU ) . Sõltumatute MMU-lülituste olemasolu lubab samaaegselt arvutada füüsilisi aadresse nii käskude kui andmete tarvis . <arv>. Käsuvõtu- ( IFU ) ja laade-salvestuseüksused ( LSU ) võivad teineteisest sõltumatult pöörduda SuperHyway-siini ( SHWBUS ) poole , viimane suudab teenindada kuni kolme andmeedastuse nõudlust . Side siiniga toimub läbi liideslülituse ( SHWI ) . <arv>. Protsessortuumas on pööratud tähelepanu testvahendite arendamisele . Kiipi on integreeritud testmoodul ( SHDEB ) , mida liidestab hostarvutiga liides ( DEBH ) . Protsessoris töödeldakse põhiliselt <arv>-bitiseid andmeid , mida säilitatakse registrikogumite registreis . Kõrvuti <arv>-bitiste andmetega saab opereerida ka <arv>-bitistega . Protsessortuum on varustatud piisavalt suure hulga registritega , eriti suur koormus registritele langeb nn. SHmedia-režiimis . Suur hulk registreid hõlbustab kompilaatori tööd ning loob eeldused genereeritava objektkoodi parema optimeerituse saavutamiseks . Mahukate registrikogumite puuduseks on harilikult suurem ajakadu , mis tekib kontekstide vahetamisel ( suureneb registrite arv , mille olek tuleb konteksti vahetusel esmalt päästa ja hiljem taastada ) . SH-<arv>-s on neid ajakadusid püütud vähendada seeläbi , et registrikogumeis jaotatakse registrid alamkogumeiks . Igas alamkogumis on kaheksa registrit . Alamkogumid varustatakse nn. kasutatuse bitiga . Kui mingis alamkogumisse kuuluvas registris informatsioon muutub , siis omistatakse kasutatuse bitile loogiline väärtus “ <arv> ” . Kontekstivahetusel arvestatakse ainult neid alamkogumeid , kus kasutatuse bitt oli olekus “ <arv> ” . Milliseid registrikogumeid sisaldab protsessor SH-<arv> , näitab joonis <arv>. Kuuskümmend neli <arv>-bitist üldregistrit ( R<arv> - R<arv> ) moodustavad registrikogumi ( GPIB &amp; SIMD REG ) , mida kasutatakse püsipunkt- ja multimeediumioperatsioonide sooritamisel . Kui protsessortuum sisaldab ka ujupunkttöötluse üksuse , siis kuulub viimase koosseisu kuuekümne neljast registrist ( FR<arv> - FR<arv> ) koosnev registrikogum ( FP REG ) . Erinevalt teistest registritest on ujupunkttöötlusel kasutatavad registrid <arv>-bitised , sh ka olekuregister ( FPSCR ) . Käsukonveieri efektiivsemale talitlusele aitab kaasa kaheksast registrist ( TR<arv> - TR<arv> ) koosnev hargnemiste sihtaadresside registrite kogumik ( TRF ) . Nimetatud registreisse salvestatakse siirdekäskude aadressid . Küllaltki mahukas on protsessori juhtregistrite kogum , see jaguneb kaheks - superviisori poolt juhitav kogum ( CNTR REGB ) ja kasutaja poolt juhitav kogum ( CNTR REGV ) . Protsessori juhtseadmega on tihedalt seotud <arv>-bitine käsuloendur ( PC ) . PROTSESSORI TALITLUSREŽIIMID Protsessortuuma SH-<arv> väljatöötamisel lähtuti selle programsest ühilduvusest varasemate SH-pere liikmetega . Nii tekkiski kaks talitlusrežiimi - SHmedia ja SHcompact . SHmedia on uus omaette käsustikuga talitlusrežiim , mida kasutatakse püsi- ja ujupunkttöötlusel , aga samuti multimeediumi- ja signaalitöötlusel , s.t juhtudel , kui esmatähtis on protsessori võimalikult kõrge jõudluse saavutamine . SHcompact-režiimis on tarvitusel vaid need käsud , mida omasid varasemad SH-mikroprotsessorid . Seeläbi saab protsessortuum kasutada tarkvara , mis oli juba eelnevalt loodud SH-pere tarvis . Protsessori talitlusel tuvastab käsudekooder jooksvalt , kas sisenenud käsk kuulub SHmedia või SHcompact käsustikku . Sõltuvalt käsust toimub dünaamiline ümberlülitumine ühelt režiimilt teisele . Töödeldavad programmid võivad sisaldada käske mõlemast käsustikust . Siirdel ühelt režiimilt teisele pole vajadust protsessori siseregistreis olevat informatsiooni kopeerida . SHmedia käsustik kasutab nelja erinevat käsuvormingut . Põhiline erinevus vormingute vahel seisneb käsus vahetu operandi kasutamises ja selle formaadis ( võib olla kas <arv>- , <arv>- või <arv>-bitine ) . Joonisel <arv> on näidatud SHmedia käsu üldistatud vorming . Käsuvormingus on käsuväljale ( OP ) eraldatud kuus bitti , nende arvu võib laiendada veel täiendava <arv>-bitise välja abil ( EXT ) . Kokku kuulub SHmedia käsustikku <arv> käsku . Arvestades aga võimalikke funktsionaalseid täiustusi tulevastes protsessortuumades , lisati SH-<arv> käsuvormingusse veel täiendav neljabitine reservväli ( RES ) . Olulisemad erinevused SHmedia ja SHcompact talitlusrežiimide vahel seisnevad järgmises : HARGNEMIS- JA SIMD-KÄSKUDE TÖÖTLUSE KORRALDUS Kõrgjõudlusega mikroprotsessoreis toimub infotöötlus sügavates mitmeastmelistes käsukonveierites . Käsukonveierite efektiivsust mõjutavad oluliselt hargnemised töödeldavais programmides , sest siirdeoperatsioonide korral tekib sageli vajadus ümber laadida käsukonveieri sisu . Kaasaegsetele kõrge taktsagedusega mikroprotsessoreile on iseloomulikud nn peeneteralised käsukonveierid . Mida peeneteralisem on konveier , seda suuremad on ajakaod , mis kaasnevad konveieri ümberlaadimisega , seda märgatavam on protsessori jõudluse langus . Kuigi SH-<arv> arhitektuuriga protsessoris rakendatakse vaid seitsmeastmelist käsukonveierit , pöörati selle väljatöötamisel erilist tähelepanu hargnemisviiviste minimeerimisele . Nii kasutatakse SHmedia-režiimis originaalset jaoshargnemist ( split-branch ) . Hargnemisoperatsioon jaotatakse kaheks , kasutades kahte eraldi käsku . Esimene neist valmistab ette hargnemise sihtaadressi , teine siirdab infotöötluse sihtaadressiga määratud käsule . Hargnemist ettevalmistav käsk salvestab sihtaadressi registrikogumi TRF ühte kaheksast registrist . Tegelikult algab aga hargnemiste ettevalmistamine juba programmi kompileerimisel , kus kompilaator märgistab nii hargnemist ettevalmistavad kui ka hargnemist läbiviivad käsud erilise tunnusbitiga , nn likely-bitiga . Hargnemiskäskude märgistamisel lähtub kompilaator programmi eelneva analüüsi tulemustest , st prognoosib programmi võimalikku käitumist . Hargnemist ettevalmistavas käsus omistatakse likely -bitile loogiline väärtus “ <arv> ” , kui eeldatakse , et siire leiab aset ( programmi edasine jätkamine toimub siirdeaadressiga määratud mälualast ) . Kui hargnemist ettevalmistavas käsus on likely-bitt aktiveeritud ( loogilises olekus “ <arv> ” ) , siis see kohustab programmi jätkama aadressilt , mille väärtus on kantud hargnemise sihtaadressi vastavasse registrisse . Mitteaktiveeritud tunnusbiti korral jätkub programmi töötlus tavalises korras , st aadressilt , mis vastab käsuloenduri järgmisele ( PC : = PC+<arv> ) olekule . Kui kompilaator prognoosib hargnemisel käskude edasise kulgemise õigesti , siis tingimusliku siirde korral ei teki konveieris ajakadusid ( konveieri mullistusi ) . Erinevalt klassikalisest staatilisest hargnemiste prognoosist vähendab jaoshargnemise meetod hargnemise sooritamiseks kuluvat aega . Varakult ettevalmistatud sihtaadresse säilitatakse ülikiires sihtaadresside registrikogumis , mitte aga nagu tüüpiliselt - vahemälus . Osutub prognoos aga vääraks , siis on paratamatu konveieri ümberlaadimine koos kõigi sellest johtuvate ajakadudega . Viimasel juhul peab arvestama , et enne kui protsessoris avastatakse prognoosi väärus , jõuab käsukonveierisse siseneda veel kaks ( uut ) käsku . SH-<arv> protsessoris ei toimu hargnemiste dünaamilist prognoosimist . Protsessori käsustiku omapäraks on seegi , et kuna ta sisaldab hargnemiskäske , mille täitmisel sooritatakse võrdlusoperatsioone , siis käsustikus puuduvad eraldi võrdluskäsud . Oluline osa jõudluse suurendamisel SH-<arv> arhitektuuriga protsessoris on nn. SIMD-käskudel . Tegemist on käsutüübiga , mis võimaldab ühes käsus samaaegselt töödelda erinevaid andmeüksusi . Joonisel <arv> on näidatud , kuidas toimub SIMD-tüüpi liitmiskäsu MADDW täitmine . Liidetavad arvud on salvestatud <arv>-järgulisse registritesse OP<arv> ja OP<arv> . Kummaski registris on neli <arv>-bitist kahendarvu ( andmeüksust ) , Op<arv>-s vastavalt H , G , F ja E ning OP<arv>-s D , C , B ja A. Üksikud andmeüksused liidetakse neljas rööpselt töötavas summaatorlülituses ( SUM<arv> - SUM<arv> ) . Saadud tulemused salvestatakse <arv>-järgulisesse tulemiregistrisse RES . SIMD-tüüpi operatsioone võib sooritada kas kaheksa <arv>-bitise või nelja <arv>-bitise või kahe <arv>-bitise andmeüksusega . SIMD-tüüpi käskudega on läbi viidavad enamik traditsioonilisi aritmeetilisi , loogikalisi ja nihkeoperatsioone . Samuti saab taoliselt töödelda andmeid ka MAC-tüüpi käskudes , mida kasutatakse sageli signaalitöötluse programmides . VAHENDID PROTSESSORTUUMA TESTIMISEKS Et protsessortuumad on kiipsüsteemides kesksed lülitused , siis on kiipsüsteemi talitlusvõime tagamisel oluline protsessorite kõrge töökindlus . Kiipsüsteemi tehnilise seisundi operatiivseks kontrolliks lisatakse neisse erilülitusi , mille abil saab testida nii üksikuid funktsionaalseid üksusi kui ka kogu kiipsüsteemi tervikuna . SH-<arv> arhitektuurses lahenduses on kesksel kohal süsteemi integreeriv süsteemisiin SuperHyway , mille vahendusel suhtlevad omavahel süsteemi kuuluvad funktsionaalsed üksused . SuperHyway vahendusel toimub ühtlasi ka süsteemi testimine . Kiipsüsteemide struktuurides lähtutakse põhimõttest , et selle kontrolli saaks läbi viia süsteemisiseste vahenditega . SH-<arv>-s kasutatakse spetsiaalset SH-silurit . Siluri talitlus toimub süsteemis käitatava rakendustarkvara suhtes läbipaistvalt . SH-siluri abil saab tekitada katkestusi protsessortuuma tarvis , jälitada andmepakette jms. Tema vahendusel saab lugeda ja salvestada informatsiooni kõigist kiipsüsteemi adresseeritavaist üksustest . Protsessortuumas sisaldub testmoodul SHDEB , mille abil saab jälgida infoliiklust kuni kaheteistkümnes kontrollpunktis . Protsessortuumavälise keskkonna toel saab jälgida tuumas kulgevaid protsesse . Süsteemis toimuvate protsesside detailsemaks analüüsiks on ette nähtud välise siluhostsüsteemi rakendamine . Viimase ülesandeid täidab tavaline piisavate riistvaraliste ressurssidega ja eritarkvaraga varustatud personaalarvuti . Väline siluhostsüsteem suhtleb kiipsüsteemi kuuluvate üksustega läbi kiibisisese SH-siluri . Firmad Hitachi ja ST Microelectronics planeerivad SH-<arv> protsessortuumi rakendada oma kiipsüsteemides SH<arv> ja ST<arv> . Uued mikrolülitused annavad esmase hinnangu SH-<arv> arhitektuuriga protsessortuumadele , nende sobivusele keskmise keerukusega kiipsüsteemidega . Kui protsessortuumad end seal õigustavad , siis on tõenäoline , et firmad jätkavad SH-<arv> arhitektuurse baaslahenduse edasist täiustamist . Ilmselt seatakse eesmärgiks pakkuda tarbijatele kõige erinevamate rakenduste tarbeks sobivaid optimeeritud kiipsüsteeme . Kalle Tammemäe , Tallinna Tehnikaülikool -Infotehnoloogia Kolledž Kuidas saada kiipsüsteemi disaineriks Kuidas saada kosmonaudiks on kõigile väga selge , paraku ei jagata kosmonautide ameteid tööjõuturul ja kaunid unistused taanduvad visa järjekindlusega tugitoolikosmonautikaks . Vastandina valgusaastate maailmale on kiipsüsteem kosmos mõõtmetelt mikro- või nanomastaabis , kuid ümbritseb meid tükkhaaval tubades kümnete valgusdioodide tulukeste varjus või õues mobiilside rägastikus . See on lõputu tööväli ning digitaaltehnoloogia- ja mobiilsidefirmad on valmis kuitahes karmideks läbirääkimisteks tasemel riistvaradisaineri töölesaamiseks . Paraku kipub vaba kiibidisainer olema samasugune haruldus nagu känguru Gröönimaal , vaatamata vastavatele õppeprogrammidele ülikoolides ja tehnoloogiainstituutudes . Milles asi ? IT on ju tunnustatud prioriteet ? Konks on sellessamas vastandite ühtsuses - riistvara ja tarkvara . Näiteks paat on igati funktsionaalne ja ujuv objekt ( riistvara ) , aga alles siis , kui sellesse istub inimene ( tarkvara kandja ) ja haarab aerud , omandab hulpimine mõtte , ja kohti , kuhu minna , on lõputult . Lisaks näeb tarkvarakirjutaja oma töö tulemust peaaegu kohe ning untsuläinut on suhteliselt kerge parandada ( möönan , et on väga erinevat tarkvara ) . Riistvaradisainer töötab aastaid laboris ja saab valmis kiibi , mis väljastpoolt on samasugune nagu tuhanded teised kiibid maailmas . Seda väärtustama hakkavad hoopis teised , peites seejuures kalli kiibi plast- või metallkorpuse sisse , et see mingil juhul kasutajale silma ei hakkaks . Samal ajal on eksimuse hind ränk - ebaõnnestunud kiip annab kuid kestva ja miljoneid maksva tagasilöögi , mille vältel mõni teine tegija turu kindlalt ära napsab . See töö nõuab sügavaid teadmisi paljudest digitaaldisainiga seotud valdkondadest ning teadmiste täpset , kontrollitud ja kindla peale kasutamist . Disainiruumi , s.o võimalike lahenduste hulga suurus ei tähenda vabadust üksikküsimuste lahendamisel - tehnoloogia on füüsikalisel tasandil jäik . Tehnoloogia lubab panna kiibile terveid süsteeme mahus kümneid ja sadu miljoneid transistore , millest tulebki termin kiipsüsteem ( SoC - System on Chip ) . Tehnoloogilise võimaluse ruumi ärakasutamine on võimalik vaid meeskonnatööna , sest valdkondade ja vajalike teadmiste hulk ületab mäekõrguselt ühe inimese poolt õpitava ja kahe käega tehtava . Küllap võib leida kümneid muidki põhjendusi , miks elektroonika- ja digitaaldisainerite koolitamine kulgeb visalt ja vaatamata hiilgavatele sisseastumisnumbritele jätkub lõpetamisel spetsialiste vaid ühe käe sõrmede jaoks . Kiibidisaineriks ei saada isa/ema töö kõrvalt või koolis arvutit mängides ja hiljem häkkides , vaid just nimelt selle visadust nõudva <arv>+<arv>+<arv> programmi alusel ( bakalaureus+magister+doktor ) . Eestis valmistatakse riistvara projekteerijaid ette TTÜ infotehnika ja süsteemitehnika teaduskondades . Probleemiks on see , et kodumaiseid riistvara projekteerija töökohti polegi nii palju ja see hägustab motivatsiooni . Tunduvalt mahukamad programmid on käivitunud põhjamaades - Rootsis , Soomes , Taanis - ja mujal , Ameerika “ ränioru ” ülikoolidest rääkimata . Allakirjutanul on olnud otsene kokkupuude õppejõuna Kuninglikus Tehnoloogiainstituudis Stockholmis ( KTH ) <arv>. aasta sügisel käivitatud rahvusvahelise kiipsüsteemi disaini magistriprogrammiga “ System-on-Chip Design ” ning järgnev puudutabki sealkogetut . Programmi eestvedajaks ja kandjaks on Elektroonikasüsteemide Disaini Labor ( Electronic System Design Laboratory e. ESD ) professor Hannu Tenhuneni juhtimisel . Esialgne plaan leida kursustele <arv> tudengit täideti , kusjuures tulemus oli tähelepanuväärse rahvusliku koosseisuga . Esindatud on eelkõige Aasia maad ( Hiina , Sri Lanka , Pakistan , Türgi ) , alles seejärel märkab nimekirjast kolme rootslast ja üht leedulast . Tegu on rahvusvahelise kursusega ja inglise õppekeelega , aga niivõrd tasakaalustamata rootsi tudengite huvi , õigemini huvipuudus , on tähelepanuväärne . Üliõpilaste lähtetase on erinev ja maade järgi ei joondu , aga kõik on motiveeritud saama magistrikraadi kiipsüsteemi disaini alal . Positiivne on see , et tudengid saavad täiendava kogemuse , töötades koos erineva rahvusliku ja kultuurilise tagapõhjaga kaaslastega , ning on seepärast hästi ette valmistatud rahvusvaheliste firmade segameeskondadega liitumiseks . Et üliõpilastel on põhi- ja alusained koduülikoolides läbitud , siis keskendutakse õppes ainult eriainetele . Lektoriteks on nii ESD oma professorid/dotsendid kui välislektorid mitmetest põhjamaadest , Eesti kaasa arvatud ( kokku osales programmis TTÜ-st kolm lektorit ) . Enne magistritööd tuleb tudengitel läbida järgmised kursused ( osa neist valikained ) : Süsteemide modelleerimine ja valideerimine ( System modeling and validation ) Kiipsüsteem ja vastastikku seotud arhitektuurid ( SoC and interconnect centric architectures ) Sardsüsteemid ja tarkvara ( Embedded system &amp; software ) Submikromeetrilised digitaalahelad ( Deep submicron digital circuits ) Raadiosagedus- ja segasignaalid ( RF and mixed signal ) Digitaalsüsteemide tehnokäsitlus ja pakendsüsteem ( Digital System engineering and System-on-Package ) Testitavus ja tõrkekindlus ( Testability and fault tolerance ) Disaini taaskasutamine ja intellektuaalne omand ( Reusability and intellectual property ) Rakendusspetsiifiliste integraalskeemide disain ( ASIC des ign ) Disaini metodoloogia ja projekteerimisvahendid ( Methodology and CAD tools ) Magistriprogrammi kogumaht on <arv> arvestuspunkti , millest <arv> kogutakse aasta jooksul ülaltoodud kursustel ning <arv> punkti annab poole aastaga tehtav magistritöö . <arv>. aastaks on kuulutatud välja vastuvõtt juba <arv> tudengile hetkesuundi arvestava modifitseeritud sisuga rahvusvahelises magistriprogrammis “ Kiipsüsteem vara mobiilsele Internetile ” ( Socware for Mobile Internet ) . Sellesse on lisandunud täiendav kursus mobiilse Interneti süsteemidest ja seadmetest ning saadud tagasisidele toetudes on korrigeeritud teiste kursuste sisu ja mahtusid . Osavõtjate otsing käib üle maailma ja seekord on kindlasti plaanis leida enam tudengeid Lääne- ja Kesk-Euroopast , levitades infot nii personaalselt , elektronposti kui ka tiguposti teel . Rootsi seisukohalt on tegemist igati kasuliku programmiga , sest üliõpilase lähtetase ( minimaalselt kolm aastat bakalaureuseõpet ) on saavutatud mujal , teise riigi haridusprogrammide arvel . Kui kasvõi kolmandik leiab pärast kraadi kaitsmist tööd Rootsis ( valdavalt Ericssonis ) , siis on programmiga seotud ekstrakulutused end kuhjaga tasa teinud . Nimelt on programm õppijale tasuta , maksta tuleb vaid Stockholmis elamise eest , mis on hinnanguliselt kuni <arv> SEK-i kuus . Organisatsiooni Rootsi Ülikool ( Swedish Institute ) kaudu on võimalik saada stipendiumi kuni <arv> SEK-i kuus . Pöördudes tagasi riigi juurde - siis napilt kaks aastat koolitust , ja värske spetsialist tööst ülekoormatud kõrgtehnoloogilise riistvaradisaini osakondadele on tagatud . TTÜ ja KTH vahelise koostööprogrammi EITN ( Electronics for Information Technology Network ) raames on võimalik eraldada stipendiumid kolmele TTÜ kraadiõppurile osalemiseks magistriprogrammis “ System-on-Chip ” . Huvilistel tuleks kiiresti ühendust võtta alltoodud viita kasutades otse prof. Hannu Tenhuneniga . Sarnased magistriprogrammid on käivitatud Taanis , seda riistvara suunal integraalahelate disaini ja arvutipõhiste süsteemide õppekavadega . Nagu Rootsiski , on ka Taani programmid õppemaksuvabad , elamiskulud Kopenhaagenis aastas hinnanguliselt $ <arv> - <arv>. Stipisaamise võimalused on Taanis veidi ahtamad kui Rootsis . Kas sellest piisab ? Kaugeltki mitte , sest vajadus on suurem ja konkurents naaber- ning suurriikidega karm . Lisaks täiesti uutele kiipsüsteemi disaineritele on osa Euroopa maades väljaõpe suunatud juba riistvaradisaini alal tegijatele . Need on tasulised ja üsna kallid kursused , kuid sellel alal ilma pidevõppeta ei saagi . Püüdes matkida teedrajavaid ja edukaid põhjamaid on kiusatus siingi käivitada vastavaid rahvusvahelisi programme . Paraku on sellega raskusi , sest ehkki elamine Eestis võib olla mitu korda odavam kui põhjamaade suurlinnades , pole meil sellist kiibidisainiga tegelevat hiidfirmat , mis õppe kinni maksaks . Aasia inimressurssidest võib vabalt leida kaheks aastaks paarkümmend reisihimulist ja uue keskkonna aldist õppurit , aga nende jaoks pole Eestis piisavalt enesehinnagule vastavalt tasustatud ja erialast tööd . Teiselt poolt - paariaastase väljaõppega seotud kulutused tasuvad end kiiresti ära , kui genereeritav oskuste potentsiaal pluss odavamad jooksevkulud toovad riiki sisse kõrgtehnoloogilisi investeeringuid ja sellest tulenevaid uusi töökohti . Keegi peab olema esimene ja riskima , sest järeltulijaid leidub alati . Koostöö juba käib ning lähimal ajal on oodata europrojektide all uute kiipsüsteemi õppeprogrammide teket , mis seovad juba mitmeid ülikoole , TTÜ kaasa arvatud . Viiteid : Kuninglik Tehnoloogiaülikool Rootsis Taani Tehnikaülikool Tampere Tehnoloogiaülikool Rootsi Instituut Taivo Kangilaski , TTÜ automaatikainstituudi teadur Suurte süsteemide kirjeldamiseks vajalikud valdkonnad <arv>. SISSEJUHATUS On olemas mitmesuguseid võrke , nt kanalisatsiooni- , teede- , lennuliinide- , side- , elektrienergia ülekande- jm võrgud . Võrke analüüsides näeme , et kõik nad koosnevad füüsilistest või loogilistest sõlmedest ning nendevahelistest ühendustest , kusjuures iga võrguelemendi jaoks on määratud isikud või firmad , kes vastutavad selle korrasoleku eest . Selles artiklis vaatleme suuri süsteeme nagu elektrienergia genereerimise/jaotamise süsteemid ja sidesüsteemid , mis sisaldavad väga suurt hulka elemente . Mida suurem on võrk , seda rohkem on temas mitmesuguseid elemente ning seda suurem on nende elementide käiduga seotud personal . Seetõttu on meil sageli tegu keerukate struktuuridega , mis võivad üsna sageli muutuda . Kõikide võrgus tehtavate tööde kooskõlastamiseks on vaja väga paljude spetsialistide seisukohti ning otsuseid ja seda seetõttu , et soovitud võrguelemendi seadistamiseks/remondiks tuleb tihti teised võrguelemendid välja lülitada . Tööde planeerimisel on vaja leida optimaalne plaan , silmas pidades kahte olulist asjaolu : <arv> ) tuleb tagada võrgu turvaline töörežiim , nii et teenuste kasutajate jaoks oleks võrgu seisakuid minimaalselt <arv> ) sedistus- ja remonditöid tuleb teha sagedamini , et avariide tekkimise võimalus oleks väiksem . Et võrgud töötavad reaalajas , siis on oluline ka info operatiivne kättesaadavus igal ajahetkel ning selle pidev uuendamine kõigi isikute jaoks , kellele see on oluline , isiku enda asukohast sõltumata . Järgnev artikkel annab ülevaate sellest , milliseid valdkondi peaks üks võrguhaldustarkvara katma . <arv>. VÕRGU HALDAMISEKS VAJALIKUD VALDKONNAD Tervikliku võrguhaldustarkvara loomiseks tuleb kindlaks määrata käsitletavad tegevusvaldkonnad . Need on : protsessi kui terviku haldamine infovahetus teiste infosüsteemidega firmakesksus koostöö ettevõtte kõigi allüksuste ja allettevõtetega kohandatavus igale ettevõtte struktuurile piiramatu kasutajate hulk aruannete mootor andmete hajutatud arhiveerimine operatiivtööle kehtestatud nõuded laiendatavus teistesse valdkondadesse . Vaatleme neid kümmet valdkonda eraldi elektrienergia ülekande suhtes . <arv>.<arv>. PROTSESSI KUI TERVIKU HALDAMINE Protsessi all mõistame siinkohal sündmuste ahelat võrguelemendi defekti/seisaku avastamisest ja/või väljalülitumisest kuni selle defekti/seisaku likvideerimiseni , selle põhjal tehtavat analüüsi ning järgnevate profülaktiliste tööde planeerimist analüüsi tulemuste põhjal . Kui vaadelda antud protsessi tarkvara seisukohast , tuleb eristada kahte tahku : võrguelement võrguelemendi käiduga seotud personal . Järgnevalt vaatleme lähemalt neid protsessi tahke ning moodust , kuidas neid omavahel siduda . <arv>.<arv>.<arv>. VÕRGUELEMENT Protsessi kirjeldatakse sündmuste kaudu . Sündmus on mingi asetleidnud/asetleidev fakt , mis fikseeritakse . Sündmused on seotud võrguelementidega või võrguelementide gruppidega . Võrguelemendiks võib olla nii seade kui ka võrgu tööd toetav rajatis , maa-ala vms. Näiteks energeetikas on võrguelemendid jagatavad järgmistesse gruppidesse : soojusseadmed soojuslikud kaitseseadmed releekaitseseadmed alajaamaseadmed liinid ja kanalid ( elektriülekandeliinid , kaablid , sidekanalid jms ) sideseadmed mõõteseadmed ja mõõtmised ( mõõtepunktid , arvestid jms ) rajatised muud ( geograafilised elemendid , nt jõed , kraavid , ristumised jms ) Toodud loetelu on siiani piisavaks osutunud , kuid sõltuvalt vajadustest on seda lihtne täiendada ( nt kinnistutega , transpordipargiga jne ) . Selleks et sündmustepõhine analüüs võimaldaks tulemusi kasutada tööde planeerimisel ja analüüsimisel , püüame need sündmused salvestada võimalikult detailselt . Meie mõistes kirjeldab sündmust : võrguelemendi üleminek ühest olekust teise sündmuse elemendi tüüp ( rike , defekt , väljalülitamine , töö , reservid ) sündmuse elemendi seotus teis(t)e seadme(te)ga sündmuse elemendi geograafiline asukoht sündmuse elemendi iseloom ( avariiline , plaaniline , mitteplaaniline ) sündmust esilekutsuvad/esilekutsunud põhjused sündmuse toimumise soovitud/plaaniline/tegelik aeg sündmusega seotud isikud sündmusega seotud normatiivaktid ja muud dokumendid lisainfo vaba selgitava teksti näol . Järgides toodud loetelu , võime juhtunut hiljem piisava täpsusega kindlaks teha , analüüsida ning sündmusest tingitud edasist tegevust kavandada . Kasuks tuleks ka ekspertsüsteem koos treeningsimulaatoriga , mis modelleeriks sündmusi , pakuks olukorrast sõltuvalt lahendusi reaalajas ning oleks võimeline prognoosima avariisid . Kui vaadelda abstraktset võrku , siis on kõik sündmused seotud võrguelementi kirjeldavate andmetega . Et saada sündmuse kirjelduse olemusest täpsemat ülevaadet , vaatleme , mida oleks vajalik võrguelementi iseloomustavate andmete kirjeldamiseks : elementi ennast elementide horisontaalset seotust teiste elementidega elementide vertikaalset seotust teiste elementidega dünaamiliselt loodavaid/muudetavaid elemente kirjeldavaid parameetrite tabeleid elementidega seotud mõõtmisi ( energia , võimsus , pinge , vool , temperatuur jne ) elemendiga seotud dokumentatsiooni elemendiga seotud sündmusi elemendiga seotud isikute kontaktandmeid ( operatiivõigustega isikud , käidu korraldajad , tööde teostajad , elemendi omanik , teenuse saaja ) partnerfirmade kontaktandmeid remontide põhjusi vigastuste , seisakute ja rikete põhjusi närvivõrke , hägusate reeglite baase avariide prognoosimiseks ekspertsüsteemi reeglite baase käitumisjuhisteks tava- ja eriolukordades . Võib arvata , et selline andmegrupp oleks piisav kvaliteetse planeerimistarkvara loomiseks . <arv>.<arv>.<arv>. VÕRGUELEMENDI KÄIDUGA SEOTUD PERSONAL Nagu öeldud , kirjeldatakse protsessi sündmuste abil . Võrguelementide korral moodustub sündmustest võrguelemendi käidu jaoks terviklik protsess . Sündmuste haldamiseks on vaja inimesi ja/või roboteid . Selleks on projekteeritud kolmemõõtmeline kasutajate haldusstruktuur , mis vastab seadme käidu tagamiseks vajaminevale operatiivjuhtimise struktuurile . Esimene mõõde - on defineeritud nn sõlme tase . Sõlm on kas mingi funktsionaalne üksus , osakond või kogu ettevõte . Sellel abstraktsiooni tasemel saame sõlmedevahelisi sidemeid määratledes/keelates kirjeldada sündmuste kooskõlastuse protsessi . Niiviisi on kirjeldatav sõlmedevahelise seotusega võrkstruktuur . Teine mõõde - on defineeritud nn sõlme kihtide tase . Kiht on samuti mingi funktsionaalne üksus , osakond või ka ettevõte . Iga sõlm koosneb vähemalt ühest kihist . Kihtide erinevus sõlmedest seisneb selles , et kihte on võimalik kirjeldada ainult puukujulise hierarhiana , s.t igal sõlmel on ainult üks kõige kõrgem kihi tase . Iga taseme juures on võimalik kirjeldada funktsionaalseid tasemeid ( nt dispet ? erid , administraatorid ) , mis on seotud ainult vastava tasemega . Kolmas mõõde - on defineeritud nn töökohtade tase . Töökoht on funktsionaalsete tegevuste kogum , mis asub sõlme kihil ning on rakendatav töökohal määratletud kasutaja(te)le . Igal sõlmetaseme kihil peab olema kirjeldatud vähemalt üks töökoht . Kõik töökohad on liigitatud ning nende jaoks on võimalik määrata nende funktsionaalsed omadused . Üldjuhul on kasutatavad järgmised töökoha liigid : lihttöötaja - hoolitseb andmete , sündmuste esmase läbivaatamise ja analüüsi eest otsustaja - vastutab andmete ja võrguelemendil tehtavate hooldetööde tegemise eest dispet ? er - hoolitseb sündmuste avamise ja sulgemise eest vaatleja - sekkumisõigusteta töökoht , mille abil võib jälgida süsteemis toimuvat . Et suured võrgud on tihti keeruka struktuuriga , peab tarkvara administraatoril olema võimalus luua uusi töökohtade liike ning määrata nende funktsionaalsus . See tagaks süsteemi parema juhtimise ja parandaks jälgitavust ( nt dispet ? eri töökoha funktsioonide jaotamine lülimisõiguse järgi jms ) . Et tihti on tegu väga mitme erineva funktsionaalsusega ning et vähendada sel teel tekkivate töökohtade liike , tuleb kasutusele võtta järgmine funktsionaalsuste jagamise süsteem : kasutajale määratavad funktsionaalsused sõlmele määratavad funktsionaalsused töökoha liigile määratavad funktsionaalsused , kusjuures need funktsionaalsuste grupid välistavad üksteist ning nad on kasutatavad loetelus toodud prioriteetsusega - kui kasutajale on määratud mingid funktsionaalsused , siis ei arvestata sõlmele ja töökoha liigile kirjeldatud funktsionaalsusi jne. <arv>.<arv>.<arv>. NENDE KAHE TAHU SIDUMINE Eelnevalt kirjeldasime protsessi kahte tahku - võrguelemendipõhist lähenemist ja võrguelemendi käiduga seotud personalipõhist lähenemist . Haldussüsteemist moodustub tervik siis , kui need kaks tahku omavahel tervikuks siduda . Selleks töötasime välja võrguelemente iseloomustavad seosed käidu korraldajatega , võttes kasutusele kuuluvuse mõiste . Kuuluvus on võrguelemendi omadus luua ühendus teda puudutavate töökohtade tasemete ja/või sõlmedega . Läbi kuuluvuste on võimalik võrguelemendiga siduda iga just temale iseloomulik operatiivjuhtimise struktuur . Võrguelemendi käidu poolt vaadatuna pakume kuuluvuse funktsionaalsete omadustena välja järgmised omadused : operatiivsel teadmisel - kõrgeim otsustamise tase operatiivsel juhtimisel - seadme dispet ? erjuhtimine operatiivsel teenindamisel - vahetu lülimiste teostaja informatiivsel teadmisel - seadmel tehtavast/planeeritavast teatamise kohustus haldamisel - seadme eest vastutav insener-tehniline personal ( ITP ) teenindamisel - seadet hooldav , teenindav personal seadme omanik - seadme omaniku defineerimine e-teavitus - seadmel toimuvast informeeritakse e-posti ja/või SMS-sõnumi vahendusel teenuse saaja - lõppkasutaja , kes teenust tarbib . Kui määrata kuuluvused ainult sõlmede tasemetele , liiguvad esitatud hooldetööde taotlused ( sündmused ) vastava sõlme taseme juurde ning , arvestades kuuluvusi ning tasemetevahelist hierarhiat , tasemete piires edasi . Sõlmest väljuvad sündmused alati kõrgeima taseme vastavat funktsionaalsust omava(te) töökoha(de) kaudu . Kui sõlme tasemetele ei ole kuuluvusi kirjeldatud , sisenevad sündmused oma liikumise ahelas sõlme kõige kõrgema taseme esimese töökoha juurde , kus kasutaja määrab edasi sündmuse liikumise järgmise sammu . Kõigil töökohtadel , millele on määratud vastav funktsionaalsus , peab olema võimalik kooskõlastada sündmusi iga sõlmega , mis sisaldavad mingit võrguelemendiga seotud kuuluvust , s.t viia sündmuse kooskõlastus ajutiselt väljapoole temale defineeritud liikumise ahelat . Nimetatud funktsionaalsus tagab sündmuste kooskõlastamisel süsteemi efektiivsema toimimise , sest kuigi ei olda seotud vastava võrguseadme käiduga , ollakse tegevad ikkagi ühes terviklikus ülekandevõrgus . <arv>. <arv>. INFOVAHETUS TEISTE INFOSÜSTEEMIDEGA Üheks võrguhaldussüsteemi juurde kuuluvaks funktsionaalsuseks on kindlasti teiste infosüsteemidega liidestamise võimalus . Siin tuleb eristada kahte tüüpi liideseid : sisseehitatud - tarkvaras jäigalt paika kodeeritud liides administraatori poolt koostatav - tarkvara enda vahendite abil tarkvaraadministraatori poolt loodav liides . Sisseehitatud liidesed on tarkvarasse jäigalt kodeeritud liidestuseks mingi konkreetse infosüsteemiga . Siin mõeldakse ka andmete üleviimist sellistesse üldlevinud süsteemidesse nagu MS Excel , MS Word jne. Samuti peab tarkvara administraatoril olema võimalus kirjeldada lihtsamaid liidestusi teiste infosüsteemidega . Näiteks rakenduse administraatoril võiks olla võimalus luua määratletud võtmesõna piirides e-posti liidese baasil e-posti vorme , mida süsteem on võimeline ära tundma ning millele ta oskab vastata . <arv>.<arv>. FIRMAKESKSUS Igal firmal , ettevõttel , allorganisatsioonil võib olla andmeid , mida ta soovib ainult enda teada jätta , ning andmeid , mida ta soovib teistega jagada . Andmete muutmisel firmakeskseks võib eristada kolme astet : elemendi info - info kättesaadavus on määratud tema kuuluvustega elementi kirjeldavad andmed - määratud selle serveri ja/või andmebaasiga , kus nad asuvad ( igas andmebaasis võib vastava võrguelemendi kirjeldus olla erinev ) seosed andmebaasidega - kui meil on tegemist multiserver/andmebaasisüsteemiga , on lisaks eelkirjeldatule võimalik eralduda ka teiste serverite/andmebaasidega loogilise sideme katkestamisega . Firmakesksus on määrava tähtsusega oma info valikulisel näitamisel ka seetõttu , et ei koormataks teisi süsteemi kasutajaid neile mittevajaliku infoga . <arv>.<arv>. VÕIMALIK KOOSTÖÖ KÕIGI ALLÜKSUSTE JA ALLETTEVÕTETEGA Suurte võrkude haldamisel puutume kokku väga mitmete ettevõtete ja alamettevõtetega . Sealjuures on erinevate võrguelementide käiduga seotud väga erinevad kombinatsioonid nimetatud struktuuriüksustest . Seega peab efektiivseks tööks olema igal struktuuriüksusel ülevaade teda huvitavatest võrguelementidest , neid kirjeldavatest andmetest , hetkeolekust ning plaanidest tehtavate tööde osas . Plaaniliste tööde tegemisel on vajalik tööde eelnev kooskõlastamine kõigi osapooltega , seda nii kooskõlastuse kui ka režiimi , ohutuse ja optimeerituse mõttes . Kui teatud võrguelement on viidud remondiseisundisse , siis on võimalus selle võrguelemendi remondi raames teha vajalikke töid ka teistel võrguelementidel , mis samuti ei tööta , sest see konkreetne element ei tööta . Selline lähenemine võimaldab minimeerida seadmete seisakute hulka ning leida efektiivsemaid lahendusi . Seisakute taotlustest , seisakutest , seisakute lõppemisest jne teavitatakse vajadusel kõiki võrguelemendiga seotud sõlmi ja isikuid reaalajas . Seega võimaldab võrguhaldustarkvara kasutamine kiiret infovahetust . <arv>.<arv>. KOHANDATAVUS IGALE ETTEVÕTTE STRUKTUURILE Suure võrgu haldamise juures on loomulik , et tema haldus- ja juhtimisstruktuurid võivad ajas muutuda - tulevad uued seadmete hooldajad , toimub ettevõtte reorganiseerimine jne , seepärast peaks olema võimalik kirjeldada mistahes juhtimisstruktuure . Ühe võimalusena võib pakkuda kolmekihilist juhtimisstruktuuri ( vt punkt <arv>.<arv>.<arv> ) , kus sõlmede kiht on realiseeritud võrkstruktuurina ning sõlme sisemiste tasemete kiht puustruktuurina , kusjuures neid kõiki saab määratleda võrguelemendi kuuluvuste abil . Siiani on meil õnnestunud kirjeldada võrkstruktuuri ning puukujulise struktuuri kõiki juhtimisstruktuure kooskasutamise abil . Et suurte võrkude administratiivsed üksused on tihti geograafiliselt hajutatud , on mõistlik kasutada veebipõhist rakendust . Süsteemi ülesehituse seiskohalt lähtuvalt asuvad vastavate suuremate ettevõtete võrguelementide kirjeldused erinevates andmebaasides , mis võivad asuda ka erinevates serverites . Selline kontseptsioon võimaldab töötada ettevõtetel nii autonoomselt kui ka ühtse tervikuna , mis ühendab erinevaid autonoomseid süsteeme . Selline kontseptsioon lihtsustab terviksüsteemist eraldumist/ühendamist . <arv>.<arv>. PIIRAMATU KASUTAJATE HULK Mitmeid süsteeme piirab nende kasutajate arv . Kui kasutajate arv kasvab üle teatud piiri , muutuvad päringud aeglaseks , tekib erinevate ressursside puudus jne. Võrguhaldustarkvara projekteerimisel peab arvestama võimalust , et kasutajate arv võib olla väga suur . Et mitte takerduda serveri riistvaralistesse ressurssidesse ( jõudlus ja maht ) , tuleks luua võimalus andmete hajutamiseks erinevate serverite vahel , kus oleks võimalus lisada igale kasutajategrupile vajadusel oma veebiserver . Sellisest hajutamise põhimõttest lähtuvalt on võimalik tarkvara laiendada kuitahes palju , mis muudab ka kasutajate arvu piiramatuks ( vt punkt <arv> ) . <arv>.<arv>. ARUANNETE MOOTOR Üldjuhul peaks võrguhaldustarkvaras olema tugev aruandluse ja analüüsi mootor . Toome siinkohal ära vajalikud funktsioonid hea aruannete mootori jaoks . Terviklik päringusüsteem peaks võimaldama : standardaruandeid , millele on rakendatavad erinevad kasutajate andmed kasutajapoolseid lihtsaid päringuid kasutajapoolseid mitmepäringusüsteeme - liidab , jagab ( nt “ Kliendi x eelmise kuu võlgnevus , teenuste maht ” ) navigeerida summaarandmetega kindlaks määrata erandeid , piirväärtusi realiseerida filtreerivaid alampäringuid - piiratav nimestik ( nt “ Palju tarbivad eelmise aasta <arv> suurimat võlglast ” ) kohati summeeritavaid näitajaid SQL tuge - kõiki keele võimalusi , funktsioone päringu käsitsi sisestamise võimalust , mis lubaks sisestada väga keerukaid päringuid ning suudaks nendega siduda optimizer hints -e päringu kestuse ennustamist kauakestvate päringute katkestamist automaatset päringute käivitamist , tulemuste salvestamist . Filtrite osa pealt peaks olema võimalik : kasutada lihtsaid matemaatilisi , stringi- ja teisendusfunktsioone luua nn. tippnimestikke kirjeldada vahemikke ( <arv>-<arv> , <arv>-<arv> , <arv> ja enam ) määratleda järjekorranumbreid ( nt “ Tootlikkuselt kohal x ” ) sisaldama tugevat analüütilist osa , s.t funktsioonide baasi . Peamiste analüüsifunktsioonidena võiksid kasutusel olla : drill - üles/alla/kõrvale mitmedimensiooniline analüüs veergudevahelised rehkendused ( nt “ <arv>. ja <arv>. aasta tarbimise vahe ” , protsendid ) sorteerimine - kasvav/kahanev , aga ka muu väärtuse järgi ( “ Esmaspäev ” , “ Teisipäev ” jne ) . Oluliseks osaks on ka kujundus . Kasutaja peaks saama ise määrata : sektsioonide arvu värvused tähekuju graafilised objektid ( jooned , kastid jne ) graafikud , graafikutüübid pealkirja . Viimasel ajal on ilmnenud soove ka andmete kujutamiseks graafiliselt . Kasutaja mugavuse aspektist vaadeldes piisaks järgmisest : viisardid kasutamise lihtsus , eri kasutajatele erinev funktsionaalsus lisamenüüd , aruannete navigaator , võimalus salvestada/redigeerida oma aruandeid metaandmed : andmebaasi keerukuse varjamine objektide ümbernimetamine objektide komplekteerimine , grupeerimine paindlik abiinfo väärtuste loendid - valikud soovitud elementides integreeritus teiste rakendustega : copy/paste ( väärtused , vormingud ) lingitud objektid eksport erinevatesse formaatidesse väljast juhitavad päringud . Selliste analüüside jaoks on olemas mitmeid mootoreid ( nt Oracle Discoverer ) , kuid paljusid funktsioone saab lahendada ka MS Exceli abiga . See tähendab , et kui võrguhaldustarkvaral on kasutajaliides mõne vastavasisulise valmissüsteemiga , siis võib võimas analüüsivahend võrguhaldustarkvarast hoopiski puududa . <arv>.<arv>. OPERATIIVTÖÖLE KEHTESTATUD NÕUD ED Kui vaadelda operatiivtöö nõudmisi üldisemas plaanis , siis taanduvad need järgmistele vajadustele : sisestatud andmeid ei saa hiljem muuta peab olema teada , kes ja millal vastava sissekande või tegevuse tegi info peab olema kiirelt kättesaadav mingi aja jooksul . Hiljem on nende andmete põhjal võimalik täpselt kindlaks teha , mis ikkagi toimus , ning teada saada , millal ja kus sündmus toimus , kuidas tekkinud probleem lahendati jne. Suurte võrkude dispet ? eritele on operatiivtöö jaoks sageli kehtestatud erinõuded , nagu näiteks dispet ? eri operatiivpäeviku pidamine , ohutustehniliste töölubade arvestus , nõuded andmete õigsusele , turvalisusele , mida võrguhaldustarkvara peaks samuti võimaldama/sisaldama . <arv>.<arv>. LAIENDATAVUS KA TEISTESSE VALDKONDADESSE Et suured võrgud on keeruka struktuuriga ja sisaldavad tihti erinevaid valdkondi , siis algselt soetatakse või luuakse tarkvara oma põhitegevuse jaoks , jättes katmata abiprotsessid , mis ei pruugigi langeda samasse tegevusvaldkonda ( nt sidesüsteemide korral autode rentimine , energeetikas kinnisvarade üürimine jne ) . Selleks et iga abiprotsessi jaoks ei tuleks hankida oma tarkvara , peaks tehtav/hangitav tarkvara võimaldama just seesugust laiendamist ( mis võib kaasa tuua küll väikeseid korrektiive koodis ja kasutajaliidese disainis , aga mitte ülesehituslikes põhimõtetes ) . Selle lahendusena näemegi andmete hajutamist erinevatesse andmebaasidesse/serveritesse , mis on võimelised töötama nii integreerituna terviklikku infosüsteemi kui ka eraldiseisvatena ( vt punktid <arv>.<arv> ja <arv> ) . <arv>. RIISTVARALISED ÜLESEHITUSE PÕHIMÕTTED Võrguhaldustarkvara kirjeldamisel suurte ülekandevõrkude jaoks tuleks lähtuda tingimustest , et tarkvara peab olema lihtsalt laiendatav ning samuti peavad suuremad üksused olema võimelised terviksüsteemist eralduma ning jätkama tööd iseseisvate rakendustena . Sellest lähtuvalt tuleks projekteerida hajusandmebaaside süsteem , kus kõikide andmebaaside struktuuriline ülesehitus oleks sama . See teeks võimalikuks nende lihtsa haldamise . Ühel andmebaasi serveril võib töötada mitu andmebaasi . Kui serveri jõudlus hakkab mingil põhjusel oluliselt langema , siis on võimalik osa andmebaase viia üle teisele serverile . Et serveri koormust vähendada , võib kasutusele võtta ideoloogia , kus igale kasutajagrupile on olemas oma veebiserver . Veebiserver asub andmebaasi serverist eraldiseisvas arvutis . Tegemist on kolmekihilise hierarhiaga . Iga kasutaja suhtleb ainult temale kinnitatud veebiserveriga . <arv>. KOKKUVÕTE Käesolevas artiklis on vaadeldud suurte ülekandevõrkude kirjeldamise põhimõtteid . On käsitletud valdkondi , mida võrguhaldustarkvara peaks võimaldama hallata . Selliselt võib kirjeldada kõiki võrke , kus on tegemist võrguelementide haldamise problemaatikaga - tööde määratlemise , registreerimise , planeerimise , teostamise ja analüüsiga . Võrguelementide käidu juhtimiseks võib võrguhaldustarkvara kasutada sõlmpunktide sidumisel võrkstruktuuri ning sõlmesiste tasemete kirjeldamiseks puukujulist hierarhiat . Nende kahe võimaluse kooskasutamisel on võimalik kirjeldada kõiki juhtstruktuure . Võrguelemendi ja juhtstruktuuride sidumiseks on välja töötatud kuuluvuse mõiste , mis defineerib sõlme funktsionaalsused vastava elemendi jaoks . Selliselt moodustub igale elemendile oma juhtimisstruktuur . Riistvaraliselt peaks tarkvara olema projekteeritud kasutama ühte või enamat sama konfiguratsiooniga hajutatud andmebaasi , mis võimaldab suure kasutajate hulga korral hajutada andmebaasi serverile langevat koormust erinevate serverite vahel . Iga konkreetse andmebaasi koormuse vähendamiseks on võimalik igale andmebaasile konfigureerida rohkem kui ühe veebiserveri - s.t igale kasutajagrupile on võimalik anda eraldiseisev juurdepääs . Seega soovitaksime luua veebipõhise rakenduse , kus juurdepääs andmetele ei sõltuks rakenduse kasutaja hetkeasukohast . gap desc='references'&gt; Martin Sandberg , TTÜ arvuti- ja süsteemitehnika magistrant Hajutamine ja tsentraliseerimine nüüdisaegsetes infosüsteemides HAJUTAMINE JA TSENTRALISEERIMINE Tsentraliseeritus tähendab millegi , arvutisüsteemide puhul näiteks arvutusvõimsuse ehk töötlusvahendite ja salvestusmahu koondumist ühte asukohta . Klassikaliselt tuuakse tsentraliseeritud süsteemi näiteks tavaliselt süsteem , mille keskpunktiks on suur- või miniarvuti ja klienditöökohtadeks terminalid . Sellises süsteemis on kogu andmesalvestus ja arvutusvõimsus koondatud ühte seadmesse , mille külge on ühendatud terminalid . Terminalidel on ainult sisend-väljundfunktsioon ja neil puudub võimalus mingit iseseisvat tööd teha , nad ainult vahendavad ühe suure arvuti ressursse paljudele kasutajatele . Ajalooliselt pärineb selline lähenemine ajast , millal arvuteid oli vähe ja neid väheseid tuli jagada , andmaks paljudele kasutajatele võimaluse paralleelselt ühe suurarvutiga suhelda . Samuti olid kõik algusaegsed arvutid ka mõõtmetelt üsna suured , vajasid pidevalt keerukat hooldust ja olid üsna kallid . Seetõttu oli võimatu igale või ka lihtsalt mitmele kasutajale anda otse ja ainult tema käsutusse mingisugune arvutiressurss . Kui arvutid muutusid väiksemaks ja kiiremaks , muidugi ka odavamaks ja vähem hooldust nõudvaks , hakati süsteemide ressursse hajutama mitme asukoha vahel . Esimene ressursside hajutamine toimus miniarvutite kasutuselevõtmisega <arv>. aastate alguses . Miniarvuteid hakati kasutama ka ühekasutaja graafikatööjaamadena , näiteks tarkvara- arenduse jt selliste tööde juures . Samas puudus sel ajal veel vajalik tark- ja riistvara , samuti võrgutehnoloogia , et ühekasutaja arvutid kooskõlastatult ja efektiivselt koos tööle panna . Alles <arv>.-<arv>. aastate lõpus ja alguses hakati looma kohtvõrke ning spetsiaalseid ühekasutaja töökohti ehk personaalarvuteid . Ajajärk , mil kasutati peamiselt eraldiseisvaid laua- ja suurarvuteid , lõppes <arv>. aastate lõpus . Hajutatud süsteem tähendab keeleliselt arvutisüsteemi ressursside hajutamist eri asukohtade vahel . Samal ajal sõna “ süsteem ” tähendab , et nende jagatud ressursside baasil peab moodustuma terviklik ja koostöötav arvutilahendus . Ressurssideks nimetatakse seejuures riist- ja tarkvarakomponente , samuti ühiskasutatavaid andmeid . Kui ressursid olid hajutatud mitmete asukohtade vahel , moodustus esialgu ainult hulk väikseid tsentraliseeritud süsteeme , mis töötasid iseseisvalt ja omavahel praktiliselt suhtlemata . Järgmiseks sammuks oli need väikesed , lihtsamad , odavamad ja efektiivsemad arvutid koos tööle panna ühise eesmärgi saavutamiseks . Sellega sai hoo sisse hajussüsteemide loomine . Hajussüsteemi eesmärgiks on hulga autonoomsete arvutite baasil tervikliku süsteemi loomine nii , et keerukas seadmete ja ressursside struktuur jääks süsteemi kasutajatele läbipaistvaks . Sisuliselt peaks hajussüsteemi kasutajale jääma mulje , et ta töötab ühe suure tsentraliseeritud arvuti taga . Et hajussüsteem võib koosneda väga erinevast riistvarast , siis on süsteemi omaduste tagamine hajussüsteemis tarkvara ülesanne . Hajutatud ressursside baasil sellise süsteemi loomine , mis näeb kasutajate jaoks välja nii , nagu oleks tegemist ühe tsentraalse arvutisüsteemiga , on väga ahvatlev mõte . Selle teeb eriti ahvatlevaks lootus kanda tsentraliseeritud süsteemide head omadused üle hajutatud ressursside kogumile . EELISED JA PUUDUSED Klassikalises tsentraliseeritud süsteemis on kõik süsteemi ressursid kõikidele terminalide kasutajatele võrdselt kättesaadavad ja tegemist vajava töö olemasolul ka lihtsalt ( ära ) kasutatavad . Süsteemi haldamine on koondunud praktiliselt ühte punkti , ka süsteemi turvalisuse küsimusi on üsna lihtne lahendada . Kuid sellise süsteemi suureks probleemiks on töökindlus . Kui üksikute terminalide ja nende ühenduste rikked ei avalda süsteemile tervikuna praktiliselt mingit mõju , siis keskarvuti või andmesalvestuse allsüsteemi rike tähendab ka süsteemi seiskumist . Klassikaline tsentraliseeritud süsteem pakub selles osas meile ainult kahekordse riistvara kasutamise moodust . Ent sel juhul seisab teine liiane tsentraalne komponent jõude , rakendudes tööle vaid põhiseadme rikke korral . Samas tööprotsess põhiserveri rikke korral tüüpiliselt siiski katkeb , sest kõikide kasutajate ümbersuunamine varuserverile võtab aega . Oluliseks puuduseks on samuti süsteemi vähene laiendatavus , sest ühte keskarvutisse mahub paratamatult piiratud hulk protsessoreid ja mälu . Laiendatavuse puhul on puuduseks ka hind , kuna suure arvutusvõimsuse kontsentreerimine ühte seadmesse osutub oluliselt kallimaks kui sama summaarse võimsuse saavutamine mitme väiksema võimsusega arvutiseadme kasutamise abil . Hajussüsteemide eelised ja puudused sõltuvad suurel määral kasutatavast tarkvarast , mis peab tagama süsteemi omadused . Siin vaatleme ideaalset hajussüsteemi , mille loomine nõuab väga keerukat ja seega kallist tarkvara . Ideaalne hajussüsteem on vastupidiselt tsentraliseeritud süsteemile peaaegu lõpmatuseni laiendatav , sest süsteemi on võimalik sujuvalt uusi ressursse juurde liita . Ka saab hajussüsteem olla väga töökindel - mõne seadme rike süsteemis tähendab suure süsteemi korral vaid murdosa ressursside kaotust ega mõjuta süsteemi tervikuna . Samas on sellise heterogeense süsteemi haldamine ja turvalisuse tagamine , võrreldes klassikalise tsentraliseeritud süsteemiga , üsna keeruline ülesanne . ERINEVAD LAHENDUSED Vaadates tagasi ajalukku näeme , et personaalarvutite ja lokaalvõrkude kasutuselevõtu järel muutus populaarseks klient-server-arhitektuur . Seal hajutati töö serverite ja personaalarvutitest töökohtade vahel . <arv>. aastail jätkus klientarvutite ja nende tarkvara funktsionaalsuse kiire , kohati ka tarbetu ja kiirustamisest tulenevaid vigu kaasa toonud kasv . Vastukaaluks sellele ilmnes Interneti ja lokaalvõrkude plahvatusliku arenemisega taas suund tsentraliseerimisele . Kuid samal ajal lubab ressursside hajutamine ja hajussüsteemide idee rakendamine infosüsteemides meile suurepäraseid tulemusi nii süsteemide arvutusvõimsuse kui ka töökindluse osas . Näiteks vähendaks hajussüsteemide arhitektuuri kasutamine kulutusi riistvarale , sest tsentraal- sel serveril on oluliselt väiksem arvutusvõimsus ja mäluressurss kui sama suure rahasumma eest hangitaval tööjaamade hulgal . Nendest kahest küllalt vastandlikust väitest - ühelt poolt tsentraliseerimise eelistamisest ja teiselt poolt hajutamisest tulevatest headest omadustest - tekib küsimus : kui ressursside hajutamine on nii hea ja vajalik , miks ollakse pärast viimast suurt ressursside hajutamist personaalarvutite kasutuselevõtu ja klient-server-arhitektuuri rakendamise näol edasise hajutamise teelt kõrvale pöördutud ja hakatud tagasi pöörduma ressursside tsentraliseerimise poole ? Selles artiklis otsitakse esitatud küsimusele vastust , võrreldes selleks kõigepealt infosüsteeme , mis on loodud eraldatud klientide/serverite või võrdsete arvutite baasil . Edasi analüüsitakse erinevat tüüpi klientide kasutamist infosüsteemides ja lõpuks vaadeldakse , kuidas hajussüsteemide tehnoloogia on rakendatud tsentraliseerimise teenistusse . Kuid kõigepealt tuleb selgeks teha , mida me mõtleme hajutamise ja tsentraliseerimise all . Vaadeldes hajutamist ja tsentraliseerimist infosüsteemides , tekib sageli probleem otsustamisega , kas konkreetne süsteem liigitada hajutatuks või tsentraliseerituks . Kuigi me vaatlesime mõlemat definitsiooni esimeses peatükis , ei anna need sellele probleemile ammendavat vastust . Põhjus on selles , et puhtaid tsentraliseeritud süsteeme nagu ka puhtaid hajussüsteeme praegusel ajal praktiliselt ei esine ja reaalsed arvutisüsteemides kasutatavad arhitektuurilised lahendused jäävad nende kahe vahepeale . Lisaks on nii hajutamine kui ka tsentraliseerimine alati suhteline , mistõttu mõistlik on igasuguste süsteemide arhitektuure vaadeldes võrrelda neid mõne teise süsteemi arhitektuuriga . Sel puhul on palju lihtsam öelda , kumb arhitektuuriline lahendus on hajutatum või tsentraliseeritum . Võrreldes abstraktselt äärmuslikke tsentraliseeritud ja hajutatud arhitektuure ning ka nende vahepealseid varjundeid , mida võiks tinglikult nimetada “ hajutatum süsteem ” ning “ tsentraliseeritum süsteem ” , näeme , et infosüsteemide omaduste iseloom sõltub oluliselt kasutatavast arhitektuurilisest lahendusest . Nende omaduste saavutamisel panevad erinevad arhitektuurid rõhu süsteemi erinevatele valdkondadele . Näiteks võttes aluseks mitu sama ( ent üsna suure ) ressurssimahuga , kuid erineva arhitektuuriga süsteemi , näeme , et väga tsentraliseeritud süsteemis on keerulise tarkvara osakaal tühine . Peamine probleem on see , kuidas mahutada suur riistvaravõimsus efektiivselt “ ühte kasti ” töötama . Samal ajal täishajussüsteemis , mis koosneb paljudest väikestest ja lihtsatest komponentarvutitest , on põhiprobleemiks nende arvutite koostöö , mis tuleb tagada hajussüsteemi tarkvara abil ( vt joonis <arv> ) . Põhjus , miks tänapäeval reaalses töös ei kasutata ei täistsentraliseeritud ega täishajussüsteeme , on jooniselt <arv> selgelt näha . Esimesel juhul on probleemiks riistvara , teisel juhul vastavalt tarkvara keerukus . Optimaalne on leida kesktee kahe äärmuse vahel . Uurides edasi tänapäeva infosüsteemides kasutatavaid arhitektuurilisi lahendusi , lähtume tsentraliseerimise ja hajutamise kahest viisist ehk ressursside jagunemisest kliendi-serveri- ja erinevate serveri-serveriprotsesside vahel . Klientide ja serverite vaheline ressursside tsentraliseerimine ja hajutamine kaldumisega ühele või teisele poole määrab klientide iseseisvuse ja lokaalsete ning eemalasuvate ressursside kasutamise vahekorra . Klientide ja serverite vahekorra uurimine eeldab , et süsteem kasutab eraldatud kliente ja servereid , mis on tänapäeva infosüsteemides tüüpiline lahendus . Erinevate serveriprotsesside koostöö eesmärgiks on süsteemi teenuste ja sellega ka tema omaduste tagamine . Serveriprotsesside käivitamiseks süsteemis on kaks võimalust - kas kasutada serveriprotsesside jaoks eraldatud tsentraliseeritud serverarvuteid või hajusalt paiknevaid seadmeid , mis käivitavad vastavalt vajadusele läbisegi kliendi- ja serveriprotsesse . Uurime , kuidas need variandid annavad süsteemi omaduste lõpptulemuste osas täiesti erinevaid tulemusi . INFOSÜSTEEM ERALDATUD KLIENTIDE/SERVERITE VÕI VÕRDSETE ARVUTITE BAASIL Infosüsteemide loomisel saab teoreetiliselt valida kahe põhimõtteliselt erineva lahenduse vahel : kasutada eraldi seadmeid süsteemi kliendifunktsioonide ja eraldi seadmeid serveri- funktsioonide täitmiseks ( eraldatud klientide ja serveritega süsteem ) kasutada võrdseid seadmeid , mis saavad vastavalt vajadusele käivitada nii kliendi- kui ka serveriprotsesse ( nn täishajussüsteem ) . Peamiseks erinevuseks nende kahe vahel on süsteemi kõigi ressursside jaotamise mudel . Kui täishajussüsteemis toimub ressursside dünaamiline jaotamine kliendi- ja serveriprotsesside vahel vastavalt hetkevajadustele , siis eraldatud klientide ja serverite puhul on igal klientseadmel olemas oma ressursside baas ja lisaks nende kõikide jaoks üldine ja omavahel jagatav , võimalik , et tsentraliseeritud serveriressursside baas . Järgnevalt võrdleme mõningaid süsteemide omadusi , mis on kokkuvõtlikult toodud tabelis <arv>. Summaarne üldkasulike ressursside hind sama arvutusvõimsuse juures on parem täishajussüsteemides . Nimelt moodustavad spetsiaalseid servereid sisaldavas süsteemis üldkasutatavate ressursside hulga vaid küllalt kallite spetsiaalsete serverarvutite ressursid . Ent samal ajal saab täishajussüsteemis , mis võib koosneda odavamast riistvarast , suure üldkasutatava riistvaralise arvutusvõimsuse süsteemi käsutusse palju odavamalt . Kõikide süsteemi ressursside ärakasutamise võimalus on samuti parem täishajussüsteemides . Eraldatud kliente ja servereid sisaldav süsteem tegeleb mingil määral ressursside raiskamisega - kui mõnel klientseadmel pole parajasti oma tööd teha , siis ei võta ta süsteemi tööst lihtsalt osa . Täishajussüsteemis on vastupidiselt võimalik kõik hetkel ilma tööta arvutid üldiste ülesannete olemasolul tööle rakendada - kohalike kliendiprotsesside puudumisel saavad nad kõik käivitada serveriprotsesse . Üldine töökindlus tuleb samuti paremaks lugeda täishajussüsteemides , kus üksiku suvalise süsteemi komponendi rike ei haava sellist süsteemi märgatavalt , erinevalt serveripõhisest arhitektuurist , kus kesksest komponendist sõltub kogu süsteemi töövõime . Samas , pannes rõhku tsentraliseeritud süsteemi keskseadme kvaliteedile ja tema riistvaralise veakindluse parandamisele , on see võimalik muuta üsna töökindlaks . Süsteemi turvalisuse tagamine on nii inimtööjõu kui ka süsteemi ressursside kasutamise osas lihtsam ja odavam tsentraliseeritud süsteemis . Füüsilise turvalisuse seisukohast on lihtsam valve all hoida suhteliselt väikest serverseadmete hulka kui kõiki täishajussüsteemi moodustavaid arvuteid . Juhul kui mõnes hajussüsteemi kuuluvas arvutis asub andmete täielik replitseeritud koopia , tuleks neid kõiki kaitsta samaväärselt tsentraliseeritud serveritega . Samas on hajussüsteemis võimalik andmed mitme arvuti vahel tükeldada . Sel juhul ei kujuta ühe seadme langemine füüsilise või tarkvaralise rünnaku ohvriks nii suurt probleemi kui tsentraalse serveri korral , sest potentsiaalne ründaja ei saa korraga hävitada ega enda valdusesse haarata kõiki andmeid . Süsteemi haldamist on parem korraldada eraldatud serveritega süsteemides , sest haldamine lihtsustub süsteemi tsentraliseerituse kasvamisel , näiteks täistsentraliseeritud terminale kasutavas süsteemis pole klientseadmete hooldusega praktiliselt tegeleda vaja . Riistvara lihtsus ehk suhteline odavus , nagu juba öeldud , on täishajussüsteemide eelis , sest süsteemi omaduste saavutamisel on nende puhul pearõhk asetatud tarkvarale . Eraldatud serveritel põhinevad süsteemid sõltuvad aga spetsiaalsetest ja seega kallimatest serverseadmetest . Tarkvara lihtsus ehk suhteline odavus on aga eraldatud serveritega süsteemide eelis , sest täishajussüsteemi ressursside kasutamise koordineerimine ehk mitmesuguste süsteemis nõutavate konsistentsuste tagamine , töökindluse tagamine ja süsteemi haldamine eeldab keeruka ja süsteemi ressursse koormava tarkvaralise jälgimis- ja juhtimissüsteemi loomist ning kasutamist . Keerukuse väiksemat kasvu laienemisel saab pidada tsentraliseeritud süsteemide eeliseks . Enamik laienemisi nendes saab piirduda lihtsate klientseadmete ja vajadusel ka serverseadmetele ressursside lisamisega . Samal ajal tuleb täishajussüsteemis iga uus tööjaam lisada keerukasse jälgimis- ja juhtimissüsteemi . Muidugi tuleb arvestada , et tsentraliseeritud süsteemi laiendamisel võib mingil hetkel piir ette tulla , näiteks pole serverisse enam võimalik lisada mälu . Liites tabeli kahes veerus toodud plussid , tekib praktiliselt tasakaaluolukord . Siiski saab sellest teha vaid järelduse , et mõlemal arhitektuuril on olemas mitmeid häid omadusi : tabeli ridadel on nimelt erinevates süsteemides tervele süsteemile vajalike omaduste seisukohalt erinev kaal ehk olulisus . Tabel <arv> Eraldatud klientide/serverite ja täishajussüsteemi omaduste võrdlus  Kokkuvõtteks võib öelda , et tänapäeva infosüsteemides kasutatakse ressursside jäika jaotamist klientseadmete ja serverseadmete vahel tänu sellise lahenduse suhtelisele lihtsusele ja järjest parema jõudlusega riistvara tootmisse võtmisele selle hinda praktiliselt tõstmata , mistõttu ressursside raiskamine pole oluline probleem . Samuti on riistvara valmistamise kvaliteet aastate jooksul tänu uutele tehnoloogiatele paranenud ja tarkvara kvaliteet jäänud samaks või isegi langenud , mistõttu spetsiaalseid tsentraalseid servereid võib usaldada rohkem kui keerukat täishajussüsteemi tarkvara . ERINEVAT TÜÜPI KLIENTIDE KASUTAMISE ANALÜÜS Et tänapäeva infosüsteemides kasutatakse tüüpiliselt eraldatud klient- ja eraldatud serverseadmeid , siis järgmine oluline küsimus on , kuidas ja miks jaotatakse süsteemi ressursse nende kahe erineva funktsiooni vahel . Klient-/serverrakendused saab jagada kolme kihti : esitluse ehk graafilise liidese kiht , rakenduse kiht , mis sisaldab loogikat , funktsioone , protseduure ja objekte , ning andmehalduse kiht . Nende kihtide vahele või sisse paigutatakse võrguliides . Arhitektuuri seisukohast on kõige tähtsam võrguliidese asukoht , sest see jaotab funktsioonid serveri ja kliendi vahel , nagu on näidatud joonisel <arv>. Tulemuseks on viis erinevat võimalikku süsteemitüüpi : jagatud graafiline liides tekib esitluse kihi jagamisest kahte ossa . Sel juhul töötab server esitluse kihiga ühes võrgu otsas , ent reaalne kuvar asub teises otsas . Sellise arhitektuuri näiteks on terminal kauge esitluskiht tähendab seda , et kuvasüsteemi asukoht on sõltumatu ülejäänud rakenduse asukohast . Sellise arhitektuuri näiteks on X-windows süsteem . Erinevuseks eelmisest arhitektuurist on see , et süsteem vajab siiski arvutit , materialiseerimaks graafilise liidese kuva jagatud rakendus tähendab seda , et osa loogikat asub kliendis ja osa serveris . Eriti on selline lähenemine levinud andmebaaside tehnoloogias , kus andmetega seotud protseduurid paigutatakse andmebaasiserverisse , ent funktsioonidega seotud protseduurid käivitatakse kliendis kauge andmehaldus ehk nn paks klient tähendab , et klient omab nii rakenduse kui ka graafilise liidese kihti , ainult andmehalduse kiht asub serveris jagatud andmete puhul on andmebaas jagatud üle võrgu kliendi ja serveri vahel . Selle arhitektuuri korral on oluline andmete läbipaistvus rakenduse jaoks . Koondades funktsioone klientseadmetesse , tegeleme sisuliselt infosüsteemi hajutamisega , koondades ressursse serverisse - selle tsentraliseerimisega . Tulemusena tekib infosüsteem , mis töötab vastavalt kas nn paksude või siis õhukeste klientide baasil . Kõigepealt uurime õhukeste klientide kasutamisest tulenevaid eeliseid , võrreldes paksude klientidega . Õhukeste klientide puhul on keskseid ressursse lihtsam ja efektiivsem jagada , ka on kesksesse punkti ressursse lisades lihtne tõsta korraga jõudlust kõikide kasutajate jaoks . Veakindlusprobleemid on koondunud ühte kogumisse , mis võimaldab neid paremini kontrolli all hoida . Keskse punkti turvalisust on lihtsam tagada . Süsteemi hooldustööd - ümberkonfigureerimine , täiendamine jms on efektiivsemad , sest toimuvad ühes asukohas . Ettevõtte töökorraldus on tänu aktiivsemale ja paremale tehnilisele toele oluliselt mõistlikum . Samas on õhukese kliendi arhitektuuril ka mõned puudused . Peab tunnistama , et osa nendest on üsna kaalukad , kuid siiski ületatavad . Sellises süsteemis eksisteerib üks keskne rikkepunkt . Personaalarvuti on oluliselt võimekam seade kui spetsiaalne õhukene klient , võimaldades täita väga mitmesuguseid funktsioone , milleks ainult serveril baseeruv süsteem ei pruugi võimeline olla . Personaalarvutite kaudu saab valikuliselt süsteemi lisada suurt arvutusvõimsust suhteliselt väikese maksumuse juures . Selline lahendus õhukeste klientidega süsteemis eeldaks keerulise prioriteetide süsteemi loomist ja haldamist . Personaalarvutit kasutavad süsteemid on oluliselt paindlikumad - seadme funktsiooni muutmine on tublisti lihtsam . Kokkuvõtteks võib öelda , et õhukesi kliente kasutatakse kaasaegsetes infosüsteemides peamiselt teenuse kvaliteedi parendamise ja teenuse efektiivsemaks muutmise eesmärgil lõppkasutajate teenindamisel . Personaalarvutil ehk paksul kliendil on samas säilinud mitmed eelised , millest olulisemaks saab pidada suurt paindlikkust ja vähese raha eest saadavat suurt võimsust . Seetõttu on ja jääb personaalarvuti arendajate ja analüütilise töö tegijate tööriistaks . Uurides infosüsteemide omaduste ja kliendiarhitektuuride seoseid , oleme siin vaadelnud kahte äärmust . Võib öelda , et ühest äärmusest teise liikudes muutuvad süsteemide omadused suhteliselt sujuvalt , mis tähendab , et nende kahe äärmuse vahepealsed lahendused aitavad sageli leida soovitavat omaduste kombinatsiooni ehk keskteed . HAJUSSÜSTEEMIDE TEHNOLOOGIA TSENTRALISEERITUD SÜSTEEMIDES Tänapäeva infosüsteemides loobutakse hajussüsteemide põhimõtetest , koondades serverteenuseid pakkuvad seadmed ühte kohta , ja õhendatakse kliente , koondades samasse punkti ka nende tööks vajalikud ressursid . Põhjuseks on esiteks see , et riistvaravõimsuse maksumuse langus on vähendanud vajadust kõiki riistvararessursse täielikult ära kasutada , samuti on riistvara muutunud usaldatavamaks ehk töökindlamaks ; ning teiseks on tarkvara loomise maksumus jäänud samale tasemele või isegi suurenenud ja seega on hajussüsteemi omaduste tarkvaraline tagamine jätkuvalt väga kallis . Siiski eeldatakse vahel infosüsteemilt paremat töökindlust ja eriti kõrgemat jõudlust . Et võimsuse ja töökindluse kasvades kasvab süsteemi riistvara maksumus nende näitajatega võrreldes sageli ebaproportsionaalselt ja ostjale kahjulikult , pole see tihtilugu saavutatav nn ühe-kasti - ehk üheainsa serveri lahendusega . Sel juhul võetakse sageli kasutusele hajussüsteemide tehnoloogia , tagamaks süsteemile kõrge jõudluse ja töökindlusega serveriteenuseid . Niimoodi üheks virtuaalseks süsteemiks koondatud servereid nimetatakse kobaraks ( ingl k cluster ) . Kobarate peamised omadused sarnanevad hajussüsteemide omadega . Nad kasutavad hajussüsteemide tehnoloogiaid : ühe tervikliku arvuti vaate saavutamiseks süsteemist tema kasutajate jaoks veakindluse tagamiseks , olles näiteks võimelised üle elama oma komponentseadmete rikkeid koormuse hajutamiseks , olles võimelised jagama , sageli dünaamiliselt , ülesandeid kobara liikmete vahel . See väldib süsteemi üksikute komponentide ülekoormamist või tagab kobara liikmete ühtlase koormamise laiendusvõimaluste tagamiseks , tänu millele on kobaratesse võimalik liikmeid vastavalt vajadustele lisada või sealt eemaldada . Maksimaalne liikmete arv on eri tootjate süsteemide puhul varieeruv . Samas pole kobar ka täielik hajussüsteem , sest seal eksisteerib ainult üks : asukoht , sest kobarad kui infosüsteemi tsentraalse serveriteenuse kandjad paigutatakse tavaliselt mingisse kesksesse punkti haldaja , sest kobar kuulub tavaliselt mingile kindlale organisatsioonile ja seega tsentraalse haldamise alla turvapoliitika , mis on tsentraliseeritud samal põhjusel haldamisega . Teine oluline erinevus klassikalisest hajussüsteemist on suhteline homogeensus , sest ärilisel eesmärgil loodud kobarad moodustatakse tüüpiliselt sama tootja või vähemalt sama tüüpi riistvara ja/või operatsioonisüsteemi ja/või rakendustarkvara baasil . Kolmas erinevus seisneb kommunikatsioonis süsteemi liikmete vahel , sest erinevalt hajussüsteemide lõtvadest nõuetest peab kobara sisemine kommunikatsioon olema kõrge ribalaiusega , madala latentsuse ja madala vigade esinemissagedusega . Kas kobarat võib kutsuda ideaalseks hajussüsteemiks ? Jah , tõepoolest . Kobara lahenduses on ära kasutatud hajussüsteemide head omadused , saavutamaks kõrget töökindlust ja jõudlust . Samal ajal on kontsentreeritud kobarat moodustavad seadmed ühte kesksesse asukohta , kus eksisteerib ka väga kiire ja veakindel kommunikatsioonikanal nende omavahelise koostöö parendamiseks . Lisaks hõlbustab üks asukoht ja üks haldaja kobara kui hajussüsteemi haldamist ja turvalisuse tagamist , mis on hajussüsteemide nõrgemateks külgedeks . Kobarat võib seega kirjeldada kui hajussüsteemi , mis sisaldab tsentraliseeritud elemente süsteemi omaduste tõhusaks parandamiseks . Mida tähendab hajussüsteemi tehnoloogia kasutamine kobarate ehitamisel tsentraliseeritud või hajutatud infosüsteemi arhitektuuri seisukohalt ? Kuigi kasutatakse hajussüsteemide tehnoloogiat , on tegemist pigem infosüsteemi arhitektuuri tsentraliseeriva tehnoloogiaga , sest : tihedalt integreeritud kobarad vajavad tsentraliseeritud haldamist ja turvapoliitikat ressursside hajutamine kobartehnoloogia kasutamise puhul tähendab ainult serverprotsesside poolt kasutatavate ressursside hajutamist mitme arvutiseadme vahel , mis kõik on juba oma eelnevalt positsioonilt infosüsteemide arhitektuuris tsentraliseeritud olekus hajussüsteemide tarkvara keerukus ja seadmete omavahelise koostöö ja süsteemi konsistentsuse probleemid on kobaras piiratud . Võrreldes täishajussüsteemi lahendusega koosneb kobar oluliselt väiksemast arvust arvutitest . Nendest punktidest saab järeldada , et hajussüsteemide tehnoloogia kasutamine kobarates süvendab infosüsteemi tsentraliseerivate arhitektuuride kasutamist , sest see annab tsentraliseeritud ressurssidega süsteemi serveriosale tavapäraselt hajussüsteemide juures tuntud parimad omadused , elimineerides hajutamise halvad küljed . Võttes arvesse tänu kobartehnoloogiale serverteenustesse kogunenud suurt arvutusvõimsust , süsteemi tagatud veakindlust , selget turvapoliitikat ja suhteliselt head hallatavust , kutsub kobararhitektuur üles minema tsentraliseerimisega lõpuni ja kasutama sellise süsteemi kliendina õhukesi kliente , et vältida ka paksude ehk keerukamate ja kapriissemate klientide kasutamisel klientide juures tekkivaid rikkeid . Ent selline suur ja ettevõtte infosüsteemi jaoks oluline tsentraalne arvutusvõimsus , mida süsteemi arhitektuur kaitseb vigade tagajärgede eest ja millel on parem turvalisus ning hallatavus , vajab siiski kaitset keskkonna ja muude väliste mõjude eest . SERVERIRUUMIDE KASUTAMINE Et kirjeldada nende serveriruumide rolli infosüsteemides , mis koondavad endasse enamikku tänapäeva infosüsteemi üldkasutatavatest tsentraliseeritud seadmetest , saame lähtuda kolmest sõnast : kaitstus , efektiivsus ja mugavus . Kaitstus tähendab süsteemi jaoks kriitilise tähtsusega seadmete kaitsmist välismõjude eest ja neile sobiva keskkonna loomist . Efektiivsus võimaldab samas asukohas olevaid seadmeid paremini ja seega odavamalt hallata ning nende füüsilist ja ka tarkvaralist turvalisust tagada . Mugavus võimaldab ressursse vajaduse korral lihtsamalt ümber suunata teiste ülesannete täitmiseks . Serveriruumide kasutamisel on riskiks süsteemi üks riknemispunkt , sest juhul , kui seal juhtub näiteks vee- , tule- või muu õnnetus , on kogu infosüsteem rivist väljas . Seda riski saab maandada ehituslike ja organisatsiooniliste ettevaatusabinõude abil , näiteks valides serveriruumidele sobiva asukoha , kus õnnetuse juhtumise tõenäosus või tagajärjed on väiksemad , kasutades jahutusseadmeid , piirates mittevajalike inimeste ligipääsu serveriruumile jne. Teine tähtis riski maandamise moodus on võimalus suures ja kõrget töökindlust nõudvas infosüsteemis kasutada mitut serveriruumi . Et teenuste jagamine nende vahel käsitsi on väga töömahukas , on parim lahendus kasutada kobartehnoloogiat , paigutades näiteks osa kobara liikmeid ühte , osa teise serveriruumi . Muidugi tuleks sellise lahenduse efektiivseks toimimiseks dubleerida ka arvutivõrgu kaabeldus . Kokkuvõtteks võib väita , et serveriruumide kasutamine infosüsteemide ülesehitamisel on äärmiselt vajalik , seda eriti kaasaegse tüüplahenduse ressursside tsentraliseerimise valguses . Luues õiged serveriruumid , on võimalik oluliselt vähendada infosüsteemile eluliselt vajalike kesksete seadmete rikkiminekut ja tõsta kogu infosüsteemi turvalisust . KOKKUVÕTE Vastuse küsimusele , miks on infosüsteemide arhitektuuris , hoolimata hajussüsteemide headest omadustest hajutamise teelt kõrvale pöördutud ja hakatud tagasi minema ressursside tsentraliseerimise poole , saab kokku võtta järgmiselt : tsentraliseerimine kasvab , sest see on kõige lihtsam viis muuta hooldust ja turvalisuse tagamist efektiivsemaks nii tehnilises kui ka majanduslikus mõttes . Samal ajal on kasutatavad seadmed muutunud võimsamaks ja töökindlamaks , spetsiaalsed serveriruumid kaitsevad tsentraliseeritud seadmete kogumeid ning hajussüsteemide tehnoloogia kobarate kasutamise näol parandab olulisel määral tsentraliseeritud serversüsteemide töökindlust ja jõudlust , millega on kõrvaldatud mitmed tsentraliseerimise puudused . Tõlkinud Vello Hanson I.Hannula , R.Linturi / SADA NÄHTUST <arv>-<arv> / Virtuaal-Helsingi ja kübermutt <arv> Draakoni aasta Islami aasta <arv> Olümpiamängud Ilmnevad ja levivad üha uued resistentsed tõved Maakera temperatuur on tõusnud <arv>,<arv> kraadi Haiglabakterite tõttu haiglad hajutatakse Esimene inimene Marsil Doonorlehm Dolly on andnud üle <arv> liitri verd Peokõne virtuaalmaailma esietendusel Hääletu mobiili turg kasvab plahvatuslikult Riknemisdetektor Medec on nüüd kohustuslik kõigile lihasaadustele Reportaaž korterilaadalt Vihti küberkülas Digitaalpeeglid kiirendavad rõivakaubanduse struktuurimuutust Niiviisi kokkusurutult mahuks kogu inimkond Vaikse ookeani vähimalegi saarele . Kui ütlete seda suurtele inimestele , siis nad muidugi ei usu teid . Nad kujutlevad , et võtavad palju ruumi , et nad on tohutult suured nagu baobabid . Antoine de Saint-Exupéry . Väike prints . <arv> Peokõne maailma esietendusel - <arv>.<arv>.<arv> MAAILMAVõRK ON VALMIS Lugupeetud peasekretär , kallid aukülalised ! Mul on suur au öelda teile SatWebi nimel tere tulemast üritusele , mida me nimetame maailma esietenduseks . Geodeedid üle kogu maailma on koos satelliidispetsialistide ja muude asjatundjatega usinalt tööd rüganud , et see pidu vääriks oma nime . Me pühitseme nüüd selle loogilise sündmuse kulminatsiooni , mis algas Helsingis täpselt <arv> aasta eest . Sidevõrgud ja täpsed raalmudelid ühendavad nüüd kogu maailma suureks virtuaalseks kohtumispaigaks . Viimastel aastatel on instrumendid arenenud sedavõrd , et kirjeldusrobotid rändavad üle maailma kõigis ühissõidukites ja sisestavad andmeid virtuaalmaailma kirjeldavasse mudelisse . Tuhanded madalal tiirlevad satelliidid pildistavad pidevalt maakera ning annavad teavet kiiretest ilmamuutustest ja isegi hõredalt asustatud alade vaadetest . Me kõik teame , millist uskumatut mõju on avaldanud virtuaalmaailm . Automaattõlgid aitavad oma piirangutest hoolimata maailma inimestel omavahel mõtteid vahetada . Sõprus üle piiride on üha enamate jaoks muutunud hüüdlausest tegelikkuseks . Kasvava viletsuse , loodusõnnetuste ja rassivastuolude keskele on valgussähvatusena kerkinud tugev lootust sünnitav tendents . Miljonid vabatahtlikud kõikjal maailmas aitavad üksteisel õppida uut . Tänu tihedale satelliidivõrgule lahendavad asjatundjad probleeme maailma kõige kõrvalisemateski kolgastes senistest palju väiksemate kulutustega . Igaüks meist võib nüüd peaaegu mõtte kiirusega siirduda ükskõik millisesse maailma nurka . Kõigist suurlinnadest on tehtud üksikasjalikult täpne virtuaalmudel . Isegi polaaralade jääkate tundub olevat lumekristalli täpsusega esitatud - ehkki me teame , et asustamata aladel on täpsus vaid arvuti loodud illusioon . Eriti uhked oleme loomulikult SatWebi selle uusima saavutuse üle , mida söandame nimetada maailma esietenduseks . Nüüd võib ükskõik kes küsida maakera ükskõik millise koha pilti ja me toimetame selle kohale niipea , kui meie lähim satelliit kulgeb üle selle koha . Meie piltide täpsusklassi kuuluvaid pilte oli varem võimalik saada ainult sõjalistes rakendustes , nüüd aga on aeg küps väga täpsete satelliidipiltide tsiviilkasutuseks . Kõige umbusklikumad tahaksid ehk küsida , kuidas on selles olukorras kaitstud inimeste privaatsus . Ma vastan : kaitsetus algab saladustest . Me saame nüüd teha inimeste elu vähemalt lageda taeva all senisest turvalisemaks . Vajaduse korral tahame muidugi kaitsta ka inimeste privaatsust - vaatamata sellele , et enamikku rõõmustab võimalus senisest tõhusamalt valvata katastroofipiirkondi , kuritegevust ja kas või kõrbe . Klientide soovi korral kõrvaldame me neile antavailt piltidelt kõik satelliitpeilingaatoriga varustatud registreeritud isikud ja sõidukid . Õigupoolest võime öelda , et nüüd on kogu maailm omamoodi lava , meie aga näitlejad sellel laval . Meie silmad näevad nüüd senisest kaugemale . Virtuaalmaailmas kohtame ka senisest hõlpsamalt eri kultuure . Võib-olla õpime isegi üksteist mõistma , võib-olla koguni õpetama üksteisele veel enam inimlikkust . Olgu see üritus avatud ja ühtse maailmaühenduse avalöögiks . Tere tulemast uue virtuaalse maailma esietendusele ! Virtually Human - <arv>.<arv>.<arv> TELEFON VõI KõNEELUND ? Hääletu mobiili turg kasvab plahvatuslikult Hääletu mobiiltelefoni plahvatuslik populaarsus on üllatanud sideala spetsialistegi . Telefonide tootjad maadlevad tarneprobleemidega . Probleeme on ka operaatoritel , sest ühtaegu on kõnede arv kasvanud ootamatute suurusteni . Suurimad aparatuuritootjad ja operaatorid on praegu kogunenud Genuasse Itaalias olukorra jaoks lahendusi läbi mõtlema . Seda koosolekut võib lugeda isegi hädanõupidamiseks . Hääletu mobiil on telefon , mis tuvastab kõneleja häälikud mitte mikrofoniga , vaid kõneelundite närviimpulssidest . Telefonis on ka mikrofon , kuid seda kasutatakse ainult siis , kui tahetakse telefoni neurovõrkarvutit õpetada õigesti töötama . Hiljem on mikrofon enamasti tarbetu . Siitpeale saab kõnelemise sooritada kinnisui ja hääletult . Ka numbri valimine toimub hääletu kõnega . Kuuldeks kasutatakse märkamatut juhtmetut kuularit . Algselt konstrueeris MUC Electronics Ltd sellise mobiili kõnepuudeliste abivahendiks . See osutus aga mugavaks ka mürarikkas ümbruses , näiteks tehastes . Motorola müügijuht Holly Screamer ütles , et ta üllatus , kui mõne kuu pärast moodustasid suurima osa klientuurist tavalised bürootöötajad . Paljude kasutajate meelest meenutab uus telefon isegi mõtete edastust . “ Võin kõnelda oma kolleegiga keset müügiläbirääkimisi või helistada naisele kas või banketikõne ajal , ” ütles Panasonicu turundusjuht Buck Brein . “ Edasiarendus toob kindlasti kaasa ka kaamera ja sel juhul võib näiteks tõlk sünkroonselt tõlkida mobiili ekraanil oleva kõneleja lausutavat tema kõrval seistes , kuid hääletult . ” Uus telefon on paljudes kohtades vähendanud häirivat kõnemelu . Näiteks lennujaamade ja börside kõnekõmin on kahanenud peaaegu pooleni endisest . Soome iseseisvuspäeval presidendilossis vastuvõtust reportaazhi teinud SatWebi reporter väitis isegi , et ka vastuvõtul oli kõnesumin senisest vaiksem . Hääletu telefon võimaldab kelmustki . Näiteks tuleb eksameid sooritavad üliõpilased nüüdsel ajal läbi vaadata , sest mõnedki on kasutanud hääletut telefoni spikerdamiseks . Sellesarnane kelmusjuht tuli ilmsiks ka viimasel ELi bridžhiturniiril . Seadmetootjate ja operaatorite nõupidamine keskendub tõenäoliselt siiski võrkude ummistumisest tekkinud probleemidele . Üks uusi nähtusi on see , et valdav osa kasutajaist võtab vähemalt iga teise kõne vestluseks inimesega , kes on lähemal kui sada meetrit . Nõupidamisel esitatigi juba lahendusmall , mille kohaselt lühimaakõned suunatakse otse ühelt telefonilt teisele , nii et nad koormaksid võrku ainult kommuteerimise ajal. See eeldab siiski muudatusi aparatuuri standardites ning problemaatiline oleks ka arvelduse korraldamine . Seni ei ole nõupidamine lähimaastandardite kokkuleppimises veel avameetritenigi jõudnud . Kotiliesi - <arv>.<arv>.<arv> Reportaa ? korterilaadalt Vihti küberkülas RAJAKäRU TOOB KAUBA UKSELE Vihti uut küberküla võib pidada infotehnika imeks . Kõigis eramutes on vähemalt üks ekraansein ja läbi elamute ala kulgeb massiivne infovõrk . Küberkülas ei varustatud maju siiski väliskülmikutega nagu uusehitistes seni . Küberkülas toimetatakse kaabeljuhitavate rajakärudega kõik ostud automaatselt majadesse sisse . Küla kõigi teede alla on paigaldatud juhtimiskaabeldus , mida rajakärud järgivad . Kesko on lasknud külla ehitada igapäevakaupade automaatjaotuse lao , kust rajakärud võtavad tellitud kauba . Küla tehnilise osa projekteerimise eest vastutav Krister Jylhä ütleb , et igal elanikul on oma rajakäru ja ta võib selle saata kaubaretkele millal tahes . Rajakäru mällu saab klient salvestada oma ostude liigi ja kogused ning oma ostukoodi . Seejärel täidab automaatladu käru vastavalt tellimusele . Klient saab käru kaamera kaudu jälgida käru liikumist laos ja vajaduse korral oma ostuloetelu muuta . Nii on võimalikud ka ajendatud ostud . Kesko piirkonnajuhataja Toivi Palanen usub , et süsteem on maailma arenenuim . Elamute väliskülmikud ei ole leidnud poolehoidu , sest paljusid ärritavad topelt külmhoidlad - väljas ja korteris sees . Palaneni sõnul oli projekti peaeesmärk see , et rajakärusüsteem ühtsel ja lihtsal viisil koguks kaubad ja veaks need koju . Kärud saavad oma kaupa hankida Kesko või Keskoga lepingu sõlminud kaupluste mehitamata ladudest . Kui kauplus ei ole automatiseeritud , vajatakse kauba kärule laadimiseks müüjat . Projekteerimise ajal kerkis mitmeid rajakärude ja automaatlaoga seotud probleeme . Näiteks tegi möödunud aastal turule ilmunud elektrooniline riknemisdetektor võimalikuks säilitusaja ületanud toodete automaatse kõrvaldamise laost . Rajakärudes on ka uut tüüpi vargusetõrjesüsteem , mis kaitseb kaupu nende kojuveo ajal. See süsteem ongi juba vajalikuks osutunud . Kõige rohkem on praegu kaebusi kärude aegluse kohta . Kui klient näiteks märkab toidu valmistamise ajal , et mingi vajalik aine puudub , peab ta ise jooksma seda hankima . Krister Jylhä rõhutab siiski , et aeglus on ohutustegur : näiteks mängivad ja jooksevad kärude ümber tihti lapsed . Aeglus on Jylhä arvates ka imagotegur , sest küberkülla on püütud luua rahuliku väikelinna õhkkonda . Kauppalehti - <arv>.<arv>.<arv> DIGITAALPEEGLID KIIRENDAVAD RõIVAKAUBANDUSE STRUKTUURIMUUTUST Kiirelt levinud digitaalpeeglid on lammutamas traditsioonilist rõivakaubandust . Ühtlasi on muutumas kogu rõivakaubanduse struktuur . Digitaalpeegliga saadakse kliendi täpsed mõõdud , mille järgi rätseparõivaid tootvad masinad valmistavad soovitud riietuseseme . See meetod on kiiresti hõivanud turge seniselt rõivakaubanduselt , mis põhineb suurel valmisriiete suuruste valikul . Digitaalpeegel on seinale paigaldatav kuvaekraan , mille servadel on kaamerapinnad ja lasermõõturid . Nende abil näitab peegel kliendile ta tavalist peegelpilti meenutavat kujutist ja võtab ta täpsed mõõdud . Seejärel näitab ta kliendile kuva , millel klient on riietatud enda valitud rõivasse . Kui klient on teinud ostuotsuse , koostab peegel mõõtude järgi lõiked . Ta kontrollib ka hinnaandmeid ja väljastusaegu ning palub kliendil kinnitada tellimus ja raha ülekanne . Andmeside kaudu võib peegel näidata ka moedemonstratsioonide salvestisi ja isegi panna kliendi videol mannekeeni asemele . Benettoni turustusdirektor Claudia Skinner ütles Kauppalehtile , et endiselt on olulised kokteilisündmused , samuti moedemonstratsioonid , sest paljud tahavad end avalikkuses näidata . Tema sõnutsi käivad küll paljud veel rõivakauplusteski , kuid üha harvemad ostavad sealt midagi . “ Piiratud valik , valmisriiete halb sobivus , ladustuskulud ja suur kangakulu ei tekita head teenindust ega soodsat hinnataset . ” Skinneri sõnul kiitsid tarbijad digitaalpeegli heaks siis , kui selle varustusse lisati tuhande kangamudeli näidised . Firma täiustas ka tarkvara , nii et peegel näitab nüüd , kuidas valitud kangas langeb ning kuidas näevad välja ta helgid ja värvid eri valgustingimustes . Praegu on digitaalpeegel juba igas viiendas majapidamises . Peale selle on neid paljude elamuühistute üldruumides . Peegleid saab paljudelt firmadelt ka üürida . Kodudes on digitaalpeeglist saanud lisa-videotelefon või multivisiooni teine ekraan . Traditsiooniliste rõivakaupluste käive langes esimesel poolaastal möödunud aasta esimese kuue kuuga võrreldes kolmandiku võrra . Nende keskmine tasuvus on juba pöördunud negatiivseks . Vastavalt on kolmandiku võrra kahanenud ka valmisrõivaste import . Kodumaist rõivatööstust digitaalpeegel siiski negatiivselt ei mõjuta , sest seal ollakse peaaegu täielikult siirdumas rätseparõivaste automaatvalmistusele . Mart Laanpere , TPÜ lektor , HM informaatika ainenõukogu liige Kooliinformaatika ja <arv>. MILLEKS KOOLILE ARVUTID ? Tiigrihüppe toel on Eesti riik ja kohalikud omavalitsused viimastel aastatel teinud Eesti oludes suuri investeeringuid koolide varustamiseks arvutite ja Internetiga . Aastas kulub koolide infotehnoloogia hangeteks , Interneti kuutasudeks ja õpetajate arvutikoolituseks rohkem kui kõigi teiste õppeainete õpikute ja õppevahendite peale kokku . Samal ajal vajavad paljude koolide katused ja põrandad hädasti remonti , keemia- ja füüsikakatsed jäävad rahapuudusel tegemata . Mille nimel see ponnistus , kas asi on seda väärt ? <arv> - <arv> toimunud riikliku arvutiseerimisprogrammi Tiigrihüpe ametlikult väljaöeldud eesmärgiks oli : aidata omavalitsustel välja arendada koolide infotehnoloogilist infrastruktuuri , sh toetada koolide Interneti-ühenduste loomist aidata Eesti õpetajatel omandada elementaarset arvutioskust ja suunata neid kasutama kaasaegseid info- ja sidetehnoloogilisi võimalusi oma aine õpetamisel toetada interaktiivse ja õpioskusi arendava õpikeskkonna abil õppekavaarendust edendada eesti keelt , kultuuri , ajalugu ja loodust käsitleva originaaltarkvara loomist vastavuses riikliku õppekavaga . Tegelikult on need ju üksnes nn vahendeesmärgid , mille kaudu võime kaasajastada Eesti haridussüsteemi , luua tingimused avatud õpikeskkonna kujundamiseks ning infoühiskonna nõuetega paremaks toimetulekuks ( UNDP <arv> ) . Massachusettsi Tehnoloogiainstituudi professor , lastele mõeldud LOGO-programmeerimiskeele looja S. Papert põhjendas <arv>. a. USA Kongressile koolide arvutiseerimise vajalikkust järgmiselt : infotehnoloogia on toonud kaasa põhjalikud ja pöördumatud muutused ühiskonnas tervikuna . Kui kool selle muutusega kaasa ei tule , võib ta ajalukku kaduda ( “ the end of education empire ” ) ja asenduda uute , paindlikumate sotsiaalsete struktuuridega . Seejuures ei piisa Paperti arvates lihtsalt arvutite paigaldamisest koolidesse ja õpilaste arvutioskuste arendamisest , ka ei usu ta arvutipõhise õppe ühilduvusse traditsiooniliste õppeviisidega . “ On olemas kaks diametraalselt erinevat nägemust infotehnoloogia rollist hariduses . Neist esimese kohaselt aitab IT tõhustada ja parandada olemasolevaid õpetusmeetodeid ja -vorme . Teise aluseks on veendumus , et uus tehnoloogia loob võimalused korraldada ja toetada õppeprotsessi radikaalselt teistmoodi , muutes traditsioonilised meetodid mittevajalikuks . ” ( Papert , <arv> ) D. Hawkridge ( <arv> ) toob oma uurimuste põhjal välja rohkem põhjuseid infotehnoloogia rakendamiseks koolis , pidades neid kõiki olulisteks : sotsiaalsed - infotehnoloogia kasutamise oskus ja harjumused loovad eeldused inimese aktiivseks osaluseks tänapäeva ühiskonnas ( juurdepääs infole , avalikud arutelud , virtuaalsed kogukonnad ) kutsealased - üldharidusega tuleb inimesele kaasa anda ka tulevasel tööl vajalikke oskusi , infotehnoloogiat kasutatakse paljudes ametites pedagoogilised - infotehnoloogia rakendamine rikastab õpetaja “ pedagoogilist arsenali ” uute õppemeetoditega , näitlikustamis- , harjutamis- ja kontrollivahenditega katalüütilised - infotehnoloogia tõukab tagant kooliuuendust ( paindlikumad õppemeetodid , õppevormid ja õppekavad , formaalse ja mitteformaalse õppimise sidumine , kooli avatus koostööks avaliku , era- ja ühissektori organisatsioonidega ) majanduspoliitilised - õpilastele antakse koolist kaasa IT-alane pädevus kohaliku IT-tööstuse arendamise huvides haridusökonoomilised - infotehnoloogia rakendamisega üritatakse vähendada koolituse hinda ja suurendada selle tulemuslikkust . Enamik seda teemat käsitlenud autoreist rõhutab , et infotehnoloogia rakendamine koolis pole eesmärk omaette , vaid üksnes vahend millegi ( IT-alase pädevuse , tõhusama õpetuse , koolikultuuri muutuse vms ) saavutamiseks . Samas ei tohiks siinkohal langeda teise äärmusse ja väita , et arvuti on lihtsalt üks tavaline tööriist nagu sulepea või trükimasin . Sulepea ja trükimasina kasutuselevõtt võimaldas küll efektiivsemalt kirjutada , kuid ei toonud kaasa sellist kvalitatiivset muutust töökorralduses , inimestevahelises suhtlemises ja kultuuris laiemalt , nagu seda on põhjustanud arvuti ja Internet . Pigem võiks infotehnoloogia tungimist meie ellu võrrelda trükikunsti kasutuselevõtuga keskajal , mis lõi uue platvormi info ja ideede vabaks levikuks ning muutis seetõttu kirjaoskuse olulisimaks komponendiks iga inimese hariduses . Seetõttu on üsna loomulik , et info- ja kommunikatsioonitehnoloogia alase pädevuse kohta kasutatakse tihtilugu metafoori “ teine kirjaoskus ” . “ Teisest kirjaoskusest ” on kujunemas üks inimõigusi , näiteks Euroopa Liidu infoühiskonna-programm eEurope kohustab iga liikmesriigi valitsust tagama oma kodanikele nii juurdepääs infotehnoloogiale kui selle kasutamise oskus . Samas jääb inimõiguseks ka infotehnoloogia mittekasutamine ja oskamatus , samamoodi kui õigus olla kirjaoskamatu ja mitte kasutada elektrit/autot/telefoni . Käesolev artikkel keskendub “ teise kirjaoskuse ” kohale Eesti üldhariduskooli riiklikus õppekavas ja kooliinformaatika kontseptsioonis . <arv>. “ TEINE KIRJAOSKUS ” ENNE JA NÜÜD “ Teine kirjaoskus ” pole sugugi uus mõiste , see on olnud metafoorina kasutusel juba kuuekümnendatest aastatest saadik . Selle tähendus on aga nelja aastakümne jooksul pidevalt muutunud . Nendes muutustes võib eristada kolme faasi : Esimene faas ( kuuekümnendaist kaheksakümnendate alguseni ) - “ teise kirjaoskuse ” all mõisteti peamiselt programmeerimisoskust . Toonastes utoopilistes tulevikuvisioonides ennustati , et paarikümne aasta pärast on iga inimene võimeline programmeerima enda koduroboteid jms. Teine faas ( kaheksakümnendate algusest üheksakümnendate keskpaigani ) - arvutid muutusid väiksemaks ja levisid suurtest arvutuskeskustest igasse kontorisse . “ Teise kirjaoskuse ” peamiseks sisuks sai standardse kontoritarkvara kasutamise oskus . Kolmas faas ( üheksakümnendate keskpaigast praeguseni ) - kontoritarkvara muutus üha kasutajasõbralikumaks ja intuitiivsemaks , selle kasutamaõppimiseks vajaliku koolituse maht vähenes oluliselt - kuid jäi siiski osaks “ teisest kirjaoskusest ” . Multimeedia ja Interneti tähtsustamisega arvutimaailmas kasvas kiiresti vajadus inimeste meedia- ja suhtluspädevuse arendamise järele - praegu ongi just need muutumas “ teise kirjaoskuse ” olulisimateks komponentideks . Nagu näha , on iga järgmine faas eelmisest umbes veerandi võrra lühem ja arengu kiirenedes samas tempos võib <arv>-<arv> aasta pärast kätte jõuda neljas faas . Mida mõistetakse “ teise kirjaoskuse ” all aastal <arv> , võib praegu üksnes spekuleerida . Samas võib uskuda , et kontoritöö- , meedia- ja suhtluspädevus jäävad enesestmõistetavaks osaks “ teisest kirjaoskusest ” ka tulevikus . <arv>. INFORMAATIKA JA RIIKLIK õPPEKAVA “ Teise kirjaoskuse ” sissetung üldhariduskoolide õppekavadesse on kulgenud vaevaliselt . Enamik õppeaineid kooli õppekavas on tekkinud juba <arv>. sajandil soliidsete teadusdistsipliinide baasil ( matemaatika , füüsika , filoloogia jm ) . Kuigi see toob kaasa üksjagu probleeme ( suur osa ajast kulub teadusdistsipliini ajaloo mõistmiseks ja tänapäeval vähe kasutatavate mõistete/algoritmide/reeglite õppimiseks ) , on siiski tegemist suhteliselt kindla vundamendiga . “ Teise kirjaoskuse ” suhtes lähimaks teadusdistsipliiniks on tavaliselt ikka peetud informaatikat - noort teadusharu , mis tegeleb informatsiooni esitamise , edastamise , töötlemise ja analüüsiga seonduvate probleemide uurimisega . Analoogiliselt koolimatemaatika või -füüsikaga võib kooliinformaatika üles ehitada eraldi õppeainena , informaatika kui teadusdistsipliini akadeemilisest loogikast lähtuvalt . Sel juhul jääb “ teise kirjaoskuse ” roll informaatika ainekavas ilmselt üsna marginaalseks . On ka teine , pragmaatiline lähenemine - hariduspoliitikute ja lapsevanemate pragmaatilist loogikat järgides on esmatähtis anda koolilõpetajatele kaasa mitte niivõrd veel mõned teooriad ( ja järjekordse teadusdistsipliini ajalugu ) , vaid elus vajaminevad praktilised oskused . Kas õppekava koostades tuginetakse valdavalt akadeemilisele või pragmaatilisele loogikale , sõltub suuresti sellest , millist õppekava-arendusmudelit kasutatakse ja kellele kuulub sõnaõigus õppesisu määratlemisel . Mõni sõna lähemalt õppekava-arendusmudelitest . Platoni “ filosoofidest kuningate ” idee istutamine õppekava-arenduse konteksti on aluseks eelmainitud akadeemilise loogika rakendamisele õppekava koostamisel ja näiteks Ralph Tyleri ja Hilda Taba õppekava-teooriale . Selle teooria kohaselt peavad õppeaine eesmärgid ja sisu määratlema vastava teadusharu juhtivad asjatundjad koos pedagoogika- ja psühholoogiateadlastega ( Marsh &amp; Willis , <arv> ) . Kui võrrelda informaatika õppeaine eesmärke ja sisu meie naabermaades , siis kõige lähemal selle loogika rakendamisele näivad olevat Saksamaa ja Venemaa õppekavad . Vene Föderatsiooni koolides kehtiv informaatika ainekava koosneb järgmistest osadest : Informatsioon - mõisted , protsessid , kultuur , infoühiskond Info esitusviisid - keel , kodeerimine , kahendsüsteem , infoühikud <arv>. Arvusüsteemide ja loogika alused Arvuti - komponendid , funktsioonid . arhitektuur , süsteemi- ja rakendustarkvara , failihaldus , andmekandjad , andmesisestus , programmide installeerimine , tarkvara legaalsus , andmeturve , antiviirused , tööohutus Modelleerimine - modelleerimine kui tunnetusmeetod , materiaalsed ja informatsioonilised mudelid , objektorienteeritud mudelid , formaliseerimine , informatsiooniliste mudelite põhitüübid ja nende rakendused erinevates eluvaldkondades Algoritmid ja programmeerimine - algoritmid ( mõisted , omadused , käsud , täitjad ) , programmeerimistehnoloogiad ( algoritmiline , objektorienteeritud , loogiline ) , programmide koostamine alt-üles- ja ülalt-alla-meetoditega . Graafilise informatsiooni töötlemine - raster- ja vektorgraafika , piksel , failiformaadid , graafikaredaktor : funktsioonid , kasutajaliides , võimalused , peamised objektid ( sirge , ringjoon , hulknurk ) Arvulise informatsiooni töötlemine - andmetabeli kasutusviisid ja -võimalused , tabeli struktuur , absoluutne ja suhteline aadress , andmete ja valemite sisestamine , standardfunktsioonid , diagrammid , ülesannete lahendamine elektroonilise tabeli abil Info säilitamine , otsing ja sorteerimine - andmebaaside tüübid , relatsioonilised andmebaasid , andmebaaside juhtimissüsteemid , kirjete sisestamine ja redigeerimine , andmete sorteerimine ja päringud , andmebaasi struktuur , kirje , väli Multimeedia tehnoloogiad - multimeedia-dokumentide ja projektide koostamine , interaktiivne kasutajaliides Kommunikatsioonitehnoloogiad - lokaalsed ja globaalsed arvutivõrgud , võrguteenused ( e-post , vestlusrühmad , failitransport ) , WWW : infootsing ja Interneti-lehekülje koostamine Sarnase ülesehituse ja sisuga on informaatika ainekavad veel näiteks Saksamaal , Leedus ja Bulgaarias ( vt Pelgrum <arv> ) . Selle lähenemise tugevuseks on õppesisu sidusus , terviklikkus , ratsionaalsus , teaduslik usaldusväärsus ja eeldatavasti suhteliselt väikesed erinevused koolide vahel . Informaatika ainekava ülesehitamine akadeemilisest loogikast lähtuvalt aitab tagada informaatikateaduse ( ja ka selle hübriidide , nt bioinformaatika , meditsiiniinformaatika , arvutuslingvistika ) järjepidevust ja arengut , võimaldab keskkoolinoortel paremini orienteeruda kutsevalikus . Kuna akadeemilise kooliinformaatika õppesisus on ( osalt ehk praktiliste igapäevaoskuste tagaplaanile jäämise arvelt ) ülekaal faktidel , mõistetel ja algortimidel , on võimalik õpetada informaatikat sellise õppekava alusel suures osas ka väljaspool arvutiklassi - eriti veel sel juhul , kui on olemas korralik õpik . Kuid taolise akadeemilise lähenemisega kaasnevad ka mitmed probleemid : õpetajad ja koolid jäävad üksnes “ asjassepühendumatute ” täideviijate rolli , ainekava üldisemaid/kõrgemaid eesmärke on seetõttu paljudes koolides raske saavutada arvutiga seonduv kipub koolis jääma informaatikaõpetaja kui ainespetsialisti “ valitsemisalaks ” , Hawkridge'i poolt kirjeldatud IT sotsiaalne , pedagoogiline ja katalüütiline efekt jääb minimaalseks ; õpitav kipub suures osas olema küllatki abstraktne ja kontekstivaba , mistõttu seda on igapäevases elus raske rakendada ja see ununeb ruttu õpitava mõistmist raskendab õppesisu akadeemiline ülesehitus , mis on pahatihti vastuolus pedagoogika kuldprintsiipidega ( juba J. A. Komensk soovitas õpetuse kulgemist konkreetselt abstraktsele , üksikult üldisele , kaasaegsed õpiteooriad rõhutavad õppija kogemustele tuginemise tähtsust ) . Eestis ( aga näiteks ka Soomes , Taanis , Inglismaal , Prantsusmaal , Hispaanias , Iirimaal ) on informaatika õpetamisel kaalukauss kaldunud pragmaatilise lähenemise kasuks . Selle asemel et õpetada teoreetilist laadi sissejuhatust informaatikasse kui teadusdistsipliini , seatakse eesmärgiks igapäevases elus vajamineva arvutialase pädevuse kujundamine õpilastes . Oma osa on selles meie üldisel õppekavapoliitikal , mille kohaselt riik määratleb üksnes raamõppekava , iga kooli kohustuseks on koostada selle põhjal oma ( soovitavalt omanäoline ) õppekava . Kooli tasandil õpetuse eesmärke määratledes kipuvad aga koheselt praktikas rakendatavad oskused domineerima “ teooria ” üle . Kui teiste õppeainete puhul pärsib seda laadi pragmaatilist survet akadeemiline traditsioon , siis informaatika puhul see praktiliselt puudub . Teisalt avaldab oma mõju ka see , et juba informaatika riiklik raamkava on pragmaatilise suunitlusega ( ülikoolide informaatikateadlaste mõju riikliku õppekava töörühmas jäi suhteliselt nõrgaks ) . Informaatika kui gümnaasiumiastme valikaine sisu on selles raamkavas määratletud nelja <arv>-tunnise mooduliga , millest informaatikat õppida sooviv õpilane peab läbima vähemalt kaks ( sh kindlasti esimese mooduli ) : universaalsed põhitõed ( arvuti riist- ja tarkvara , töö failidega ) . Tekstitöötlus arvuti kasutamine andmete haldamiseks ( tabelarvutus ja andmebaasid ) arvuti kasutamine töökeskkonna muutmiseks ( programmeerimine ja infosüsteemid ) informaatika lisateadmised ( arvutivõrgud ja arvutigraafika ) Kuigi vastavad uuringud puuduvad , julgen hinnata kolmanda mooduli rakendamist koolides üliharvaks ( sel pole vastet ka Arvutikasutaja Oskustunnistuse standardeis ) . Pragmaatilistele alustele rajatud kooliinformaatika tugevaks küljeks on nende probleemide vältimine , mis on iseloomulikud akadeemilisele lähenemisele ainekava koostamisel ( vt eespool ) . Samas on praktilistele igapäevaoskuste kujundamisele suunatud ainekaval ka oma nõrgad küljed : arusaamine sellest , millised oskused on praegusel hetkel “ eluks vajalikud ” , muutub kiiresti , õpilase poolt koolis omandatud oskused on tema tööellu jõudmise ajaks juba vananenud praktilistele oskustele keskendumine jätab tagaplaanile süsteemse arusaamise kujundamise informaatikaõpetuse sisu kipub kooliti üha rohkem erinema ülikooli satuvad informaatikat õppima noored , kel puudub ettekujutus sellest teadusdistsipliinist ja kes peavad alustama erialastuudiumi peaaegu “ nullist ” . Võrreldes akadeemilise lähenemisega on pragmaatilisel kontseptsioonil põhinev informaatikaõpetus küll oluliselt lähemal “ teise kirjaoskuse ” õpetamisele , kuid ei kata selle vajadusi täielikult . Nii nagu tavalise kirjaoskuse kujunemine eeldab lugemise/kirjutamise harjutamist erinevates kontekstides , on ka “ teise kirjaoskuse ” puhul oluliseks selle praktiline rakendamine igapäevastes situatsioonides - õpilase puhul siis erinevate õppeainete õppimisel . Seetõttu ongi näiteks Inglismaal ja USA-s võetud suund “ teise kirjaoskuse ” hulka kuuluva pädevuse kujundamine teiste ainete õpetamisse integreerida ja informaatikat eraldi ainena üldse mitte õpetada . Sama teed on läinud ka Iirimaa , Prantsusmaa ja Hispaania ( vt. Pelgrum <arv> ) . Eesti Riigikogu poolt <arv>. aastal kinnitatud üldhariduskooli riiklikus õppekavas ( RÕK ) on mindud kuldset keskteed : lisaks informaatika määratlemisele gümnaasiumi valikainena on seadusandja kohustanud koole integreerima oma õppekavadesse informaatika ja infotehnoloogia kui ainekavu läbiva teema . Viimase näol on sisuliselt tegemist “ teise kirjaoskuse ” kujundamisega läbi selle rakendamise erinevates õppeainetes . Informaatika ja infotehnoloogia ( väljavõte RÕK-i üldosast - peatükk IV : Ainetevahelised seosed , § <arv>.<arv> : Ainekavu läbivad teemad ) Kujundatakse iseseisvaid , kriitilisi ja analüütilisi info loojaid ja tarbijaid , antakse teadmisi teabe struktuurist ja omadustest ning teabe edastamise ja vastuvõtmise seaduspärasustest ; arendatakse õpilaste võimet korrastada ja mõtestada teavet . Kaasaegse infotehnoloogia kasutamine mitmekesistab õppeprotsessi ja õpetamismeetodeid , pakub tuge süsteemse mõtlemise ja infotöö oskuste kujundamisel , suhtlemisel teiste koolide ja kogu maailmaga . Kooli õppekava ja ainekavade täpsustamisel peetakse silmas nii kooli võimalusi kui ainespetsiifikat . <arv>. INFORMAATIKA AINEKAVA versus PÄDEVUSSTANDARDID Oktoobris <arv> toimus Tartu Ülikoolis konverents “ Reaalained ja õppekava ” , kus muude küsimuste kõrval arutati tõsiselt ka põhikooli ja gümnaasiumi informaatikaõpetuse reformimisega seonduvat . On ju kehtiva riikliku õppekava vastuvõtmisest möödas üle nelja aasta ja <arv>. aasta suvel ilmumas RÕK-i korrigeeritud versioon , mille alusel koolid peavad oma tööd kavandama arvatavasti kuni <arv>. aastani . Mitmed õppejõud ja koolide informaatikaõpetajad nõudsid konverentsil ja selle eel toimunud diskussioonides informaatika muutmist kohustuslikuks õppeaineks juba alates <arv>. klassist ja selle sisu muutmist akadeemilisemaks ( Prank ) . Samas on kooliinformaatika areng seni kulgenud pigem vastupidises - vabatahtlikkuse , integratsiooni ja pragmaatilisuse suunas ; sarnastele põhimõtetele tugines ka vabariikliku informaatika ainenõukogu ( IAN ) ettepanek haridusministeeriumile põhikooli informaatikaõpetuse osas . IAN töötas rahvusvahelise haridustehnoloogia seltsi ISTE standardeist ( vt. NETS ) lähtudes välja info- ja kommunikatsioonitehnoloogia ( IKT ) alased pädevusnõuded põhikooli lõpetajale , jättes koolidele õiguse ja kohustuse valida ise pädevuse saavutamiseks sobivaim viis ( eraldi õppeaine , huviring , integreerimine teistesse õppeainetesse vm ) . Nõuded põhikooli lõpetaja info- ja kommunikatsioonitehnoloogiaalasele pädevusele ( IAN-i soovitused , oktoober <arv> ) on toodud alljärgnevas loetelus . Põhikooli lõpetaja oskab vilunult ja efektiivselt käsitseda arvuti sisendseadmeid ( hiir , klaviatuur ) , väljundseadmeid ( printer , monitor ) ja püsimäluseadmeid ( diskett , CD-ROM ) tunneb ja oskab kasutada operatsioonisüsteemi graafilist kasutajaliidest oskab kasutada kohtvõrku ja hallata oma dokumendifaile saab aru riist- ja tarkvara toimimise põhimõtetest ja oskab neid kirjeldada oskab avastada ja kõrvaldada lihtsamaid tark- ja riistvaraprobleeme oskab rääkida IKT-st , kasutades korrektset emakeelset terminoloogiat oskab põhjendada IKT kasutamise eeliseid ja võimalikke ohte käitub IKT-d kasutades eetiliselt ja sotsiaalselt korrektselt käib riist- ja tarkvaraga ringi vastutustundlikult ja säästvalt on teadlik IKT väärkasutuse tagajärgedest oskab kirjeldada IKT rolli ühiskonnas ja tähtsust enda kutsevaliku seisukohalt tuleb toime IKT kasutamisega õppetöös nii iseseisvalt kui õpetaja juhendamisel kavandab , loob ja esitab nii iseseisvalt kui koostöös kaasõpilastega IKT abil sisukaid ja esteetiliselt vormistatud tekste , multimeedia esitlusi , kuulutusi jms. oskab teha koostööd avatud ülesannete lahendamiseks IKT vahendusel kasutab efektiivselt IKT-d info hankimiseks ja suhtlemiseks õppimisega seotud eesmärkidel otsustab IKT kasutamise mõttekuse üle konkreetses olukorras ja valib antud ülesande/probleemi lahendamiseks sobiva vahendi hindab kriitiliselt Internetist leitud info õigsust , sobivust , ammendavust ja objektiivsust oskab IKT abil teha lihtsamat statistilist analüüsi ( sagedused , keskmised , diagrammid ) . RÕK seab kooli õiguseks ja kohustuseks luua omanäoline õppekava , mis vastab kohalikele võimalustele ja vajadustele . Samas on põhikooli õppekava osas “ kooli oma näo ” tekitamiseks õppekavas väga vähe ruumi - valikainete jaoks on <arv>. klassis vaid üks ja <arv>.-<arv>. klassis kaks nädalatundi . Informaatika õppeaine kohustuslikuks muutmine vähendanuks seda nappi mänguruumi veel poole võrra . Teiseks võimaluseks oleks olnud “ kohtade vahetus ” mõne seni kohustusliku ainega ( näiteks tööõpetusega , inimeseõpetusega ) või mõne mahukama aine kohustusliku tunnikoormuse vähendamisega - <arv>.aasta maikuus Tiigrihüppe aastakonverentsil osalenutest soovitas enamik võtta tunde matemaatika arvelt ( Liiva ) . IAN jõudis seisukohale , et määratletud IKT-pädevust on võimalik põhikoolis õpetada ka muul viisil kui eraldi õppeainena ja seetõttu vajadus detailsema ainekava järele põhikooli tasandil puudub . Võrgudiskussioonides kerkis üles ka teine küsimus - kui juba pädevusstandardid , siis miks ei võiks kasutada põhikooli lõpetajate IKT-pädevuse hindamiseks üldtuntud Arvutikasutaja Oskustunnistuse ( AO ) standardeid ? Allakirjutanu arvates räägivad selle vastu järgmised argumendid : AO standardid on oma universaalsuses kontektsivabad ( kui nende puhul üldse mingit konkreetsemat sihtrühma silmas on peetud , siis on need alam- ja keskastme kontoritöötajad ) “ teise kirjaoskuse ” aspektist on AO-le vastavaks metafooriks elementaarne lugemisoskus ja kirjatehnika , põhikooli lõpetajalt oodatakse aga juba “ funktsionaalset kirjaoskust ” ka infotehnoloogia vallas - ta peab oskama rakendada “ teist kirjaoskust ” konkreetsete probleemide lahendamiseks kooli kontekstis ( oma õppimise tõhustamine ; info otsing , töötlus , analüüs ja esitamine ) hoolimata sellest , et AO näol on tegemist laialt levinud rahvusvahelise standardiga , ei kasutata neid üheski riigis ametlikult põhikooli õppekavas kui eesmärgiks on ühitada meie põhikooli lõpetaja IKT-alased pädevusnõuded rahvusvahelise standardiga , siis sobib NETS selleks mitmes mõttes paremini kui AO - NETS on loodud spetsiaalselt kooliõpilastele , võimaldab paremini osaleda rahvusvahelistes võrdlusuuringutes jm. Mis saab informaatikast gümnaasiumi tasemel ? IAN on alustanud informaatika ainekava ümberkujundamist , millega loodetakse lõpule jõuda veel <arv>. aasta kevadel . Kuigi esialgu oli ühe võimaliku alternatiivina plaanis lähtuda gümnaasiumi osas samast loogikast kui põhikooli tasandil ( ainekava asemel pädevusstandardid , suund USA ja Inglismaa eeskujul integratsioonile ) , on praegu töö aluseks kahetasemeline “ kuldse kesktee ” variant - arendatakse paralleelselt nii süvendatud ainekava kui ka gümnaasiumilõpetaja miinimumpädevuse nõudeid . <arv>-tunnise informaatika valikaine tarvis määratletakse akadeemilise sisu ja ülesehitusega ainekava , mis peaks reaalainetest huvitatud õpilastele andma põhjaliku ülevaate informaatikast kui teadusdistsipliinist ja valmistama neid ette kõrgkooliõpinguteks tehnilistel erialadel . Sellele n.-ö baaskursusele lisaks jääb koolidele õigus/soovitus pakkuda <arv>-tunnise mahuga valikkursusi ( programmeerimine , arvutigraafika , CAD , multimeedia disain jms. ) . Baaskursuse akadeemiline suunitlus ei luba muuta informaatikat kohustuslikuks õppeaineks ka gümnaasiumi tasemel , kuid seda polegi tingimata vaja - ka gümnaasiumis on võimalik “ teise kirjaoskuse ” miinimumpädevuse kujundamine “ lahustada ” teiste ainete õpetamisse . <arv>. KOKKUVõTTEKS <arv>.-<arv>. a. valminud kooliinformaatika kontseptsioon vajab revideerimist - see on enesestmõistetav nii kiiresti arenevas valdkonnas , nagu seda on informaatika . Käesoleva artikli eesmärgiks oli visandada peamised teljed , mille suhtes tuleb meil määratleda oma seisukohad makrotasandi otsuste vastuvõtmiseks kooliinformaatika eesmärkide ja sisu osas . Need teljed võib illustratiivselt esitada alljärgnevaid vastandusi kasutades : Informaatikaõpetuse eesmärk : pragmaatiline “ teise kirjaoskuse ” kujundamine vs akadeemiline sissejuhatus informaatikasse kui teadusdistsipliini . Kuigi põhikoolis piisab praktilise pädevuse kujundamisest , on gümnaasiumi tasemel sellele lisaks vaja ka akadeemiliselt üles ehitatud valikkursust , mis valmistaks tehniliste/reaalainete huvidega õpilasi ette kõrgkooliõpinguteks Informaatikaõpetuse korraldus : eraldi informaatika õppeaine vs integreerimine teiste ainete õpetamisse . “ Teise kirjaoskuse ” kujundamist on võimalik ( isegi soovitatav ) integreerida teiste ainete õpetamisse , akadeemilise informaatikakursuse puhul pole see mõttekas Ühtsete õppekavanõuete esitamise vorm : ainekava vs pädevusstandardid . Kui omaette informaatika õppeaine gümnaasiumi tasemel vajabki õppesisu detailsemat lahti/ettekirjutamist , siis “ teise kirjaoskuse ” tarvis piisab oodatava lõpptulemuse e. pädevusstandardite fikseerimiseks Kohustuslikkus - vabatahtlikkus . Tuleb taotleda “ teise kirjaoskuse ” miinimumpädevuse muutmist kohustuslikuks juba põhikooli lõpetajatele . Samas puudub vajadus ja võimalus muuta informaatika õppeaine kõigile õpilastele ( ja koolidele ) kohustuslikuks . Töö kooliinformaatika kontseptsiooni , ainekava ja pädevusstandardite kallal jätkub , loodetavasti annab käesolev artikkel panuse diskussiooni jätkamisse . gap desc='references'&gt; Leo Võhandu , emeriitprofessor Suure täpsusega arvutamine j-keeles Viimasel ajal on andmekaitse probleemid muutunud vägagi akuutseks . Praktiliselt kõik kaitse- ja murdmisskeemid põhinevad suurte arvude teguriteks lahutamisel . Nimelt arvati veel paarteist aastat tagasi , et pikkade naturaalarvude teguriteks lahutamine on üks ütlemata raske töö , mis võib aastaid ja isegi sajandeid aega võtta . Nüüdseks on arvutid ise muutunud palju kordi kiiremaks , arvutimälud määratult kasvanud ja mis kõige tähtsam , arvutamismeetodid on oluliselt paranenud . Püüamegi näidata , kuidas J-keele kasutamine ka väga pikkade arvudega arvutamise kaunis mõnusaks teeb . Kõigepealt meenutame , et J-keele uusim priivaraline variant J<arv>.<arv>d.exe või J<arv>.<arv>a.exe on alati Internetis saadaval aadressil <hyperlink> ( download märgendi alt ) . Kogu süsteem on ca <arv> megabaiti koos käsiraamatute , õpikute ja üksikasjalike demodega . Kui meil tekib soov arvutada nii-öelda täie täpsusega , siis J-s käsitletakse iga arvu pikana , kui talle x-täht sappa kirjutada . Näiteks toome kaks pisiarvutust : <arv>* <arv> = <arv>.<arv>e<arv> <arv>* <arv>x = <arv> Esimeses korrutises kasutatakse tavalist kuuekohalist täpsust . Teises on ühele teguritest lõppu x-laiend juurde kirjutatud . Tulemus on näha : kõik <arv> kohta on ilusasti välja trükitud ( tulemust mingile muutujale omistades jääb see sinna tallele täie täpsusega ) . Muide , see topeltnäide on kasulik laisa inimese jaoks . Kui te olete kaks pikka arvu korrutanud ja vastuses hulga numbreid saanud , siis on tekkinud kohtade arvu kaunis ebameeldiv loendada . Vead on kerged tulema . Tulemuse kohtade arvu saate kerge vaevaga esimesest , ligikaudsest korrutisest : <arv> + <arv> = <arv>. Nagu eelmisest korrutisest oli näha , piisab arvutusvalemis kasutatava täpsuse suurendamiseks , kui üks arvudest saab x-laiendi . MALEMÄNGU LEIUTAJA TASU Kooli- ja ajaviitematemaatika üheks lemmikülesandeks on malemängu leiutajale tasu maksmise ülesanne . Leiutaja nõudis laua esimesele ruudule vaid ühe viljatera , teisele kaks , kolmandale neli , neljandale <arv> jne. Kui palju teri tuleks leiutajale kokku maksta ? Ah , et valem ei ole meeles ? Ega sellest ole häda . Teeme puust ette ja arvutame vajaliku summa . Kui meil on neljaruuduline malelaud , siis on teri vaja <arv> + <arv> + <arv> + <arv> = <arv> ehk <arv>[<arv> - <arv>. Teiste sõnadega : <arv> , võetuna malelaua ruutude arvu astmele miinus üks . Seega terve malelaua katmiseks viljateradega kulub neid parajasti <arv>[<arv> - <arv>. J-keele abil on astme arvutamine lihtne - kasutame astendamismärki [ ja saame V : ( <arv>[<arv>x ) - <arv>= <arv> tera . Märkus . Kui teie arvuti klaviatuuril ei ole astendusmärki ( nagu minu omalgi ) , siis on mitu varianti selle märgi ekraanile manamiseks . Esimene neist on kasutada astendusmärgi ingliskeelse vaste CARET kahte esitähte neile järgneva punktiga CA . . Teine , mida ma ise eelistan , on vajutada korraga alla klahvid Ctrl-Alt ja siis vajutada Ä -tähele . Kui teie arvutil see [ -märk ei ole just Ä all , siis sobrage klahve Ctrl-Alt all hoides veidi ringi , küllap leiate varsti astendusmärgi üles . Mitu kohta on tulemuses ? Kõrvaldame V avaldisest x ja saame <arv>[<arv> - <arv> = <arv>.<arv>e<arv>. Seega on tulemus <arv>-kohaline . Miks me astme sulgudesse panime ? Põhjus on lihtne . J-keeles arvutatakse kõikide avaldiste väärtused suunas paremalt vasemale . Kui me sulgusid ei oleks pannud , siis oleks kõigepealt <arv> lahutatud ja alles seejärel aste leitud . Sulgude panek on lihtne ja kahtluste korral võib seda alati soovitada . J-keeles on sageli abiks ka verbid eelmine ja järgmine ( vastavalt : ja : ) , mis pikkade valemite korral kirjutamist lihtsustavad . Me võiks seega kirjutada : <arv>[<arv>x ja saada õige vastuse . PIKKADE ARVUDE TRÜKKIMINE Kui arvu pikkus on teada , siis võib seda kenasti ära kasutada väga pikkade arvude kombekaks trükkimiseks . Meil oli tulemuseks <arv>-kohaline arv . Ütleme , et soovime seda trükkida neljas reas , igas reas <arv> numbrit . See töö on tehtav korraldusega <arv> <arv> $ “ : <arv>[<arv>x <arv> <arv> <arv> <arv> Verb “ : teisendab arvu sümbolkujule ja <arv> <arv> $ paigutab selle sümbolite rea <arv>x<arv> tabelisse . Näeme , et tulemus ongi kenasti kandilises tabelis . Mida siis teha , kui tulemuse pikkus ei anna kandiliselt trükkida ? Kõige lihtsam on jälle laisk olla ja võtta selline tabeli mõõtmestik , kuhu kõik meid huvitavad numbrid ära mahuvad . Näiteks <arv> <arv> $ ” : <arv>[<arv>x <arv> <arv> <arv> Pärast kõigi tulemuses olevate numbrite ammendumist trükitakse numbreid jälle algusest peale . Seega on viimase , kolmanda rea viimane number <arv> ülearune . Nüüd on eeltöö tehtud ja me võime arvutada näiteks <arv>[<arv> . Kõigepealt kontrollime , et arvu pikkus tuleb <arv> kohta . Teiseks loendame A &amp; A veeru laiuse . Selgub , et veergu mahub <arv> numbrit . Seega tuleks meil arvutuse pildiks <arv> <arv> $ ” : <arv>[<arv>x <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Me teame , et kohad alates <arv>-st peavad olema korduvad . Otsime niisiis viimasest arvureast numbreid <arv> ... Näemegi , et tõepoolest on tegemist kordusega . Mida selle koletu arvuga peale hakata ? Ei tea . ( Võrdluseks toome ühes moolis olevate osakeste arvu ehk nn Avogadro arvu , mis on <arv>e<arv> ) . Aga noh , eks matemaatikat võib lusti pärastki teha ! Nüüd on meil selge , kuidas suure täpsusega tulemusi arvutada ja esitada . Proovime edasi midagi mõistlikumat teha . Fermat' hüpotees Fermat arvas omal ajal , et arv <arv>[<arv>+<arv> on algarv . Kontrollime selle kuulsa matemaatiku hüpoteesi . Kõigepealt arvutame selle arvu väärtuse ] f : : <arv>[<arv>x <arv> Sellega oleme arvutanud f väärtuse ja korraldusega ] vaadanud ka tulemust . Parempoolne kandiline sulg muutuja nime ees on tõlgendatav verbina näita . Väga pikkade arvude puhul on mõistlikum toimida eelmise paragrahvi stiilis , omistades pika väärtuse mingile muutujale . Pärast selle sümbolkujul trükkimist jääb väärtus muidugi muutujale täie täpsusega alles . Proovime kontrollida , kas Fermat' hüpotees peab paika , s.o kas saadud arv f on algarv . Suurte arvude teguriteks lahutamiseks on J-keeles realiseeritud kiire algoritm verbiga q : ( see nimi on tuletatud sõnast quotient - jagaja ) . Teeme proovi q : f Kui oleks tegu algarvuga , siis oleks ainsaks teguriks arv f ise . Nüüd aga saame vastuseks <arv> <arv>.Meie <arv>-kohaline arv laguneb ootamatult tegurite <arv> ja <arv> korrutiseks . Järelikult oli Fermat' hüpotees väär . Muide , selles eksituses pole midagi kummalist . Matemaatika arenebki hüpoteeside püstitamise , tõestamise ja kummutamise kaudu ... Ühtegi teoreemi ei eksisteeri maailmas iseenesest . Keegi peab selle kõigepealt hüpoteesina püstitama ... Arvutame veel paar suurt arvu . Näiteks arvu <arv> faktoriaali : Eelluure ! <arv> näitab , et täpses tulemuses on <arv> kohta . Arvutame siis tulemuse <arv>x<arv> tabelisse : <arv> <arv> $ “ : ! <arv>x <arv> <arv> <arv> <arv> <arv> Kaunis ebameeldiv arv . Kui meil on nüüd tahtmist leida selle arvu algarvulisteks teguriteks lahutamise täielik tulemus , siis selleks sobib verb q : ! <arv>x Tulemuseks on kena tabel <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Siin tabelis on esimeses reas arvu <arv> ! tegurid ja alumises reas nende kordsused . ( <arv>[<arv>*<arv>[<arv>* ) SUURIMA ÜHISTEGURI LEIDMINE Selleks sobib lihtne verb + . SÜT ( <arv> , <arv> ) = <arv> + . <arv> <arv> Süsteem töötab normaalselt ka pikkade arvudega . Näiteks ( <arv>x[<arv> ) + . ! <arv> leiab nende kahe arvu suurima ühisteguri : <arv> ( Sulud on vajalikud , et <arv> kuuluks esimese astme juurde ! ) Veidi mõteldes peaks olema selge , et see ühistegur peab olema <arv>[<arv>x . Teeme kontrolli : <arv>[<arv>x <arv> m.o.t.t. Arvu numbrite jaotumine See arv on matemaatikas tõeline kümnevõistleja . Ei ole vist rakendusala , kus selle arvuga ühes või teises valemis kokku ei puutu . Kui meil juba J-keele võimsus kasutada on , vaatame huvi pärast , millised need numbrid siis on . Kõigepealt leiame saja kohaga . Meile vajaliku töö teeb ära järgmine avaldis Pii : @ o. <arv>[<arv>x Sajakohalise arvu saame esitada kombeka tabelina <arv> <arv> $ “ : Pii <arv> <arv> <arv> <arv> Näeme , et selles arvus ei ole koma pandud ( meid huvitasid ju ainult mängus olevad numbrid ) . Uudisena näitame veel , kuidas arvutamiseks kuluvat aega mõõta . Selleks on J-keeles veidi imeliku kujuga verb <arv> ! : <arv> . Verbile tuleb ülakomade vahele järele kirjutada arvutatav avaldis ja alla tulebki arvutamiseks kulunud aeg sekundites . Mul on kasutada vanamoodne <arv> MHz-iline PII . See näitas arvutusaegadeks Näeme , et <arv>-kohalise täpsuse juures tuleb oodata vastust veidi üle <arv> minuti . Huvi pärast trükime välja arvu esimesed <arv> kohta : <arv> <arv> $ “ : . <email> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Põhimõtteliselt saaks siingi arvutusi kiirendada astendamist osavamalt tehes , kuid praegu huvitas mind eeskätt tulemuse lihtne kättesaamine . Viimase tööna arvutame numbrite sagedusjaotuse . J-keeles on olemas lihtne sorteerimine / : ~ , ja lisaks veel sorteerimine mingi etteantud nimistu ( listi ) põhjal . Meil ongi ehk kõige lihtsam kasutada abilisti d = : '<arv>' ja siis lasta sümbolijada “ : Pii sümbolid d järjestuses kokku lugeda / : . ~d , ” : pii Tulemuseks saame <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> ( S.o <arv> nulli , <arv> ühte , ... ) . Näeme , et numbrite jaotus läheneb tõepoolest ühtlasele jaotusele . LÕPETUSEKS Nendele , kellel kas vajaduse või huvi pärast on tarvis pikkade arvudega opereerida , võib päris rahuliku südamega J-keelt soovitada . Loomulikul tuleb igaühel endal välja uurida , kui suurte arvudega tehted on tema arvutil nii mälu mahu kui kiiruse pärast tehtavad . Kui arvuti keeldub konkreetset arvutust tegemast , siis ta vastab nonce result , mida võiks eesti keelde ehk tõlkida “ tulemus on jama “ . Siis ei jää muud üle kui nuputada , kuidas vajalik tulemus väikese kavalusega siiski kätte saada . Praktiliselt alati on see tehtav .