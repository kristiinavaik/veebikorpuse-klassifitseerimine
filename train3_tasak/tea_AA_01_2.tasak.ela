kirjak	tea_AA_01_2.tasak.ela	Paul Leis Microsofti . NET-tehnoloogia . NET on Microsofti uus platvorm mitmekihiliste ( äri ) rakenduste loomiseks . . NET on Microsofti komponenttehnoloogiate - OLE-COM-ActiveX-COM+ ; vahevaratehnoloogiate ( middleware ) - Microsoft Transaction Server ( MTS ) , Microsoft Message Queue ( MSMQ ) ; andmebaasitehnoloogiate - OLE DB ja ActiveX Data Objects ( ADO ) ning veebitehnoloogia Active Server Pages ( ASP ) edasiarendus ja nende tehnoloogiate XML-põhine integratsioon . Microsofti tehnoloogiate evolutsioon OLE <arv>.<arv> ( Object Linking and Embedding , objektide linkimine ja sängitamine ) - objekti ( nt pildi , diagrammi jmt ) sängitamine konteinerisse ( nt Wordi teksti ) . Topeltklõps sängitatud objektil avab objekti redigeerimiseks . OLE <arv>.<arv> tugitehnoloogiaks on Dynamic Data Exchange ( DDE ) , mis pole aga piisavalt paindlik integreeritud ( äri ) rakenduste loomiseks . OLE <arv>.<arv> - tugineb COM-tehnoloogiale ( Common Object Model ) . COM on kompileeritud komponentide ( st binaarkomponentide ) integreerimise tehnoloogia . Seetõttu pole ka oluline , missugust programmeerimiskeelt ( C++ , Java , Visual Basic , Pascal jt ) või programmeerimise paradigmat on komponentide loomisel kasutatud . COM-klient-komponent saab pöörduda ainult COM-server-komponendi liideste poole , server-komponendi meetodid ( methods ) ja omadused ( properties ) on aga server-komponenti kapseldatud ja pole klient-komponendile vahetult kättesaadavad . COM on tõhus , kuna COM-komponente saab käitada mitmes lõimes , st paralleelselt ( multithreaded execution ) . COM oli tõsiseks sammuks programmeerijate ammuse unistuse realiseerimisel : panna tarkvarasüsteeme komponentidest kokku nagu lelusid Lego-klotsidest . DCOM - ( Distributed COM ) - hajus-COM , põhineb protokollil Remote Procedure Call ( RPC , protseduuride kaugkutse , Open Software Foundation i ( OSF ) standard ) . Hajus-COM võimaldab transparentselt ( läbi kliendi- ja serveripoolsete vahelülide ( proxy/stub ) ) kasutada võrgu suvalises arvutis olevaid komponente . DCOM pole uus komponentmudel , DCOM on COM-tehnoloogia laiend , COM-komponente saab kaugkutseks häälestada ilma kliendi või serveri COM-koodi muutmata . ActiveX - aktiivsete veebirakenduste tehnoloogia ( vastandina passiivsetele HTML-lehekülgedele ) . ActiveX-tehnoloogia tugineb COM/DCOM-le . Peale ActiveX-kasutajaliideseelementide ( ActiveX Controls ) on Microsoftil veel muidki “ aktiivtehnoloogiaid ” : nt Active Documents , Active Server Pages , Active Directory , Active Platform ( = Active Desktop + Active Server ) . MTS - ( lisavõimaluste/-funktsionaalsusega ) tehinguhaldur , COM-serverikomponenti- de käituskeskkond . MTS võimaldab deklaratiivselt määrata ( atribuutprogrammeerimine ) komponentide käitusviisi atribuute . Näiteks võib deklareerida komponendi tehinguatribuudi väärtuseks “ Requires Transaction ” ( nõuab tehingumehhanismi ) . Tehingu teostamise eest ( vastavalt kahejärgulisele tehingu kehtestusprotokollile ) hoolitseb aga seejärel MTSi komponent DTC ( Distributed Transaction Coordinator ) . MSMQ - sõnumi(vahe)vara : rakendus-saatja koostab sõnumi , saadab selle järjekorda ja jätkab oma tööd . Rakendus-vastuvõtja võtab ( millalgi ) sõnumi järjekorrast ja vajaduse korral saadab ( millalgi ) vastuse teise järjekorda - sõnumipõhine andmevahetus on asünkroonne . MSMQ tagab , et vastuvõtja saab sõnumi täpselt üks kord , olenemata tõrgetest võrgus ja/või vastuvõtjas . Märgime , et sõnumivara pole mingi avastus : IBMi sõnumivara MQSeries on suurarvutites kasutatud juba aastakümneid . COM+ = COM + MTS + MSMQ + mitmesugused täiendused/laiendused ehk COM+ = komponentide käituskeskkond + teenused . COM+s saab deklareerida komponentidele osutatavaid teenuseid ( services ) . COM+käituskeskkonna teenused võimaldavad tagada COM+rakenduste mitmesuguseid väärtomadusi , näiteks : skaleeritavuse ja käideldavuse tagavad komponentide ja andmebaasiühenduste reservuaarid ( pools ) . Näiteks , andmebaasiühenduste reservuaari luuakse teatav hulk andmebaasiühendusi . Kui mingi komponent vajab andmebaasiühendust , siis võetakse ühendus reservuaarist . Kui reservuaari ühendused on ammendatud ( või vajalike atribuutidega ühendust reservuaaris pole ) , siis luuakse uus ühendus . turvalisuse tagavad rollipõhised pääsuõigused nii isikutele/kasutajatele ( nt teller , osakonnajuhataja , direktor ) kui ka komponentidele , nende liidestele ja meetoditele . veel elutsüklit , seisundihaldust , püsivust jmt haldamist korraldavad atribuudid COM+käituskeskkonna olulisemad mõisted on : kontekst , aktiveerimine ja vaheltlõige . Sama käitusviisi nõudvate (rakendus)komponentide kogumiga seotakse süsteemsete komponentide kogum , mida nimetatakse (rakendus)komponentide kontekstiks . Igal aktiveeritaval rakenduskomponendil on üks kontekst , kontekstil võib olla mitu komponenti . Aktiveerimine on komponendi sidumine kontekstiga . Komponendi elutsükkel : loomine/reservuaari panemine aktiveerimine/reservuaarist võtmine deaktiveerimine/reservuaari panemine hävitamine . Komponentide reservuaarid teenivad sama eesmärki , mis andmebaasiühendite reservuaarid - tagavad rakenduse skaleeritavuse . Vaheltlõige ( interception ) võimaldab komponendil kontekstiga A pöörduda kontekstiga B komponendi poole . Komponentide vahelised pöördumised on transparentsed , st klient-komponent ei tea , kas pöördumine on konteksti piires ( st vahetult ) või kontekstide- vaheline ( st läbi vahelülide , analoogne DCOM-le ) . Vaheltlõige on ka meetod komponentide kontekstipõhise käituse korraldamisel . . NET . NET = COM + + CLS + CLR + koostud + täiendused/laiendused . NET-keeled - esialgu Microsofti Visual Basic , C# , Visual C++ ( kuuluvad Visual Studio.NETi ) ning kolmandatelt firmadelt Perl ja COBOL . C# on Microsofti uus keel , mis “ ühendab Visual Basicu lihtsuse , C++ tõhususe ja Java turvalisuse ” . Ka teisi Visual Studio.NETi-keeli ja nende arenduskeskkondi on ( üsna oluliselt ) täiendatud/kopitsetud : nt Visual Basicus on nüüd pärilikkus ( inheritance ) ja liidesed ( interfaces ) “ nagu Javas ” , mitmelõimelisuse tugi jne. Märgime , et Visual Studio.NETis pole Javat , mille arendamisest on Microsoft loobunud - küllap polnud Suni Java-standardi kitsendused Microsoftile vastuvõetavad . CLS ( Common Language Specification ) - ühe CLS-spetsifikatsiooni rahuldava keele objektid kasutavad teistes CLS-spetsifikatsiooni rahuldavates keeltes kirjutatud objekte . On määratud . NET-keelte elementide ( keele konstruktsioonide ) hulk , mis rahuldavad CLS-spetsifikatsiooni . Seega . NET-maailmas saab teha integratsiooni mitte ainult binaarkomponentide ( nagu COM ) , vaid ka programmeerimiskeelte objektide/klasside tasemel . Common Language Runtime ( CLR ) . . NET-keelte lähtekood kompileeritakse vahekoodi MSIL ( Microsoft Intermediate Language ) , mida seejärel käitatakse käituskeskkonnas CLR . Oleks nagu tuttav ? Tõepoolest , võrdleme : Java lähtetekst kompileerimine Java baitkoodi käitus Java virtuaalmasinas ( JVM , Java Virtual Machine ) või Java serveribiinide konteineris ( Enterprise JavaBeans Container ) . Loomulikult tagab CLR koodi turvalisuse analoogselt Java virtuaalmasinaga . Nagu JVM , tagab ka CLR automaatse mälu vabastamise ( garbage collection ) , mille puudumist on Microsofti käituskeskkondadele seni ette heidetud . Ja veel , äärmiselt oluline : CLR-kompilaatorid loovad koos koodiga ka metaandmed , mis kirjeldavad täielikult komponente , objekte ja käitustingimusi ( klasside asukoht ja nende laadimine , koodi genereerimine , käituskontekst jmt ) . Seega on komponendid “ isehäälestuvad ” - enne komponendi käitust pole vaja mingeid teekide registreerimisi ja opsüsteemi registritesse kandmisi , komponent/koost on autonoomne käitusühik . Koost ( Assembly ) - failid , mis sisaldavad CLRi poolt käitatavat MSIL-koodi . Ka pääsuõiguste skoobiks on koost. Koost sisaldab koostu initsialiseerimise , käitamise ja haldamise metaandmed = koostulisti ( Manifest ) . OLE DB - COM-liidesed mitmesuguste andmekogumite ( ka mitterelatsioonbaaside ) haldamiseks . ADO.NET. OLE DB COM-liidesed pole vahetult paljudes “ kõrgema taseme ” arendusvahendites , nt Visual Basicus kasutatavad . Seetõttu loodigi ADO - kõrgtaseme liidesed OLE DB funktsionaalsuse kasutamiseks . ADO.NET on XML-põhine ADO edasiarendus . ASP.NET. ASP on serverikeskkond , milles saab integreerida HTML-leheküljed , skriptid ( nt VBScript , Jscript ) ja COM.NET-komponendid dünaamiliste , interaktiivsete veebirakenduste loomiseks . ASP.NET on ASP edasiarendus : ASP.NET-rakendus kompileeritakse , ASP.NET-konfiguratsioon salvestatakse XML-failides , ASP.NETi keskkonnaks on NET Framework ( toetab CLRi ) . KOKKUVÕTE Pole kahtlust , et . NET on tipptehnoloogia , võimas rakenduste arendusplatvorm . Ka pole . NET piiratud Wintel-keskkonnaga ( Wintel = Windows + Intel ) : miski ei takista CLRi ( nagu JVMi ) realiseerida mistahes keskkonnas ( nt OS<arv> , Unix , mobiiltelefon jmt ) . Microsoft on teinud tõsise sammu Suni/Java WORE-maailma ( Write Once , Run Everywhere ) tungimiseks . Rakenduste skaleeritavust , käideldavust ja turvalisust parendavad veel Microsofti serveritehnoloogiad , eriti Microsofti uus Application Center . Kui veel arvesse võtta Visual Basicu , Windows NT ja Windows <arv> levikut , siis pole kahtlust , et . NETist kujuneb arvestatav platvorm ka Ettevõtte-klassi ( Enterprise Class , Eestis nii suuri firmasid polegi ) tarkvara väljatöötamisel . Leo Võhandu Infotehnoloogia ja keskkond Leo Võhandu ( sündinud <arv> ) on Talinna Tehnikaülikooli informaatikainsituudi emeriitprofessor . Aastatel <arv>-<arv> Tartu Ülikoolis matemaatikaõppejõud , aastast <arv> Tallinna Tehnikaülikoolis . Arvutustehnikaga jagab maid alates <arv>. jaanuarist <arv>. Erihuviks bioloogilised meetodid tehnikas ja noorte teadlaste juhendamine . Täiendanud end Chicagos ( <arv>/<arv> ) , Helsingis ( <arv> ) , Magdeburgis ( <arv> ) , Hamburgis ( <arv> ) . Meie ajakirja üksiknumbrite sissejuhatavad lood on üsna loomulikul viisil ikka infotehnoloogiakesksed : muretsetakse enda huviala hea käekäigu pärast . Võib-olla peaks korraks siiski hinge tõmbama ja mõtlema veidi järele , kas meie edu on ikka kõigi edu ? Mingis mõttes jah . Näiteks võib uskuda , et tänu meie tööle valgekraede tööviljakus kasvab , kuigi seda on üpris raske mõõta . Teiselt poolt tekitame ka massiliselt töötust - näiteks on praktiliselt kadunud masinakirjutaja elukutse . Kuidas on lugu meie tervisega , ilmselt igaühe kõige kallima varaga ? Eks arvuti taga koogutamine ole nii mõnelgi pingsa päeva järgsel õhtul toonud pisaraid kipitavatesse silmadesse ja pannud õlapartii lihased pilli lööma.Võib-olla oleks vaja ühte head magistritööd , kus antaks tõestatult kasulik välkvõimlemise või isomeetriakompleks arvutivaevuste ennetamiseks või vähendamiseks . Loetletud hädad on kõik vaid pisivead kogu ühiskonna ja keskkonna probleemide kõrval . Üldine soojenemine tekitab aina rohkem lausa hävingulisi nähtusi . Meie õnneks peaks juba mõne aasta pärast infotehnoloogia vähendama inimkonna energiakulutusi ja ka metsade laastamist paberi tootmiseks . Arvutustehnika miniaturiseerimine vähendab otsest energiavajadust . See on ilmselt positiivne . Hea on ka sürdpaberi ( elektroonilise paberi ) tulek . Keda asi huvitab , võib üht-teist õpetlikku lugeda naaberajakirja “ Tehnikamaailm ” <arv>. aasta teisest numbrist . Hiljuti võis lugeda meie pankade ja sidefirmade ühisüritusest , mida kavatsetakse <arv> aasta jooksul finantseerida ca <arv> miljoni krooni ulatuses . Kena küll , aga summad on naeruväärselt väikesed . Toome vaid mõned võrdlusarvud . Eesti riigieelarve näeb praegu ette peaasjalikult nii elavate kui surnud lihakehade transportimise parandamist : uues eelarves on üle <arv> miljardi krooni kavandatud maanteede remondiks ja väidetakse , et seda olevat karjuvalt vähe . Infoveo asemel veetakse inimesi ! Siit on ka ilmne , et IT ei ole ikka veel tegelikult majanduslik jõud . Liiga palju liigub sõidukeid , mis keskkonda rikuvad . Ainuüksi Õismäe trollide asendamine bussidega paiskab aastas õhku suure hulga heitmeid . Nähtavasti tuleks praegusest transpordikriisist pääsemiseks hoopis agaramalt luua uusi infotehnoloogilisi töökohti just maakohtades . Siiani ei ole sellesuunalist sihipärast tegevust eriti märgata . Ah jaa , meie autojuhid kiruvad Tallinna liiklust aegluse pärast . Ometi on see eriti ühistranspordi osas tohutult kiirem mullu suvel Dublinis nähtust . TTÜ ja kesklinna vaheline sõit võtaks Dublinis aega tund kuni poolteist pluss veel busside tohutult korrapäratu liikumine . Jah , kõik on seal liikluses sõbralikud , aga see ei päästa ajakaotusest . Nii me laseme riigil parandada vananenud ja järjest viletsamaid tulemusi andvaid tehnoloogiaid , seejuures üha tõsisemalt keskkonda rikkudes . Nojah , keskkonnakaitseks on meil tänavu plaanis <arv> miljardit krooni , aga kas ei oleks mõistlikum aidata riigil kogu vana tööstuse ja majanduse vastuseisust hoolimata luua uue omavalitsusreformiga seoses tõeliselt uus elamis- ja töötamismudel , mis võimaldaks meil inimväärselt elada ning vältida inimestele ja loomadele kahjuliku keskkonna teket koos sellele järgneva miljardite kulutamisega elamise võimaldamiseks ? ( Meenutagem kasvõi prof. Ülo Ennuste dünaamilisi input-output-mudeleid . ) Olgu , muremõtted on välja öeldud . Küll oleks tore , kui mõni asjalik inimene võtaks taolise tulevikuplaneerimise kasvõi utoopilise visandina oma töökavasse . Kust raha saab , ei tea . ETF selleks ilmselt raha ei anna ... P. S. Me ei reosta ilmselt ainult looduskeskkonda , vaid ka eesti keelt ! Tartu Ülikooli lehes ilmus <arv>. <arv>. <arv> emeriitprofessor Eduard Vääri artikkel pealkirjaga “ Eesti kirjakeel vajab kõigi kaitset ” . E. Vääri arvates “ teevad kõige suuremat kahju arvutitöötajad , kelle hariduslik ja vaimne tase näib olevat madal ” . Professor on ülikooli astujate kirjaoskusest üpris kehval arvamusel , selle kohta ehk veel üks tsitaat : “ Keeleteadlane Peep Nemvalts on aastaid rääkinud ja kirjutanud sellest , et teadusliku kallakuga kõrgkoolides ( ülikoolides ) tuleks õpetada eesti keelt , milles oleks pearõhk erialaterminoloogial ja sõnastamisel . See on vajalik eriti nüüd , kui gümnaasiumis on eesti keele tunde taas vähendatud ja noored lõpetavad tavakooli poolkirjaoskajatena . ” Jumala õnn , et me TTÜ-s oleme sellest enne E. Väärit aru saanud ja dr. Rein Paluoja vastavasisulised loengud juba käivad ! Arvo Toomsalu , TTÜ arvutitehnika instituut Post-RISC-arhitektuur ( <arv> ) MIKROPROTSESSORITE ARHITEKTUURNE ARENG Mikroprotsessorite arhitektuur arenes möödunud sajandi viimasel veerandil tempokalt . Kui <arv>. aastatel ilmusid esimesed <arv>-bitised protsessorkiibid , siis <arv>. aastate alguseks jõuti <arv>-bitiste võimsate CISC-arhitektuuriga mikroprotsessoriteni . Tollaste parimate mikroprotsessorsüsteemide jõudlus oli konkurentsivõimeline isegi suurarvutitega . Kuid <arv>. aastate lõpuks ammendas klassikaline CISC-arhitektuur oma arengupotentsiaali , iga täiendava jõudlusühiku saavutamine nõudis järjest suurema arvu transistoride lisamist protsessorkiipidesse . Mikrolülituste valmistamisel rakendatav tehnoloogia ei suutnud sammu pidada tarbijate kiiresti kasvavate nõudmistega , oli tekkinud vajadus kiiresti välja töötada ja evitada uued efektiivsed protsessorlülitused . Keerukatele probleemidele lahenduste leidmiseks käivitati mitmed mahukad uurimused . Uuringud toimusid erinevates suundades . Üks osa uurijaid keskendus kiirete galliumarseniidi-põhiste protsessorlülituste väljaarendamisele , teised lootsid abi leida keerukast mäluohjest ja võimsatest operatsioonisüsteemidest , kolmandad , tuginedes CMOS-tehnoloogiale , otsisid protsessoritele uudseid arhitektuurseid lahendusi . Viimase suuna esindajate tööde tulemusena jõutigi , enam-vähem samaaegselt Stanfordi ja Berkeley ülikoolis , esimeste RISC-arhitektuuriga eksperimentaalsete protsessorkiipide ( MIPS , RISC I , RISC II ) valmistamiseni . Peagi järgnesid neile juba esimesed tööstuslikult toodetud RISC-mikroprotsessorid ( ARM , ROMP jt ) . Aastatel <arv>-<arv> loodi rida täiustatud RISC-arhitektuuriga nn. teise põlvkonna protsessoreid ( SPARC V<arv> , MIPS III , PA-RISC , Power <arv> , Alpha <arv> ) . Peab aga märkima , et teise põlvkonna protsessoreis võib täheldada esimesi kõrvalekaldeid klassikalise RISC-arhitektuuri põhimõtetest . Protsessorkiipide jõudluse tõstmiseks hakati taas suurendama transistoride arvu , laiendati käsustikke , neisse lisandusid uued keerukad käsud , kiipides suurenes funktsionaalsete üksuste arv ning nende struktuur läks üha keerulisemaks , järjekindlalt suurenes käsukonveierite sügavus ( konveieri astmete arv ) . Kui analüüsida <arv>. aastate keskpaiku valminud RISC-protsessoreid , siis nende arhitektuurilis-struktuursetes lahendustes on täheldatavad olulised lahknevused klassikalisest RISC-arhitektuurist . Protsessorite mikroarhitektuuris võib täheldada CISC-arhitektuuri varjatud jooni . Kuigi CISC-protsessoritele olid tekkinud ohtlikud konkurendid RISC-ide näol , ei andnud nende tootjad võitluses turu pärast veel alla . Kiiresti kohaneti muutunud olukorraga ning protsessorite konkurentsivõime tõstmisel ei kardetud “ laenata ” häid ideid RISC-arhitektuurist . <arv>. aastate teisel poolel ilmusid mikroprotsessorid , mis oma mikroarhitektuurselt lahenduselt ei vastanud enam klassikalise CISC- või RISC-arhitektuuri põhimõtetele . Sellisteks protsessoriteks olid näiteks <arv>. aastal valminud MIPS <arv> , Power PC<arv> , Ultra SPARC , Alpha <arv> , aga samuti PentiumPro ( P<arv> ) ning firma AMD kiip K<arv> . Järgmisel aastal lisandus neile veel protsessorkiip PA-<arv> . Kõik nimetatud protsessorkiibid kuuluvad oma arhitektuurselt lahenduselt nn post-RISC-arhitektuuriga (mikro)protsessorite klassi . Vaatamata ühistele arhitektuursetele põhitunnustele , võib üksikute protsessorite mikroarhitektuuri detailsemal analüüsil tuvastada , kas protsessorkiibi “ juured ” ulatuvad CISC- või RISC-arhitektuuri . POST-RISC-ARHITEKTUURI PÕHIJOONI Post-RISC-arhitektuuriga mikroprotsessoreile on iseloomulik püüe integreerida ühtsesse arhitektuurilisse keskkonda positiivseid omadusi , mida pakuvad nii klassikaline CISC- kui ka RISC-arhitektuur . Et enamik post-RISC-protsessoreid on loodud RISC-arhitektuuri baasil , siis on selle arhitektuuri karakteersed tunnused edasiarendatult neis ka kõige rohkem esindatud . Olulisemateks täiustusteks post-RISC-arhitektuuriga protsessoreis võiks pidada järgmisi : registrikogumite arvu ja mahu suurenemine kiibisiseste vahemälude ( käsu- ja andme- ) infomahutavuse kiire kasv , nende struktuursete lahenduste orienteeritus vahemälu assotsiatiivsuseastme tõstmisele ( rakendatakse <arv>- kuni <arv>-kanalilisi moodulassotsiatiivseid struktuure ) täiendavate funktsionaalsete üksuste , eeskätt töötlusüksuste integreerimine kiipidesse käsustike laiendamine uute käsutüüpidega , mis oluliselt erinevad klassikalistes RISC-protsessoreis kasutatavaist käskudest . Enamasti on tegemist käskudega , mida rakendatakse multimeediumiülesannete töötluse kiirendamiseks peeneteraliste sügavate rööpselt talitlevate käsukonveierite , sh elastsete käsukonveierite kasutamine progressiivsete võtete rakendamine programsete hargnemiste konveieriseeritud töötluse korraldamisel protsessori jõudluse tõstmiseks rakendatakse laialdaselt käskude ( käsu ) järjekorravälist ja spekulatiivset töötlust . Tüüpiline on mitme ( levinud on nelja ) käsu rööpne töötlemine . Et kaasaegsete post-RISC-protsessorite käsustikud on väga jõudsalt laienenud , siis on tekkinud sisuline vastuolu protsessori arhitektuurset omapära rõhutava nimetusega - RISC ( Reduced Instruction Set Computer ) , mis viitab tugevasti kärbitud käsustikule . Mõnikord kasutatakse kaasaegsete RISC-protsessorite arhitektuuri iseloomustamiseks hoopiski terminit FISC ( FISC - Fast Instruction Set Computer ) . Nimetusega tahetakse rõhutada protsessori võimet käske kiiresti töödelda . Post-RISC-protsessoris ei püüta iga hinnaga minimeerida mitte käsustikku , vaid üksnes aega , mida kulutatakse käskude täitmiseks . Muidugi pole see lihtne ülesanne , eriti kui väga lühikese aja jooksul tuleb kiiresti sooritada keerukaid ujupunkt- või SIMD-operatsioone . Mis puutub käskude järjekorravälisesse töötlemisse , siis see on üks olulisemaid tunnuseid , mis eristab post-RISC-arhitektuuriga protsessoreid klassikalistest RISC-protsessoreist . RISC-arhitektuuri korral püütakse protsessori kõrget jõudlust saavutada hästi ettevalmistatud objekt- koodide abil . Neis on infotöötluse korraldamisel asetatud raskuspunkt hästi toimivale optimeerivale kompilaatorile . Kui protsessor kasutab aga käskude järjekorravälist töötlust , siis peab ta ise töö käigus leidma optimaalsed käsujärgnevused . Vajadus n-ö . lennult keerukaid otsustusi langetada komplitseerib protsessori struktuuri , lisab täiendavaid astmeid käsukonveierisse ning lõpptulemusena kasvatab kiiresti mikrolülituse transistoride arvu . Teisalt aga lihtsustab protsessori riistvaras täidetavate funktsioonide laiendamine kompilaatori tööd ja vähendab talle esitatavaid nõudeid . Saab kasutada lihtsamaid ja odavamaid kompilaatoreid , mis ei ole nii tugevasti seotud protsessori mikroarhitektuuriga kui klassikalistes RISC-protsessorites . Kui RISC-arhitektuuri loomisel keskenduti küsimusele , milliseid funktsioone saaks protsessori riistvarast üle anda kompilaatori tarkvarasse , minimeerimaks transistoride arvu kiibis , siis praegu toimub vastupidine protsess : protsessorkiipide projekteerijad püüavad ühte kiipi integreerida ikka rohkem ja rohkem funktsionaalseid üksusi , et seeläbi tõsta protsessori jõudlust . POST-RISC-PROTSESSORI ARHITEKTUURNE MUDEL Post-RISC-arhitektuuriga protsessorid kuuluvad superskalaarprotsessorite klassi . Ka mitmed klassikalise RISC-arhitektuuriga protsessorid suudavad , tänu kiirele käsukonveierile , töödelda igal taktil rohkem kui ühte käsku . Erinevalt aga viimastest toimub post-RISC-protsessoreis infotöötlus palju intensiivsemalt , sest töötlusesse suunatavate käsujadade moodustamine toimub neis reaalajas , mitte aga eelnevalt kompilaatori poolt nagu klassikalistes RISC-protsessorites . Olulist rolli protsessori jõudluse tõstmisel etendab käskude järjekorraväline töötlus . Seda võtet rakendati edukalt juba paarkümmend aastat tagasi IBM-i suurarvuteis , kuid mikroprotsessoreis tuli see kasutusele alles hiljuti . Kuna post-RISC-arhitektuur tugineb valdavas osas laade-salvestuse- ehk RISC-arhitektuurile , siis kohtab post-RISC-protsessoris enamasti samu funktsionaalseid üksusi mida RISC-ideski . Oleks siiski väär arvata , et tegemist on vaid kosmeetiliste struktuursete täiustustega , hoopiski mitte . Kuigi paljud funktsionaalsed üksused on säilitanud oma endised nimetused , on nende poolt täidetavad ülesanded saanud uue sisu . Tüüpilise post-RISC-protsessori struktuuri kuuluvad tavaliselt järgmised üksused : käsuvõtuüksus käskude dekodeerimise ja registrite ümbernimetamise üksus käskude lähetamise üksus ( instruction issue unit ) mitu sõltumatult rööpselt talitlevat töötlusüksust ( käskude ) erustamise üksus ( retirement unit ) eraldi registrikogumid püsi- ja ujupunkttöötluse üksuste jaoks eraldi käsu- ja andmevahemälud ( sageli mitmetasemelised ) süsteemisiini liidestusüksus mitmed eriotstarbelised puhverlülitused ( käsupuhver , ümberjärjestamise puhver jt ) . Et paljude ülalloetletud üksuste struktuurseid lahendusi ja tööpõhimõtteid on tutvustatud RISC-arhitektuurile pühendatud monograafiates ja õpikutes [ <arv> , <arv> , <arv> ] , siis järgnevalt keskendume post-RISC-protsessorite arhitektuurilis-struktuursetele uuendustele . Protsessori talitluse kirjeldamisel on aluseks võetud joonisel <arv> esitatud post-RISC-protsessori arhitektuurne mudel . Mudelis on kasutatud järgmisi mnemoonilisi tähistusi : IFU - käsuvõtuüksus ( Instruction Fetch Unit ) BTAC - hargnemiste sihtaadresside vahemälu ( Branch Target Address Cache ) IBU - hargnemisüksus ( Instruction Branch Unit ) BHT - hargnemiste eelloo tabel ( Branch History Table ) MMorL<arv>CM - põhimälu või teise taseme ( L<arv> ) vahemälu ( Main Memory or L<arv> Level Cache Memory ) PDCU - eeldekodeerimise üksus ( Predecode Unit ) ICM - käsuvahemälu ( Instruction Cache Memory ) IMMU - käsuvahemälu mäluohjur ( Instruction Cache Memory Management Unit ) ITLB - käsuvahemälu aadressivahemälu ehk TLB ( Instruction Cache Transfer Lookaside Buffer ) IFCU - käsuvoo juhtimise üksus ( Instruction Flow Control Unit ) IBR - käsupuhver ( Instruction Buffer ) IDCU - käskude dekodeerimisüksus ( Instruction Decode Unit ) IRBR - käskude ümberjärjestamispuhver ( Instruction Reorder Buffer ) IDPU - käskude lähetamisüksus ( Instruction Dispatch Unit ) IDCB - käskude lähetamise ja püsitamise siinid ( Instruction Dispatch &amp; Completion Buses ) RS - ootepuhvrid ehk ootejaamad ( Reservation Stations ) FPU - ujupunktarvude töötlusseade ( Floating Point Unit ) LSU - laade-salvestusüksus ( Load/Store Unit ) IU - püsipunktarvude ( täisarvude ) töötlusüksus ( Integer Unit ) SIMDU - SIMD-käskude töötlusseade ( SIMD-instructions Unit ) IRGF - püsipunktarvude ( täisarvude ) registrikogum ( Integer Register File ) FPRGF - ujupunktarvude registrikogum ( Floating Point Register File ) RNBR - ümbernimetamispuhvrid ehk ümbernimetamisregistrid ( Rename Buffers ) LSQ - laade-salvestuse järjekord ( Load/Store Qeue ) DMMU - andmevahemälu mäluohjur ( ( Data Memory Management Unit ) DTLB - andmevahemälu aadressivahemälu ehk TLB ( Data Cache Transfer Lookaside Buffer ) DCM - andmevahemälu ( Data Cache Memory ) IRU - käskude erustamise üksus ( Instruction Retire Unit ) CIBR - lõpetatud käskude puhver ( Completed Instructions Buffer ) . Üksikute funktsionaalsete üksuste talitlust on otstarbekas vaadelda infotöötlusprotsessi kontekstis . Kõige ülevaatlikuma pildi sündmustest , mis protsessoris leiavad aset käsu täitmisel , annab käsukonveieri talitluse jälgimine . INFOTÖÖTLUSE KORRALDUS POST-RISC-PROTSESSORI KÄSUKONVEIERIS Käsukonveieri tööpõhimõte Post-RISC-protsessori käsukonveieris töödeldakse igal taktil rööpselt mitmest käsust koosnevaid käsugruppe . Käsugruppide töötlemine eeldab keerukamat käsukonveieri struktuuri . Konveierisse lisandub täiendavaid astmeid , mis võimaldavad samaaegselt ( ühel taktil ) töötlusesse suunata ja erustada mitut käsku korraga . Lisaks lülitatakse konveieri astmete vahele veel abistavaid puhverlülitusi . Post-RISC-protsessori käsukonveier on kohaldatud käskude ennetavaiks käsuvõttudeks ja programsete hargnemiste korral nende spekulatiivseks töötluseks . Iseloomulik on käskude järjekorraväline suunamine töötlusüksustesse , selle tulemusena tekivad konveieris erinevais töötlusfaasides olevaist käskudest nn käsupandamid . Lihtsustatult võib post-RISC-potsessori käsukonveierit esitada viieastmelise mudeli abil , kus iga käsk läbib järgmised töötlusüksused : käsuvõtu- ja dekodeerimisüksuse käskude ümberjärjestamise ja lähetamise üksuse töötlusüksuse lõpetatud ( töödeldud ) käskude puhvri erustamisüksuse . Käsukonveieri töötsükli alguseks loeme takti , kui käsuvõtuüksus ( IFU ) sooritab rööpselt mitme käsu ( enamasti nelja ) käsuvõtu käsuvahemälust ( ICM ) . Käsuvahemälust loetud käske säilitatakse enne dekodeerimisüksusesse ( IDCU ) suunamist käsupuhvris ( joonisel <arv> pole seda näidatud ) . Vältimaks konveieri talitluses tühitaktide ( mullide ) tekkimist hargnemiste ( siirdekäskude ) esinemisel käsuvoos , on käsuvõtuüksusesse viidud hargnemiste sihtaadresside vahemälu ( BTAC ) . Sellesse salvestatakse hargnemiste sihtaadressid ( siirdekäsule järgneva käsu aadress ) , viimane võetakse kohe kasutusse , kui käsuvõtul tuvastatakse , et täitmisele tuleb siirdekäsk . Käsuvõtuüksusest suunatakse käsud käsuvoo juhtimise üksusesse ( IFCU ) . Käsu dekodeerimise faasis toimub samaaegselt mitme käsu dekodeerimine . Üldjuhul dekodeeritakse selline arv käske , mida käskude lähetamisüksus ( IDPU ) suudab rööpselt töötlusüksustesse suunata . Koos käskude dekodeerimisega viiakse läbi käskude poolt kasutatavate tulemiregistrite ümbernimetamise operatsioon . Dekodeeritud käsud salvestatakse käsupuhvrisse ( IBR ) . Viimast nimetatakse mõnikord ka käsuaknaks ( instruction window ) . Käsuaknas säilitatavate käskude vahel ei esine juhtimis- ( tänu eelnevalt rakendatud hargnemise prognoosile ) ega nimesõltuvusi ( kõrvaldatakse registrite ümbernimetamise käigus ) . Samas võivad käskude vahel esineda andme- või struktuursed ( ressursi- ) sõltuvused . Käskude lähetust juhtiv loogikalülitus ( IDPU ) analüüsib käsuaknas paiknevaid käske ja valib neist töötlusüksustesse väljastamiseks sobiva kogumi . Teave selle kohta , millised käsud väljastatakse töötlusseadmeisse , edastatakse käskude ümberjärjestamise puhvrisse ( IRBR ) . Käsuaknast väljastatavad ( lähetatavad ) käsud võivad olla valitud sellises järjestuses , nagu nad paiknesid algselt programmis ( st. käsujärjekorra kohaselt ) või mingis muus järjestuses ( järjekorraväliselt ) . Käskude valikul väljastamiseks arvestatakse nendevahelisi andme- ja struktuurseid sõltuvusi . Sõltuvuste olemasolu analüüs võib toimuda kas rööpselt või astmeliselt . Viimasel juhul kontrollitakse esmalt käskudevaheliste struktuursete ja seejärel andmesõltuvuste esinemist . Kui struktuursete sõltuvuste kontroll näitab nende olemasolu , siis selliste sõltuvustega seotud käsud suunatakse funktsionaalsete seadmete juures asuvatesse ootepuhvritesse ( reservation buffer ) või nagu neid sageli nimetatakse - ootejaamadesse ( reservation station ) ( RS ) . Seal viibivad käsud seni , kuni neile vajalikud operandid on muutunud käideldavaks . Ootepuhvris sisaldub iga käsu tarvis järgmine informatsioon : sooritatav operatsioon , käsu poolt kasutatavad operandid ja teave käsusõltuvuste kohta . Mõnes protsessoris ei ole mitte igal funktsionaalsel üksusel individuaalset ootepuhvrit , vaid üht ootepuhvrit kasutab mitu funktsionaalset üksust , nii toimub see näiteks protsessoris Pentium II . Ühel funktsionaalsel üksusel võib olla ka mitu ootepuhvrit , kus erinevad käsud ootavad teenindamist . Sellist lahendust kasutatakse mikroprotsessoris Power PC<arv> . Kui funktsionaalsel üksusel on mitu ootepuhvrit , siis võib see omakorda muutuda struktuurse riski allikaks . Konflikt tekib juhul , kui samaaegselt on mitu ootepuhvris viibivat käsku töötluseks valmis , kuid reeglina suudab funktsionaalne üksus teenindada vaid ühte neist . Käsk suunatakse ootepuhvrist funktsionaalsesse üksusesse , enamasti on selleks kas uju- või püsipunkttöötlusüksus siis , kui temas kasutatavad operandid on muutunud käideldavaiks ning töötlusseade on valmis käsku vastu võtma . Ootepuhvris võib käsk viibida null või enam takti . Käskude suunamisega töötlusüksustesse tegeleb otseselt käskude lähetusüksus ( IDPU ) . Tavaliselt ei ole see konveieri eraldi aste , vaid kuulub lõpplülina käsuvoo juhtimise üksuse ( IFCU ) koosseisu . Infoteisendused operandidega viiakse läbi töötlusüksustes . Kui töötlusüksus lõpetab käsus ettenähtud tegevused ja käsu tulem on valmis sellest väljutamiseks , siis loetakse käsk lõpetatuks ( completed ) . Lõpetatud käsu tulem salvestatakse antud käsule eraldatud ümbernimetamispuhvrisse ( RNBR ) . Nii nagu käskude suunamine töötlusüksustesse , võib ka käskude lõpetamine toimuda järjekorraväliselt . Käsu lõpetamisel vabastatakse tema poolt kasutatud ootepuhver ja käskude ümberjärjestamispuhvrisse ( IRBR ) tehakse käsu olekule vastav sissekanne . Ümberjärjestamispuhvris leiavad kajastamist samuti käsu töötlemise ajal esinenud katkestused . Puhvris säilitatakse teavet ka nende käskude kohta , mis on küll lõpetatud , kuid mida töödeldi spekulatiivselt . Lõpetatud käsud püsitatakse ( committed ) aga vastavalt algsele programsele käsujärjekorrale . Käsku saab püsitada vaid tingimusel , et : käsu töötlemine on lõpetatud kõik antud käsule eelnenud käsud ( arvestades programmi loogilist kulgu ) on juba püsitatud või kuuluvad püsitamisele antud käsuga ühel taktil käsu töötlemise ajal või vahetult enne seda pole esinenud katkestust käsk ei kuulu ( enam ) spekulatiivselt täidetud käskude kogumisse . Käsu püsitamisel muutub käsu poolt genereeritud tulem püsivaks ( lõplikuks ) . Püsiv tulem saadetakse ümbernimetamispuhvrist käsus algselt määratud loogilisse registrisse . Katkestuste esinemisel püsitatakse vaid need käsud , mis käsuvoos asusid enne katkestatud käsku . Kõik järgnevad käsud kõrvaldatakse töötlusest ja suunatakse tagasi käsukonveieri algusesse . Käsukonveieri viimaseks astmeks on käskude erustamise üksus ( IRU ) . Käsu erustamisel kas vabastatakse ümbernimetamispuhvris vastav register või kõrvaldatakse käsk töötlusest , ilma et see annaks mingeid tulemeid . ( Järgneb ) Karin Rava , TTÜ informaatikainstituut Infosüsteemi projekti planeerimise objektid ja tegevused EESSÕNA Artiklis esitatakse infosüsteemi arendamise projekti objektid ja tegevused , millele projektijuht peab projekti ettevalmistamisel tähelepanu pöörama . Samas esitatakse ka planeerimise tulemused , mis on aluseks arendusprojekti juhtimisel . Käsitlemata jäetakse projekti rahalise aspekti planeerimine . Artikli autor peab projekti ettevalmistamise ehk planeerimise etappi projekti elutsüklis ( planeerimine , läbiviimine , lõpetamine ) kõige olulisemaks , sest ettevalmistuses teostamata jäänud tegevused mõjutavad kõige enam projekti edukust . Nii kirjandusallikate [ <arv> , <arv> , <arv> , <arv> ] kui oma kogemuste põhjal võib väita , et kahjuks negatiivses suunas . KASUTATAVAD MÕISTED Infosüsteemi ja projekti mõistet defineerisin artiklis “ Eeldusi infosüsteemide projektide õnnestumiseks ” [ <arv> ] . Lisaks nendele vajavad defineerimist järgmised mõisted : Huvirühm ( Stakeholder ) [ <arv> ] - isik või organisatsioon , kes on aktiivselt projektiga seotud või kelle huve mõjutatakse projekti tulemustega kas positiivselt või negatiivselt . Arendamine ( Development ) [ <arv> ] - on igasugune muutmistegevus , infosüsteemi juures tähendab see infotehnoloogia kasutuselevõttu , tarkvarasüsteemide loomist ja rakendamist , nende arhitektuuri kujundamist ning töökorralduse ja organisatsiooni muutmist . PROJEKTI PLANEERIMISE RAAMISTIK Infosüsteemi projekti planeerimise objekte ja tegevusi võib kokku võtta järgmise tabeliga ( vt. tabel <arv> ) Tabel <arv>. Projekti planeerimise raamistik PROJEKTI PLANEERIMISE EESMÄRGID JA TULEMUSED Projekti planeerimise eesmärgid on [ <arv> ] : saavutada lahendatava ülesande ühine mõistmine kõikide projekti huvirühmade ( süsteemi omanik , süsteemi arendaja jne ) vahel saada ülevaade tehtavatest töödest kindlustada ressursside ( inimesed , vahendid , tarkvara jne ) olemasolu ja nende saamine organiseerida vajalik töö defineerida projekti jälgimis- ja kontrollimeetmed . Projekti planeerimise tulemuseks on projektiplaan , mis peaks sisaldama [ <arv> , <arv> , <arv> ] : projekti eesmärke ja skoopi projekti oodatavate tulemuste spetsifikatsiooni projekti teostatavust mõjutavaid piiranguid projektorganisatsiooni struktuuri , rolle ja vastutust ajakavasid eelarvet edenemise kontrolli protseduure muudatuste juhtimise protseduure probleemide lahendamise protseduure tulemuste vastuvõtmise korda dokumentide haldamise korda kvaliteedi juhtimiseks kasutatavate meetodite ja standardite loetelu . Projekti planeerimise objektid , mida projekti käigus tuleb juhtida , on : projekti huvirühmad ja nende nõuded projekti eesmärgid projekti oodatavad tulemused , ka vahetulemused infosüsteemi arendustegevustik ( etapid , iteratsioonid ja tegevused ) aeg ( verstapostid , tegevuste ajaline kestus ) projekti organisatsiooniline struktuur ( meeskonnad , rollid ) , inimressursid ja nende oskused projekti jälgimise ja järelevalve protseduurid töökeskkond ( riistvaralised ja tarkvaralised vahendid ) riskid ( probleemid , tõrked ) kvaliteet ( standardid , kriteeriumid , meetrika ) rahalised kulutused . PROJEKTI HUVIRÜHMADE ANALÜÜS Projektijuht koostöös projekti tellija ja täitja esindajatega peab määratlema huvigrupid , tegema kindlaks , millised on nende vajadused ja ootused , mida projekti käigus peab hakkama juhtima ning ka mõjutama , et kindlustada projekti edu [ <arv> ] . Kuigi erinevatel huvirühmadel võivad olla omavahel vastuolulised nõuded , tuleks lähtuda eelkõige klientide huvidest . Projekti võtmehuvirühmadeks on : projektijuht - isik , kes vastutab projekti juhtimise eest klient - isik või organisatsioon , kes hakkab projekti tulemusi kasutama ükskõik millisel tasemel projekti täitja - ettevõte , kelle töötajad on kõige otsesemalt seotud projektitööga projekti tellija ( sponsor ) - tellija- või täitjaorganisatsiooni isik või isikute grupp , kes annab projekti jaoks finants- või mingit muud liiki ressursse . Tavaliselt on projekti tellijaks ehk tulevase infosüsteemi omanikuks ja kliendiks ehk loodavate tarkvarasüsteemide kasutajaks isikud ühest ja samast organisatsioonist . Erinevus võib olla näiteks ministeeriumide puhul , kes tellivad infosüsteemi projekte , aga kliendiks võib olla ministeeriumi alluvuses olev amet või riiklik register . Samas võib ka tellija- ja täitjaorganisatsioon olla üks ja seesama , kui infosüsteemi arendust tellitakse organisatsiooni oma osakonna , näiteks infosüsteemide osakonna käest . Huvirühmade päritolu mängib tähtsat rolli nii projektorganisatsiooni kui ka selle liikmete omavahelise töökorralduse loomisel . Käesoleva artikli kontekstis on mõisted “ klient ” ja “ tellija ” samatähenduslikud . PROJEKTI SKOOBI MÄÄRATLEMINE Selleks et projekti tellija ( infosüsteemi või selle osa tulevane omanik ) saaks otsustada projekti alustamise üle , vajab ta projekti tähtsate aspektide kirjeldust , mis sisaldab muuhulgas [ <arv> ] : projekti üldisi eesmärke ( projekti toetust põhiorganisatsiooni tegevusele ) projekti konkreetseid eesmärke ( põhieesmärke , tulemuseesmärke - põhieesmärgid jaotatuna detailsemateks , mõõdetavamateks eesmärkideks ) . Projekti eesmärk on kirjeldus tulemusest , mis tuleb saavutada teatud aja piires ja mida iseloomustab [ <arv> ] : mõõdetavus - eesmärgi täitmist peab olema võimalik vastavalt objektiivsetele kriteeriumidele mõõta ajastatus - eesmärgi saavutamiseks vajalik aeg peab olema määratud reaalsus - eesmärk peab olema reaalselt saavutatav kvalitatiivne hinnatavus - eesmärk peab olema määratletud nii , et lõpptulemus osutub kvaliteetseks heakskiidetus - projekti tellija peab olema eesmärgi heaks kiitnud . Tarkvarasüsteemi arendusprojekti skoobi loomisel on vaja teha järgmist [ <arv> ] : defineerida probleem , mida projekti käigus on vaja lahendada analüüsida nõudeid , mida projekti tellija tahab projektiga saavutada luua arendatava süsteemi tükeldus hinnata süsteemi loomiseks ja rakendamiseks vajalikke ressursse ja töömahtusid . Infosüsteemi arendamise juures tähendab see strateegilise analüüsi teostamist . Projekti oodatavad tulemused on asjad , mida projekti täitja peab ette valmistama ja kellelegi üle andma [ <arv> ] . Planeeritavad asjad võivad olla : tooted ( tulemused ) projekti tellijale ( kliendile ) ( customer products ) protsessi tulemused ( process artefacts ) sisemised tulemused ( internal deliverables ) teenused ( services ) . Projekti tooted on asjad , mida klient vajab täielikult kasuliku süsteemi jaoks . See ei ole mitte ainult programmikood , vaid ka kasutajajuhendid , abifailid , installeerimisskriptid ja -juhendid . Protsessi tulemused on asjad , mida meeskond arenduse jooksul loob , näiteks mudelid . Infosüsteemi arenduse juures on need tellijale edastatavaks tooteks , st temale antakse üle ka süsteemi spetsifikatsioon . Sisemiste tulemuste hulka kuuluvad arendustulemused , mis sisaldavad projekti jooksul kogutud intellektuaalset väärtust , näiteks nõuete ( requirements ) dokumendid ja testimisplaanid . Lisaks võib olla asju , mis on vajalikud toote hooldamisel , näiteks probleemide andmebaasid . Teenused on pingutused , mida projekti tellija võib oodata lisaks tootele või teistele tulemustele . Siia kuuluvad näiteks koolitus , konsultatsioonid , installeerimine , kohapealne toetus . ARENDUSMETOODIKA MÄÄRATLEMINE Arendusmetoodika määratlemise eesmärk on kooskõlastada projekti huvirühmade seisukohad selles osas , millist arendustehnoloogiat süsteemi loomisel või muutmisel kasutama hakatakse . Siin on vaja kindlaks määrata arenduse strateegia : läbi milliste etappide - objekt-orienteeritud lähenemise puhul lisaks ka kui mitme ja milliste iteratsioonide - ning tegevuste kaudu infosüsteem saavutatakse . Süsteemi elutsükli valikust sõltub projekti tegelik kestus ja probleemide hulk , mis võivad olla arendamise elutsüklisse “ sisse programmeeritud ” . Info- ja tarkvarasüsteemide arendamise elutsüklite analüüs jääb selle artikli raamidest välja . ETAPPIDE JA TEGEVUSTE PLANEERIMINE Projekti etappideks jaotamise eesmärgiks on saavutada võimalus tegevusi järk-järgult planeerida , otsustada ja konkretiseerimiseda [ <arv> ] . Infosüsteemide arendamise juures kattuvad projekti etapid tavaliselt süsteemi elutsükliliste etappidega . Iga etapp on vaja dekomponeerida projektitöödeks - kindlaks hulgaks tegevusteks , mille lõppedes antakse väljund üle järgmisele projektis osalevale ressursile [ <arv> ] . Projektitööde põhjal moodustub üksteisele järgnevate projektitööde loogiline struktuur , mille lõpptulemusena peaks saavutatama kindla(d) eesmärgi(d) . Teine viis , mida projektitööde struktureerimiseks kasutatakse , on tööde hierarhiline ülesehitus . Projekti etapid “ lõhutakse lahti ” projektitöödeks ja need kujutatakse puukujulise struktuurina , mida nimetatakse tööde struktuuriks ( work breakdown structure - WBS ) [ <arv> , <arv> ] . AJA PLANEERIMINE Aja planeerimise eesmärk on tagada projekti ajaliselt võimalikult täpne realiseerumine [ <arv> ] . Projektivõrgustikus või tööde struktuuris esitatud tegevustele määratakse ajalised kestused , mis moodustavad ajagraafiku . Hästi koostatud ajagraafiku abil on võimalik : näha eesmärkide saavutamist ajas konkretiseerida ülesandeid kirjeldada hetkeolukorda projektis anda tagasisidet tellijale ja osalejatele . Projekti ajakavaga pannakse paika , millal üks või teine tööstruktuuris või projektivõrgustikus kajastatud projektitöö algab ja lõpeb . Et projekti huvirühmad on erinevad , siis peab ajakava olema erineva detailsusastmega [ <arv> ] . Kõrgema taseme/väikese detailsusastmega vaade on mõeldud n.-ö välismaailmale ( projekti tellija ) , detailne vaade - meeskonna jaoks . Projektijuhil on vaja tegeleda ajakava <arv> detailsus- ja paindlikkustasemega : masterajakava ( master schedule ) makroajakava ( macro schedule ) mikroajakava ( micro schedule ) . Masterajakava annab ülevaate kogu süsteemiarendusest , sisaldades peamisi verstaposte , demonstreeritavaid versioone süsteemist , formaalseid projekti läbivaatusi jne. Seda kasutatakse suhtlemiseks projekti tellijaga . Makroajakava annab projektitasemelise ülevaate . Seda kasutatakse käsiloleva süsteemiversiooni loomise igapäevaseks juhtimiseks ja see sisaldab kogu masterajakava sisu , lisaks veel : arendusetappe sisemisi verstaposte . Mikroajakava koordineerib meeskondade tööd ning seda planeeritakse arendusetappide käigus jooksvalt . PROJEKTI ORGANISATSIOONILINE PLANEERIMINE Projekti organisatsiooniline planeerimine koosneb [ <arv> ] : organisatsioonilise struktuuri planeerimisest koosseisude komplekteerimisest meeskondade loomisest . Organisatsioonilise struktuuri planeerimine seisneb projekti organisatsiooni , rollide , vastutuste ja aruandlussuhete määratlemises , dokumenteerimises ja omistamises . Organisatsioonilise planeerimise tulemused on : organisatsioonikaart aruandlusseoste esitamiseks ; projekti rollid ( kes teeb mida ) ja vastutused ( kes otsustab mida ) - esitatakse vastutusmaatriksina . Projektorganisatsiooni võimalik struktuur on järgmine [ <arv> ] : juhtrühm , mille koosseisu kuuluvad : juhtrühma esimees , kelleks on tellijaorganisatsiooni juhtkonna liige juhtrühma liikmed , kelleks on nii tellija- kui täitjaorganisatsiooni projektijuhid ja esindajad töörühm , mille koosseisu kuuluvad : rühmajuht , kelleks on täitja projektijuht rühma liikmed , kelleks on arenduse teostajad ja kliendi esindajad ( nõustatavad ) tugirühm , mille koosseisu kuuluvad eksperdid , kvaliteedijuhid jne. Sõltuvalt projekti skoobist ehk arendatava süsteemi suurusest võib töörühmi olla mitmeid . Infosüsteemi strateegilise analüüsi läbiviimise projektorganisatsiooni kajastab järgnev organisatsioonikaart ( vt. joonis <arv> ) . Koosseisude komplekteerimise eesmärgid on : planeerida projekti jaoks olulised oskused , mis on vajalikud rolliga määratletud tegevuste ehk käitumise ja saavutatavate tulemuste ehk vastutuse jaoks varustada projekti inimressurssidega , kasutades olemasolevat või töövõtulepinguga tööjõudu grupeerida vabad ressursid suhteliselt sõltumatuteks , kuid koostöötavateks meeskondadeks omistada rollid ja vastutused . Meeskonna loomise eesmärgiks on moodustada erinevate eesmärkide ja kogemustega inimestest hästiintegreeritud grupp . Igale liikmele on vaja koostada töö kirjeldus , mis määrab kindlaks aruandlussuhted , vastutused ja kohustused . Mitte ainult iga meeskonna liige , vaid projektorganisatsiooni kõik liikmed peavad teadma , millistes ülesannetes nende osavõttu oodatakse ja millises mahus . Individuaalsete ülesannete ja vastutuste defineerimisel kasutatakse vastutusdiagramme [ <arv> ] . Kui meeskonna liikmetel napib rolli täitmiseks vajalikke oskusi , on vaja anda vastavat koolitust , mis võib toimuda kas enne projekti tegelikku algust või selle alguses . Võimaliku koolitusvajadusega peab projektijuht arvestama ja vastavalt sellele ka ajakava ning vahendeid planeerima . PROJEKTI KOMMUNIKATSIOONI PLANEERIMINE Projekti kommunikatsiooni planeerimise eesmärk on panna paika projekti kestel toimuv infovahetus nii huvirühmade , põhiliselt projekti tellija- ja täitjaorganisatsiooni vahel kui ka täitjaorganisatsiooni sees [ <arv> ] . Infovahetus puudutab eelkõige projektiliikmete omavahelist sisulist koostööd kui ka projekti jälgimist ning järelevalvet , täpsemalt : projekti (vahe)tulemuste nii meeskonnasisest , meeskondadevahelist kui tellijale üleandmise-vastuvõtmise korda projekti seisundiaruandlust projekti kestel toimuvate muudatuste juhtimist probleemide juhtimist . Infovahetuse seadistuse tulemused on : töö (vahe)tulemuste vormistamise ja kättesaadavaks tegemise kord tehtud töödest nii projektijuhile kui projekti tellijale aruandmise kord töö käigus toimuvate muudatuste arvestamise ja jälgimise kord töö käigus tekkinud probleemidest ja nende lahendustest informeerimise kord . Projektiliikmete sisuline infovahetus puudutab näiteks erinevat tüüpi diagrammide kooskõlastamist nii meeskonna sees , meeskondade vahel kui tellija esindajatega . Tööde vahe- ja lõpptulemuste üleandmise planeerimisel on vaja kindlaks määrata [ <arv> ] : milline on tellija ja täitja vastutus tulemuste aktsepteerimise korraldamisel , näiteks kes installeerib riist-/tarkvara testimisplatvormid ; kes korraldab testandmed ja testide jaoks vajalikud ressursid millised on tulemus(t)e aktsepteerimise kriteeriumid milline on tulemuse aktsepteerimise ajagraafik kuidas toimub aktsepteerimise käigus tekkinud probleemide lahendamine jne. Seisundiaruandluse planeerimisel on vaja nii meeskonnasiseselt kui projekti tellijaga otsustada : milline on vajalik alginfo projekti seisundi määratlemiseks , s.t milliseid andmeid ja mille kohta ( tegevuste tegelikud algus- ja lõpukuupäevad , tööde tegelikud mahud jne ) projektijuht seisundi hindamiseks vajab kui tihti toimub aruandlus nii projektijuhile kui tellijale ( iga päev , iga nädal jne ) mil moel toimub seisundiaruandlus ( nt projekti- ja juhtrühma koosolekud ) . Projektis asetleidvad muudatused puudutavad eelkõige arendatavat süsteemi ning nende jälgitavaks muutmiseks on vaja määrata nende haldamise protseduurid : kes ja kuhu salvestab muudatusettepanekud kes vastutavad muudatusettepanekute läbivaatamise eest kuidas toimub ettepanekute läbivaatus kuidas toimub muudatuste sisseviimine arendatavasse süsteemi . Probleemide juhtimise planeerimise eesmärk on määratleda , läbi milliste protseduuride toimub projekti käigus tekkinud probleemide juhtimine ja lahendamine . Täpsemalt on vaja fikseerida : meetodid , mida meeskonna liikmed kasutavad probleemi tõstatamiseks ( vigade määratlemine , muutuste nõude tõstatamine jne ) kes osaleb probleemi hindamisel ja parima lahenduse otsustamisel milline on lahenduse rakendamise mehhanism kuidas toimub korrigeerivate tegevuste lõpetatuks kuulutamine . Enamikul tarkvaraprojektidest on kolme liiki probleemid : toote probleemid - seotud nõuete , disaini ja koodi kirjutamisega projekti probleemid - seotud keskkonna , ressursside , ajagraafiku/eelarve ja vahenditega protsessi probleemid - seotud elutsükli , metoodika , kvaliteedi kindlustamisega . PROJEKTI DOKUMENTATSIOONI PLANEERIMINE Projekti dokumentatsiooni planeerimise eesmärk on määratleda , millises vormis ja millise sisuga toimub nii arendatava süsteemi kui projekti juhtimise jaoks vajaliku teabe dokumenteerimine . Süsteemi dokumentatsiooni alla kuulub arendusega kaasaskäiv süsteemi spetsifikatsioon , projekti juhtimise dokumentide hulka kuuluvad näiteks [ <arv> ] : projektiplaan ülesannete lehed seisundiaruanded koosolekute protokollid üleandmis- ja vastuvõtmisaktid jne. TÖÖKESKKONNA SEADISTAMINE Töökeskkonna seadistamise eesmärk on määratleda , milliste vahenditega ja millises tehnilises keskkonnas toimub töö ja infovahetus . Töökeskkonna seadistamise tulemused on : süsteemi arenduskeskkonna seadistamine , mis puudutab nii riist- kui tarkvaralisi vahendeid , siia kuuluvad nii disaini- kui realiseerimisvahendid projektiserveri seadistamine ( nt. ühiskataloogid , kus hoitakse ja tehakse projektisiseselt kättesaadavaks projekti (vahe)tulemused ja projektdokumentatsioon ) infovahetuse keskkonna seadistamine - puudutab teadetetahvleid , muudatuste ja probleemide andmebaase jne. RISKIDE MÄÄRATLEMINE JA HINDAMINE Riskide defineerimise eesmärgiks on määratleda , analüüsida ja järjestada projekti riskid ning määratleda sobivad riskijuhtimise strateegiad [ <arv> ] . Riskide määratlemine ja hindamine koosneb : potentsiaalsete riskide määratlemisest riskide analüüsist ja prioritiseerimisest riski võimalikkuse strateegiate määratlemisest riski pehmendamise strateegiate määratlemisest riski juhtimise strateegiate määratlemisest . Potentsiaalsete riskide määratlemise eesmärgiks on tekitada projekti riskide , mis-võib-halvasti-minna olukordade nimekiri , kus otsitakse sündmusi , mis võivad aset leida ja mis võiksid vähendada tõenäosust , et projekt lõpeb õigete omadustega ja nõutava kvaliteeditasemega tähtajaliselt ning eelarve piires . Riskide analüüsi ja prioritiseerimise eesmärgid on sarnaste riskide ühendamine ja riskide liigitamine projektile avaldatava mõju järgi . Riski võimalikkuse strateegiate määratlemise eesmärgiks on arendada alternatiivseid plaane juhtumiks , kui riski vältimine või teise kohta siirdamine on ebaõnnestunud või pehmendamine ei olnud edukas . Riskide vältimiseks võib kasutada järgmisi võimalusi : riskide vältimine - reorganiseerida projekti selliselt , et seda ei saa riskiga mõjutada riskide siirdamine - reorganiseerida projekti nii , et riski kannab keegi teine ( klient , hankija , pank jne ) riskide aktsepteerimine - otsustada elada riskiga . Jälgida riski sümptomeid ja otsustada võimalikkuse plaanis , mida teha , kui risk esile kerkib . KVALITEEDI PLANEERIMINE Kvaliteedijuhtimine täiendab projektijuhtimist , näiteks mõlemad peavad oluliseks [ <arv> ] : kliendi rahulolu - vajaduste mõistmine , juhtimine ja mõjutamine selliselt , et kliendi ootustele on vastatud või need on ületatud ennetamist läbi inspekteerimiste - vigade vältimine on alati odavam kui nende parandamine juhtkonna vastutust - edukus nõuab kõikide meeskonnaliikmete osavõttu , kuid see tähendab ka juhtkonna vastutust kindlustada projekti vajalike ressurssidega . projekti toimumisel korduvat “ planeeri-tee-kontrolli-tegutse ” -tsüklit Info- ja tarkvarasüsteemide arendamise kvaliteedi planeerimine sisaldab vastavate kvaliteedi- standardite valikut - CMM , SPICE , ISO <arv> jne. KOKKUVÕTE Artiklis käsitletud objektid on projekti alustamise ettevalmistamisel olulise tähtsusega . Kui nimetatud aspektid on planeeritud , on edu vähemalt projekti lõpetamiseks garanteeritud . Mitmed kirjandusallikad väidavad , et projekti oodatava toimimise läbimõtlemine ja kirjapanek plaanina on projekti eduka läbiviimise eelduseks . Kuidas projekt aga tegelikult kulgeb ja mis nendest planeerimise objektidest edasi saab ehk milles seisneb projekti tegelik juhtimine , see on juba teine teema . gap desc='references'&gt; Tõlkinud Vello Hanson I.Hannula , R.Linturi / SADA NÄHTUST <arv>-<arv> / Virtuaal-Helsingi ja kübermutt <arv> Mao aasta Islami aasta <arv> Maailma rahvaarv on <arv> miljardit Oscari auhindu enam ei jagata Üldine pensioniiga tõuseb viie aasta võrra Interneti WWW saab <arv>-aastaseks Aafrikas üritatakse relvastatud sissetunge Euroopasse Pakenditaime Wrapit kasvatamine ja hooldus ( Kiievi GBI juhend <arv>½<arv> ) WHO ettepanek : elektrostaatiline tolmutõrje avalikes ruumides kohustuslikuks Mitmed Aafrika maad on vastu meeste kontratseptiivikohustusele Esimese maana suleb koolid Soome Psühhofüüsilised hüpnomõjurid tekitavad langetõvehooge Ultrahelivihmavarjud on saanud moehulluseks Kui mees on Taeva Poeg ja tal on käes kogu riigi võim , aga ta ei suuda vältida hirmutegusid , ei ole ta suutnud eraldada võimu turvamiseks vajalikke abinõusid neist , mis viivad hukatusse . Hai dünastia aegse üliõpilase kirjutis ainuvalitsejast . Hiina , <arv>. sajand CompuMedia - <arv>.<arv>.<arv> ÜRO eostustõrjeprogramm on ohus MITMED AAFRIKA MAAD ON VASTU MEESTE KONTRATSEPTIIVIKOHUSTUSELE Meeste surve takistab mitmetes maades rahvastiku iibe piiramisele suunatud ÜRO programmi elluviimist . Vastuseis on isegi vallandanud rahutusi . Valitsused on juba survele järele andnud muuhulgas Keenias , Ülem-Voltas , Malis , Burundis ja Bangladeshis . Nendes maades ei ole ellu viidud ÜRO otsust ega kehtestatud eostusvastaste seadmete kohustust . Rahutuste põhjuseks on väike , <arv>/<arv> millimeetri suurune nanoarvuti B-Timer . See on seotud ÜRO eostustõrjeprogrammi olulise osaga - meeste kontratseptiivseadmega Anti-Sperm , millega mees saab ise seada eostamise vältimise soovitud aja . Mõnes riigis on aga rahvaarvu kasv nii kiire , et ÜRO ja Maailmapank on nõudnud nende maade meestele kohustuslikku B-Timerit . Kui see ühendatakse Anti-Spermiga , ei saa mees enam ise valida eostuse vältimise aega , vaid seda teevad näiteks tervishoiuametnikud . Nendes maades , kus nanoarvutitele kõige ägedamalt vastu seistakse , on mehe viljakus traditsiooniliselt mehelikkuse avaldus . Seetõttu on seade neis maades saanud nimeks ManEater . Nimi on tuletatud tuttavast meeste potentsiseadmest ManMaker . Maailmapank keeldub andmast laenu nendele maadele , kes ei täida ÜRO programmi . Programm nõuab muuhulgas , et ülalmainitud maade tervishoiuametnikud peavad häälestama B-Timeri nii , et mehed saaksid sigitada lapsi ainult iga kolme aasta järel . Kolmandik meestest võib teha lapse tuleval aastal , järgmine kolmandik aastal <arv> ja viimane kolmandik aastal <arv>. Ametiisikud kartsid raskusi ka Indias , kuid seal õnnestus valitsusel saada mehed peaaegu täielikult programmi toetama . Valitsuse edu tagas see , et B-Timeri ostnud mehed saavad eripreemia ja viljatutel aastatel tasuta visiidid virtuaalsetesse lembelatesse . Anti-Sperm on odav kontratseptiiv . Kahesentimeetrine õhuke kapsel sisaldab eostusvastaste hormoonide kontsentraati kuueks aastaks . Kui koos kapsliga pole paigaldatud B-Timerit , saab mees seadet ise kaugpuldiga häälestada . Seadme hind on suurte sarjade ja ÜRO programmi tõttu poole aastaga langenud kümnendikuni algsest , st <arv> euroni . ÜRO-le hakkas rahvastiku iive muret tegema eriti pärast seda , kui potentsiseade ManMaker saavutas suure populaarsuse ja levis kiiresti üle maailma . Seetõttu kasvas sündivus mõnes riigis endiselt ja suurendas maailma demograafilist tasakaalutust . Praegu kasvab arenenud maades rahvaarv keskea tõusu tõttu , arengumaades aga kõrge sündivuse tõttu . Kontratseptiivseade on tekitanud erimeelsusi ka ÜRO-s . Näiteks ütles Burundi peaminister Jacques Toyi peaassambleel , et meeste kontratseptiiv on meeletus ning tagajärg sellest , et paljude maade ja ka ÜRO juhtivates ringkondades on naistel praegu enamus . Uudis SatWebis - <arv>.<arv>.<arv> ESIMESE MAANA SULEB KOOLID SOOME Soome Eduskund on käivitanud õppimise alal maa ajaloo suurima reformi pärast algkoolide süsteemi rajamist : ta on otsustanud sulgeda traditsioonilised koolid ja viia õppimine üle õpikeskustesse . Üleminek toimub vähehaaval kolme järgmise aasta jooksul . Õpikeskuste mõte on tõhustada õppimist ja eelkõige seada õppimine vastavusse ühiskonna hetkeolukorraga . Õpikeskuste ideed on arendatud mitu aastakümmet . Muuhulgas nentis professor Matti Bergström juba eelmise aastatuhande lõpul , et koolisüsteemil ja õpetamisel põhinev õppimine on aju struktuuri seisukohalt ebaefektiivne . Traditsioonilisel koolisüsteemil on siiski olnud tugev poolehoid - ja mitte viimases järjekorras õpetajate hulgas . Alles Uus-Meremaal saavutatud tulemused viisid selleni , et õpikeskuste kavandamine sai alata ka Soomes . Rõhk teadmiste hankimisele Õpikeskused on mõeldud kogu elu kestvaks õppimiseks . Õppimises peavad kavandajad tähtsaimaks teadmiste hankimist ja nende ühendamist . Oluline on , et inimesed maast madalast õpiksid tunnetama maailma , hankides selle kohta teadmisi ise . Sel põhjusel maksab Soome riik kõigi teabe hankimiseks vajalike sideühenduste , infoallikate sirvimise ja neist hangitud failide eest . Keskuste tegevuse puhul rõhutatakse ka sotsiaalsete oskuste ja mõtte eripära väärtust . Õpikeskustes töötatakse muunduvate rühmadena , mis vahelduvad õppija huvi järgi , mitte enam vanuse põhjal nagu varem . Õppimise oluline osa on harjumine probleemide lahendamisega ja eelarvamusteta mõtlemisega ning eri teadmusalade ühendamine . Õpimeetodid on suunatud muuhulgas sellele , et õppimisel kasutataks kõiki meeli . Õppimine on täielikult interaktiivne ja näiteks keeli võib õppida nn keelekümbluse rühmades ja hüpnopeedia abil . Kavandajad peavad eriti tähtsaks seda , et õppimine oleks meeldiv , sest on tõestatud , et see tõstab õppimise kiirust tervelt kolmandiku võrra . Kuna õppijad saavad ise vabalt moodustada rühmi ja õppida enda valitud teemasid , võib ühes rühmas olla inimesi kuuest kuni <arv>-eluaastani . Üle <arv> aasta vanustele on peale selle veel rühmi , kus püütakse muundada nende kogemusi nii , et need rikastaksid konkreetset õpiolukorda . Õpetaja - uude rolli või pensionile Õpikeskustes saavad õpetajaist juhendajad . Eriti rõhutab Eduskund juhendajate võimeid , oskusi ja iseloomu . Eduskund on ka otsustanud , et juhendajate palgad tõstetakse õpetajate praeguse palgatasemega võrreldes umbes kahekordseks , et selle elukutse prestiiž oleks piisavalt kõrge ja et seda kutset taotleks palju andekaid inimesi . Need õpetajad , kes ei taha või ei suuda koolituda juhendajaiks , siirduvad enneaegsele pensionile , mille suurus on <arv> % palgast . Eduskund ütleb õpikeskuste seaduse põhjendustes , et õppimisega saavutatavad teadmised , oskused ja valmisolekud on esmane vahend , millega Soome saavutab edu rahvusvahelises konkurentsis . Reformi kulud on suured , kuid Eduskunna arvates tasub see investeering end kiiresti . Kolmel esimesel aastal kulub ühekordseteks hüvitusteks <arv> miljardit eurot , peale selle kasvavad iga-aastased õppimiskulud üle kahe korra . Rühm senist koolisüsteemi pooldavaid õpetajaid korraldas eile Eduskunna hoone ees meeleavalduse . Korraldajad lootsid <arv> <arv> inimese osavõttu , kuid kohale ilmus ainult pisut üle kolmesaja . SatWeb - <arv>.<arv>. <arv> PSüHHOFüüSILISED HüPNOMõJURID TEKITAVAD LANGETõVEHOOGE Mehhikos Acapulcos on üle <arv> inimese toimetatud haiglasse ootamatute langetõvehoogude tõttu . Politseilt saadud andmete kohaselt on kõik haigestunud kasutanud Virtual Playmate Ltd. uusimat hüperelamust , armumaailma Beyond Passion . Acapulco on üks maailma <arv>-st meelelahutusvabaduse linnast . Neis linnades ei ole virtuaalseadmetele , keemilistele toimeainetele ega muudele lõbustusvahenditele kehtestatud peaaegu mingeid kitsendusi . Vabalõbulinnades saavad kliendid kogeda milliseid elamusi tahes , ükskõik milliste vahenditega . Ainus piirang on tegelike inimeste ja omandite puutumatus . Acapulcos käib igal aastal üle <arv> miljoni külastaja ning elamuste taotlemine pole alati ohutu . Näiteks sureb Virtual Erotic Centeri lembelates igal aastal <arv>-<arv> inimest füüsilisi jõuvarusid ületavate elamuste tõttu . Viimasel ajal on Acapulcos levinud muuhulgas hüperelamused - virtuaalmaailmade ja psühhofüüsiliste hüpnomõjurite kombinatsioonid . Nendes on kõigisse meeltesse toimivate äärmuseni arendatud virtuaalmaailmadega ühendatud näiteks keemilisi ja ülitugevaid füüsilisi hüpnomõjureid . Keemilised hüpnomõjurid on enamasti narkootikumituletised , mis lisavad keskendumist ja kogemise intensiivsust . Füüsilised mõjurid on näiteks regulaarsed eredad valgussähvatused , teatud lõhnad , akupunktuuritorked ja teatud sagedusega helid . Kõigi nende kombineerimisel ületab elamuste tase tugevaimagi tavalise kogemuse . Kümned tuhanded inimesed on juba sattunud sõltuvusse hüperelamustest . Vabalõbulinnade majanduslik tähtsus on aga sedavõrd suur , et nende tegevusele ei kavatseta seada piiranguid . Peale selle väidab nende linnade juhtkond , et paljud linna pakutavatest elamustest on ravitoimelised - nagu seda väljendas Acapulco turundusjuhataja Adolf Hiller : “ Kas pole parem , et mees tapab oma naise või armukese virtuaalselt , mitte tegelikkuses ? ” WHO asepresident Yong Tan seevastu tõdes , et langetõvehood on piisavalt suur oht , vältimaks psühhofüüsiliste hüpnomõjurite pääsu vabale turule , nagu seda on nõudnud mitmed valmistajad ; need jäävad siiski lubatavaks endiselt ainult meelelahutusvabaduse linnades . Viivi Jokk , TTÜ informaatikainstituut Laadid ja nende kasutamine Arvuti abil loodud ja selles säilitatava dokumendi kasutamine autori poolt ei piirdu enamasti ühekordse printimise , trükkimise või avaldamisega veebis . Enamasti luuakse selle alusel dokumendi uusi , täiendatud ja parandatud versioone , kasutatakse dokumendi osi hoopis mingi muu materjali koostamisel või saadetakse teistele täitmiseks ( nt tabelid ja vormid ) . Tulenevalt sellest võib tekkida vajadus nii dokumendi sisu , struktuuri , kujunduse kui ka formaadi muutmiseks või hoopis esitatud kujunduse säilitamiseks . Selliseid võimalikke arendusi on kasulik arvestada juba dokumendi kavandamisel ja koostamisel sobivate tekstitöötlusvahendite , näiteks laadide ja mallide kasutamisega . Käesolevas artiklis vaadeldakse laadide ( Style ) loomise ja muutmise võtteid ning laadide kasutamise kasulikkust . Laadid on alati seotud malliga . Selliseid laadi omadusi , mis on seotud laadi lisamisega mallile , ja ka malli loomist antud artiklis ei käsitleta . <arv>. MIS ON LAAD ? Määranguid , mida peab arvesse võtma põhiteksti , pealkirjade , loetelude jms. formaatimisel on üsna palju . Tõenäoliselt kasutatakse selliseid määranguid vähegi pikemas dokumendis ka korduvalt . Ühelt poolt on taoliste määrangute kordamine üsna tülikas ja teiselt poolt nende edaspidine muutmine veelgi tülikam , kui seda on tehtud käsitsi MS Word'i käsu Format abil . Õnneks saab dokumendi elementide määranguid kokku võtta üheks nimega vormingukäsukogumiks - laadiks ( Style ) , mida saab luua , säilitada , rakendada dokumendi elementidele ja muuta . Laadi muutmisel muutuvad kõigi selle laadiga seotud tekstielementide määrangud . Eristatakse kahte liiki laade : lõigulaad ( Paragraph Style ) ja märgilaad ( Character Style ) . Lõigulaad on seotud kogu lõiguga , märgilaad mingi teksti osaga , mis ei ole terve lõik ( nt sümbol või sõna ) . Märgilaad sisaldab määranguid , mis on seotud teksti ilmestamisega ja antakse korraldustega Format , Font laadimäärangu sees ( Format , Style , New/Modify ) . Lõigulaad hõlmab kõiki määranguid , mis on seotud nii teksti ilmestamise kui ka teksti paigutusega , tärnimise ja nummerdamisega , tabuleerimisega jms ning määratakse erinevate korraldustega menüüst : Format , Paragraph / Bullets and Numbering / Tabs / Border and Shading laadimäärangu sees ( Format , Style , New / Modify ) . Kuna tundub , et töö laadidega ei ole tekstitöötluse tavapärane osa , siis vaadeldakse laadide kasutamisega seotud tehnikaid siin täpsemalt . <arv>. LAADI KASUTAMINE Word'is on terve hulk sisseehitatud laade , mis on seotud normaalmalliga . Igal laadil on oma nimi ( Normal , Body Text , Heading <arv> , Heading <arv> , List <arv> jne. ) ja nendega seotud kindel valik vormindamismääranguid . Vaikimisi määratud laadide nimesid saab näha laadiakna avamisel ( vt. järgnevat joonist ) . Selleks et mingi laad toimiks , tuleks teda tekstile rakendada . Laadi rakendamiseks juba olemasolevale tekstile tuleb tekst aktiveerida ja valida laadide aknast vajalik laad . Laadi rakendamiseks sisestatavale tekstile klõpsata kursor sisestamispunkti ja valida seejärel laad . Valitud laadi rakendatakse sisestatavale tekstile . Laadi rakendamiseks saab kasutada ka kiirkäsku , kui see on laadile määratud ( vt Laadide defineerimine ) . Laadide ülekandmiseks saab kasutada ka nuppu Format Painter nii nagu formaatide ülekandmisekski . Selleks aktiveerida laadiga määratud tekst , klõpsata formaadipintsli nupul ja “ pintseldada ” üle uus tekst , millega seotakse nüüd laad . Formaadipintsli korduvaks kasutamiseks teha nupul topeltklõps . Pealkirjade jaoks on Word'is disainitud hierarhilised pealkirjalaadid Heading <arv> , Heading <arv> jne. Nendes laadides on kõik pealkirjale vajalikud määrangud ( font , suurus , laad , paigutus , ruum pealkirja ees ja järel , kooshoidmine temale järgneva tekstiga ) juba olemas . Neid tasub ka oma laadi loomisel järgida , muidugi kui määranguid ei ole juba muudetud ja teadmisteta kasutaja poolt ära rikutud . Kõiki laadiga seotud formaatimismääranguid saab näha dialoogiaknas , mille kuvab korraldus Format , Style . Järgneval joonisel on näha laadi Heading <arv> määrangud ( väli Description : Font : Arial <arv> pt , Bold , Space before <arv> pt , after <arv> pt , Keep with next ) . <arv>. OMA LAADI LOOMINE Juhul kui enam-vähem sobivat laadi ei leidu või tahetakse kohe luua oma laad , siis on selleks kolm võimalust , mida järgnevalt vaadeldaksegi . I. Oma laadi defineerimist võib alustada kohe käsuga Format , Style ning seejärel valida avanenud aknast nupp New ( vt järgnevat joonist ) , anda aknas Name laadile nimi ( nt Põhitekst ) , määrata aknas Style type , kas tegemist on märgi- või lõigulaadiga ja teha vajalikud määrangud klõpsamisega nupul Format : Formaatimisel on võimalik valida fonti ( Font ) , anda lõigumääranguid ( Paragraph ) , nummerdust ( Numbering ) jms. Nagu näha eespool toodud aknast , saab laadiga siduda ka kiirkäsku . Selleks vajutada nupule Shortcut key . Avanenud aknas ( Customize Keyboard ) anda kiirkäsk ( siin Alt+T ) , ja vajutada nupule Assign . Kiirkäsu jaoks võib kasutada abiks klahve Alt või Ctrl . Peale seda võib laadi rakendamiseks kasutada ka kiirkäsku , mitte ainult valikut laadiaknast . Kui kõik vajalikud määrangud on antud , vajutada OK ja järgmise aknas sulgemiseks Apply ( Close ) , ning sellega ongi laad defineeritud . II . Veel lihtsam tee oma laadi defineerimiseks on järgmine . Kui sisestatud tekstile on kõik vajalikud määrangud juba tehtud , siis piisab , kui see ( lõik või sümbolite jada ) aktiveerida ja anda käsk Format , Style , valida nupp New , määrata laadi tüüp ( Style type ) . Soovi korral võib määrata ka kiirkäsu . III . Kõige lihtsam tee oma laadi defineerimiseks . Aktiveerida sobivate määrangutega lõik , klõpsata kursor laadiaknasse ( vasakpoolsel joonisel tekstiga Normal ) , sisestada laadi uus nimi ( parempoolsel joonisel Põhitekst ) ja vajutada klahvile ENTER . Selle tulemusena ongi loodud oma laad ! <arv>. LAADI MUUTMINE Üheks suurimaks eeliseks laadide kasutamisel on see , et mingi laadi vormindamismäärangute muutus kajastub kogu dokumendis . Juhul kui tahetakse näiteks dokumendi disainis muuta esimese taseme pealkirjade ( määratud laadiga Heading <arv> ) fonti ja paigutust , siis tuleb vajalikud muudatused teha selle pealkirja laadis . Laadi muutmist on võimalik teha kahel erineval viisil . I. Laadi muutmiseks valida käsk Format , Style ja seejärel Modify ja Format , kust saab teha vajalikud muudatused fondi ( Font ) , paigutuse ( Paragraph ) jms jaoks . II . Laadi muutmiseks aktiveerida muudetava laadiga määratud tekst . Seejärel teha nupureast vajalikud muudatused , nagu teksti formaatimisel käsitsi , ja vajutada klahvile ENTER . Määranguid rakendatakse aktiveeritud tekstiosale . Seejärel valida nupurea laadiaknas laadi nimi ja vajutada uuesti klahvile ENTER , mille tulemusena kuvatakse aken Modify Style ( vt järgmine joonis ) . Märkida valik Update the style to reflect recent changes ja klõpsata nupul OK . Seejärel tehakse kogu dokumendi ulatuses laadiga põhitekst määratud tekstil järgmised muudatused : kirja suurus <arv> pt ( enne <arv> pt ) ja vasakjoondus ( enne rööpjoondus ) . Juhul kui me ei taha , et dialoogikast ilmuks , tuleks valida Automatically update the style ... ja OK . Valik Reapply ... on jäetud juhuks , kui me muudame vahepeal meelt ega tahagi laadi muuta . Mõlemal eespool vaadeldud juhul jääb laadi nimi muutumatuks , kuid muutub tema sisu ning tehtud muudatused mõjuvad kogu kirjutise ulatuses selle laadiga määratud tekstile . Mugav ja lihtne ! Aga seda ainult siis , kui dokumendis on kasutatud laadi . Samamoodi nagu eespool kirjeldatud saab muuta ka selliseid Word'i sisseehitatud laade nagu Header ( päis ) , Footer ( jalus ) , Page number ( leheküljenumber ) , Caption ( seletiitel ) jne. Laadi nime muutmiseks valida käsk Tools , Templates and Add-Ins ... ja avanenud dialoogiaknast Organizer . Aknast Organizer valida Styles , laadinimi , mida tahetakse muuta , ja klõpsata Rename-nuppu , mille tulemusena avaneb aken Rename , kuhu saab anda uue nime . Pärast OK ja Close abil akende sulgemist on valitud laadi nimi muudetud . Laadi kustutamiseks valida käsu Format , Style dialoogiakna laadide loetelust laad , mida tahetakse kustutada , ja klõpsata nupule DELETE . Kustutada saab ainult enda loodud laade . Laadide salvestamine . Laadid salvestatakse koos dokumendiga . Tegelikult salvestatakse laadid dokumendimallis . Et aga iga dokument baseerub mallil , siis võib öelda , et laadid säilivad koos dokumendiga , sest malle antud juhul ei käsitletud . <arv>. SEGADUSTEST LAADIDEGA Laadi muutmisel või rakendamisel võib ette tulla olukord , et sama laadiga määratud tekst näeb välja erinevalt . Kirjeldatud olukord võib olla tingitud sellest , et mingi osa tekstist on formaaditud käsitsi Word'i formaatimiskäskude abil , mitte aga laade kasutades . Sel juhul tuleks käsitsi määratud formaadid eemaldada . Selleks aktiveerida käsitsi formaaditud tekst ja vajutada kas Ctrl+Q lõiguformaadi eemaldamiseks või Ctrl+tühik märgiformaadi eemaldamiseks . Pärast seda operatsiooni saab kasutada laadimääranguid . <arv>. LAADINIMEDE KUVAMINE Mõnikord on kasulik teada , milliseid laade on dokumendis kasutatud . Seda võib vaja minna näiteks laadide otsimise ja asendamise korral . Kasutatud laade saab kuvada dokumendi erinevates vaadetes eri viisil . Normaalvaate ( View , Normal ) ja liigendusvaate ( View , Outline ) korral saab käsuga Tools , Options aknas Style area width määrata laadinimede veeru laiuse ning seejärel kuvatakse laadide nimed selle laadiga määratud tekstilõigu kõrval nii , nagu on näha allpool oleval pildil . Lehevaate ( View , Print Layout/ Page Layout ) korral näeb aktiveeritud lõigu laadi nupurea laadiaknas ( vt. järgmist joonist ) . Laadiakna avamisel näeb lisaks laadide nimedele ka seda , kas tegemist on märgilaadi ( a ) või lõigulaadiga ( ö ) , kui suurt kirja kasutatakse ja kuidas on tekst paigutatud . Näiteks laadis Body Text on kasutatud <arv> pt kirja ja rööpjoondust . <arv>. VEEL LAADIDE KASUTAMISEST Laade saab kasutada ka üleminekul ühest rakendusest teise . Nii saab näiteks tänu laadide kasutamisele dokumendis tekitada automaatselt PowerPoint'i slaide . Nimelt tekib slaidi pealkiri tekstist laadiga Heading <arv> , slaidi punktitud tekstid tekstist laadiga Heading <arv> jne. Kuvanud teksti liigendusvaates View , Outline , saab kergesti teha pealkirjade hierarhias muudatusi vaate Outline nuppude abil : Seejärel salvestame dokumendi näiteks formaadis RTF . Office <arv> korral võib salvestada teksti ka Word'i tekstina , kuid vanemate versioonide korral on sobiv formaat RTF . PowerPoint'is saab nüüd kohe avada selle teksti põhjal loodud slaidid , kasutades käsku Open ja valides faili tüübiks All Outlines . Joonise vasakpoolses osas on näha slaidide loetelu ja parempoolses osas aktiivne slaid . PowerPoint'is on samuti kasutusel laadid , mida muudetakse käsuga View , Master , Slide Master . Kuvatakse slaid , millel saab teha laadiga seotud muudatusi . Tehtud muudatused kajastuvad kogu slaidikomplektis , juhul kui ei ole tehtud käsitsi formaatimisi . <arv>. KOKKUVÕTE Laadide kasutamine on vähegi pikemate dokumentide juures möödapääsmatu . Arvestades mugavust , mis on seotud dokumendi disaini muutmisega laadide abil , pole põhjust nende kasutamist vältida . Eespool kirjeldatust on näha , et ka laadide defineerimine ei ole sugugi keerukam formaatide määramisest , kuid tunduvalt kasulikum . Edukat laadide kasutamist ! Jelena Sanko , TTÜ Küberneetikainstituut Tehisintellekti vahendite kasutamisest kontseptuaalse projekteerimise staadiumis Tehisintellekti interpreteeritakse tavaliselt kui automaatsete süsteemide omadust võtta enda peale inimintellekti üksikuid funktsioone , nagu näiteks valida ja võtta vastu optimaalseid otsuseid varasemate kogemuste alusel . Tehisintellekti insenerlik eesmärk on lahendada reaalse maailma probleeme , kasutades tehisintellekti modelleerimiskeskkonnana . Tehisintellekt kui arvutitarkvara loomise ja kasutamise meetod on aegade jooksul omandanud kindla koha ka raalprojekteerimises . Raalprojekteerimissüsteem ( CAD-süsteem ) on süsteem inimene-masin , mis kasutab kaasaegseid matemaatilisi meetodeid , arvutustehnika ja side vahendeid ning samuti uusi projekteerimise organiseerimise põhimõtteid olemasoleva objekti efektiivseima projektlahenduse leidmiseks ja praktiliseks teostamiseks . Tehisintellektialaste konverentside ( Artificial Intelligence in Design - AID'<arv> ( Edinburgh , UK ) , AID'<arv> ( Pittsburgh , USA ) , AID'<arv> ( Lausanne , žveits ) , AID'<arv> ( Stanford , USA ) , AID'<arv> ( Lissabon , Portugal ) ja AID'<arv> ( Worcester , USA ) ) põhjal võib väita , et on kujunenud teatud kindel probleemide ring , mille lahendamine on hetkel aktuaalne : kontseptuaalne projekteerimine hajutatud projekteerimissüsteemid ning teadmuse ja andmete esitamine masinprojekteerimissüsteemides tehniliste konfliktsituatsioonide lahendamine projekteerimisel juhtumipõhised projekteerimissüsteemid kitsendustega projekteerimine projekteerimise teooria ja metodoloogia põlvkondadepõhine projekteerimine kujundid ja objektid projekteerimisel teaduslik-teoreetiliste lahenduste otsimine ja teoreetilised lahendused projekteerimisel . Peatume üksikasjalisemalt kontseptuaalsel projekteerimisel . Kontseptuaalne projekteerimine on projekteerimisprotsessi osa , kus lahenduse põhikäik määratakse kindlaks lahenduskontseptsioonide üksikasjaliku väljatöötamise kaudu . Selleks identifitseeritakse abstraheerimise teel olulised probleemid , määratakse funktsioonide struktuur ning otsitakse ja kombineeritakse omavahel sobivaid lahendusprintsiipe . Järgnevates toote täiskuju ja detailse projekteerimise faasides on juba väga raske ja kulukas parandada kontseptuaalse projekteerimise järgus väljatöötatud kontseptsioonide olulisi puudusi . Olulise osa projekteerimisprotsessist moodustab sammsammuline analüüs ja süntees , kusjuures iga uus samm on eelmisest tunduvalt konkreetsem . Automatiseeritud projekteerimise erilisus seisneb selles , et projekteerimine toimub interaktiivselt , kusjuures sünteesiprotsesse täidab eelistatavalt inimene ja analüüsiprotsesse arvuti , s.t konstruktor võtab otsused vastu arvuti tehtud arvutuste alusel . Kontseptuaalse projekteerimise tulemuseks on identifitseeritud probleemid , väljatöötatud funktsioonid ja spetsifikatsioonid ning esmased lahendused , mis on saadud tuntud baaskomponente ja tüüplahendusi kasutades . TTÜ Küberneetika Instituudis kasutatakse kaasaegsete tehisintellekti meetodite juurutamiseks masina- ja aparaadielementide raalprojekteerimisel teadmuslikku programmeerimissüsteemi NUT . Süsteem NUT toetab deklaratiivse programmeerimise meetodeid , mis põhinevad spetsifikatsioonide automaatsel kasutamisel programmi ehitamiseks . Niisugust lähenemisviisi programmi arendamiseks nimetatakse kontseptuaalseks programmeerimiseks , sest oma olemuselt kujutab ta endast kontseptsioonide ( e. mõistete ) kasutamist programmeerimisel . Seetõttu saab NUT-i edukalt rakendada masinprojekteerimises , kus vajatakse põhiliselt kontseptuaalseid teadmusi . Kõik programmeerimisega seonduvad tegevused on võimalik jagada kaheks sõltumatuks etapiks : ( <arv> ) mõistete spetsifitseerimine ja ( <arv> ) probleemide spetsifitseerimine antud mõistete teadmuse terminites . NUT on sobivaim vahend ka ühemehe-CAD-süsteemide loomiseks ja teadmuste hästikorraldatud säilitamiseks arvuti teadmusbaasis . Ta võimaldab kasutajal oma töövaldkonna keeles luua endale mõisteid ( valemi- ja andmekogumid ) , säilitada neid arvutimälus , s.o süsteemi teadmusbaasis , ja kasutada neid seejärel ülesannete lahendamisel . Nii võib arvuti teadmusbaasides lisaks arvutusvalemitele säilitada käsiraamatutäisi teatmematerjale ( näiteks mis tahes masinakonstruktori käsiraamatu köiteid ) ning neid sobival viisil ka süstematiseerida . Probleemi tingimuste spetsifitseerimiseks defineeritakse ja kasutatakse uusi mõisteid , s.t antakse spetsifikatsioone , mille alusel saab ehitada käivitamisvalmis programmi . Tehisintellektisüsteemi NUT teadmusbaasides ei hoita programme ega alamprogramme , vaid teadmusi . Programmid sünteesitakse nende teadmuste põhjal iga kord automaatselt uuesti ja just vastavalt sellele , mida süsteemilt parajasti küsitakse . Vaatleme silindrilise hammasülekande parameetrite arvutusvõimaluste modelleerimise näitel ( pakett GEARDRIVE<arv> ) , kuidas NUT võimaldab kontseptuaalse projekteerimise käigus oluliselt säästa spetsifitseeritud parameetrite arvutamise aega , vältida inimesepoolseid vigu erinevate variantide valimisel ja otsuste vastuvõtmisel , vähendada töökoormust jne. Paketi GEARDRIVE<arv> loomiseks kasutati arvutusalgoritme , mis põhinevad TTÜ magistrandi Mart Tiidemanni poolt koostatud arvutusjuhistel . Nende algoritmide alusel on tehisintellekti meetodite abil loodud automatiseeritud ja lihtsustatud programm hammasülekande arvutamiseks . Hammasülekande parameetrite arvutamise automatiseerimiseks , koormuse ning materjalide ja töötluse tingimuste erinevuste arvestamiseks , kasutajaga toimuva dialoogi vähendamiseks ja kiirlahenduste saamiseks kasutati paketi GEARDRIVE<arv> loomisel suhteliselt uut üldistavat ja erinevaid töötingimusi arvestavat näitajat - optimismitegurit g [ <arv> ] . Mõnel juhul on masinate projekteerimise esimesel etapil - eskiis- ja otsingulise projekteerimise ning võimalike lahenduste hinnangu staadiumis - vaja kiirlahendusi , näiteks hindamaks seda , kas antud situatsioonis hammasülekande gabariidid sobivad ja kas hammasülekannet on üldse vaja või annab näiteks rihmülekanne vms antud konkreetses situatsioonis paremaid tulemusi . Siis sobib programmi enam automatiseerida , jätta rohkem otsustusi masina teha . Mõne minutiga võib välja arvutada halvimate ja parimate lähtetingimustega variante , et teada saada , milliste väärtuste poole hoida . Hammasülekannete kui keerukate masinaelementide puhul on tegu keerukate sisemiste seostega . Näiteks termilise töötlemise , s.t kõvaduse saamise võimalused sõltuvad hammasratta tooriku absoluutmõõtmetest . Kõvadusest olenevad omakorda hammasrataste ja seega ka tooriku gabariidid . Järelikult tuleb ülesandele läheneda järkjärguliste lähenduste teel . See viib tülikate korduvarvutusteni , mida aga väga hästi võib jätta arvuti teha . Selleks on arvutile sobival kujul välja töötatud ka hinnangukriteeriumid . Optimismiteguri meetod lubab vältida nõrku lahendusi ja annab suure arvu efektiivseid kombinatsioone , mis põhinevad standardsetel ja sisestatud parameetritel . Nii saab projekteerija väga kiiresti arvutada erinevaid lahendusvariante ja otsustada , milline neist on parim . Vajaduse korral järgneb täpsustatud arvutus mõne levinud standardarvutuse paketiga ( näiteks paketiga Solid Edge ) . Paketis GEARDRIVE<arv> on kasutajaliides teostatud nuppude abil , s.t andmed sisestatakse interaktiivselt , kus kasutaja ise määrab kõik teadaolevad parameetrid . Pärast paketi käivitamist ja tema töö alustamiseks vajalike direktiivide täitmist avatakse ja initsialiseeritakse NUT-i graafikaredaktori aken ning ekraanile tuleb peamenüü ( vt joonis <arv> ) , kus on esitatud järgnevad nupud : InputData ( Algandmed ) , Calculation ( Arvutamine ) ja FinalResults ( Lõpptulemused ) . Kogu töö paketiga toimub NUT-i graafikaredaktori aknas asuvate nuppude abil , millele hiirega klõpsates on võimalik tööd juhtida . Esimesena vaatleme nuppu InputData . Kui klõpsata sellele nupule , ilmub ekraanile pilt , kus on esitatud valik projekteerijale eelnevalt teadaolevaid projekteeritava silindrilise hammasülekande algparameetreid . Kui teadaolevad parameetrid on sisestatud , tuletab programm ka kõik ülejäänud parameetrid ( mida arvutusseosed võimaldavad ) ning vastused ilmuvad automaatselt vastavatesse lahtritesse ( vt joonis <arv> ) . Siin on aga vaja märkida , et selleks , et üldse oleks võimalik arvutamist alustada , peavad algandmetes kindlasti sees olema järgmised kuus põhiparameetrit ( kas kasutaja poolt otse sisse kantud või programmi poolt arvutusseoste abil tuletatud ) : T<arv>, T<arv>, , , g , L h ( tähendused vt joonis <arv> ) . Täiendavalt tuleb sisestada ka võlliga seotud trumli parameetrid : F<arv>, D<arv>, v<arv>, sest need on ülejäänud parameetritest sõltumatud . Optimismiteguri sisestamiseks ilmub ekraanile uus pilt ( vt joonis <arv> ) , kus on ära seletatud optimismiteguri tähendus ja kust kasutaja nuppudel esitatud optimismiteguri väärtuste seast valib endale vajaliku väärtuse . Ülekande sisendvõlli pöörlemissageduse ja võimsuse sisestamiseks küsitakse kasutajalt , kas ta soovib valida need parameetrid olemasolevast elektrimootorite tabelist või sisestab vahetult ise . Kui ta soovib tabelit kasutada , siis ilmub ekraanile tabel ( vt joonis <arv> ) , kust kasutaja valib võimsuse ja pöörlemissageduse standardsed väärtused ; vastasel juhul sisestab ta need arvud ise oma soovi kohaselt . Teise nupu , Calculation , valimisel määratakse hammasrattale rakenduv koormus , s.t kas ta on ühepoolne ( hammasrattad pöörlevad ainult ühes suunas ) või mõlemapoolne ( hammasrattad pöörlevad mõlemas suunas ) . Seejärel , kui teadaolevad andmed on sisestatud ja koormuse suund kindlaks määratud , loob süsteem NUT automaatselt algoritmi ja arvutab kõik vajalikud spetsifitseeritud parameetrid . Oluline iseärasus on siin see , et kontrollitakse eraldi kõiki ülekande liike ( lahtine , sirg- , kald- ja noolhammasülekanne ) ning materjalide ja kõvaduste kombinatsioone eesmärgiga selgitada välja , millised nendest oleksid antud lähteandmete puhul üldse kasutatavad . Kõiki neid arvutusi kasutatakse automaatprojekteerimise käigus , s.t nende arvutuste põhjal otsustatakse paketi GEARDRIVE<arv> töö käigus automaatselt , kas jätkata tööd või see katkestada ja lõpetada kõik edaspidised arvutused konkreetse materjalikombinatsiooni kohta . Selleks toimuvad arvutuse käigus iga ülekandeliigi puhul eraldi erinevad kontrollarvutused ( mooduli , tooriku ja piirkiiruse kontroll ) . Paketi töö tulemusena näeb kasutaja ainult neid terase marke ja neid iseloomustavaid parameetrite väärtusi , mis vastavad etteantud andmetele ja tingimustele . Klõpsates nupule FinalResults tulevad ekraanile ainult need materjalikombinatsioonid , mis vastavad esitatud nõuetele , s.t on edukalt läbinud kõik kontrollarvutused . Kui nende seast valida konkreetne terase mark , siis näeme tulemuste tabelit , mis sisaldab tähtsamaid parameetreid sobiva materjalikombinatsiooni valimiseks . Paketi GEARDRIVE<arv> lõpptulemuste illustreerimiseks esitame järgmise näite . Kui sisendandmed on : L h = <arv> <arv> tundi , n <arv> = <arv> p/min , u = <arv> , g = <arv>.<arv> , T <arv> = <arv> N m ja NUT-süsteemi poolt esitatud materjalikombinatsioonidest on valitud terase mark <arv> , siis näeme järgmiste lõpptulemustega pilti ( vt joonis <arv> ) . Kui projektarvutuse tulemused ei rahulda projekteerijat , võib arvutusi uuesti alustada , muutes lähteparameetreid sobivas suunas . Kokkuvõtteks võib öelda , et GEARDRIVE<arv> võimaldab oluliselt lihtsustada silindrilise hammasülekande parameetrite arvutamist just kontseptuaalse projekteerimise staadiumis . Et arvutusprotsess on siin rohkem automatiseeritud , võivad teda raskusteta kasutada konstruktorid , kellel puudub programmeerimisoskus ja kellel on vaid minimaalsed teadmised arvuti kohta . Sisuliseks kontrolliks peab kasutajal muidugi ettekujutus olema hammasülekannete olemusest . Programmeerimissüsteem NUT võimaldab igal inseneril sobiva hammasülekande materjalikombinatsiooni valimisel võtta vastu otsuse , mis põhineb hammasülekande parameetrite arvutamise arvutianalüüsi tulemustel . Vaatamata sellele , et GEARDRIVE<arv> on efektiivne vahend silindrilise hammasülekande projekteerimisel juba olemasoleval kujul , on tal veel siiski arenguruumi , mis annab võimaluse edaspidi paketi arendamist jätkata . Aknasüsteemi kasutamine ( arvutusmudeli , arvutustulemuste , sünteesitud graafilise kujutise jms. esitamine omaette akendena ) võimaldab teha programme , kus kasutaja näeb vaid lähteandmeid ja tulemusi , arvuti jooksev , n.-ö must töö , jääb aga varjatuks . Niisugusesse täisautomatiseerimisse tuleks aga suhtuda ettevaatliku optimismiga , s.t mõistlikult , ja enamasti on otstarbekam siiski vaid osaliselt automatiseeritud süsteem , sest asjatundjaid võivad huvitada ka vahetulemused ja tabelist automaatselt leitu . Seetõttu on otstarbekas käesolevale paketile lisada seletusvahendeid ( miks ei saanud resultaati , milles on viga ) ning abivahendeid ( tehniline määratlus ja lühikesed kommentaarid hammasülekande parameetrite kohta , samuti teadmustabelid ) nii , et projekteerija - mitte-ekspert hammasülekande projekteerimises - saab seda paketti kergesti kasutada . Kasutajal - konstruktoril , kes ei ole kompetentne programmeerimises ja hammasülekande arvutuse peensustes , on raske kasutada keerukaid tarkvaraprogramme , kus paketi algspetsifikatsioon võib varieeruda ja projekteerija ei saa kontrollida ega kinnitada arvuti esitatud parameetreid . Seetõttu on masinaehituses viimasel ajal võetud suund , mis arvestab laiema profiiliga kasutajat ja võimaldab projekti kasutamist kontseptuaalses staadiumis . Täpsustatud arvutusi võib hiljem igaüks kui tahes põhjalikult ise teha , kasutades käsiraamatuid , teadusmonograafiaid või eriprogrammtarkvara . Paketi GEARDRIVE<arv> edasiarendamiseks on mõtet kaaluda ka visualiseerimise ja multimeedia efekte . Andmete visuaalne esitus mängib suurt rolli teadmuse ja informatsiooni paremal tajumisel . Näiteks on mitmesuguste seadmete erinevate osade koostööd mõnikord kõige parem jälgida kolmemõõtmelisel dünaamilisel mudelil . Samuti annab multimeedia vahendite kasutamine juurde virtuaalset reaalsust , sest sõnaline , tabeli kujul ja analüütiline kirjeldamine ning samuti joonise kujul esitamine ei ole mitte alati adekvaatne . Kirjandust Kalja A. , Tiidemann T. , Tõugu E . Masinprojekteerimine , Tallinn , Valgus , <arv>. Taivo Kangilaski , TTÜ automaatikainstituudi teadur Sünkroniseerimisprobleemide lahendamine hajussüsteemides <arv>. SISSEJUHATUS On olemas mitmesuguseid võrke , nt kanalisatsiooni- , teede- , lennuliinide- , side- , elektrienergia ülekande- jm võrgud . Võrke analüüsides näeme , et kõik nad koosnevad füüsilistest või loogilistest sõlmedest ning nendevahelistest ühendustest , kusjuures iga võrguelemendi jaoks on määratud isikud või firmad , kes vastutavad selle korrasoleku eest . Selles artiklis vaatleme suuri süsteeme nagu elektrienergia genereerimise/jaotamise süsteemid ja sidesüsteemid , mis sisaldavad väga suurt hulka elemente . Mida suurem on võrk , seda rohkem on temas mitmesuguseid elemente ning seda suurem on nende elementide käiduga seotud personal . Seetõttu on meil sageli tegu keerukate struktuuridega , mis võivad üsna sageli muutuda . Kõikide võrgus tehtavate tööde kooskõlastamiseks on vaja väga paljude spetsialistide seisukohti ning otsuseid ja seda seetõttu , et soovitud võrguelemendi seadistamiseks/remondiks tuleb tihti teised võrguelemendid välja lülitada . Tööde planeerimisel on vaja leida optimaalne plaan , silmas pidades kahte olulist asjaolu : <arv> ) tuleb tagada võrgu turvaline töörežiim , nii et teenuste kasutajate jaoks oleks võrgu seisakuid minimaalselt <arv> ) sedistus- ja remonditöid tuleb teha sagedamini , et avariide tekkimise võimalus oleks väiksem . Et võrgud töötavad reaalajas , siis on oluline ka info operatiivne kättesaadavus igal ajahetkel ning selle pidev uuendamine kõigi isikute jaoks , kellele see on oluline , isiku enda asukohast sõltumata . Järgnev artikkel annab ülevaate sellest , milliseid valdkondi peaks üks võrguhaldustarkvara katma . <arv>. VÕRGU HALDAMISEKS VAJALIKUD VALDKONNAD Tervikliku võrguhaldustarkvara loomiseks tuleb kindlaks määrata käsitletavad tegevusvaldkonnad . Need on : protsessi kui terviku haldamine infovahetus teiste infosüsteemidega firmakesksus koostöö ettevõtte kõigi allüksuste ja allettevõtetega kohandatavus igale ettevõtte struktuurile piiramatu kasutajate hulk aruannete mootor andmete hajutatud arhiveerimine operatiivtööle kehtestatud nõuded laiendatavus teistesse valdkondadesse . Vaatleme neid kümmet valdkonda eraldi elektrienergia ülekande suhtes . <arv>.<arv>. PROTSESSI KUI TERVIKU HALDAMINE Protsessi all mõistame siinkohal sündmuste ahelat võrguelemendi defekti/seisaku avastamisest ja/või väljalülitumisest kuni selle defekti/seisaku likvideerimiseni , selle põhjal tehtavat analüüsi ning järgnevate profülaktiliste tööde planeerimist analüüsi tulemuste põhjal . Kui vaadelda antud protsessi tarkvara seisukohast , tuleb eristada kahte tahku : võrguelement võrguelemendi käiduga seotud personal . Järgnevalt vaatleme lähemalt neid protsessi tahke ning moodust , kuidas neid omavahel siduda . <arv>.<arv>.<arv>. VÕRGUELEMENT Protsessi kirjeldatakse sündmuste kaudu . Sündmus on mingi asetleidnud/asetleidev fakt , mis fikseeritakse . Sündmused on seotud võrguelementidega või võrguelementide gruppidega . Võrguelemendiks võib olla nii seade kui ka võrgu tööd toetav rajatis , maa-ala vms. Näiteks energeetikas on võrguelemendid jagatavad järgmistesse gruppidesse : soojusseadmed soojuslikud kaitseseadmed releekaitseseadmed alajaamaseadmed liinid ja kanalid ( elektriülekandeliinid , kaablid , sidekanalid jms ) sideseadmed mõõteseadmed ja mõõtmised ( mõõtepunktid , arvestid jms ) rajatised muud ( geograafilised elemendid , nt jõed , kraavid , ristumised jms ) Toodud loetelu on siiani piisavaks osutunud , kuid sõltuvalt vajadustest on seda lihtne täiendada ( nt kinnistutega , transpordipargiga jne ) . Selleks et sündmustepõhine analüüs võimaldaks tulemusi kasutada tööde planeerimisel ja analüüsimisel , püüame need sündmused salvestada võimalikult detailselt . Meie mõistes kirjeldab sündmust : võrguelemendi üleminek ühest olekust teise sündmuse elemendi tüüp ( rike , defekt , väljalülitamine , töö , reservid ) sündmuse elemendi seotus teis(t)e seadme(te)ga sündmuse elemendi geograafiline asukoht sündmuse elemendi iseloom ( avariiline , plaaniline , mitteplaaniline ) sündmust esilekutsuvad/esilekutsunud põhjused sündmuse toimumise soovitud/plaaniline/tegelik aeg sündmusega seotud isikud sündmusega seotud normatiivaktid ja muud dokumendid lisainfo vaba selgitava teksti näol . Järgides toodud loetelu , võime juhtunut hiljem piisava täpsusega kindlaks teha , analüüsida ning sündmusest tingitud edasist tegevust kavandada . Kasuks tuleks ka ekspertsüsteem koos treeningsimulaatoriga , mis modelleeriks sündmusi , pakuks olukorrast sõltuvalt lahendusi reaalajas ning oleks võimeline prognoosima avariisid . Kui vaadelda abstraktset võrku , siis on kõik sündmused seotud võrguelementi kirjeldavate andmetega . Et saada sündmuse kirjelduse olemusest täpsemat ülevaadet , vaatleme , mida oleks vajalik võrguelementi iseloomustavate andmete kirjeldamiseks : elementi ennast elementide horisontaalset seotust teiste elementidega elementide vertikaalset seotust teiste elementidega dünaamiliselt loodavaid/muudetavaid elemente kirjeldavaid parameetrite tabeleid elementidega seotud mõõtmisi ( energia , võimsus , pinge , vool , temperatuur jne ) elemendiga seotud dokumentatsiooni elemendiga seotud sündmusi elemendiga seotud isikute kontaktandmeid ( operatiivõigustega isikud , käidu korraldajad , tööde teostajad , elemendi omanik , teenuse saaja ) partnerfirmade kontaktandmeid remontide põhjusi vigastuste , seisakute ja rikete põhjusi närvivõrke , hägusate reeglite baase avariide prognoosimiseks ekspertsüsteemi reeglite baase käitumisjuhisteks tava- ja eriolukordades . Võib arvata , et selline andmegrupp oleks piisav kvaliteetse planeerimistarkvara loomiseks . <arv>.<arv>.<arv>. VÕRGUELEMENDI KÄIDUGA SEOTUD PERSONAL Nagu öeldud , kirjeldatakse protsessi sündmuste abil . Võrguelementide korral moodustub sündmustest võrguelemendi käidu jaoks terviklik protsess . Sündmuste haldamiseks on vaja inimesi ja/või roboteid . Selleks on projekteeritud kolmemõõtmeline kasutajate haldusstruktuur , mis vastab seadme käidu tagamiseks vajaminevale operatiivjuhtimise struktuurile . Esimene mõõde - on defineeritud nn sõlme tase . Sõlm on kas mingi funktsionaalne üksus , osakond või kogu ettevõte . Sellel abstraktsiooni tasemel saame sõlmedevahelisi sidemeid määratledes/keelates kirjeldada sündmuste kooskõlastuse protsessi . Niiviisi on kirjeldatav sõlmedevahelise seotusega võrkstruktuur . Teine mõõde - on defineeritud nn sõlme kihtide tase . Kiht on samuti mingi funktsionaalne üksus , osakond või ka ettevõte . Iga sõlm koosneb vähemalt ühest kihist . Kihtide erinevus sõlmedest seisneb selles , et kihte on võimalik kirjeldada ainult puukujulise hierarhiana , s.t igal sõlmel on ainult üks kõige kõrgem kihi tase . Iga taseme juures on võimalik kirjeldada funktsionaalseid tasemeid ( nt dispet ? erid , administraatorid ) , mis on seotud ainult vastava tasemega . Kolmas mõõde - on defineeritud nn töökohtade tase . Töökoht on funktsionaalsete tegevuste kogum , mis asub sõlme kihil ning on rakendatav töökohal määratletud kasutaja(te)le . Igal sõlmetaseme kihil peab olema kirjeldatud vähemalt üks töökoht . Kõik töökohad on liigitatud ning nende jaoks on võimalik määrata nende funktsionaalsed omadused . Üldjuhul on kasutatavad järgmised töökoha liigid : lihttöötaja - hoolitseb andmete , sündmuste esmase läbivaatamise ja analüüsi eest otsustaja - vastutab andmete ja võrguelemendil tehtavate hooldetööde tegemise eest dispet ? er - hoolitseb sündmuste avamise ja sulgemise eest vaatleja - sekkumisõigusteta töökoht , mille abil võib jälgida süsteemis toimuvat . Et suured võrgud on tihti keeruka struktuuriga , peab tarkvara administraatoril olema võimalus luua uusi töökohtade liike ning määrata nende funktsionaalsus . See tagaks süsteemi parema juhtimise ja parandaks jälgitavust ( nt dispet ? eri töökoha funktsioonide jaotamine lülimisõiguse järgi jms ) . Et tihti on tegu väga mitme erineva funktsionaalsusega ning et vähendada sel teel tekkivate töökohtade liike , tuleb kasutusele võtta järgmine funktsionaalsuste jagamise süsteem : kasutajale määratavad funktsionaalsused sõlmele määratavad funktsionaalsused töökoha liigile määratavad funktsionaalsused , kusjuures need funktsionaalsuste grupid välistavad üksteist ning nad on kasutatavad loetelus toodud prioriteetsusega - kui kasutajale on määratud mingid funktsionaalsused , siis ei arvestata sõlmele ja töökoha liigile kirjeldatud funktsionaalsusi jne. <arv>.<arv>.<arv>. NENDE KAHE TAHU SIDUMINE Eelnevalt kirjeldasime protsessi kahte tahku - võrguelemendipõhist lähenemist ja võrguelemendi käiduga seotud personalipõhist lähenemist . Haldussüsteemist moodustub tervik siis , kui need kaks tahku omavahel tervikuks siduda . Selleks töötasime välja võrguelemente iseloomustavad seosed käidu korraldajatega , võttes kasutusele kuuluvuse mõiste . Kuuluvus on võrguelemendi omadus luua ühendus teda puudutavate töökohtade tasemete ja/või sõlmedega . Läbi kuuluvuste on võimalik võrguelemendiga siduda iga just temale iseloomulik operatiivjuhtimise struktuur . Võrguelemendi käidu poolt vaadatuna pakume kuuluvuse funktsionaalsete omadustena välja järgmised omadused : operatiivsel teadmisel - kõrgeim otsustamise tase operatiivsel juhtimisel - seadme dispet ? erjuhtimine operatiivsel teenindamisel - vahetu lülimiste teostaja informatiivsel teadmisel - seadmel tehtavast/planeeritavast teatamise kohustus haldamisel - seadme eest vastutav insener-tehniline personal ( ITP ) teenindamisel - seadet hooldav , teenindav personal seadme omanik - seadme omaniku defineerimine e-teavitus - seadmel toimuvast informeeritakse e-posti ja/või SMS-sõnumi vahendusel teenuse saaja - lõppkasutaja , kes teenust tarbib . Kui määrata kuuluvused ainult sõlmede tasemetele , liiguvad esitatud hooldetööde taotlused ( sündmused ) vastava sõlme taseme juurde ning , arvestades kuuluvusi ning tasemetevahelist hierarhiat , tasemete piires edasi . Sõlmest väljuvad sündmused alati kõrgeima taseme vastavat funktsionaalsust omava(te) töökoha(de) kaudu . Kui sõlme tasemetele ei ole kuuluvusi kirjeldatud , sisenevad sündmused oma liikumise ahelas sõlme kõige kõrgema taseme esimese töökoha juurde , kus kasutaja määrab edasi sündmuse liikumise järgmise sammu . Kõigil töökohtadel , millele on määratud vastav funktsionaalsus , peab olema võimalik kooskõlastada sündmusi iga sõlmega , mis sisaldavad mingit võrguelemendiga seotud kuuluvust , s.t viia sündmuse kooskõlastus ajutiselt väljapoole temale defineeritud liikumise ahelat . Nimetatud funktsionaalsus tagab sündmuste kooskõlastamisel süsteemi efektiivsema toimimise , sest kuigi ei olda seotud vastava võrguseadme käiduga , ollakse tegevad ikkagi ühes terviklikus ülekandevõrgus . <arv>. <arv>. INFOVAHETUS TEISTE INFOSÜSTEEMIDEGA Üheks võrguhaldussüsteemi juurde kuuluvaks funktsionaalsuseks on kindlasti teiste infosüsteemidega liidestamise võimalus . Siin tuleb eristada kahte tüüpi liideseid : sisseehitatud - tarkvaras jäigalt paika kodeeritud liides administraatori poolt koostatav - tarkvara enda vahendite abil tarkvaraadministraatori poolt loodav liides . Sisseehitatud liidesed on tarkvarasse jäigalt kodeeritud liidestuseks mingi konkreetse infosüsteemiga . Siin mõeldakse ka andmete üleviimist sellistesse üldlevinud süsteemidesse nagu MS Excel , MS Word jne. Samuti peab tarkvara administraatoril olema võimalus kirjeldada lihtsamaid liidestusi teiste infosüsteemidega . Näiteks rakenduse administraatoril võiks olla võimalus luua määratletud võtmesõna piirides e-posti liidese baasil e-posti vorme , mida süsteem on võimeline ära tundma ning millele ta oskab vastata . <arv>.<arv>. FIRMAKESKSUS Igal firmal , ettevõttel , allorganisatsioonil võib olla andmeid , mida ta soovib ainult enda teada jätta , ning andmeid , mida ta soovib teistega jagada . Andmete muutmisel firmakeskseks võib eristada kolme astet : elemendi info - info kättesaadavus on määratud tema kuuluvustega elementi kirjeldavad andmed - määratud selle serveri ja/või andmebaasiga , kus nad asuvad ( igas andmebaasis võib vastava võrguelemendi kirjeldus olla erinev ) seosed andmebaasidega - kui meil on tegemist multiserver/andmebaasisüsteemiga , on lisaks eelkirjeldatule võimalik eralduda ka teiste serverite/andmebaasidega loogilise sideme katkestamisega . Firmakesksus on määrava tähtsusega oma info valikulisel näitamisel ka seetõttu , et ei koormataks teisi süsteemi kasutajaid neile mittevajaliku infoga . <arv>.<arv>. VÕIMALIK KOOSTÖÖ KÕIGI ALLÜKSUSTE JA ALLETTEVÕTETEGA Suurte võrkude haldamisel puutume kokku väga mitmete ettevõtete ja alamettevõtetega . Sealjuures on erinevate võrguelementide käiduga seotud väga erinevad kombinatsioonid nimetatud struktuuriüksustest . Seega peab efektiivseks tööks olema igal struktuuriüksusel ülevaade teda huvitavatest võrguelementidest , neid kirjeldavatest andmetest , hetkeolekust ning plaanidest tehtavate tööde osas . Plaaniliste tööde tegemisel on vajalik tööde eelnev kooskõlastamine kõigi osapooltega , seda nii kooskõlastuse kui ka režiimi , ohutuse ja optimeerituse mõttes . Kui teatud võrguelement on viidud remondiseisundisse , siis on võimalus selle võrguelemendi remondi raames teha vajalikke töid ka teistel võrguelementidel , mis samuti ei tööta , sest see konkreetne element ei tööta . Selline lähenemine võimaldab minimeerida seadmete seisakute hulka ning leida efektiivsemaid lahendusi . Seisakute taotlustest , seisakutest , seisakute lõppemisest jne teavitatakse vajadusel kõiki võrguelemendiga seotud sõlmi ja isikuid reaalajas . Seega võimaldab võrguhaldustarkvara kasutamine kiiret infovahetust . <arv>.<arv>. KOHANDATAVUS IGALE ETTEVÕTTE STRUKTUURILE Suure võrgu haldamise juures on loomulik , et tema haldus- ja juhtimisstruktuurid võivad ajas muutuda - tulevad uued seadmete hooldajad , toimub ettevõtte reorganiseerimine jne , seepärast peaks olema võimalik kirjeldada mistahes juhtimisstruktuure . Ühe võimalusena võib pakkuda kolmekihilist juhtimisstruktuuri ( vt punkt <arv>.<arv>.<arv> ) , kus sõlmede kiht on realiseeritud võrkstruktuurina ning sõlme sisemiste tasemete kiht puustruktuurina , kusjuures neid kõiki saab määratleda võrguelemendi kuuluvuste abil . Siiani on meil õnnestunud kirjeldada võrkstruktuuri ning puukujulise struktuuri kõiki juhtimisstruktuure kooskasutamise abil . Et suurte võrkude administratiivsed üksused on tihti geograafiliselt hajutatud , on mõistlik kasutada veebipõhist rakendust . Süsteemi ülesehituse seiskohalt lähtuvalt asuvad vastavate suuremate ettevõtete võrguelementide kirjeldused erinevates andmebaasides , mis võivad asuda ka erinevates serverites . Selline kontseptsioon võimaldab töötada ettevõtetel nii autonoomselt kui ka ühtse tervikuna , mis ühendab erinevaid autonoomseid süsteeme . Selline kontseptsioon lihtsustab terviksüsteemist eraldumist/ühendamist . <arv>.<arv>. PIIRAMATU KASUTAJATE HULK Mitmeid süsteeme piirab nende kasutajate arv . Kui kasutajate arv kasvab üle teatud piiri , muutuvad päringud aeglaseks , tekib erinevate ressursside puudus jne. Võrguhaldustarkvara projekteerimisel peab arvestama võimalust , et kasutajate arv võib olla väga suur . Et mitte takerduda serveri riistvaralistesse ressurssidesse ( jõudlus ja maht ) , tuleks luua võimalus andmete hajutamiseks erinevate serverite vahel , kus oleks võimalus lisada igale kasutajategrupile vajadusel oma veebiserver . Sellisest hajutamise põhimõttest lähtuvalt on võimalik tarkvara laiendada kuitahes palju , mis muudab ka kasutajate arvu piiramatuks ( vt punkt <arv> ) . <arv>.<arv>. ARUANNETE MOOTOR Üldjuhul peaks võrguhaldustarkvaras olema tugev aruandluse ja analüüsi mootor . Toome siinkohal ära vajalikud funktsioonid hea aruannete mootori jaoks . Terviklik päringusüsteem peaks võimaldama : standardaruandeid , millele on rakendatavad erinevad kasutajate andmed kasutajapoolseid lihtsaid päringuid kasutajapoolseid mitmepäringusüsteeme - liidab , jagab ( nt “ Kliendi x eelmise kuu võlgnevus , teenuste maht ” ) navigeerida summaarandmetega kindlaks määrata erandeid , piirväärtusi realiseerida filtreerivaid alampäringuid - piiratav nimestik ( nt “ Palju tarbivad eelmise aasta <arv> suurimat võlglast ” ) kohati summeeritavaid näitajaid SQL tuge - kõiki keele võimalusi , funktsioone päringu käsitsi sisestamise võimalust , mis lubaks sisestada väga keerukaid päringuid ning suudaks nendega siduda optimizer hints -e päringu kestuse ennustamist kauakestvate päringute katkestamist automaatset päringute käivitamist , tulemuste salvestamist . Filtrite osa pealt peaks olema võimalik : kasutada lihtsaid matemaatilisi , stringi- ja teisendusfunktsioone luua nn. tippnimestikke kirjeldada vahemikke ( <arv>-<arv> , <arv>-<arv> , <arv> ja enam ) määratleda järjekorranumbreid ( nt “ Tootlikkuselt kohal x ” ) sisaldama tugevat analüütilist osa , s.t funktsioonide baasi . Peamiste analüüsifunktsioonidena võiksid kasutusel olla : drill - üles/alla/kõrvale mitmedimensiooniline analüüs veergudevahelised rehkendused ( nt “ <arv>. ja <arv>. aasta tarbimise vahe ” , protsendid ) sorteerimine - kasvav/kahanev , aga ka muu väärtuse järgi ( “ Esmaspäev ” , “ Teisipäev ” jne ) . Oluliseks osaks on ka kujundus . Kasutaja peaks saama ise määrata : sektsioonide arvu värvused tähekuju graafilised objektid ( jooned , kastid jne ) graafikud , graafikutüübid pealkirja . Viimasel ajal on ilmnenud soove ka andmete kujutamiseks graafiliselt . Kasutaja mugavuse aspektist vaadeldes piisaks järgmisest : viisardid kasutamise lihtsus , eri kasutajatele erinev funktsionaalsus lisamenüüd , aruannete navigaator , võimalus salvestada/redigeerida oma aruandeid metaandmed : andmebaasi keerukuse varjamine objektide ümbernimetamine objektide komplekteerimine , grupeerimine paindlik abiinfo väärtuste loendid - valikud soovitud elementides integreeritus teiste rakendustega : copy/paste ( väärtused , vormingud ) lingitud objektid eksport erinevatesse formaatidesse väljast juhitavad päringud . Selliste analüüside jaoks on olemas mitmeid mootoreid ( nt Oracle Discoverer ) , kuid paljusid funktsioone saab lahendada ka MS Exceli abiga . See tähendab , et kui võrguhaldustarkvaral on kasutajaliides mõne vastavasisulise valmissüsteemiga , siis võib võimas analüüsivahend võrguhaldustarkvarast hoopiski puududa . <arv>.<arv>. OPERATIIVTÖÖLE KEHTESTATUD NÕUD ED Kui vaadelda operatiivtöö nõudmisi üldisemas plaanis , siis taanduvad need järgmistele vajadustele : sisestatud andmeid ei saa hiljem muuta peab olema teada , kes ja millal vastava sissekande või tegevuse tegi info peab olema kiirelt kättesaadav mingi aja jooksul . Hiljem on nende andmete põhjal võimalik täpselt kindlaks teha , mis ikkagi toimus , ning teada saada , millal ja kus sündmus toimus , kuidas tekkinud probleem lahendati jne. Suurte võrkude dispet ? eritele on operatiivtöö jaoks sageli kehtestatud erinõuded , nagu näiteks dispet ? eri operatiivpäeviku pidamine , ohutustehniliste töölubade arvestus , nõuded andmete õigsusele , turvalisusele , mida võrguhaldustarkvara peaks samuti võimaldama/sisaldama . <arv>.<arv>. LAIENDATAVUS KA TEISTESSE VALDKONDADESSE Et suured võrgud on keeruka struktuuriga ja sisaldavad tihti erinevaid valdkondi , siis algselt soetatakse või luuakse tarkvara oma põhitegevuse jaoks , jättes katmata abiprotsessid , mis ei pruugigi langeda samasse tegevusvaldkonda ( nt sidesüsteemide korral autode rentimine , energeetikas kinnisvarade üürimine jne ) . Selleks et iga abiprotsessi jaoks ei tuleks hankida oma tarkvara , peaks tehtav/hangitav tarkvara võimaldama just seesugust laiendamist ( mis võib kaasa tuua küll väikeseid korrektiive koodis ja kasutajaliidese disainis , aga mitte ülesehituslikes põhimõtetes ) . Selle lahendusena näemegi andmete hajutamist erinevatesse andmebaasidesse/serveritesse , mis on võimelised töötama nii integreerituna terviklikku infosüsteemi kui ka eraldiseisvatena ( vt punktid <arv>.<arv> ja <arv> ) . <arv>. RIISTVARALISED ÜLESEHITUSE PÕHIMÕTTED Võrguhaldustarkvara kirjeldamisel suurte ülekandevõrkude jaoks tuleks lähtuda tingimustest , et tarkvara peab olema lihtsalt laiendatav ning samuti peavad suuremad üksused olema võimelised terviksüsteemist eralduma ning jätkama tööd iseseisvate rakendustena . Sellest lähtuvalt tuleks projekteerida hajusandmebaaside süsteem , kus kõikide andmebaaside struktuuriline ülesehitus oleks sama . See teeks võimalikuks nende lihtsa haldamise . Ühel andmebaasi serveril võib töötada mitu andmebaasi . Kui serveri jõudlus hakkab mingil põhjusel oluliselt langema , siis on võimalik osa andmebaase viia üle teisele serverile . Et serveri koormust vähendada , võib kasutusele võtta ideoloogia , kus igale kasutajagrupile on olemas oma veebiserver . Veebiserver asub andmebaasi serverist eraldiseisvas arvutis . Tegemist on kolmekihilise hierarhiaga . Iga kasutaja suhtleb ainult temale kinnitatud veebiserveriga . <arv>. KOKKUVÕTE Käesolevas artiklis on vaadeldud suurte ülekandevõrkude kirjeldamise põhimõtteid . On käsitletud valdkondi , mida võrguhaldustarkvara peaks võimaldama hallata . Selliselt võib kirjeldada kõiki võrke , kus on tegemist võrguelementide haldamise problemaatikaga - tööde määratlemise , registreerimise , planeerimise , teostamise ja analüüsiga . Võrguelementide käidu juhtimiseks võib võrguhaldustarkvara kasutada sõlmpunktide sidumisel võrkstruktuuri ning sõlmesiste tasemete kirjeldamiseks puukujulist hierarhiat . Nende kahe võimaluse kooskasutamisel on võimalik kirjeldada kõiki juhtstruktuure . Võrguelemendi ja juhtstruktuuride sidumiseks on välja töötatud kuuluvuse mõiste , mis defineerib sõlme funktsionaalsused vastava elemendi jaoks . Selliselt moodustub igale elemendile oma juhtimisstruktuur . Riistvaraliselt peaks tarkvara olema projekteeritud kasutama ühte või enamat sama konfiguratsiooniga hajutatud andmebaasi , mis võimaldab suure kasutajate hulga korral hajutada andmebaasi serverile langevat koormust erinevate serverite vahel . Iga konkreetse andmebaasi koormuse vähendamiseks on võimalik igale andmebaasile konfigureerida rohkem kui ühe veebiserveri - s.t igale kasutajagrupile on võimalik anda eraldiseisev juurdepääs . Seega soovitaksime luua veebipõhise rakenduse , kus juurdepääs andmetele ei sõltuks rakenduse kasutaja hetkeasukohast . gap desc='references'&gt; Leo Võhandu , emeriitprofessor J-keelest ja Goldbachi hüpoteesist Eelmises J-keele artiklis nägime , kuidas väga pikkade arvudega arvutada . Sel korral võtame vaatluse alla Goldbachi kuulsa hüpoteesi mitmed variandid , mis kõik üsnagi mõnusal viisil aitavad kaasa J-keele tehnika omandamisele . Algarvudest oli meil juttu juba eelmisel korral . Meenutame , et verb q : n annab arvu n lahutuse algarvuliste tegurite korrutiseks . Kui vaja on suurt täpsust , siis võib arvule väikese x-tähe sappa kirjutada ja tulemus on täpne . <arv>. sajandil püstitati mitmeid põnevaid hüpoteese , millele on lahendused leitud alles nüüd või ei ole seda üldsegi veel suudetud . Tavaliselt on klassikaliste raskete hüpoteeside lahendamine teadusele vägagi huvipakkuv , sest viib sageli täiesti uutele mõtteviisidele . Nii oli lugu kuulsa neljavärviprobleemiga ja selle positiivse lahendusega . Jagu on saadud ka Fermat' viimasest teoreemist , milles ta väitis , et kui n <arv> , siis võrrandil ei ole täisarvulisi lahendeid , peale triviaallahendi , milles üks muutujatest on null . GOLDBACHI HÜPOTEES . Oma <arv>. A. kirjutatud kirjas Leonhard Eulerile väitis Christian Goldbach , et iga paarisarv on avalduv kahe algarvu summana ( ta luges ka <arv> algarvude hulka ) . Teeme “ puust ette ” : <arv> = <arv> + <arv> ; <arv> = <arv> + <arv> = <arv> + <arv> ; <arv> = <arv> + <arv> = <arv> + <arv> = <arv> + <arv> = <arv> + <arv>. Näib , et Euler ei püüdnudki Goldbachi hüpoteesi tõestada , küll aga saatis ta vastuseks oma hüpoteesi : iga paarisarv n <arv> kujul <arv> * k + <arv> on kahe arvu summa , mis on kas algarvud kujul <arv> * k + <arv> või <arv>. Goldbachi hüpoteesiga on vaeva näinud paljud kuulsad arvuteoreetikud . Kõige kaugemale jõudis ehk vene akadeemik I. M. Vinogradov , kes <arv>. aastal tõestas , et kõik paaritud arvud , mis on suuremad kui n , on esitatavad kolme paaritu algarvu summana n = p<arv>+ p<arv>+ p<arv> ( n on paaritu arv ja piisavalt suur ) . Vinogradov ei osanud n väärtust hinnata . Alles Borozdkin näitas <arv>. aastal , et , kus . Seega oleks vaja “ vaid ” vastata esitatud küsimusele iga paaritu arvu jaoks vahemikus . Ülesanne . Miks algab n väärtuste hulk <arv>-st ? Isegi kõige võimsamatel tänapäeva arvutitel kulub nende arvutuste jaoks ilmselt lootusetult palju aega . Mõtleme veidi , kas ei saaks probleemile kuidagi teisiti läheneda ? Kõigepealt kasutame J-keelt selleks , et kätte saada kõik algarvud teatud suuruseni . J-KEEL JA ALGARVUD J-keele käsutuses on väga kasulik verb p : k , mis annab vastuseks k-nda algarvu . Näiteks p : <arv> annab vastuseks <arv>. Loomulikult saame verbi rakendada ka tervele nimistule . p : i.<arv> . Mäletatavasti loob i.<arv> nimistu <arv> <arv> <arv> ... <arv> <arv> ning verbi p : rakendamine sellele nimistule annab meile <arv> esimest algarvu : <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv>. Eraldi tuleb veel rõhutada , et J-keeles on väga võimas ja üldine pöördoperaator [ : _<arv> , mida annab rakendada üpris paljudes ja isegi ootamatutes kohtades . Näiteks verbi pi : p : [ : _<arv> rakendamisel saame nn. Euleri totientfunktsiooni ( n ) , s.o antud arvust n väiksemate algarvude hulga . Teeme proovi pi i.<arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Igas positsioonis olev arv näitab sellest positsiooninumbrist väiksemate algarvude hulka . Kontrollime viimase arvu <arv> puhul , kas sellest on <arv> väiksemat algarvu . On küll - <arv> <arv> <arv> <arv> <arv> <arv> <arv>. Nüüd võib ka küsida , mitmes algarv on <arv>[<arv>-<arv> ( Euler tõestas selle arvu algarvulisuse ) : pi ( <arv>[<arv> ) -<arv> <arv>. Et see arv on ise <arv> , siis näeme , et <arv> miljardini on juba üle <arv> miljoni algarvu ! Olgu , läheme nüüd Goldbachi hüpoteesi juurde tagasi . Et J-keeles on nimistute ja tabelitega lihtne tööd teha , siis koostame <arv> esimese algarvu kõikvõimalike paaride summad . Lause a = : p : i.<arv> annab meile esimesed <arv> algarvu . Siin tuleb aga teha väike täiendus . Nimelt on Goldbachi hüpoteesis juttu ainult paarituarvulistest algarvudest ja ühest . Seega tuleb nimistus a esimese elemendi väärtus <arv> asendada ühega . Seda teeb verb <arv> ( <arv> ) } a , mille tähendus on tavaprogrammeerimises järgmine a ( <arv> ) = <arv>. Et meil esimest korda on J-keeles tegemist indeksi mõistega , siis vaatame asja veidi lähemalt . Üldreeglina üritab J-keel alati struktuure läbida täies ulatuses kvantori / abil ( iga elemendiga tehakse midagi ) . Ometi on olemas tavaindekseerimisest tunduvalt üldisem ja mugavam meetod . Kui on vaja omistada a mingile elemendile mingi väärtus , siis kirjutame seda nii : väärtus ( indeks ) } a. Sel kirjutamisviisil on see kasulik omadus , et sulgudes olev indeks on asendatav mingi nimega . Näiteks <arv> ( f ) } a asendab kõik a elemendid , mis on määratud listiga f väärtusega <arv>. Selline variant on eriti kasulik siis , kui f on sammult sammule muutuv nimistu . Meil pole vaja teada ei selle nimistu pikkust ega organiseerida tsüklit jne. Analoogiliselt töötab ka nimistust võtmise verb ] Kui me kirjutame ( <arv> <arv> <arv> <arv> ) p : i.<arv> , siis saame algarvud <arv> <arv> <arv> <arv> ( meenutame , et indeksid algavad J-s nullist ! ) . Nii , nüüd on meil loodud nimistu a= : p : i.<arv> algarvudest . Järgmise sammuna muutsime esimese elemendi võrdseks ühega a= : <arv> ( <arv> ) } a. Järgmiseks tuleb luua kahe nimistu kõigi elementide paaritiste summade tabel : a+/a või teisiti kirjutatult +/~a ( tulemus on sama ) . Trükime selle tabeli välja <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Iga saadud tulemuse puhul on vaja kõigepealt sellele otsa vaadata . Näeme , et tõepoolest on tulemuses kõik paarisarvud ja näib , et nad on järjestikku , ilma lünkadeta . Et tulemusest paremat ülevaadet saada , koostame selle tabeli elementide sagedustabeli . Sagedustabeli leidmiseks tõmbame tabeli kõigepealt rinnastava komaga ühte ritta ( , ) ning leiame siis kõik erinevad elemendid ja loendame nende sagedused . Need tegevused saab ilusasti kokku võtta ( ] . , ) / . ~ , t. ( Koma rinnastab ühte ritta . Otsime kõik erinevad elemendid ( ] . / . ~ ) ja loendame need ( ) . Lõpuks tuleb saadud tabel veel sortida tabeli elementide kasvavasse järjekorda ( / : ~ ) ) . Kui need tegevused “ kokku korjata ” , siis saame väikese J-keelse programmi a= : p : i.<arv> a= : <arv> ( <arv> ) } a t= : a+/a / : ~ ( ] . , ) / . ~ , t Selles programmis on kõik sammud hästi jälgitavad ja tulemusest ei tohiks olla raske aru saada . Nendel , kes eriti lühikesi programme armastavad , on lihtne kogu krempel kokku võtta üherealisse kirjutisse / : ~ ( ] . , ) / . ~ , +/~ ( <arv> ( <arv> ) } p : i.<arv> ) Uff ! See avaldis näeb kole välja küll , aga on tegelikult suhteliselt lihtsalt aru saadav programmirida . Tuleb vaid lugeda paremalt vasakule . Muide , niisugused üherealised programmid kannavad J-keeles fraaside nime ja nendest on koostatud terve temaatiline kataloog , mis on J priivaras leitav peamenüüst Help + Phrases alt . Need fraasid vastavad tavaprogrammeerimises tuntud alamprogrammidele ja katavad suure osa praktikas vajaminevatest töödest . Fraaside raamatuga on üpris huvitav tutvuda . Sealt leiab ootamatult lühikesi “ juppe ” , mis teevad ära tohutu töö . Nendele , kellel on palju lineaaralgebraga tegemist , võib soovitada aadressilt <hyperlink> LAPACK-paketi mahalaadimist . Tegemist on ülivõimsa rahvusvaheliselt tuntud paketiga , mille kvaliteedis pole kahtlust ja mis garanteerib praktiliselt kogu lineaaralgebra jaoks hõlpsa käsitelu . Saadud programm on täiesti üldine . Meil tarvitseb vaid <arv> asendada vajaliku arvuga . GOLDBACHI HÜPOTEESI TEISI VARIANTE Üks põnevamaid on ungarlase Alfred Renyi poolt <arv>. a. pakutud Goldbachi hüpoteesi variant n= p + p<arv>*p<arv>* ... *pr , kus n on piisavalt suur paarisarv ja p<arv> , p<arv> , ... , pr on algarvud . Renyi'l oli r väga suur . Kui r oleks <arv> , olekski Goldbachi hüpotees tõestatud ! Mõningat edu on siin siiski saavutatud . Viimasena jõudis <arv>-leheküljelise tõestusega sihini Cha Jing-Run , kes <arv>. aastal näitas , et r R<arv>. Ülesanne . Kasutage eespool toodud programmi ideed Cha Jing-Runi hüpoteesi kontrollimiseks <arv> esimese algarvu korral . Analoogilisi hüpoteese on veelgi . Aastal <arv> väitis de Polignac , et iga paaritu arv on avaldatav kujul p + <arv>[k , kus p on algarv . Näiteks <arv>= <arv> + <arv>[<arv> = <arv> + <arv>[<arv> . Ülesanne . Koostada J-keeles programm de Polignaci väite kontrollimiseks . Näidata , et leidub kaks <arv>-st väiksemat arvu , mis pole nii esitatavad . Goldbachi teine hüpotees ( <arv> ) : iga paaritu arv on esitatav kujul p + <arv>a , kus p on algarv või <arv> ja a = <arv>. Leida ainus arv alla <arv> , mille puhul see hüpotees ei kehti . Lõpuks veel nuputamiseks Mills'i teoreem ( <arv> ) . Leidub positiivne reaalarv r , nii et f(n) = [ r[ ( <arv>[n ) ] on algarvuline n = <arv> , <arv> , <arv> , ... puhul ( kandilised sulud tähistavad täisosa võtmist ) . See on vaid olemasoluteoreem ja r tegeliku väärtuse kohta pole midagi teada . LÕPETUSEKS Soovitame suvalist programmeerimiskeelt kasutades jõudu katsuda toodud hüpoteeside ja teoreemidega . Ah et mis neist koostatavatest tabelitest kasu on ? Järsku on . Lugege A &amp; A <arv>. a. kolmandast numbrist L. Võhandu artiklit “ Induktsioonist , superinduktsioonist ja Waringi probleemist ” . Selles artiklis on juttu Moskva mehe A. Zenkini uuest tõestusmeetodit , milles piisab teatud seose kehtivusest kõigil väärtustel <arv> , <arv> , ... , n* . See n* väärtus tuleb kavalalt valida , siis saab määrata teatava lõpliku hulga järgmisi n väärtusi ( n* + <arv> , ... ) . Kui nende väärtuste puhul hüpotees tõene on , siis ongi teoreem tõestatud . Proovige jõudu , järsku tuleb Zenkini variandiga mõnel noorel siiani uinuv Goldbachi hüpoteesi tõestus välja . Lihtsal tabelite järjest pikeneval täitmisel pole erilist mõtet , seda näitab kasvõi Goldbachi teine hüpotees . Me ei või kunagi kindlad olla , kui kaugel paikneb hüpoteesi kummutav esimene arv . Zenkini meetod ongi seepärast põnev ja huvitav .