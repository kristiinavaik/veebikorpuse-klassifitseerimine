kirjak	tea_AA_02_2.tasak.ela	Paul Leis MetaCASE-tehnoloogia Traditsioonilised CASE-vahendid kasutavad modelleerimisel teatavaid kontseptsioone , reegleid ja graafilist notatsiooni . Näiteks toetub enamik objektorienteeritud CASE-vahenditest UML-ideoloogiale/tehnoloogiale . UML on piisavalt üldine modelleerimistehnoloogia , mis võimaldab modelleerida suvalisi süsteeme - mis tähendab , et mingi konkreetse valdkonna kontseptsioone ja mõisteid UMLs pole . Seetõttu on probleemvaldkonna spetsialistidel vaja oma valdkonna mõisted viia vastavusse UMLi mõistetega , neil on vaja omandada/õppida UMLi kontseptsioone , tehnoloogiat ja notatsiooni , mida neil tegelikult aga vaja pole . Siit - vaja oleks kohandada standardseid modelleerimismeetodeid , nagu UML , vastavalt probleemvaldkonnale . Nii tehaksegi - enamik UMLi konverentse on pühendatud UMLi probleemvaldkondadesse laiendamise temaatikale . Probleemvaldkonna spetsialistid “ ei taha UMLi ” , nad tahavad oma süsteeme kirjeldada mudelitega , mis vastavad nende valdkonna mõ istetele ja kontseptsioonidele . Muidugi võivad probleemvaldkonna spetsialistid paberi ja pliiatsiga joonistada niisuguseid mudeleid , kuid niisuguste mudelite järgi ei saa koodi kirjutada/genereerida . Mis teha ? Lahendus on ilmne ( ? ) : kirjeldada esmalt probleemvaldkonda metamodelleerimiskeeles/ - notatsiooni s , siis genereerida probleemvaldkonna modelleerimisvahendid ( = meetodiarendus ) . Seejärel toimub kõik nii nagu traditsiooniliste CASE-vahendite kasutamisel : mudeli verifitseerimime , koodi genereerimine jne ( = süsteemiarendus ) . Niisugust lähenemist ongi kasutanud ( esialgu ? ) vähetuntud Soome firma MetaCase Consulting , kelle toode MetaEdit+ on vahend nii süsteemiarenduseks kui ka meetodiarenduseks . MetaEdit+ on kasutusel Nokia mobiiltelefonide tarkvara loomisel , veel võiks “ suurkasutajatena ” mainida firmasid Deloitte &amp; Touche ja ICL . Andres Keevallik : Andres Keevallik - sündinud <arv>. veebruaril <arv>. a. Pärnus . Lõpetanud elektriinsenerina automaatika ja telemehaanika erialal Tallinna Polütehnilise Instituudi <arv> ja aspirantuuri <arv> tehnilise küberneetika erialal . Täiendanud end <arv>-<arv> Linköpingi ülikoolis , <arv>-<arv> Karlsruhe ülikoolis , <arv> ja <arv> Darmstadti ülikoolis , <arv> Grenoble'i Joseph Fourier' ülikoolis . Töötanud <arv>-<arv> TPI automaatika kateedri assistendina ja vanemõpetajana , <arv>-<arv> TPI elektronarvutite kateedri vanemõpetajana , <arv>-<arv> TPI elektronarvutite kateedri juhtajana , <arv>-<arv> TPI/TTü digitaalsüsteemide sünteesi teaduslabori juhatajana , <arv>. aastast TTü digitaaltehnika professor , <arv>-<arv> TTü arvutitehnika instituudi direktor , <arv>-<arv> TTü infotehnika teaduskonna dekaan , <arv>-<arv> Eesti ühispanga asepresident , infotehnoloogia valdkonna juht , <arv> TTü digitaaltehnika professor . Aastast <arv> volitatud insener ja EUR ING . Alates <arv>. aastast Tallinna Tehnikaülikooli rektor . Seekord on meie “ VIPi artikkel ” vormistatud intervjuuna prof. Andres Keevallikuga . Paul Leis : Alustaksime nö globaalküsimusest . Pidevalt kasvab protsessorite võimsus , suureneb mälumaht , kas pole karta , et arvutustehnika võimalused hakkavad ennast peagi ammendama , millalgi peaks ju kasv pidurduma ? Andres Keevallik : Mina pole hurraa-optimist kunagi olnud ja arvutist selle kaasaegses von Neumanni arhitektuuris liialt palju lootnud . Paljude oluliste ülesannete lahendamiseks on von Neumanni arhitektuuriga arvuti nõrgakene . üheks selgeks tunnuseks on tänapäeva infosüsteemide järjest kasvav keerukus : ka Eesti pankade infosüsteemides on mitusada serverit . Tuleb nipitada ja kombineerida , et kuidagiviisi kõiki ülesandeid kontrolli all hoida . <arv>ndatel loodud von Neumanni arvutiarhitektuur hakkab end ammendama . Areng küll toimub , peamiselt tehnoloogia täiustamise teel , kuid tõelist läbimurret pole siiani tulnud . Võime tõmmata paralleele : mingist hetkest alates ammendas end arvutuslükat , samuti ka näiteks mehaaniline arvutusmasin “ Felix ” . P.L. : Kuidas sa hindad Eesti Nokia võimalust ? A.K. : Eks see Eesti Nokia üks sümbol ole . Ta jääb tänases kontekstis kindlasti tulemata nagu omal ajal üks teine tuntud sümbol valge laev . Kuid samas on heameel tõdeda , et Eesti info- ja kommunikatsioonitehnoloogia tase on vägagi kõrge . Isegi mitte niivõrd teaduse , kuivõrd just rakenduste ja innovaatiliste lahenduste tase . Nimetaksin meie suuremate pankade infosüsteeme , side- ja telekommunikatsioonisüsteemi tervikuna , mobiilside rakendusi , andmeturbe süsteeme . Meil on kümneid kui mitte sadu heatasemelisi ja arenevaid IKT firmasid . TTü rektorina ja digitaaltehnika professorina võin tunda heameelt selle üle , et tänaste tegijate hulgas on juhtpositsioon meie ülikooli lõpetanutel ja ka üliõpilastel . P.L. : Millised ikkagi oleksid need peamised niššid , kus Eesti võiks infotehnoloogias läbi lüüa ? A.K. : Eks ikka seal , kus piisab korralikust haridusest ja kus pole vaja hirmkalleid disaini- ja/või analüüsivahendeid ! Ja neid valdkondi on palju - alates programmide disainist kuni juhtimissüsteemide ( algoritmid , riist- ja tarkvara ) disainini välja . Nõukogude ajal tuli meil n-ö kivist vett välja pigistada , et võistelda USA tehnoloogiatega . Digitaalsüsteemi disaini elementbaas ( programmeeritav loogika , mälud , mikroprotsessorid ) olid ajast ja arust . Praegu on meil olemas praktiliselt kõik vahendid ajakohaste süsteemide loomiseks . Ole ainult mees ja tegutse ! Meil on tänasel päeval häid asjatundjaid ja korralik koolitus digitaalsüsteemide sünteesi ja diagnostika , riist- ja tarkvara koosdisaini , kiipsüsteemi ( system on chip ) valdkondades . Praktikas oluliste väärtuste loomiseks pole seejuures vaja mingeid erilisi kohalike teadlaste poolt saadud supertulemusi . Pigem on vaja olla hästi kursis maailmas toimuva ja saavutatuga . P.L. : Niisugune probleem : tugevad IT spetsialistid saavad firmades oluliselt kõrgemat palka kui ülikooli õppejõud . Kuidas niisuguses olukorras siiski kindlustada kõrgetasemelist õppejõudude kaadrit ? Kas on piisavalt noori , kes on huvitatud doktorikraadist ? A.K. : Kahjuks pole neid piisavalt . Samuti on tänase seisuga IT erialadele riigi poolt eraldatud doktoriõppekohtade arv ebapiisav . Samal ajal on hästi teada , et naaberriigid , näiteks Rootsi , on infotehnoloogiahariduses võtnud selge suuna doktoritasemele , kuna vajadus kõrgtasemega spetsialistide järele on kasvanud . Võib arvata , et ka Eestis jõutakse selle vajaduse tunnetamiseni mõne aasta pärast . üldiselt on nii , et tipptaseme IT spetsialistid saavad õppejõududest kõrgemat palka kõikides riikides ja seetõttu nad ka lahkuvad ülikoolidest . ülikoolidel ei jää muud üle , kui kõige kiuste end siiski taastoota . Õnneks on märgata tendentsi , et end erasektoris ülestöötanud ja materiaalselt kindlustanud ning akadeemilise suundumusega inimesed on teel tagasi ülikoolidesse . Kui Tehnikaülikoolis jätkub õppejõudude palgatõus samas tempos kui viimasel kahel aastal , siis võime konkurentsivõimelistest palkadest rääkida juba <arv>-<arv> aasta pärast . P.L. : Aga niisugust ohtu siiski pole , et kui praegused õppejõud hakkavad oma aktiivset tegevust lõpetama , siis pole uusi peale kasvanud ? A.K. : Probleeme on , aga IT erialadel pole pilt nii kurb kui mõnedel n-ö klassikalistel insenerialadel , näiteks ehituses . Õppejõudude taastootmise ja kvalifikatsiooni probleemid on väga tõsised . Oleme teinud ettekirjutusi , et praeguses olukorras kasutada järjest rohkem asjatundjaid väljastpoolt - soovitav oleks umbes <arv>% koormusest täita välislektoritega . See annab ka tudengile kindlama tunde , et õpetatakse seda , mida praktiliselt vaja läheb , millega head tööd saab . P.L. : Kas praeguses õpetamise süsteemis on oodata muudatusi ? A.K. : Alates selle aasta vastuvõtust läheme üle uuele õppesüsteemile . Vastavalt nn Bologna deklaratsioonile , millel on ka Eesti haridusministri allkiri , rakendub uus <arv>+<arv> süsteem . See tähendab kahekihilist haridust - bakalaureus + magister . TTü ja insenerierialade jaoks tähendab see praktiliselt <arv>-aastase nominaalajaga õpet . Sel sügisel stardime uuendatud õppekavadega , mis on märksa ajakohasemad ja paremini praktika vajadustele orienteeritud . Uue süsteemi puhul on Tehnikaülikooli põhiliseks väljundiks magister , lõpetamine bakalaureusena on pigem erandiks - juhuks , kui üliõpilane tahab vahetada kas ülikooli ja/või eriala . Uute õppekavade ettevalmistamisel on oma kaaluka sõna öelnud meie erialaliidud , Eesti parimad asjatundjad . Samuti on kõik meie uued õppekavad läbinud kooskõlastusringi meie partnerite juures Helsingi Tehnikaülikoolis . Käesoleval aastal alustas IKT erialadel meil õpinguid rekordiline arv - <arv> - uut üliõpilast . Avasime ka uue äriinfotehnoloogia eriala , mis , nagu arvata võiski , osutus väga populaarseks . Ent jõupingutustele vaatamata ikkagi napib meil IT spetsialiste . Endiselt palkavad firmad tööle isegi meie esimeste kursuste üliõpilasi . Hinnanguliselt võiks vastuvõtt IKT erialadele olla Eestis kuni kaks korda suurem . Praegu jäävad suured investeeringud riiki tulemata just vastava koolitusega inimeste nappuse tõttu . P.L. : Kuidas Sa hindad Tallinna Tehnikaülikooli rolli infotehnoloogia õpetamisel ja arendamisel ? A.K. : Tehnikaülikoolil on läbi aastakümnete olnud keskne roll IKT erialade õpetamisel ja arendamisel . Arvuteid ja programmeerimist hakati meil õpetama juba <arv>ndate alguses . <arv>.a. avati entusiastliku ja edumeelse dotsendi Ustus Aguri eestvedamisel arvutitehnika kateeder . Kuigi nappis laboritehnikat , oli vähemalt teoreetiline ettevalmistus korralik . Praktiseerimis- võimalusi otsiti ja leiti meil Eestis ja väljaspoolgi . Siinkohal tahaks ma eriti rõhutada meie Teaduste Akadeemia Küberneetika Instituudi rolli . See oli tõeliselt viljastav koostöö . Meie üliõpilased leidsid sealt huvitavat ja arendavat erialast tööd , ka tehnika tase oli seal oluliselt parem kui ülikoolis . Küberneetika Instituudi teadlased olid meil osakoormusega õppejõududeks . Nii kasvas ja sai suurepärase hariduse meie praegune IKT alade eliit . <arv>ndate algusest kerkis arvutuskeskusi nagu seeni pärast vihma , mistõttu töö- ja praktikakohtade probleem lahenes . Arvutite konstrueerimise ja tootmise alast praktikat said meie üliõpilased Nõukogude Liidu parimates ettevõtetes väljaspool Eestit . Kuni meie riigi iseseisvumiseni <arv>ndate alguses suutis Tehnikaülikool end suhteliselt hästi taastoota , sest noortel oli tugev motivatsioon end pühendada teadusele . Ent nüüd on olukord radikaalselt muutunud - meie ülikoolid ei suuda võistelda erasektoris ja välismaa ülikoolides pakutavaga . Mis on aga selle aja jooksul märkimisväärset arenenud , on meie materiaalne baas . Meil on laborites rahuldaval tasemel personaalarvutid , tööjõujaamad , spetsiaalne tehnika digitaalsete juhtimissüsteemide projekteerimiseks jne. Märkimisväärselt on meid toetanud erasektor . Toon ainult ühe näite - Ericssoni tehnika baasil on meil sisustatud kolmanda põlvkonna mobiilside rakenduste labor maksumusega ligi kümme miljonit krooni . Sellel baasil on tehtud paljud mobiilside rakendused , näiteks ka mobiilparkimine ja -positsioneerimine . P.L. : Sa oled olnud tegev insenerikutse-alase tööga FEANI-s Euroopa tasandil . Mida kasulikku meie jaoks oled Sa selle tegevusega omandanud ? A.K. : FEANI on Euroopa Inseneriliitude Assotsiatsioon , mis muuhulgas annab Euroopa taseme insenerikutset EUR ING . Ka meil võiksid tööandjad enam väärtustada insenerikutset . Muuseas , paljud ei teagi , et Eestis on rakendatud ja kasutusel Eesti volitatud inseneri tiitel . Neid , kes inseneridiplomit omavad , on palju . Aga neid , kes insenerikutset omavad , kes võivad ennast tõelisteks insenerideks lugeda ja oma töö tulemuste eest täit vastutust kanda , on märksa vähem . Mul oleks hea meel , kui tööandjad ühest küljest väärtustaksid rohkem haridust ( magistritase , doktoritase ) , ent teisest küljest ka insenerikutset , mis on ikkagi taseme ja kvaliteedi näitaja . P.L. : Balti superarvutusvõrgu projekt tundub olevat väga huvitav . Mida võiksid Sa selle kohta täpsemalt öelda ? A.K. : Balti superarvutusvõrgu projekt on tekkinud koostöös Sun Minosystems'i esindajatega . See idee pole tegelikult uus , vaid on küpsenud pikka aega . Isegi nõukogude ajal sai Eesti esimese mittesõjalisse sfääri läinud superarvuti Elbrus . Balti regioonis peaks üks niisugune superarvuti ressurss olema - ja miks ta ei võiks olla Eestis , seda enam , et Eesti ühispangal on väärtuslik kogemus Sun Enterprise <arv> ( Starfire ) serveritega . Sellest ideest on tõsiselt huvitatud ka Läti ja Leedu . Kas see tuleb aga Eestisse , sõltub mitmetest asjaoludest , ka Eesti riigi toetusest . Olen informeerinud ka meie riigi neid ametnikke , kelle kompetentsi vastavate otsuste langetamine kuulub - hinnangud on olnud väga positiivsed . On selge , et ainult Eesti jaoks jääb niisugune investeering liiga suureks . Pole mõeldamatu arvutusressursi müümine ka väljapoole Balti regiooni . P.L. : Lõpetuseks , mida Sa paneksid südamele infotehnoloogia tudengile ? A.K. : Infotehnoloogia on niisugune ala , “ kus tunnikene tukkumist toob eluks ajaks kukkumist ” . Kui sa oled maha jäänud , siis järele jõuda pole võimalik või on väga raske . Vaja on teha pidevalt tööd . Lohutuseks niipalju , et tukkuda loomulikult võib ja tulebki , ent kindlasti mitte valel ajal ja vales kohas . Arvo Toomsalu , TTü arvutitehnika instituut Jäljevahemälu Superskalaarsete protsessorite jõudluse kasv saavutatakse põhiliselt rööpselt töödeldavate käskude arvu suurendamise teel . Pidevalt kasvavad nõuded niisuguste lülituste infoläbilaskevõimele , mis tegelevad käsuvõtu ja selle ettevalmistamisega töötluseks . Tänapäevane superskalaarne protsessor sooritab igal taktil mitte mitme käsu võtu , vaid mitme põhi- ehk baasploki ( basic block ) võtu . Keskmiselt sisaldab põhiplokk <arv> ... <arv> käsku . Käsuvõtul pöördutakse tüüpiliselt käsuvahemälu poole , et aga seal säilitatavate käskude järjestus ei lange enamasti kokku käskude tegeliku täitmise järgnevusega protsessoris , siis hakkab käsuvahemälu piirama protsessori jõudlust . Erinevalt skalaarseist protsessoreist on superskalaarprotsessoreis käsuvõtt ja käsutöötlus teineteisest eraldatud käsuväljastust korraldavate lülituste ( väljastuspuhvrite ) poolt . Käsuvõtt hõlmab käskude võtu , dekodeerimise , jaotamise ja suunamise väljastuspuhvritesse . Väljastuspuhvrid , näiteks ootejaamad , moodustavad tervikliku üksuse , mida nimetatakse käsuaknaks ( joonis <arv> ) . Käsuakna mehhanism võimaldab jadaprogrammide töötlemisel ära kasutada käsutasemelist parallelismi ning seeläbi suurendada protsessori jõudlust . Mida laiem on käsuaken , seda kergem on leida käsuvoost andmesõltuvusevabu käsukomplekte , mida rööpselt suunata töötlusüksustesse . Kui protsessor suudab ühe taktiga töödelda näiteks kümme käsku , siis peab käsuvõtuüksus olema võimeline igal taktil sooritama vähemalt kümne käsu rööpse võtu . Vähema arvu käskude võtt toob kaasa jõudluse languse . Protsessoris tuleb lahendada kolm üksteisega seotud ülesannet , st. tagada kõrge tootlikkus käsuvõtul , andmevõtul ja infotöötlusel . Kui ei õnnestu lahendada esimest ülesannet , siis pole võimalik lahendada ka kaht järgnevat . Piisavalt kõrge käsuvõtuvõime saavutamine pole lihtne - on mitmeid tegureid , mis takistavad käsuvõtuüksusel selle saavutamist . Olulisemad neist on : möödalasud käsuvahemälus vääralt prognoositud hargnemised käsuvoos , mille tulemusena käsuvõtuüksus sooritab ka nende käskude võtu , mida hiljem ei täideta üldised muudatused käsuvoo kulgemises . Kui käsud saabuvad käsuvahemälust , siis ühel taktil on raske sooritada nii hargnemist põhjustava käsu kui ka hargnemisaadressil asuva käsu võttu . Enamikul juhtudel suudavad protsessorite käsuvõtuüksused ühe takti jooksul prognoosida vaid ühe tingimusliku siirde suuna . See tähendab , et igal taktil saab sooritada vaid ühe põhiploki võtu . Nagu märgitud , sisaldab tüüpiline põhiplokk keskmiselt <arv> ... <arv> rööpselt töötlusesse suunatavat käsku . Seega ei piira protsessori jõudlust sageli mitte niivõrd töötlusseadmete arv , kui lihtsalt ei jätku töödeldavaid käske . Kui saavutatakse olukord , et igal taktil suudetakse prognoosida mitu hargnemissuunda ( siirdesuunda ) , siis tähendaks see seda , et käsuvõtuüksus peab igal taktil sooritama mitme järjestikku täidetava põhiploki võtu . See pole aga siiski nii lihtne , kui esmapilgul näib . Tüüpiliselt salvestatakse käsud käsuvahemällu selles järjestuses , nagu need reastati programmi transleerimisel . Programmide ( käsujadade ) säilitamine staatilises vormingus on sobiv juhul , kui programmis esineb harva hargnemisi või on tegemist käskude pikkade põhiplokkidega . Kahjuks ei esine praktikas selliseid programme just tihti . Märksa sagedamini esineb olukordi , kus käskude tegelik töötlemise järjekord erineb oluliselt nende paiknemisest käsuvahemälus . Kui programmi töötlemisel läbitakse käskude neli põhiplokki järjestuses A ® B ®C ®D ®E , siis käsuvahemälus võivad need põhiplokid paikneda hajali näiteks nii , nagu on kujutatud joonisel <arv>. Toodud näite korral tuleb sooritada neli pöördust käsuvahemällu ; esimesel pöördusel toimub põhiplokkide A ja B , teisel C , kolmandal D ja neljandal E võtt . Isegi kui käsuvõtuüksus suudaks ühel taktil prognoosida kolm hargnemissuunda , ei kiireneks protsessori talitlus , sest käsuplokid ei paikne käsuvahemälus järjestikku , nende võttu ei saa sooritada ühe taktiga . Olukord muutuks oluliselt paremaks , kui käskude põhiplokid oleksid käsuvahemällu salvestatud sellises järjestuses , nagu neid programmi täitmisel tegelikult läbitakse , st. dünaamilises järjestuses . Just sellisest põhimõttest lähtutakse käskude salvestamisel nn. jäljevahemällu ( trace cache ) . Jäljevahemälu lülitamine protsessori mikroarhitektuuri annab võimaluse uue vaatenurga alt läheneda programmi talitluse kirjeldamisele protsessoris . Selle asemel et vaadelda programmi kui teatavat käskude jada , võib seda vaadata kui käsujälgede jada . JÄLJEVAHEMÄLU TÖÖPÕHIMÕTE Üheks teeks , kuidas ületada klassikaliste käsuvahemälude jõudluspiiranguid , oleks selliste käsuvahemälude kasutuselevõtmine , kus samaaegselt saab läbi viia mitut käsuvõttu . Näiteks sobivad selleks multiport-käsuvahemälud . See tähendab aga , et käsuvahemälu tarvis tuleb üheaegselt formeerida mitu pöördusaadressi , üks iga pöördutava käsuploki tarvis . Käsuvõtul multiport-käsuvahemälust tuleb võetud käsud enne töötlusesse suunamist joondada . Selleks peab käsuvõtuüksusesse lisama täiendavaid loogikalülitusi . Kasutades aga jäljevahemälu , kaob vajadus keeruka multiport-käsuvahemälu ja hulga täiendavate lülituste järele . Et jäljevahemälus paiknevad käsud samas järjestuses , nagu neid programmi töötlusel tegelikult täidetakse , siis käsuvõtuüksusel ei teki raskusi vajaliku hulga käskude võtmisega . Jäljevahemälus säilitatakse nagu käskude omamoodi “ jälgi ” . Jäljevahemälu puhul kasutatakse mõistet käsuvõtuplokk ( fetch block ) ehk ( käsu ) segment ( segment ) . ühte segmenti võib kuuluda mitu käskude põhiplokki . Sisuliselt kujutab segment endast teatavat käskude dünaamilist järjestust , mis algab käsuvõtuaadressiga määratud käsuga ja lõpeb juhtimiskäsuga , mis muudab käsuvoo kulgu . Segmenti kuuluvad käsud ei pea programmis olema järjestikku paiknevatel aadressidel . Käskude arvu jäljes piirab ühelt poolt konkreetse jäljevahemälu mälurea pikkus , teisalt aga põhiplokkide lubatav arv segmendis . Viimane sõltub hargnemiste ohjega tegeleva üksuse võimsusest , st. mitu hargnemissuunda suudetakse korraga määrata . Põhiliselt piirab aga käskude lubatavat arvu jäljes protsessori töötlusüksuste infoläbilaskevõime . Informatsiooni mahutavuselt on jäljevahemälud samas suurusjärgus kui käsuvahemälud . Analoogiliselt käsuvahemäluga on jäljevahemälus korraldatud informatsiooni lugemine ja salvestamine . Jälje esmaesinemisel eraldatakse talle jäljevahemälus mälurida , mis täidetakse programmi töötlemise käigus käsuvahemälust võetavate käskudega . Kui käsuvoos esineb antud jälg ( sama käivitusaadressiga ja hargnemistega ) uuesti , siis ei hakata käske võtma enam mitte käsuvahemälust , vaid võetakse vastav segment jäljevahemälust . Jäljevahemälu töötab tihedas koostöös hargnemiste prognoosiüksusega . See peab olema võimeline igal taktil prognoosima töötlusele kuuluvate käskude järjestuse ka mitme hargnemise korral . Mitut hargnemist prognoosiva üksuse prognoositäpsus ei tohi olla palju madalam kui sellel , mis otsustab vaid ühe hargnemise üle . Klassikaliseks võtteks protsessori jõudluse tõstmisel on taktsageduse suurendamine . Jäljevahemälu kasutamisel superskalaarses protsessoris peab arvestama , et käsuvõtukiiruse tõustes pikeneb suhteline aeg , mis kulub hargnemissuuna kindlaksmääramisele , ning väärprognooside korral kasvab “ kaotatavate ” taktide arv . S. J. Pateli andmetel tõstab jäljevahemälu protsessori jõudlust kuni <arv>% ja käsuvõtukiirus võib tõusta kuni <arv>% [ <arv> ] . Joonisel <arv> on näidatud põhilised funktsionaalsed üksused , mis osalevad protsessori juhtseadmes käsuvõtu korraldamisega . Nendeks on jäljevahemälu ( TC ) , jäljevahemälu täitmisüksus ( FLU ) , mitme hargnemissuuna prognoosiga tegelev üksus ( MBP ) ja klassikaline kahetasemeline käsuvahemälu , millest vahetult suhtleb jäljemäluga esimese taseme käsuvahemälu ( IC<arv>L ) . Programmi töötlemisel on käskude põhiallikaks jäljevahemälu . Jäljevahemälu varustab informatsiooniga ( käsusegmentidega ) täitmisüksus . Prognoosiüksus sooritab igal taktil mitme hargnemissuuna prognoosi ja tagab , et jäljevahemällu salvestatakse “ õigetest käskudest ” moodustatud segmendid . Käsuvahemälul on toetav funktsioon , seda kasutatakse siis , kui jäljevahemälus puudub vajalik informatsioon . Jäljevahemälu uute käsusegmentide moodustamisel lähtutakse eeldusest , et enamik hargnemisi kaldub suunduma ühte suunda . Näiteks kui eelnevalt läbiti segmentide järgnevus A ® B ®C ®D ®E , siis selle tee teistkordsel esinemisel käsuvoos on väga suur tõenäosus , et ka nüüd läbitakse sama tee . Seega on otstarbekas nad ühendada jäljeks , mis salvestatakse jäljevahemällu ühtse kirjena . Jälje salvestamisel määratakse ära vaid esimese käsuploki A aadress . Pöördumisel jäljevahemällu käivitub automaatselt prognoosiüksus ja mehhanism , mis võrdleb valitud segmendi tegelikku läbimisteed prognoositud teega . Olgu tegemist programmifragmendiga , kus on võimalik näiteks järgmine põhiplokkide järgnevus : Eeldame , et prognoosiüksus pakkus põhiplokkide läbimisjärjestuseks A B D , kuid programmi täitmisel kujunes järjestuseks A B C. Prognoositud teel on õigesti määratud vaid järgnevus A B. Tekib küsimus , kas jäljevahemällu tuleks salvestada uus jälg AB või kasutada täiendavat selektorlülitust ( SL joonisel <arv> ) , mille abil saaks olemasolevast jäljest ABD välja valida ja töötlusesse suunata vaid osa käsusegmendi põhiplokke ( AB ) . Esimene lahendus on lihtsam , kuid raiskab jäljevahemälu mäluruumi , teine on universaalsem , kuid riistvaraliselt keerukam . Praktikas eelistatakse enamasti teist varianti . INFORMATSIOONI KORRALDUSEST JÄLJEVAHEMÄLUS Üldjuhul koosneb jäljevahemälu segment kuni n käsust , neist m käsku võivad olla tingimuslikud hargnemiskäsud . Jäljevahemälu mikroarhitektuurne korraldus sarnaneb tavalisele käsuvahemälule . See sisaldab ( käsu ) ridu , mis on harilikult korraldatud moodul-assotsiatiivse struktuurina . ühe või teise rea valik toimub käsuvõtuaadressi alusel , see suunatakse sildimällu ( joonis <arv> ) . Sildimälus võrreldakse käsuvõtuaadressi sildimälus säilitatavate koodidega ning nende kokkulangemisel aktiveeritakse andmemälus vastav käsurida . Vaatamata moodul-assotsiatiivsele korraldusele ei salvestata jäljevahemällu üldjuhul segmente , millel on üks ja sama algusaadress . Kui segment põhiplokkide järjestusega ABC on jäljevahemälus juba olemas , siis ei salvestata sinna eraldi segmendina põhiplokkide järgnevust AB . Küll aga võidakse segmendi ABC asemel salvestada segment , kus põhiplokkide järjestuseks on ABD . Et taoline mehhanism toimiks , lisatakse jäljevahemälus iga käsurea vastavale sildireale täiendav teekonna informatsioon ( path information ) . Selles esitatakse kodeeritult käsusegmendis sisalduvate kõigi hargnemiste suunad . Käsuvõtul jäljevahemälust väljastatakse alati vastava segmendi teekonna informatsioon . Nagu märgitud , piiratakse jäljevahemälus samaaegselt mitme ühe ja sama algusaadressiga segmendi säilitamist . Samas on piisavalt näiteid , kus taolist piirangut ei rakendata , see eeldab aga mälu kõrgemat assotsiatiivsuseastet ja paindlikkust . Jäljevahemäludes ohjel kasutatav juhtinformatsioon võib varieeruda , kuid enamasti sisaldab see järgmist teavet : V - valiidsuse bitt , mis näitab , kas antud jälg on kasutatav või mitte A-silt - määrab kehtiva jälje algusaadressi hargnemise lipud - iga käsusegmendis sisalduva hargnemise tarvis on eraldi lipp . Lipp näitab , kas vastav hargnemine toimub või mitte . Segmendi viimase hargnemise tarvis pole lippu vaja , sest talle ei järgne käsku . Hargnemislippude arv on ühe võrra väiksem kui hargnemiskäskude arv segmendis hargnemise mask - näitab hargnemiste arvu jäljes ja seda , kas jälg lõpeb hargnemiskäsuga või mitte järgmise jälje aadress - osutab aadressile , kus paikneb järgmine jälg juhul , kui viimane prognoositud hargnemine ei leia aset jälje sihtaadress - osutab aadressile , kus paikneb järgmine jälg juhul , kui viimane prognoositud hargnemine toimub . Jäljevahemälus ei säilitata tagasipöördumis- , kaudseid siirde- ega lõksustuskäske . Käsurea moodustamisel abordib rea käskudega täitmist korraldav lülitus nimetatud käsud . Tingimusteta siirdekäske ja kutsekäske võib vaadelda kui ettemääratud suunaga tingimuslikke siirdekäske , neid võib lülitada tingimuslike hargnemiste klassi . Et jäljevahemälu struktuur võib olla üpriski keerukas , tõendab kas või S. J. Pateli poolt esitatud mälukorraldus [ <arv> ] . Tegemist on <arv>-kanalilise jäljevahemäluga , mille iga rida sisaldab : kuutteist käsupilu ( käske säilitatakse dekodeerituna ) , iga käsu säilitamiseks vajatakse keskmiselt viit baiti . Igas reas võib olla kuni kolm hargnemiskäsku et segment koosneb kolmest põhiplokist , siis määratakse neli sihtaadressi . Sihtaadressid säilitatakse ilmutatud kujul , see lihtsustab järgmisel käsuvõtul aadressi formeerimist juhtudel , kui vaid osa segmendist vastab prognoositud teele informatsiooni teekonna kohta . Kodeeritult esitatakse segmendis sisalduv hargnemiste arv ja suunad . See sisaldab ka bitte , mis näitavad , kas segment lõpeb hargnemisega ning kas hargnemisel on tegemist naasmisega alamprogrammist . Kui segment lõpeb naasmiskäsuga , siis järgmise käsuvõtuaadressi väärtuse määrab naasmisaadresside pinus säilitatav kood . Kokku sisaldab jäljevahemälu rida <arv> baiti informatsiooni ( <arv> baiti käskudele , <arv> baiti sihtaadressidele ja <arv> bait teekonna kirjeldamiseks ) . Segment moodustatakse dekodeeritud käskudest . Enne jäljevahemällu salvestamist analüüsitakse käskudevahelisi sõltuvusi ja saadud tulemuste alusel moodustatakse täiendav juhtinfo . Nii lisatakse iga käsu poolt kasutatava ( lähte ) operandi jaoks <arv>-bitine identifikaator ( silt ) , mis näitab , kas vastava operandi väärtus moodustatakse segmenti kuuluva käsu poolt ( st. sisemiselt ) või välise käsu poolt . Kui operandi väärtus formeeritakse sisemiselt , siis silt näitab , millises segmendis olevas põhiplokis paikneb operandi moodustav käsk . Antud informatsioon on vajalik registrite ümbernimetamist sooritavale lülitusele . Samuti lisatakse identifikaatoribitt ka käsus saadava tulemi tarvis . Viimane näitab , kas tulemit kasutatakse väljaspool antud põhiplokki või mitte . Kõik tulemid , mida kasutatakse väljaspool põhiplokki , nimetatakse ümber ning neile eraldatakse kindel füüsiline register . Tänu käsusegmendis sisalduvale lisainformatsioonile tuleb enne käskude suunamist käsuaknasse sooritada vaid minimaalselt ümbernimetamisi . Erandi moodustavad üksnes käsud , mille operandide väärtused moodustatakse või tulemeid kasutatakse väljaspool segmenti . Et iga segment läbib eelneva analüüsi , kus tuvastatakse ja fikseeritakse selles sisalduvate käskude omavahelised sõltuvused , siis pole oluline , millises järjestuses paiknevad käsud jäljevahemälu reas . JÄLJEVAHEMÄLU TÄITMISüKSUS Täitmisüksuse ülesandeks on koguda käske samas järgnevuses , nagu neid valitakse protsessori poolt töötlemiseks , ning moodustada neist jäljevahemällu salvestatavad käsujäljed . Käsujälgede moodustamiseks lisatakse täitmisüksusesse FIFO-tüüpi täitepuhver ( fill buffer ) , kuhu salvestatakse erustatavad käsud . Käsud suunatakse täitmisüksusesse plokkidena käsuvõtu järgnevuses . Käsujälje moodustamisel läbitakse neli etappi : tuvastatakse käsujälje algus ja lõpp valitakse välja jälge moodustavad käsud langetatakse otsus , kas vastmoodustatud jälg peab asendama mõne jäljevahemälus juba olemasoleva käsujälje uus käsujälg salvestatakse ( kui see on vajalik ) jäljevahemällu . Täitmisüksuses mestitakse nii saabuvaid kui eelneval tsüklil saabunud käsuplokke . Mestimise käigus korraldatakse ümber küll käskude järjestus , kuid säilitatakse informatsioon käskudevaheliste sõltuvuste kohta . Mestimise protsess kestab kuni uue segmendi lõpliku moodustumiseni ehk finaliseerumiseni , st. segmendi võib salvestada jäljevahemällu . Segmendi moodustamine loetakse lõppenuks , kui : segment sisaldab ettenähtu arvu käske ( toodud näite korral <arv> käsku ) segment sisaldab lubatava arvu tingimuslikke hargnemisi ( näites oli selleks kolm tingimuslikku siirdekäsku ) segment sisaldab ühe kaudsiirdekäsu , naasmiskäsu või lõksustuskäsu siseneva käsuploki mestimisel olemasolevatega tekib segment , mis ei mahu jäljevahemälureale ( kirjeldatud näite korral ületaks <arv> käsku ) . Mittetingimuslikud siirdekäsud ja programmikutsed ei ole põhjuseks , miks peaks segmendi moodustamise lõpetama . Käsuplokke püütakse üldjuhul mitte jaotada kahe segmendi vahel , v.a. juhtum , kui ületatakse segmendi lubatav maht . Iga uue käsuploki saabudes täitmisüksusesse toimub üks järgmistest toimingutest : saabunud käsuplokk mestitakse seni veel lõplikult formeerumata segmendiga , kuid tekkiv segment ei kuulu veel lõplikule sulgemisele ( finaliseerumisele ) saabunud käsuplokki ei saa täielikult mestida täiendust ootava segmendiga . Täiendust ootav segment suletakse , saabunud segment jääb ootama uut ( saabuvat ) käsusegmenti saabunud käsuplokk mestitakse täielikult teda ootava segmendiga , mestimise tulemusena moodustunud uus segment suletakse . Täitmisüksusesse võib käsuplokke suunata kas sellises järjestuses , nagu neid suunatakse töötlusesse või nagu neid erustatakse . Kui käsuplokke kogutakse täitmisüksuses erustamise ajal , siis valminud segmente ei salvestata kohe jäljevahemällu , sest pole välistatud , et käske töödeldi spekulatiivselt . Segmentide liiga varajasel salvestamisel tekib oht , et saadud käsuplokid pärinevad vääralt prognoositud teelt . Segmentide formeerimisel erustatavate käskude plokkidest tekib täiendav ajaline viit , see võib mõjuda negatiivselt protsessori jõudlusele . Jäljevahemälu kasutamisel tekib teatav liiasus jäljevahemälus ja käsuvahemälus säilitatava informatsiooni vahel . Liiasus ei ole tingitud mitte sellest , et mõlemas säilitatakse samu käske , vaid teatavate käsujärgnevuste dubleerimisest neis . Käsujärgnevust , mis sisaldab mittetoimuvaid hargnemisi , võib käsuvahemälus säilitada sama edukalt kui jäljevahemälus . üldjuhul säilitatakse neid paralleelselt aga mõlemas . Joonisel <arv> on kujutatud olukord , kus nelja põhiploki ( A , B , C ja D ) jälgede säilitamine jäljevahemälus põhjustab informatiivse liiasuse ja mäluruumi ebaefektiivse kasutamise . Mõnikord on otstarbekas eristada kahte käsujälje tüüpi , nn. siniseid ja punaseid jälgi . Sinised käsujäljed koosnevad üksnes jadamisi täidetavaist käskudest . Punastes käsujälgedes sisalduvad ka käsud , mis muudavad käskude töötlusjärjekorda . Punased käsujäljed formeeritakse käsuvoo töötluse käigus ning need salvestatakse jäljevahemällu . Sinised käsujäljed moodustatakse kompilaatori poolt , neid säilitatakse käsuvahemälus . Kui mitte rakendada täiendavaid meetmeid , siis “ korjab ” täitmisüksus programmi töötlemise käigus üles ka sinised käsujäljed ja salvestab need jäljevahemällu . Varustades täitmisüksuse täiendava lisalülitusega , mis eristab siniseid ja punaseid käsujälgi , saab lubada vaid punaste jälgede salvestamist jäljevahemällu . See kõrvaldaks informatiivse liiasuse jälje- ja käsuvahemälude vahel . Taoliselt ohjatavat jäljetöötlust nimetatakse jälje selektiivseks salvestamiseks ehk STS-ks ( STS - Selective Trace Storage ) . STS-i korral kasutatakse jäljevahemälu mäluruumi otstarbekamalt , väheneb vajatav mälumaht ja alaneb selle maksumus . Meetodi rakendamisel peab arvestama koormuse kasvuga käsuvahemälus ning kõrgenenud nõuetega lülituste suhtes , mis korraldavad käsuvõttu ja käskude järjestamist . PROGNOOSIÜKSUS Prognoosiüksuse töö efektiivsusest sõltub oluliselt käsuvõtusüsteemi läbilaskevõime . Selles moodustatakse iga käsujälje tarvis jäljeidentifikaator ( trace identifier ) ehk indeks ( index ) , mis määrab jälje käivitusaadressi ja kõigi käsujäljes sisalduvate hargnemiste prognoositud hargnemissuunad . Jäljeidentifikaatori alusel toimub jäljevahemälust sobiva jälje otsing . Jäljeidentifikaatori ülesannet võib täita kas jälje algusaadress või algusaadressi ja hargnemistunnuste kombinatsioon . Viimasel variandil on see eelis , et jäljevahemälus saab säilitada kõiki ühe ja sama algusaadressiga , kuid erinevate hargnemissuundadega käsujälgi ( käsusegmente ) . Seda ka siis , kui jäljevahemäluna toimib otsevastandustüüpi mälustruktuur . Jäljevahemälus säilitatakse identifikaatorite väärtusi sildimälu osas . Et protsessori töötlusüksused oleksid pidevalt varustatud käsuvoogudega , peab hargnemiste prognoosiüksus suutma igal taktil korrektselt prognoosida mitmeid hargnemisi . Vajaliku jõudluse ja prognoosi täpsuse saavutamiseks kasutatakse tihti hargnemiste adaptiivset kahetasemelist prognoosimeetodit . Kahetasemelise süsteemi esimesel tasemel toimub teabe salvestamine kõigi töödeldud käskude puhul asetleidnud hargnemiste kohta . Teisel tasemel salvestatakse spetsiaalsesse mallilootabelisse ehk PHT-sse ( PHT - Pattern History Table ) tõenäosem tee juhuks , kui esimesel tasemel leiab aset hargnemine antud suunas . Tüüpiliselt rakendatakse PHT-na kahejärgulist kahendloendurit . Kolme prognoosi sooritamiseks ühel taktil peab PHT sisaldama kolme kahejärgulist kahendloendurit , st. üks loendur iga segmenti kuuluva hargnemiskäsu tarvis . KÄSUVAHEMÄLU Käsuvahemälu toetab jäljevahemälu . Ta varustab käsuvõtuüksust käskudega vaid juhul , kui jäljevahemälus vajatav segment puudub . Käsuvõtul käsuvahemälust tuleb võetud käsud joondada ja mestida , et moodustuks korrektne käsukomplekt , mida tohib suunata käsuaknasse . Neid ülesandeid täidab joondi-mestimislülitus ( A/M-lülitus joonisel <arv> ) . Samuti kuuluvad käsud eelnevalt ka dekodeerimisele ning sooritatakse vajalikud ümbernimetamised . Käsuvahemälu mikroarhitektuur peab olema selline , mis tagab igal taktil ühe loogiliselt tervikliku käsuploki võtu . Selleks varustatakse käsuvahemälu kahe rööpselt talitleva pordiga ja tagatakse käsuvõtt mälu kahest naaberreast . Loetud käsud reastatakse ümber sobivasse järjestusse . Juhul kui esineb möödalask nii jälje- kui ka esimese taseme käsuvahemälus , siis tuleb pöörduda kas teise taseme käsuvahemällu või siirduda mälusüsteemis veelgi kaugematele tasemetele . Muidugi toob see kaasa täiendavaid viiteid ning võib ohtu seada töötlusüksuste pideva varustamise käskudega . JÄLJE- JA KÄSUVAHEMÄLUDE KOOSTÖÖ Oleks väär arvata , et jäljevahemälu asendab käsuvahemälu või käsuvõtuüksust , ta vaid laiendab käsuvõtuüksuse funktsionaalseid võimalusi ja tõstab käskude läbilaset . Pöördus jälje- ja käsuvahemälude poole toimub rööpselt . Sõltuvalt sellest , kas jäljevahemälus leiab aset tabamus või möödalask , toimub käsuvõtt erinevalt . Tabamusel jäljevahemälus ( pöördusaadress ühtib sildiaadressiga ja prognoositud hargnemissuund langeb kokku hargnemise lipu olekuga ) loetakse mälust välja vastava aadressiga mälurea sisu . ühtlasi väljastab hargnemisüksus teabe segmendis toimuvate hargnemiste kohta . Selektorlülituse ( SL ) abil määratakse , milline osa valitud mälureast kuulub jäljemälust väljastamisele . Valikul tuginetakse enamasti konservatiivsele meetodile - kui kogu käsusegmendi käskude täitmise kulg ei vasta prognoositud teele , siis ei väljastata jäljevahemälust midagi . Sisuliselt toimitakse antud juhul samamoodi kui möödalasul mälus . Võimalik on aga ka alternatiivne lahendus , kus jäljevahemälust väljastatakse vaid see osa segmendi käskudest , mis langeb kokku prognoositud teega . Hargnemisüksuses prognoositakse veel neljaski aadress , millest lähtuvalt käivitatakse järgmisel taktil uus käsuvõtutsükkel . Kui võetud segment lõpeb naasmiskäsuga , siis järgneva käsuvõtu aadress saadakse naasmisaadresside pinust . Leiab jäljevahemälus aset aga möödalask , siis võetakse kasutusele käsud , mis saabusid käsuvahemälust . ühtlasi kantakse need käsud üle jäljevahemällu , moodustades selleks vastava käsusegmendi . JÕUDLUSPIIRANGUD JÄLJEVAHEMÄLUS Jäljevahemälu jõudlus sõltub otseselt jälgede õigest valikust , st. algoritmist , mida kasutatakse dünaamilise käsuvoo jagamisel üksikuteks käsujälgedeks . Jälgede valikust oleneb nii jälje keskmine pikkus ( põhiplokkide arv jäljes ) kui ka jäljevahemälu tabamusteguri väärtus . Jäljevahemälu struktuursel lahendamisel peab arvestama mitmeid objektiivseid piiranguid . Nagu käsuvahemälus , on jäljevahemälu mäluread lõpliku pikkusega , seega saab neisse salvestada vaid teatava arvu põhiplokke . Piiratud on lubatavate hargnemiste arv mälureas . Kui prognoosimehhanism suudab ühe taktiga prognoosida m hargnemissuunda , siis ei tohi mälureas sisalduda rohkem kui m hargnemiskäsku . Eksperimendid on näidanud , et väga pikad käsujäljed vähendavad jäljevahemälu tabamusteguri väärtust [ <arv> ] ( kuigi selle nähtuse põhjuseks võib olla liialt lihtsate strateegiate rakendamine jälgede formeerimisel ) . Jäljevahemälu kasutamise põhieesmärgiks on suurendada eeskätt käsuvõtuüksuse läbilaskevõimet , mitte aga vähendada möödalaskude arvu käsuvahemälus . Seega säilivad jäljevahemäluga süsteemideski mälupöörduse kiiruse probleemid . Kui käsuvahemälu tabamustegur pole piisavalt kõrge , siis peab jäljevahemälu ootama , kuni käsuvahemälu suudab vajaliku informatsiooni hankida madalama taseme aeglasematest mäludest . See põhjustab töötlusüksuste alakoormatust või mis veelgi halvem - seisakuid . Mitmed uurimused kinnitavad , et ka liiga lühikesed käsujäljed põhjustavad protsessori jõudluse langust , sest väheneb käsuvõtuüksuse infoläbilase . Parim lahendus oleks , kui õnnestuks moodustada töödeldavate programmide iseärasustest , lähtudes optimaalse pikkusega käsujäljed . TARKVARALINE JA PLOKK-JÄLJEVAHEMÄLU Kõrvuti erinevate riistvaraliste jäljevahemälu variantidega leiavad kasutamist tarkvaralised jäljevahemälud ( software trace cache ) . Tarkvaraline jäljevahemälu tugineb kompileerimise ajal automaatselt toimuvale käskude ümberjärjestamisele . ümberjärjestamise eesmärgiks on saavutada käsuvahemälus minimaalne möödalaskude arv . Vältimaks käsujärgnevuste katkemist , korraldatakse käsuplokid selliselt ümber , et toimuvad hargnemised asenduksid mittetoimuvate hargnemistega . Sagedasti kasutatavad käsuplokid kantakse käsuvahemälu reserveeritud ossa . Tarkvaralise jäljevahemälu puuduseks peetaksegi reserveeritud mäluruumi olemasolu , mis kasutab “ raiskavalt ” käsuvahemälu mäluruumi . Tarkvaralise jäljevahemälu rakendamine pole efektiivne koodi puhul , mis sisaldab palju silmuseid ning vähe hästi prognoositavaid tingimuslikke siirdeid . Mitmed eksperimendid on näidanud , et kuigi tarkvaralise jäljevahemälu korral möödalaskude arv käsuvahemälus väheneb , suureneb samas vääralt prognoositud hargnemiste arv [ <arv> ] . Tarkvaraline jäljevahemälu on efektiivne neil juhtudel , kui töödeldakse pikki programme , mis sisaldavad vähe silmuseid . Plokk-korraldusega jäljevahemälu ( block-based trace cache ) erineb mõneti tavalisest jäljevahemälust . Selle asemel et säilitada kõiki käsujälgi ühes suures jäljevahemälus , kasutatakse väiksema mahutavusega mäluplokke , kus säilitatakse käskude joondatud põhiplokk . Selles jäljevahemälus valitakse töötlusesse suunatavaid käsujälgi jäljetabelist , mis sisaldab plokiviitasid . Jäljetabelis säilitatavate plokiviitade abil moodustatakse tegelik käsujälg , mille alusel valitakse välja vajalikud käskude põhiplokke säilitavad mäluplokid . Plokk-korraldusega jäljevahemälus hoitakse kokku mäluruumi , seetõttu sobib antud mäluarhitektuur piiratud infomahutavusega jäljevahemälude valmistamiseks . Neis saab vältida informatsiooni liiasust , mis paratamatult esineb tavalises jäljevahemälus . Mahukate jäljevahemälude korral viib aga mälu plokk-korraldus jõudluse langusele . KOKKUVÕTTEKS üks võimalusi moodsate superskalaarsete ja arenenud post-RISC-protsessorite arhitektuuri täiustamisel ja jõudluse tõstmisel seisneb jäljevahemälu lülitamises nende mikroarhitektuuri . Jäljevahemälu pakub kompleksset lahendust küsimusele , kuidas korraldada suure hulga käskude rööpset võttu ja prognoosida programmi kulgu mitme hargnemise korral . Uuringud ja eksperimendid on tõestanud riistvaraliste jäljevahemälude efektiivsust ja vajalikkust käsuvõtusüsteemide struktuursel edasiarendamisel . Kui lühidalt kokku võtta , mida kasulikku annab jäljevahemälu lisamine protsessorisse , siis tuleks märkida järgmist : jäljevahemälu võib tõsta protsessori jõudlust <arv> kuni <arv>% kasutades pikemaid ( optimaalseid ) käsujälgi paraneb hargnemiste prognoosi täpsus mõõdukalt mahukas ja piisavalt kõrge assotsiatiivsuse astmega jäljevahemälu on sama efektiivne kui võimas ( kiire , mahukas ja kallis ) käsuvahemälu . Vaatamata väga suurele huvile , mis praegu valitseb jäljevahemälude vastu , ei saa seda vahemälude liiki pidada piisavalt väljaarendatuks . Jätkuvalt püütakse leida uusi meetodeid , mis võimaldaksid paremini korraldada käsujälgi , parandada prognoosi kvaliteeti ning saavutada käsuvõtuüksuste suurem käskude läbilaskevõime . gap desc='references'&gt; Tarmo Robal , TTü arvutitehnika instituut Veebirakenduste modelleerimine <arv>+<arv> arhitektuurivaate mudeliga SISSEJUHATUS Metoodikaid tarkvararakenduste modelleerimiseks on mitmeid . Sellest , kuidas tarkvara on modelleeritud , sõltub kogu tema eluiga . üheks sagedaseks probleemiks disainide juures on ülespetsifitseerimine , teatud komponendi ületähtsustamine , tekivad üsnagi keerukad ja segased diagrammid , millest on küllaltki raske aru saada . Mida need kastid ja nooled just sel diagrammil nüüd esitavad ? Arvuteid , loogilisi üksusi , funktsionaalsust , andmevooge ? Mis on antud diagrammi eesmärk ? üks võimalikke lahendusi oleks vaadata tarkvara arendusprotsessi koosnevana erinevatest osadest , erinevatest vaatepunktidest . Sellise võimaluse pakub <arv>+<arv> arhitektuurivaate mudel . Käesoleva artikli kirjutamisel on eeldatud , et lugeja on tutvunud sama autori artikliga veebirakenduste loomisest Rational Unified Process karkassmetoodikaga ning omab teadmisi veebirakenduste kasutajaliidese modelleerimisest . Toodud näidete aluseks on tarkvara modelleerimiskeskkond Rational Rose . VEEBIRAKENDUSTE MODELLEERIMINE RATIONAL'I <arv>+<arv> ARHITEKTUURIVAATE MUDELIGA <arv>+<arv> arhitektuurivaate mudel korraldab tarkvara arhitektuuri kirjeldamise , kasutades viit ühtivat vaadet , millest igaüks on suunatud konkreetsele valdkonnale . Nelja põhivaatega võetakse kokku kõik disaini jaoks vajalikud otsused ning viiendaga illustreeritakse ning valideeritakse neid . <arv>+<arv> mudel koosneb järgmistest osadest : loogiline vaade - vaade süsteemile lõppkasutaja seisukohast arendusvaade - vaade süsteemile programmeerijate ja tarkvarahaldurite seisukohast protsessivaade - vaade süsteemi funktsionaalsusest , integreeritavusest , jõudlusest , skaleeritavusest füüsiline vaade - vaade lõpp-produkti seisukohast , toote topoloogia stsenaariumid - seovad neli eespool toodud vaadet kokku . Tarkvara arhitektuurilise kirjelduse ja otsustused saab kirja panna nende nelja vaate abil ning seejärel täpsustada neid kasutusjuhtude ja stsenaariumidega , mis moodustavad viienda vaate . Igale vaatele rakendatakse sõltumatult Dewayne Perry ja Alexander Wolf 'i tarkvara arhitektuuri valemit : tarkvara arhitektuur = ] elemendid , vormid , loogilised põhiprintsiibid , piirangud } . Seega defineeritakse iga vaate jaoks kasutatavate elementide hulk , vormid ja mustrid , süsteemi töö põhiprintsiibid ning piirangud , liites sel viisil arhitektuuri nõudmistega . Disain on protsess , mille käigus rakendatakse erinevaid tehnikad ja põhimõtteid eesmärgiga spetsifitseerida süsteem piisava detailsuseni , mis võimaldaks luua lõplikku füüsilist realisatsiooni . Projekteerimisel kasutatakse analüüsietapis saadud tulemust loodava süsteemi lahenduste loomiseks . Analüüs mõistab probleemi ning disain esitab sellele lahenduse . Vastavalt disaini abstraktsioonitasemele eristatakse kahte taset : loogiline disain - luuakse terviksüsteemi lahendus , mis on optimeerimata ega sõltu konkreetsest realiseerimiskeskkonnast füüsiline disain - optimeeritakse loogilise disaini tulemust vastavalt realiseerimiskeskkonnale , täpsustatakse disaini . ülalt alla disain lähtub süsteemi funktsionaalsusest , loodavate moodulite hierarhia põhineb funktsioonidel , selgelt on eraldatavad andmete ja funktsioonide pool . Objektorienteeritud disaini korral on andmed ning funktsioonid koondatud objektideks , süsteemi arhitektuur baseerub süsteemist sõltumatutel ( iseseisvatel ) objektiklassidel , mis on kasutatavad erinevate süsteemide kokkupanemisel . Edukad veebiprojektid algavad vastupandamatust ja selgepiirilisest visioonist - nägemusest , mis on väljakutsuv . Visiooni loovad üldjuhul lahenduse panustajad , garanteerides projekti eesmärgi algusest peale . üsna sagedane on olukord , kus puudub selgepiiriline visioon , kasutajad ei tea , mida nad tahavad , neil puudub täielik ülevaade ja visioon täieneb pidevalt ; tekivad lahkhelid projekti analüütiku ja tellija vahel . Mis on visiooni eesmärgid ? Selgepiirilisel visioonil on järgmised eesmärgid : määratleda lahendatavad probleemid defineerida süsteemi piirid , piiritleda loodav süsteem kirjeldada süsteemi kõige tähtsamad omadused määratleda süsteemi funktsionaalsus . Alles pärast täpse visiooni saavutamist on mõtet astuda samm edasi ning alustada loogilise arhitektuuri kirjeldamist . LOOGILINE VAADE Loogiline vaade kirjeldab süsteemile esitatavaid funktsionaalseid nõudeid - teenuseid , funktsionaalsust , mida süsteem lõppkasutajale peab pakkuma . Kui esmased nõuded on visioonina paika pandud , järgnevad arutelud , mille käigus täpsustatakse süsteemi kasutajad ning teenused , mida loodav süsteem peab pakkuma hakkama . Kasutajarollid ning pakutavad teenused kirjeldatakse Unified Modelling Language ( UML ) kasutusjuhtude kontseptsiooni kasutades . Kasutuslood ja kasutusjuhud võimaldavad kirjeldada lihtsalt , üldtuntud väljendite ning ühiste arusaamade abil veebilehelt oodatavat käitumist selliselt , et kõik projektiga seotud inimesed - tellijad , kasutajad , projektijuhid , programmeerijad , juhid , arhitektid jne. - mõistavad veebisaidilt oodatavat funktsionaalsust üks-üheselt . Seeläbi annab selline dokumenteerimisviis lõppkasutajale parema ülevaate tellitavast süsteemist , pakkudes samas rakenduse loojatele võimaluse valideerida loodud süsteemi vastavust esitatud nõuetele . Seega osutuvad kasutusjuhud vajalikuks läbi kogu projekti arendustsükli . Antud etapis jagatakse süsteem loogilisteks osadeks vastavalt lahendatava probleemi iseloomule ja valdkonnale . Lisaks funktsionaalse analüüsi toetamisele määratleb dekomponeerimine mehhanismid ja disaini elemendid , mis on ühised kogu süsteemile . Dekomponeerimise käigus määratletakse objektid , objektide klassid , kirjeldatakse süsteemi kontekst abstraktsete klassidena ning pannakse kirja süsteemile esitatavad nõuded . Kasutusjuhud kirjeldavad tüüpiliselt kasutaja ja süsteemi omavahelist interaktsiooni . Tavaliselt hõlmavad nad kasutajale nähtavat funktsionaalsust ning täidavad kindlat diskreetset eesmärki . Kui võimalik , on soovitatav alati kasutada olemasolevaid kasutusjuhtude kirjeldusi , mis juba eelnevate veebirakenduste teostamisel loodud . See kiirendab arendusprotsessi ning tagab ühtsuse erinevate projektide vahel . Ei ole mõtet hakata jalgratast uuesti leiutama ! Kasutusjuhtusid kasutatakse : süsteemi funktsionaalsete nõuete valimiseks ja kirjeldamiseks ( tellija ja realiseerija vahel ) saamaks püsivat kirjeldust sellest , mida süsteem tegema peaks ; saadav mudel on kasutatav kogu süsteemi arendusprotsessi vältel alustestide koostamiseks süsteemi funktsionaalsete vajaduste seostamiseks tegelike klasside ja operatsioonidega . Kasutuslugude kirjeldamiseks on vajalik : kasutajarollide määratlemine kasutusjuhtude defineerimine kasutuslugude lühikirjelduste koostamine kasutusjuhtude omavaheliste seoste määratlemine . Kasutusjuhtude diagrammidel , mis on süsteemi määratlemisel kõige kõrgema taseme skeemid , kujutatakse kahte liiki objekte - kasutusjuhud ning kasutajarollid ( edaspidi kasutajad ) - ja nendevahelisi seoseid . Kasutajad on seotud kasutusjuhtudega ning ka kasutuslood võivad olla omavahel seotud . Seoste liigitamiseks on kasutusel kolm põhilist stereotüüpi : juhul kui üks kasutusjuht laiendab teise funktsionaalsust , kasutatakse seosel liigitit &lt; &lt; extends &gt; &gt; , kasutamise korral &lt; &lt; uses &gt; &gt; ning sisalduse korral &lt; &lt; includes &gt; &gt; . Kasutaja on keegi või miski , mis kasutab süsteemi , ta on klass ning esindab mingit rolli , mitte aga süsteemi üksikkasutajat . Kasutajad jaotatakse järgnevalt : primaarne aktor - kasutab süsteemi põhifunktsioone sekundaarne aktor - kasutab loodava süsteemiga kaasnevat funktsionaalsust aktiivne aktor - algatab kasutusjuhtusid passiivne aktor - kasutaja , kes ei algata ühtegi kasutusjuhtu , vaid osaleb neis . Süsteemi kasutajate leidmisel tuleks lähtuda süsteemi peamisest funktsionaalsusest , süsteemi tööshoidmise vajadusest ning teistest süsteemidest , millega seotud ollakse . Samaaegselt kasutusjuhtude kirjeldamisega pannakse kirja mittefunktsionaalsed nõuded lisaspetsifikatsioonina ning luuakse mõistete seletus dokumentatsioonis kasutatavatele terminitele . Lisaspetsifikatsioon hõlmab üldise funktsionaalsusega seotud nõuded , kogu süsteemile esitatavad kitsendused , kriteeriumid kasutusele , usaldatavusele , töökindlusele , jõudlusele , turvalisusele , toetusele teiste süsteemide poolt , platvormile , kvaliteedile , opereerimiskiirusele . Sõnastiku eesmärgiks on tagada , et kõik projektimeeskonna liikmed omaksid ühesugust arusaama projekti põhimõistetest . Unustada ei tohi ka kasutajaliidese disaini . Paralleelselt kasutajate ja kasutusjuhtude määratlemisega luuakse esialgne kasutajaliides , mille raames esitatakse üldised juhtnöörid kasutajaliidese disainiks . Antud etapil koostatakse kasutajaliidese ülddisain [ <arv> ] . Loogilise vaatega kirjeldatakse : probleemi olemus , ülesande püstitus - kirjeldus hetkeolukorrast , probleemidest . Esitatakse ülesande analüüs ning võimalikud lahendusvariandid koos eeliste ja puudustega süsteemi üldine määratlus , funktsionaalsus , kasutajad - kirjeldus antakse kasutusjuhtude läbi . Leitakse vastus küsimusele : “ Mida süsteemiga peab saama teha ? ” Antakse ülevaade süsteemi kasutajatest . Iga erinevat tüüpi kasutaja kohta luuakse omaette kasutajaroll . Süsteemi üldine määratlus , funktsionaalsus ning kasutajad esitatakse kasutusjuhtude diagrammidel Kontekst - esitatakse klassidiagrammina , mille objektideks on abstraktsed klassid , mis on saadud süsteemi dekomponeerimisel . Objektidevahelised seosed on samuti stereotüpiseeritud kasutajaliidese ülddisain [ <arv> ] objektide olekud - objekti erinevad olekud süsteemi elutsükli jooksul esitatakse olekudiagrammidel . Objektide olekudiagrammid luuakse vastavate objektide alla algne navigeerimisdiagramm süsteemile esitatavad mittefunktsionaalsed nõuded mõistete seletav sõnastik Joonisel <arv> , <arv> ja <arv> on toodud näiteskeeme Interneti-rakenduste modelleerimise loogilise vaate etapist . PROTSESSIVAADE Protsessivaade arvestab süsteemile esitatavaid mittefunktsionaalseid nõudeid , nagu jõudlus ja süsteemi kättesaadavus , veataluvus , integreeritavus , mis tulenevad süsteemi hajusarhitektuurist . Eesmärk on kirjeldada realiseeritav funktsionaalsus , erinevate protsesside vahelised seosed ning komponentide ja protsesside omavaheline suhtlemine . Protsess on seejuures määratletav kui ülesannete grupp , mis moodustab käivitatava üksuse . Protsessivaatega kirjeldatakse : üksikute komponentide spetsifikatsioonid , realiseeritav funktsionaalsus . Rakenduse funktsionaalsuse lahendamiseks vajalikud klassid ja meetodid , nendevahelised suhted kirjeldatakse klasside ja klassidiagrammide abil . Klassidiagramm kirjeldab klasse , nendevahelisi seoseid ning käitumist . Klass peab sisaldama vaid neid atribuute , mis on vajalikud süsteemi kirjeldamisel , kätkedes endas klassi kirjeldamiseks vajalikku informatsiooni . Operatsioonid kirjeldavad , millist funktsionaalsust klass pakub , ja neid kasutatakse atribuutidega manipuleerimiseks . Nad on funktsioonid , mis on rakendatavad vaid klassi objektidel . Komponentide funktsionaalsuse kirjeldused antakse vastavate komponentide juures süsteemne funktsionaalsus - esitamiseks kasutatakse järjestusdiagramme , mis luuakse iga konkreetse kasutusjuhu jaoks . Järjestusdiagrammidega näidatakse täpselt , milliseid klasse ja meetodeid konkreetse funktsionaalsuse realiseerimiseks tarbitakse . Lisaks sellele kirjeldavad järjestused ka protsesside teostamise järjekorra ajas kasutajaliidese disain [ <arv> ] - luuakse kasutajaliidese algne prototüüp , mida laiendatakse arendusprotsessi käigus kuni täieliku kasutajaliidese prototüübi valmimiseni kasutajaliidese spetsifikatsioon [ <arv> ] - esitatakse kasutajaliidese arhitektuuriline ülesehitus süsteemile esitatavad mittefunktsionaalsed nõuded - funktsionaalsuse realiseerimisega seotud piirangud ja nõuded süsteemile , rakenduse loomisel kasutatud lahendused . ARENDUSVAADE Arendusvaatega esitatakse tegelike tarkvaramoodulite , allsüsteemide ning programmipakettide organiseeritus . Lõplikku arendusvaadet on võimalik esitada alles pärast kõikide tarkvaraelementide identifitseerimist . Süsteemi jagamisel allsüsteemideks tuleks lähtuda põhimõttest , et allsüsteem saab sõltuda vaid süsteemidest , mis asuvad temaga samal tasemel või allpool . Arendusvaate raames teostatakse kasutajaliidese disaini elementide [ <arv> ] määratlemine , st. kirjeldatakse , millistest graafilistest elementidest veebileht üles ehitatakse . Arendusvaatega kirjeldatakse : rakenduse tehnoloogia - Interneti-rakenduse realiseerimiseks valitud tehnoloogia , Interneti-rakenduse kihid , kihtidele rakendatud funktsioonid realiseerimiseks valitud vahendid - valitud vahendite eelised , puudused , tööpõhimõte arendatava süsteemi omapärad - loodava süsteemi omapärad , lähtudes konkreetsetest lahendusmetoodikatest . Esitatakse Interneti-rakenduse ülesehituse loomisel järgitud põhimõtted , tingimused , nõuded ning lahendus süsteemi arendamisega seotud nõuded komponentide taaskasutatavus süsteemi toimimiseks vajalikud riist- ja tarkvaralised vahendid - esitatakse nõuded brauseritele , vajalikud tarkvaralised platvormid , näiteks Apache-server PHP- mooduliga kasutajaliidese disaini elemendid [ <arv> ] ; kasutajaliidese disaini tingimused - kasutajaliidese disainile esitatud nõuded , disaini struktuurijoonis , kasutatavad värvid , tekstistiilid , pildid , muud disainielemendid . Juhised kasutamiseks tegelike tarkvaramoodulite organiseeritus - esitatakse ülevaade failidest , millesse klassid vormistatud on , ning failide omavahelistest seostest . Klasside failidesse jaotamisel tuleks lähtuda põhimõttest , et loogiliselt sarnased tegevused , protsessid oleksid ühes failis . Moodulid kirjeldatakse komponentdiagrammil , mis kirjeldab tarkvarakomponendid ning nendevahelised seosed , kasutades komponente , allsüsteeme , mooduleid . Komponendid on süsteemi taaskasutatavad piiritletud osad , mis sisaldavad loogiliselt seotud elemente loogiline andmemudel - lähtudes süsteemi kontekstist , esitatakse loodava süsteemi loogiline andmemudel . Juhul kui kasutatav arendusvahend on Rational Rose , siis primaarvõtme välju ei spetsifitseerita , need genereerib arendusvahend iseseisvalt . FÜÜSILINE VAADE Füüsilises vaates vaadeldakse toodet jällegi lõppkasutaja seisukohast . Esitatakse küsimus : “ Kas püstitatud nõudmised on saavutatud ? ” . Vaatluse all on süsteemi topoloogia , jõudlus , veakindlus , skaleeritavus . Loogilises , arendus- ja protsessivaates määratletud elemendid peavad nüüd olema kokku seotud . Võimalik on kasutada erinevaid füüsilisi konfiguratsioone arendamise , testimise ning toote kasutusse andmise jaoks . Loogiline vaade + Protsessivaade + Arendusvaade ® Füüsiline vaade Füüsilises vaates kirjeldatakse : füüsiline andmemudel - esitatakse rakenduse tarbeks realiseeritud andmebaasisüsteemi ülevaade : andmebaasi skeem koos objektide ja atribuutide semantikaga . Arendusvahendit Rational Rose kasutades on võimalik füüsiline andmemudel tuletada loogilisest automaatselt , kasutades korraldust Forward Engineering veebisaidi täielik navigeerimisdiagramm [ <arv> ] - pärast täieliku prototüübi valmimist tuleks täiendada ning korrigeerida algset navigatsioonikaarti selliselt , et skeem hõlmaks kõiki teadaolevaid lehekülgi kasutajaliideses . KOKKUVÕTTEKS Veebirakenduste modelleerimiseks sobib kasutada <arv>+<arv> arhitektuurivaate mudelit , mille erinevate vaadete abil saab kirjeldada mitte ainult süsteemilt oodatavat funktsionaalsust , vaid ka mittefunktsionaalseid nõudeid ning süsteemi toimimise printsiipe .  Tõlkinud Vello Hanson I.Hannula , R.Linturi / SADA NÄHTUST <arv> - <arv> / Virtuaal-Helsingi ja kübermutt <arv> Roti aasta Islami aasta <arv> Kümnendik maailma elanikest on virtuaalriikide asukad Puhas energiaülekanne on välja töötatud EL ja Põhja-Ameerika ühinevad föderatsiooniks Vastukaaluks ühinevad ka Hiina ja India föderatsiooniks Uurimisrühm on juba kuus kuud viibinud sukeldusülikondades vee all Suur hüpe neurokirurgias - on siirdatud esimene tehisnärv Soovid reisida minutiga maakera teisele poolele ? Suur Vend valvab su geene - tee sellele lõpp ! Skandaal : Ingrid jäi Miss Universumi konkursi teleülekandes alasti Kui soomused langevad mu silmadelt , näen soomuseid Viljo Kajava . Kui soomused . <arv> Uudis CompuMedias - <arv>.<arv>.<arv> SUUR HÜPE NEUROKIRURGIAS Esimene tehisnärv on siirdatud Professor Adlay Maharina arstirühm siirdas eile kolmeaastasele patsiendile maailma esimese tehisnärvi Tehisnärviga korvati sünnitusel kahjustatud kuuldenärv . Täna hommikul kuulis laps oma elus esimest korda ema häält . Raviarsti sõnutsi võis lapse ilmet pidada üsna hämmastunuks . Tehisnärvi valmistamiseks paigutati <arv> mikromeetri jämedusse klaastorusse üksteise järele umbes sada väikest arvutiplokki ja keemilis-elektriline andmevahetusjuhe . Tehisnärvi on juba varem katsetatud loomadel , kuid tulemuste tõlgendamisel on olnud erimeelsusi . Seekordne siirdamine näitab , et tehisnärve valmistada on võimalik . Seni on suudetud inimkeha peaaegu kõiki osi asendada tehislikega , ainsateks eranditeks on olnud aju , närvid ja närvidega juhitavad süsteemid . Professor Maharina ennustab , et järgmise kümne aasta jooksul saab võimalikuks ka aju ja ajuosade korvamine tehislikega . Juba praegu suudetakse mäluhologrammidega emuleerida suuremat osa aju funktsioonidest . Emuleeringu täielikuks teostuseks toimuvad intensiivsed uuringud . Paljudes uurimiskeskustes käib töö ka närvide ja aju modelleerimiseks tehisnärvidega . Tänahommikuste teadete kohaselt on uudis närvisiirdamisest tekitanud ägeda vaidluse üRO-s . Teatud esindajad tahavad keelustada närvide ja aju modelleerimist puudutavad uuringud . Nende eesotsas olev AU esindaja ütles Compumediale : “ Tulemuseks võib olla inimene , kes on täielikult korvatud tehiselunditega ja on seega tegelikult robot . Ta võib osutuda inimesest tõhusamaks ja targemaks ning muuta meid tarbetuks ” . Lisateavet : sat.web.<arv>-<arv>-RT-COMPUME DHL - <arv>.<arv>.<arv> NÜÜD JÕUAD MAAKERA TEISELE POOLELE PELGALT MINUTIGA ! Kallis klient ! Seni oled tundnud meid kui kullerit . Oleme soovinud hoolitseda kõige selle eest , mida elektronpost ei suuda . Vajaduse korral viime su saadetise ükskõik millisesse maakera punkti - ja kaugemalegi . Nüüd tahame sind teenindada veelgi paremini . Võime toimetada SIND ENNAST igasse maailma nurka ja isegi kosmosejaamadesse või Kuule . Pakume sulle meeleldi oma kiireimat ja soodsaimat reisimisviisi . Saada teele Edenik . See on täielikult sulle sarnanev hologramm-android . tema abil võid tunni piires olla ükskõik millises maailma nurgas , linnas , kõrbes , ürgmetsas - kõikjal , kuhu ulatub SatWeb . Võime sulle isegi korraldada reisi ümber maailma <arv> MINUTIGA , peatustega kõigis Jules Verne'i kirjeldatud kohtades . Rändamine lihtsalt ühest virtuaalkohast teise on nüüd ajalugu , nii nagu peagi ka füüsiline reisimine . Tahad kindlasti meie süsteemi kohta muudki teada DHL-il on tegutsemiskohad <arv> kilomeetri raadiuses kõigist asustatud paikadest . Kui saame sinult ülesande , toovad meie paigaldajad sulle Edeniku ja vormivad ta reisi ajaks üldjoontes su välisilmele vastavaks . Seejärel viimistleb Edeniku pinnal olev hologrammkelme ta välisilme kooskõlla sinu kujutisega , mille talle saadab virtuaaltuba . Kui siirdud virtuaaltuppa , näed oma sihtkoha ümbrust Edeniku silmadega ja liigutad Edeniku jäsemeid täiesti loomulikul viisil . Sulle tundub , nagu oleksid rännanud ise - kuid ilma reisiväsimuseta . Edenik on välisilmelt nii loomulik , et sihtkohas olevad inimesed arvavad nägevat sind ennast . Kõik see on sinu arust kindlasti tore , kuid arvad , et see on kindlasti tohutult kallis . Siin võime sind üllatada . Meie teenus mandritevahelistel reisidel maksab ainult pisut rohkem kui kurnav ja aeganõudev reisimine esimeses klassis ja reisi juurde kuuluv majutus kokku . Võime sulle ka üürida virtuaaltoa ja mitu Edenikku üsnagi pikaks ajaks . Sel juhul võid vaevata põigata paljudesse maailma paikadesse , nii nagu parajasti soovid - ja kohalejõudmiseks ei kulu minutitki . Võta meiega ühendust ! Hardy Ghostens müügijuht Kontsern DHL/SatWeb Cyberpunk Pirate Worldwide - <arv>.<arv>.<arv> SUUR VEND VALVAB SU GEENE - TEE SELLELE LÕPP ! See teade puudutab tõsist asja . Su privaatsust rikutakse märkamatult kogu aeg . Sinult võetakse rakuproove ja sa ei aimagi . Seda võib teha su seltsiline , su kindlustusselts , su pangadirektor , virtuaallembela või näiteks su tööandja . Proov saadakse irdunud naharakkudest , klaasi servale jäänud süljest , seemnevedelikust , tupeeritistest , juustest ja isegi virtuaalmatkadel valatud higist . Su rakunäide reedab , kas kaldud olema õnnelik , agressiivne , aldis haigustele , energiline või kasvõi intrigant . Proovi põhjal otsustavad NEMAD su tuleviku ! Nagu tead , võitleb meie rühm Cyberpunk Pirate Worldwide igasuguste privaatsuse rikkumiste ja järelevalve vastu . Sel alal on meil pidevalt palju tööd . Tüüpilisemate geenikontrollide vastu on meil nüüd tõhus rohi . Juba kasvanud juuste või küünte proovide puhul see kahjuks veel ei toimi , kuid mitmete muude kehaosade ja eritiste puhul on ta tõhus . See rohi põhineb ulatuslikul , kõigile uutele keharakkudele toimival geenimuundusel . Ta teeb su geenistiku suured kasutamatud osad sarnasteks tüüpilistele kontrollimisel kasutatavaile geenidele . Pärast neid muundusi oled sa ise täiesti endine , kuid su rakuproovid ei anna traditsiooniliste kujutuvastuslike geenitestritega selgeid tulemusi . See teade tuleb sulle koos arvutiviirusega ja on juba edastatud kõigile su aadressiteatmikust leitud aadressidele . Viirusesse on krüpteeritud tagasitee , mille kaudu su tellimus ja makse jõuavad meieni , paljastamata sind või meid . Rohu väljatöötamise ja postituse eest oleme sunnitud esitama viiruse kaudu <arv> euro suuruse arve . Rohu saad tavalise postiga , kullerpostiga või koos toidusaadetisega kahe nädala jooksul pärast tellimist . Tegutse otsustavalt ja vabane järelevalve ahelaist - kasuta juhust kohe ! Cyberpunk HQ Marketing Director Willy Freenet Olgem vennad ja õed , olgem NEIST kavalamad ! Elagu igavesti cyberpunk , sest meil on oma vaba tahe ! Soome Uudisemeedium , Havanna - <arv>.<arv>.<arv> INGRID JÄI MISS UNIVERSUMI TELEüLEKANDES ALASTI Ingrid Mikkola riietuse juhtimisseadmes tekkinud viga viis iludusvõistluse proovil riietuse haihtumiseni . Proove kandsid üle tasulised uudiskanalid , mille kaudu nägid alasti Soome kauneimat vähemalt <arv> miljonit vaatajat . Õnneks juhtus õnnetus proovil - võistlus ise kantakse tasuta kanalite kaudu üle ka nendesse maadesse , kus alastiolek on kuritegu . Nüüd nähti alasti kaunitari ainult sellistes maades , kus alastiolekuga on juba harjutud . Ingrid , kes on poolehoidu võitnud eriti lilleliikumise hulgas , oli ootuspäraselt valinud oma riietuseks digitaalnaha . Seda hakati Miss Universumi konkursil lubama möödunud aastal . Ingridile kasvatatud nahk on muude kameeleonvariantide kombel värvilt muutuv ja koosneb kolmesajast eraldi juhitavast tsoonist . Digitaalnahka on võimalik kasutada nii supeltrikoo- kui ka karnevalikostüümi- ja kehamaalinguvoorus . Biomed-Benettoni valmistatud riietuse nõrgaks lüliks osutus Swatchi valmistatud ja Microsofti tarkvaraga varustatud juhtimissüsteem , mis seniteadmatul põhjusel lasi muutuda kõigil tsoonidel läbipaistvaks ja ühtlasi sulges tsoonide termosüsteemi . Ingridi väitel on mängus küberpunkarite jõhker vemp . See rühm on viimasel ajal korraldanud andmevõrkudes mitmeid efektseid ründeid ning tema arvele langevad paljud meelelahutus- ja uudisesündmuste võltsingud . Kinnitust küberpunkarite osalusele Ingridi juhtumis pole saadud . Varem ei ole nende tegutsemine ulatunud inimeste isiklike digitaalelundite alale . Ametiisikud on rõhutanud , et Ingrid Mikkola on rikkunud eeskirju , sest ta riietuse juhtimissüsteem pole viirusekindel ja ta saatis oma riietuse avaliku võrgu kaudu ilma piisavalt pikkade kaitsevõtmeteta . ühtlasi kordasid ametiisikud oma eeskirju digitaalelundite infoturbe ja turvameetmete kohta . <arv>.<arv>.<arv> Paavst endiselt vastu Meditsiinis ja sõjatehnikas kasutatu moeriietuseks Maailmas on Ingridi juhtum taaselustanud diskussiooni digitaalkeha teemal . Algsed tehisnahad töötati välja <arv>. sajandi lõpul , kosmeetiliseks otstarbeks loodud värviomadused aga ilmusid turule <arv>. sajandi algul . Tollal peeti tehisnahka biomeditsiini võiduks . Seejärel tegeldi naha sõjaliste rakendustega ; teave selle kohta oli kaua salajane . Sellega seoses töötati välja tehisnaha soojuselemendid ning vedeliku- ja energiakogumise süsteemid . Mõne aasta eest võtsid moemajad tehisnaha oma mudelitesse . Tollal algas diskussioon biomeditsiini allakäigust . Vähehaaval muutus avalik arvamus siiski tehisnaha suhtes heatahtlikuks - sedamööda , kuidas hinnad langesid koduste infosüsteemide ja autode tasemele . Katoliku kirik on aga endiselt tehisnaha vastu . Ta väidab , et geenide manipuleerimine ja inimese kunstlik muutmine on vastuolus kiriku õpetusega , sõltumatult sellest , kas muudatus tehakse kogu pärilikkuses või tagantjärele , ainult naha pinnarakke reguleerivates geenides . Mart Rüütel , TTü automaatikainstituudi magistrant Meremõõdistussüsteem SISSEJUHATUS üks inimtegevuse valdkondi , millele arvutus- ja mõõtetehnika areng on andnud uue näo , on merenavigatsioon ning sellega seotud meremõõdistus ehk hüdrograafia . Laeva asukoha määramiseks ei pea enam ootama tähtede ilmumist pilve tagant ning mere sügavuse kindlakstegemiseks ei pea keegi üle parda küünitades nööri otsas tinakuuli ujutama . Positsioneerimiseks kasutatakse tänapäeval satelliitsidel põhinevat GPS-süsteemi ( Global Positioning System ) , millega laeva asukoht on fikseeritav navigeerimiseks täiesti piisava täpsusega olenemata ilmastikutingimustest . Laialdaselt kasutatakse võimalust jälgida laeva liikumist arvutis , taustaks elektrooniline merekaart . Sellise tehnoloogia kasutamine lihtsustab oluliselt ning muudab ohutumaks laeva juhtimise ebasoodsates ilmastikutingimustes ( näiteks kui meremärkide nähtavust piiravad udu ja vihm ) ja seilamise vähetuntud rannaäärsetes vetes . Pidev kaardil paiknemise visuaalne jälgimine lubab operatiivselt planeerida liikumise trajektoori ning hoiduda madalikest ja muudest veealustest takistustest ( eeskätt kivid ja laevavrakid ) . Ohutu navigatsiooni eelduseks on kaardiinformatsiooni adekvaatsus , ükskõik kas reaalsuse mudelina kasutuses olev merekaart on elektroonilisel kujul või paberile trükituna . Teabe saamiseks merepõhja kuju kohta peab tegema vastavaid mõõtmisi . Selleks kasutatavatele tehnoloogilistele vahenditele esitatakse kõrgeid nõudmisi , sest mõõtmise täpsusest ja piisavusest ning tulemuste õigest interpreteerimisest oleneb meresõiduohutus . Valeteabest või teabe puudumisest võib kergemal juhul sündida majanduslik kahju laeva vigastamise näol , kuid võimalikud on ka õnnetumad stsenaariumid . Veekogude sügavuste mõõtmise ehk batümeetria levinuim moodus tänapäeval põhineb hüdrograafiliste kajaloodide ehk sonarite kasutamisel . Esimene kajalood konstrueeriti küll juba <arv>-ndatel aastatel , kuid viimase kümmekonna aastaga on toimunud selles vallas suur hüpe , mis on võimalikuks saanud eeskätt tänu arvutusvõimsuste kasvule . Praegu peetakse maailmas efektiivseimateks nn. mitme kiirega sonarsüsteeme ( Multibeam Sonar Systems ) , mis võimaldavad lühikese ajaga koguda väga suurel hulgal sügavusandmeid . Laialdaselt kasutatakse ka teisi , väiksema produktiivsusega süsteeme , kui need on majanduslikult otstarbekamad või kui mitme kiirega sonarsüsteemide efekt kaob ( madalas vees ) . Lisaks sonaritele on vajalikud veel seadmed laeva asukoha ja asendi määramiseks ning arvuti koos tarkvaraga andmete kogumiseks ja töötlemiseks . Hüdrograafiasüsteemide mitmekesisus on üsna suur , seda nii tarbijate-tootjate kui ka tehniliste võimaluste ning lahenduste osas . Kuid laias plaanis on nad kõik küllaltki sarnased . Seetõttu vaatleme järgnevalt lähemalt üht kodumaist näidet , täpsemalt , Veeteede Ametis ( VA ) kasutatavat meremõõdistussüsteemi , mis baseerub Eestis väljatöötatud sonaritel ning tarkvaral . Süsteem on praeguseks kasutuses erinevates konfiguratsioonides neljal VA hüdrograafialaeval veeteede ja sadamate mõõdistamiseks . MÕÕTESEADMED Rahvusvaheline Hüdrograafiaorganisatsioon IHO ( International Hydrographic Organization ) on standardiseerinud nõuded hüdrograafiatöödele . Kõrgeimad nõudmised esitatakse selliste piirkondade mõõdistamisele , mis võivad sisaldada ohtusid laevaliiklusele . Nendeks on eeskätt laevatatavad alad , mille sügavus jääb alla <arv> meetri . Sellistes piirkondades peab vähemalt <arv>% sügavusandmeid olema väljastatud täpsusega kuni <arv> cm . Nendest nõudmistest tuleneb vajadus kõrge täpsusega mõõteseadmete ning vastava mõõtmismetoodika järele . Samuti peavad olema avastatud kõik veealused objektid mõõtmetega <arv> x <arv> x <arv> m ja suuremad . Väga lihtsustatult võib öelda , et kriitilistes piirkondades peab olema “ üle vaadatud ” merepõhja iga ruutmeeter , seega töödeldav andmestik on küllaltki mahukas . Põhiline ühik , millega batümeetrias opereeritakse , on sügavuspunkt - kolme koordinaadiga määratud geograafiline punkt veekogu põhjas . Tavaliselt väljendatakse sügavuspunkte geograafilise pikkus- ja laiuskraadiga ning sügavusega geoidist ( maa gravitatsioonivälja ekvipotentsiaalpind , mis kõige paremini vastab mere keskmisele tasemele regioonis ) . Vastavalt vajadusele teisendatakse neid ka muudesse koordinaatsüsteemidesse . Näiteks arvutusteks ja tasandiliseks esitamiseks paberil või ekraanil on otstarbekas kasutada ristkoordinaate . Sügavuspunktide põhjal koostatakse erikujulisi ja -otstarbelisi merepõhja mudeleid , millest levinuimad on sügavusarvud XY-tasandil , samasügavusjooned ja mitmesugused <arv>D-mudelid . Sügavuspunkte otseselt mõõta ei saa , need tuletatakse erinevate mõõteseadmete andmestike põhjal . Sonar . Keskne seade sügavuspunktide saamiseks on sonar . Sonari tööpõhimõte on üldjoontes sarnane radari omaga - kiiratakse välja signaal , registreeritakse selle peegeldusi keskkonnas paiknevatelt objektidelt ning tehakse otsustus võimalike sihtmärkide kauguse kohta mingis vaatlussektoris . Konkreetsemalt siis mõõdab sonar viiteaega , mis kulub ultrahelil jõudmiseks kiirgurilt merepõhja ning sealt tagasi vastuvõtjani . Selleks et määrata sihtmärgi asukohta ( sügavuspunkti ) , peab lisaks teadma kiirguri- ja vastuvõtja asukohta kiirgamise hetkel , signaali väljastamise suunda ning heli levimiskiirust vees , et viiteaeg arvestada ümber teepikkuseks . Iga andur registreerib peegeldusi kiirekoonuse laiusega määratud “ laigult ” , mis kasvab võrdeliselt sügavusega . Vastavalt sügavuse kasvule muutub ebamäärasemaks ka peegelduse andnud koha positsioneerimine , sest pole võimalik kindlaks teha , millisest laigu osast peegeldus tuli . Näiteks <arv>-kraadise kiirekoonuse puhul on <arv> m sügavuses asukoha määramatus <arv> m. Olenevalt andurite paigutusest tekib alates teatud sügavusest sonifitseeritud laikude omavaheline kattumine . Sellest madalamatel sügavustel ei kaeta mõõtmistega kogu põhja , sügavamatel toimub see aga jällegi liiaga . Sonar teeb igas sekundis <arv> ... <arv> mõõtmistsüklit , väljastades iga tsükli tulemusena andmepaketi , mis sisaldab sondeerimistulemusi igalt üksikult andurilt . ühe töötsükli kestus sõltub maksimaalsest eeldatavast sügavusest mõõdistuspiirkonnas ja on määratud ajaga , mis helil kuluks sellise sügavuseni ning sealt tagasi vastuvõtjani liikumiseks kiirusega <arv> m/s . Seega väljastab sonar andmeid igas sekundis hulgal , mis võrdub mõõtmissageduse ja andurite arvu korrutisega . Näiteks <arv> kanaliga sonariga saab madalas vees <arv> korda sekundis mõõdistades igas sekundis andmeid <arv> x <arv> = <arv> sügavuspunkti jagu . Nagu eelnevalt märgitud , on sügavuspunktide leidmiseks vaja teada ka kiirgurite täpset asendit iga mõõtmise alghetkel . Vaheetapil leitakse ka laeva kokkuleppelise keskpunkti asend , mida saab kasutada mõõdistusaegsel navigeerimisel . Nii laeva keskpunkti kui kiirgurite asendi täielikuks kirjeldamiseks on vaja kuut suurust - kolm asukoha ja kolm suuna määramiseks ruumis . Lähtudes meremõõdistuses kasutatavate seadmete poolt mõõdetavatest suurustest , on otstarbekas kasutada järgmist komplekti : X , Y - geograafiline asukoht , projekteerituna sobivasse ristkoordinaadistikku A - ( altitude ) kõrgus kohalikus kõrgussüsteemis H - ( heading ) laeva pikitelje suund ( ka laeva nina suund ) R , P - ( roll , pitch ) kreen ja diferent - kalded vastavalt laeva risti- ja pikitelje suunas . GPS-vastuvõtja . Sonari kõrval teine hädavajalik seade sügavuspunktide saamiseks . Mõõdab laeva geograafilist asukohta , kasutades selleks GPS-satelliitide võrku ning maapealseid tugijaamu . Kõrgema täpsusega tööreûiimis , - nn. RTK-moodis ( real-time kinematic ) , on GPS-vastuvõtja edukalt kasutatav ka laeva kõrguse määramiseks . Nii positsiooni kui kõrguse määramise täpsus on sellisel juhul mõni sentimeeter . Et GPS-vastuvõtja väljastab kõrgust kokkuleppelisest matemaatilisest pinnast - ellipsoidist WGS<arv> , siis kõrguse teisendamiseks kohalikule geoidile on veel vajalik teada geoidi-ellipsoidi vahet piirkonnas ( näiteks Väinameres on see ca <arv> - <arv>.<arv> m ) . Kompass . Mõõdab laeva pikitelje suunda . Vajalik positsioneerimisseadme ( GPS-vastuvõtja fikseerib tegelikkuses oma antenni koordinaate ) ja sonari andurite vastastikuse asendi ning mere pinnanormaali suhtes kaldu olevate ( kas selliselt monteeritud või laeva enese kaldest tulenevalt ) andurite kiirgamissuuna täpseks määramiseks . Hüdrograafias on üldteada magnetkompasside asemel kasutuses kõrgema täpsusega ( suurusjärgus ca kümnendik nurgakraadi ) gürokompassid . Kõikumise mõõtja . Mõõdab laeva kalde mõlemat komponenti - kreeni ja diferenti . Laeva kaldest sõltub nii positsioneerimisseadme ja sonari andurite omavaheline asend kui ka andurite kiirgamissuund . Lisaks mõõdab ka laeva vertikaalliikumist , mille põhjal on leitav laeva kõrgus ( teades lisaks veetaset ja laeva jooksvat süvist ) , kuid see jääb reeglina täpsuselt alla GPS-vastuvõtjaga RTK-moodis fikseeritud kõrgusele . Selgitusi joonisele <arv>. Hüdrograafi arvutisse kogutakse andmed kõigilt mõõteseadmetelt - sonarilt , GPS-vastuvõtjalt , kompassilt ja kõikumise mõõtjalt . Seal toimub nende töötlemine , salvestamine ja esitamine hüdrograafile , kes viib läbi mõõdistuseksperimenti . Laeva tüürimehele esitatakse laeva juhtimiseks vajalikku infot eraldi monitoril . Kõik mõõteseadmed töötavad üksteisest sõltumatult ja asünkroonselt . Andmete väljastamise sagedus on üsna erinev - GPS-vastuvõtjalt tulevad andmed reeglina kord sekundis , teistelt seadmetelt kuni mõnikümmend teadet sekundis . Laeva ja sonari andurite asendi leidmiseks mingil ajahetkel peab seadmete näitusid sellele hetkele interpoleerima . Eri seadmete andmestiku omavahelise sobitamise põhieeldus on nende näitude piisava täpsusega ajamärgistamine . Näidu ajalise fikseerimise normaalne täpsus on <arv>,<arv> ... <arv>,<arv> sekundit . MÕÕDISTUSTARKVARA Kontekst . Mõõdistustarkvara on esimene suurem lüli sügavusandmete töötlemise ahelas . Selle ülesandeks on mõõteandmete kogumise juhtimine välitöödel ning esialgne andmete piisavuse ja kvaliteedi kontroll . Edasi lähevad kogutud andmed puhastustarkvarasse , kus toimub andmete kontroll ja mõõtmisvigade kõrvaldamine , ning lõpuks analüüsi- ja vormistustarkvarasse , kus toimub juba kontrollitud ning usaldusväärsete sügavuspunktide sihipärane kasutamine - vormistamine soovitud kujul reaalsusmudeliks . Eesmärk . Mõõdistustarkvara peab võimaldama hüdrograafil teha välitööde käigus järgnevat : planeerida mõõdistuseksperimenti , juhtida mõõdistust ning andmete salvestamist jälgida , et mõõteseadmed töötaksid suuremate hälveteta jälgida , et kogutud andmed kataksid mõõdistatavat ala piisavalt avastada ja märgistada jooksvalt kahtlasi kohti ning teha kontrollmõõtmisi . Iseloom . Mõõdistustarkvara on põhimõtteliselt reaalajasüsteem - see peab võtma vastu teateid välismaailmast ( arvutiga ühendatud mõõteseadmetelt ) ning reageerima neile ootuspäraselt mõistliku aja jooksul ( <arv> ... <arv> ms ) . Sisendandmete voog on suurusjärgus mõnikümmend teadet sekundis ning mahus ca mõned kilobaidid sekundis . Kõige ressursiahnem on suurte andmekogumite graafiline esitamine ( mis on ainus võimalus toimuvast piisava ülevaate saamiseks ) , mis samas ei tohi segada andmete vastuvõtmist ja salvestamist . Väljanägemine . Mõõdistustarkvaral on graafiline kasutajaliides , mis koosneb eriplaanilistest ja -otstarbelistest dialoogidest . Põhiline töö käib kartograafilises plaanis , kus laeva liikumist ja kogutud sügavuspunkte esitatakse olemasoleva elektroonilise merekaardi taustal . Veel on võimalus jälgida sügavuspunktide põhjal jooksvalt koostatud merepõhja reljeefi <arv>D-mudelina , millelt on veealused objektid ja pinnavormid kergemini ära tuntavad . Joonis <arv> näitab , kuidas esitatakse tüürimehele laeva juhtimiseks vajalikku infot . Suurimas sektsioonis kujutatakse mõõtmise kulgu kartograafilises plaanis . Diagonaaljooned on esiti planeeritud mõõteliinid , mis võetakse aluseks mõõteala süstemaatiliseks läbimiseks ning kogutavate andmete korrastamiseks . Mustad tihedad punktid on osa aktiivse mõõteliini jooksvalt kogutavatest sügavuspunktidest , neist paremale ulatub kaares laeva trajektoor pealesõidul aktiivsele liinile . Tumehall osa on varem mõõdistatud mõõteliinidele kuuluvad sügavuspunktid . Parempoolsetest sektsioonidest ülemises esitatakse numbriliselt laeva liikumise parameetreid ning alumises suuremas plaanis laeva asendit liini suhtes . Alumises sektsioonis on jälgitav laeva kõrvalekalle aktiivsest mõõteliinist . Mõõdistustarkvaras põimuvad kokku ning moodustavad ühtse terviku mitmed erinevad tarkvaravaldkonnad . Kõik osad eraldi ning koostöös peavad tagama piisava reaktsioonikiiruse , mistõttu mõõdistustarkvaras kasutatavate lahenduste puhul on erilist tähelepanu pööratud töökiiruse optimeerimisele . Vaatleme järgnevalt põgusalt laiemaid problemaatikaid , millega mõõdistustarkvaral tuleb kokku puutuda . Kommunikatsioon . Lisaks tööd juhtiva operaatori korraldustele peab mõõdistustarkvara reageerima ka erinevate sideliideste kaudu mõõteseadmetelt sissetulevatele sõnumitele . Laeva asendi määramise seadmed liidestuvad jadaportide kaudu . Nende sõnumite ajamärgistamine toimub teate alguse tuvastamise hetkel pordist lugemisel . Sonararvutiga sõnumivahetus toimub üle lokaalvõrgu TCP-Socket'ite vahendusel . Hüdrograafi- ning sonararvuti kellaaegade sünkroniseerimiseks on välja töötatud spetsiaalne meetod . Andmete töötlus ja ladestamine . Kogutavate andmete vastuvõtu , järjestamise , hoidmise , ümberarvutamise , salvestamise ja esitamise tarbeks on loodud hulk eriotstarbelisi andmestruktuure ning algoritme . Sealjuures on püütud arvestada , et andmestik võtaks võimalikult vähe ruumi ja samas oleks hõlpsasti läbitav ja esitamise tarbeks töödeldav . Ruumiandmete graafiline esitus . Põhilised graafiliselt esitatavad ruumiandmete kogumid on kogutud sügavuspunktid , laeva trajektoor , merekaart ja mõõteplaan ( ala piirjoon ja mõõteliinid ) . Kõik andmed on oma olemuselt vektorandmed ehk siis sisekujul hoitakse neid naturaalses süsteemis ( projekteeritud geokoordinaatides ) ning ekraanile toomiseks rakendatakse iga kord vastavate parameetritega teisendust rasterkujutiseks . Esituse juhtimiseks on rida funktsioone nagu kujutise skaleerimine ja nihutamine ning mingi hulga tihedamini otsitavate objektide ( laeva jooksev asukoht , aktiivne liin jms. ) tsentreerimine . Mõõteplaani muutmiseks on defineeritud vastavad graafilised redigeerimisfunktsioonid . Joonisel <arv> on traatmudelina esitatud <arv>D-kujutis laevavrakist Orissaare lähedal mõõdistatuna , kasutades <arv> kanaliga sonarit ( jälje laiusega ~<arv> m ) . Vraki ligikaudsed mõõtmed on <arv> x <arv>,<arv> m. Vrakk ulatub muidu ~ <arv>,<arv> m sügavusest põhjast <arv>,<arv> ... <arv>,<arv> m ülespoole , kuni <arv> meetrini . Traatmudeli koostamisel on kasutatud hulga mõõteliinide andmeid . Joontega on omavahel ühendatud ühele liinile kuuluvad sügavuspunktid sellisel viisil , et sonari mingi anduri poolt fikseeritud punkt on ühtpidi ühenduses samal töötaktil naaberkanalite poolt fikseeritud punktidega ning teistpidi sama anduri ajaliselt eelmisel ja järgmisel töötaktil fikseeritud punktidega . Andmebaasid . ühe ala mõõdistamisel võib koguneda miljoneid sügavuspunkte . Ala piisava kaetuse jälgimiseks mingis piirkonnas peab kogutud andmetest eraldama sellesse piirkonda kuuluvad andmed ning tegema seda võimalikult väikese ajakuluga . Selleks otstarbeks on loodud SQL-andmebaasil põhinev spetsiaalselt antud rakenduse tüübile kohandatud andmete ruumilise organiseerituse ning alapäringute mehhanism . Geoinfosüsteemid . Merekaardid on maailmas ühed põhjalikumalt standardiseeritud geoandmete kogumid nii sisu kui esituse osas . Elektrooniline merekaart on sisuliselt geoinfosüsteem , mis koosneb hulgast geograafilist määratlust omavatest reaalsuses eksisteerivatest ( kivid , vrakid , rannajoon , meremärgid jms. ) või fiktiivsetest ( laevateed , iseloomulikud sügavuspunktid , samasügavusjooned jms. ) nähtusobjektidest . Lisaks kohamääratlusele võib nähtusobjektidel olla veel terve hulk muid atribuute , millest osa mõjutavad objekti esitust , osa aga mitte ( nimi , tekitamise kuupäev jms. ) . Lisaks kaartide taustaks esituse võimalustele sisaldab mõõdistustarkvara ka lihtsamat kaardiredaktorit . Joonisel <arv> on toodud osa Heltermaa kanali mõõteandmetest ning taustaks nende põhjal koostatud merekaart . Abijoonestiku ruudud on hektari suurused . Andmed on kogutud <arv> kanaliga sonarsüsteemiga , mis katab sondeeringutega ligi <arv> meetri laiuse riba risti laeva liikumissuunaga . Antud pildil on kujutatud ca <arv> <arv> algset sügavuspunkti . Taustakaardilt näeme numbriliselt kujutatuna algandmestikust väljavalitud iseloomulikke ( piirkonna madalaimaid ) sügavuspunkte . Sügavusarvu tagumine koht näitab meetrikümnendikke ehk siis kanali piires on sügavused üle <arv>,<arv> meetri ja väljaspool <arv>,<arv> ja <arv>,<arv> meetri vahel . Veel näeb kaardilt <arv> meetri isojoont , mis on arvutatud samuti kogutud andmete põhjal , ning pildi keskel on näha ka üks poi . Kogutud sügavuspunktidest jõuab kaardile küll ainult väga väike osa , kuid selle osa saamiseks ja veendumiseks , et leitud on iga piirkonna madalaim koht , on kogu ala siiski tarvis katta piisava tihedusega mõõtmistega . KOKKUVÕTE Toodud ülevaade meremõõdistussüsteemist oli küll liialt lühike täieliku pildi edasiandmiseks , kuid loodetavasti näitas suhteliselt huvitavat ja mitmetahulist infotehnoloogia rakendusharu lugejatele , kes eelnevalt pole selle temaatikaga eriti kokku puutunud . Leo Võhandu , emeriitprofessor Astendamisest , fraktaalidest , iteratsioonist ja J-keelest ( <arv> ) Nii matemaatikas kui inseneriasjanduses on sageli tegemist olukorraga , kus mõne võrrandi või võrrandisüsteemi lahendamisel tuleb kasutada nn. iteratsioonimeetodit . Tavakeeles öelduna võetakse otsitavale suurusele x mingi lähendväärtus x<arv> ja võrrandit kujule x = f(x) ümber kirjutades arvutatakse järjest suurused x<arv>= f ( x<arv> ) , x<arv> = f ( x<arv> ) , ... Nii toimitakse seni , kuni kaks järjestikust lähendit piisava täpsuse piires enam ei erine . Kas see meetod annab alati lahendi ? Ei anna ! Täpseid tarvilikke tingimusi meetodi koonduvuseks pole siiani teada . Praktika jaoks on piisav , kui |f ' ( x<arv> ) | &lt; <arv> . See lihtne iteratsioonimeetod on suhteliselt aeglase koonduvusega , aga see-eest tavaliselt ka lihtsa arvutuseeskirjaga ega nõua täpset alglähendit . Arvestades kaasaegsete arvutite head kiirust , on sageli hoopis keerukamate Newtoni meetodi ja kõõlumeetodi ( Regula Falsi ) asemel mõnusam üritada just lihtsa iteratsioonimeetodiga läbi ajada . Muide , selline muutuja x väärtus x* , mille korral x* = f ( x* ) , kannab püsipunkti nime ja on pärismatemaatikas üks võimsamaid lahendusvahendeid . ( Lugege Eesti Entsüklopeediast vastavat märksõna ! ) Eriti mõistlik on püsipunktide leidmiseks kasutada J-keelt . Miks ? Kõigepealt on keeles olemas astendamisverb [ , mis järjestikuste funktsiooniväärtuste arvutamise hästi lihtsaks teeb . Enne , kui iteratsioonini välja jõuda , teeme kõigepealt proovi astendamisega : <arv> [ <arv> <arv> Selge , <arv> astmel <arv> on tõepoolest <arv>. [ <arv> <arv>.<arv> Ohoh , mis see viimane tulemus on ? Kõigepealt tuletab see korraldus [ <arv> meile meelde , et J-keele primitiivid ( põhiverbid ) on kõik pruugitavad nii ühe kui kahe argumendiga . Keele sõnastik näitab meile , et unaarne ( ühe argumendiga ) variant tähistab parajasti naturaallogaritmide aluse e = <arv>.<arv> ... vastavat astet . Niisiis on [ <arv> = e[<arv> . Teeme siinkohal veidi pikema kõrvalepõike astendamise valdkonda . ASTENDAMINE Niisiis verb [ on astendusverb , a [ b tähendab “ a astmel b ” , e [ b tähendab “ e astmel b ” . Loomulikult kohtume siin ka juba tuttavate erijuhtudega : x[<arv> on ruut , x [ <arv> on kuup ja x [ <arv>.<arv> on ruutjuur . Märgime , et ruutjuure puhul on null . <arv> ees oluline , sest muidu läheks see punkt astendusmärgi järele ja [ . on juba hoopiski uus verb - naturaallogaritm . Teeme proovi : [ <arv> on “ e astmel <arv> , so . e “ . Võttes nüüd e-st loomuliku logaritmi , peaksime saama tulemuseks arvu üks , sest e astmel üks on e. Vaatame : [ . [ <arv> <arv> Tõepoolest , unaarne verb [ . annab parempoolse argumendi loomuliku logaritmi . Võtame argumendiks listi i.<arv> ( so arvud <arv> <arv> <arv> <arv> <arv> ) ja rakendame sellele listile logaritmimisverbi [ . [ . i.<arv> <arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> Uurime seda tulemust lähemalt . Kõigepealt on tegemist pika ( kahekordse pikkusega ) allkriipsuga . See tähistab miinus lõpmatust . Miks nii ? Logaritm nullist on ju seda ! Asjast pildi saamiseks vaatame veel ühe kahanevate väärtustega listi loomulikku logaritmi : [ . <arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv> _<arv>.<arv> _<arv>.<arv> _<arv>.<arv> _<arv>.<arv> _<arv>.<arv> _<arv>.<arv> Siit on selgelt näha , kuidas arvu <arv> logaritm on null ja järjest kahanevate arvude logaritmid aiva lähenevad miinus lõpmatusele . J-keele plussiks on ka see , et ta ei löö värisema nulliga jagamise ja lõpmatuse ees . Nulliga jagamisel saame lihtsa lõpmatuse : <arv>%<arv> so . ühekordse allkriipsu . Miinus lõpmatus näib pika allkriipsuna [ . <arv> Nüüd on ka eespool saadud tulemus [ . i.<arv> <arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> igati arusaadav . Nulli logaritm on , ln<arv>=<arv> , ln <arv>= <arv>.<arv> jne. Kui arvud on kompleksarvud , siis astendamine töötab loomulikul viisil <arv>j<arv> [ <arv>=.-<arv>j<arv>. Ruutjuur samast kompleksarvust oleks <arv>j<arv> [ <arv>.<arv>=. <arv>.<arv>j<arv>.<arv>. LOGARITMIDE TABEL Vanasti olid logaritmid vähegi suuremate arvude korrutamisel möödapääsmatud abilised . Nüüdseks on taskuarvutid ja personaalarvutid vajaduse logaritmide tabelite järel kaotanud . Kui teil aga tekib mingipärast selliste tabelite saamise vajadus ( kasvõi näitamaks , et kahe arvu korrutise logaritm on nende arvude logaritmide summa ) , siis J-keel teeb taolise tabeli kähku valmis : logtabel= . [ . / . &lt; <arv>.<arv> “ : logtabel <arv> &lt; <arv>.<arv> “ : logtabel <arv> +------------------------------------------------------------------------+ | . <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | | <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> <arv>.<arv> | +------------------------------------------------------------------------+ See on niisugune logaritmide tabel , mida isegi kõige vanemad matemaatikud pole Eestis veel usutavasti näinud . Nimelt selles tabelis on ridu pidi logaritmid arvudest <arv>,<arv> , <arv> , ... , <arv> rea numbrile vastaval logaritmide alusel . Vaatame sellele tabelile korraks otsa . Esimene rida vastab logaritmide alusele <arv>. See rida on tühi ja midagi kasulikku pole sellega peale hakata . Aluse <arv> puhul saab vaid arvust <arv> võtta mõistlikult logaritmi . Alusel <arv> on aga juba kõik korras . Arvu <arv> logaritm on <arv> , arvu <arv> oma <arv>.<arv> ja arvu <arv> oma <arv>. Kõik on korras . Tabeli suurust ja esitustäpsust saame ise vabalt valida . Ôpetlik on see , kuidas tabeli lahtritesse kantavate arvude formaati määratakse . Boksimärgile &lt; järgnev <arv> näitab , mitu kohta arvu jaoks varuda ja punkti järel tulev <arv> ütleb , et näidatagu kahte kohta pärast koma . See pisinäide demonstreerib väljundvormide muutmise kergust . Tabelit on muide paha vaadata , sest puuduvad rea- ja veerunumbrid . Nende paigaldamise jätame lugejale kodutööks . Näite leiate A &amp; A<arv> kahest viimasest numbrist , kus on juttu graafide korrastamisest . Kokkuvõtteks : x[.y annab meile muutuja y logaritmi alusel x . ( Seega [ . on astme pöördfunktsioon , nii nagu [ . on naturaallogaritmi pöördfunktsioon ) . ASTENDAMINE KUI TEGEVUSE KORDUS Selgub , et astendamist on sageli mõnus kasutada sama tegevuse korduvaks rakendamiseks . Tavamõttes on ju arvu astendamine iseendaga teatud kindel arv kordi korrutamine . Asjale formaalsemalt vaadates võime võtta mingi verbi oma argumendiga ja seda verbi korduvalt rakendada analoogiliselt arvu astendamisele . üks huvitavamaid lihtnäiteid selles suunas on nn. Pascali kolmnurk , mis näitab kaksliikme astendamisel tekkivaid kordajaid <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Järgmine rida tekib eelmisest niimoodi , et eelmisele reale kui listile pannakse <arv> ette ja siis pannakse eelmisele reale <arv> lõppu . Nii saadud kaks listi liidetakse ja saadakse järgmine Pascali kolmnurga rida . Kontrollime : <arv> <arv> + <arv> <arv> = <arv> <arv>. Edasi <arv> <arv> <arv> + <arv> <arv> <arv>= <arv> <arv> <arv> jne. Paneme nüüd selle J-is kirja . R= : ( <arv> : , ] ) + ( ] , <arv> : ) . ( Siin on kasutatud J-keele nn sisemisi konstante _<arv> : , _<arv> : , ... , _<arv> : , <arv> : , <arv> : , ... , <arv> : . Kandiline sulg avaldises tähendab lihtsalt paremalt poolt valemisse sisestatavat argumenti . ) Teeme proovi : R<arv> <arv> <arv> R R <arv> <arv> <arv> <arv> R R R <arv> <arv> <arv> <arv> <arv> Asendame nüüd reamoodustamise käsu korduva väljakirjutamise astendamisega ja vaatame , mis juhtub ( nii on alati mõistlik proovida ! ) . R[ : ( <arv> ) <arv> <arv> <arv> <arv> <arv> Hurraa ! Astendamine töötabki ! Proovime nüüd kohe uljalt veel kaugemale minna ja seejuures mitte ainult vastava rea , vaid tabeli kõik read astendamise abil välja arvutada . Paneme astendajaks järjest kõik meid huvitavad reanumbrid ( <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> ) , so . R [ : ( i.<arv> ) <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> See tabel on aritmeetiliselt õige , ainult vormistus pole eriti viisakas . Kasutame logaritmide tabeli juures esitatud lahtri ühtlase pikkuse määramise võtet , valides seekord lahtri pikkuseks <arv> täheruumi : &lt; <arv>.<arv> “ : R [ : ( i.<arv> ) <arv>. +------------------------------------+ | <arv> <arv> <arv> <arv> <arv> <arv> <arv> | | <arv> <arv> <arv> <arv> <arv> <arv> <arv> | | <arv> <arv> <arv> <arv> <arv> <arv> <arv> | | <arv> <arv> <arv> <arv> <arv> <arv> <arv> | | <arv> <arv> <arv> <arv> <arv> <arv> <arv> | | <arv> <arv> <arv> <arv> <arv> <arv> <arv> | | <arv> <arv> <arv> <arv> <arv> <arv> <arv> | +------------------------------------+ Kui see tabeli ümber joonistatud kast ei meeldi , siis jätame vastavas käsureas lihtsalt boksimisverbi &lt; ära . Huvi pärast kontrollime ka arvutuskiirust selle Pascali kolmnurga jaoks : <arv> ! : <arv> ( <arv> : , ] ) + ( ] , <arv> : ) ) [ : ( i.<arv> ) <arv>' <arv>.<arv> üpris kiire arvutus , ca <arv>/<arv> sekundit . Tuhande rea jaoks kulus <arv>,<arv> sekundit . Edasi läksin ahneks , proovisin kohe <arv> reaga õnne , aga arvuti teatas , et mälu ei jätku . Loomulikult , ma nõudsin ju <arv>x<arv> tabeli arvutamist ja meeles pidamist . Tegin veel ühe proovi , arvutades ainult Pascali kolmnurga viimase <arv>. rea . Selleks tuleb ajamõõdukorralduses asendada <arv> elemendiga list ( i.<arv> ) lihtsalt arvuga <arv>. Nüüd oli mälu piisavalt , aga arvutus võttis juba tervelt <arv>.<arv> sekundit . Kokkuvõte Pascali kolmnurga arvutamiseeskirjast kõlaks seega nii : kasutage korraldust <arv> “ : ( ( <arv> : , ] ) + ( ] , <arv> : ) ) [ : ( i.<arv> ) <arv> Et kena väljanägemisega Pascali tabelit saada , tuleb selles üherealises korralduses muuta vaid vajalikku ridade arvu ( so . <arv> asendada õige arvuga ) ja tabeli iga lahtri laius ( mis praegu on <arv> täheruumi ) valida endale sobilikult ( seda on kõige lihtsam teha proovimisega ! ) . Võrdluseks toon Pascali kolmnurga arvutamiseks Pascal-keelse funktsiooni , millele peab muidugi veel lisama stardi- ja trükiosa : FUNCTION bin ( n , k : integer ) : integer ; BEGIN IF ( n=k ) OR ( k=<arv> ) THEN bin : = <arv> ELSE bin : = bin ( n-<arv> , k-<arv> ) + bin ( n-<arv> , k ) END See funktsioon on tänu rekursiivsuse kasutamisele isegi lühikesevõitu Pascal-keele jaoks . VEIDI FRAKTAALIDEST Fraktaalid on keerulised kujundid , mida saab osadeks jaotada ja mille osad on suure kujundi vähendatud koopiad - fraktaal on enesesarnane . Fraktaalid on näiteks Mandelbroti fraktaal ja Kochi lumehelbeke . Sellise ilusa definitsiooni võib leida tuttuuest ( <arv> ) Väikesest Entsüklopeediast . Artikli tekstile lisaks on toodud mõlemat nimetatut tüüpi fraktaalide pildid , mida soovitan igaühel vaadata , kes neid varem näinud ei ole . Kuna siin on tegemist ilmse kordusega ( enesesarnasus ! ) , siis proovime J-keele jõudu veel kolmandat tüüpi fraktaalide juures , nn. Sierpinski kolmnurkade ja vaipade puhul . Defineerime Sierpinski funktsiooni S= : , , . ~ NB ! Sierpinski funktsioon peegeldab ja kleebib sisendsümboli uue reana ning täiendab eelmise sümbolrea nullidega pikima rea pikkuseni S , <arv> NB ! Alustame elemendist <arv>. Saame teise rea <arv> <arv> ja esimest täiendame nulliga : <arv> <arv> <arv> <arv> Teeme sama tööd kaks korda : S S , <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Kolmanda ja edasiste kordade jaoks on mõistlik kasutada jälle astendamist korduse loomiseks : S [ : <arv> , <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Proovime nüüd , mis juhtub , kui arvu <arv> asemel stardisümbolina kasutada näiteks tärni *' . S , '*' * ** Muster on muidugi sama , nullide asemel on tühikud ! S [ : <arv> , *' * ** * * **** * * ** ** * * * * ******** Järgmine fraktaal kannab Sierpinski vaiba nime . Sierpinski fraktaalile S lisatakse veel midagi : Vaip= : pea , S , . parem pea= : , . , . ~ parem= : , ~ Vaip , <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Vaip [ : <arv> , <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Vaip [ : <arv> , #' Näeme . et üpris lihtsate kombineerimisvõtete abil saab joonistada üpris “ ägedaid “ mustreid . Parimaks fraktaalide joonestajaks J-keele abil võib vist pidada Lafayette kolledûi matemaatikaprofessorit Clifford Reiter'it , kes on avaldanud juba kahes trükis kauni raamatu “ Fractals , Visualization and J ” . Geomeetriahuvilisele või fraktaalikütile võib seda raamatut ülimalt soovitada . Tellida saab seda Jsoftware koduleheküljelt või Amazon.com kaudu . LÕPETUSEKS Koduseks nuputamiseks esitan veel paar näidet ilusate J-keelsete programmide kohta . <arv>. Merehädalise Joosepi probleem . Kui n inimest seisab järjestikku nummerdatuna laevalael ringjoonel ning iga teine neist võetakse rivist välja ja visatakse merre , siis viimase allesjääja ja ellujääja number on algrivistuses antud programmiga J= : <arv> &amp; | . &amp; . : J ( <arv> ) <arv> <arv>. Ratsionaalarvuline lähend . On antud reaalarv <arv> ja <arv> vahel . Leida selle arvu jaoks ratsionaalarvuline lähend R(x) . R= : <arv> &amp; * . , %@ ( <arv> &amp; + . ) R ( <arv>.<arv> ) <arv> <arv> Soovitan need kaks programmi läbi uurida ja üritada tegumoest aru saada . Nähtud vaev kinnitab programmide kaunidust ja ökonoomsust . Uudised valis ja pani kokku Uuno Vallner , Riigikantselei riigi infosüsteemide osakonna nõunik Uudised RAHVARAAMATUKOGUDES PUUDUB SEADUSEVASTASELT INTERNET Rahvaraamatukogude varustatust avalike Interneti-punktidega uurinud Riigikontroll leidis , et kuigi avaliku teabe seaduse kohaselt pidi selle aasta alguseks olema Interneti-punkt igas rahvaraamatukogus , on selleta siiski üle poole raamatukogudest . Rahvaraamatukogude internetiseerimise eest vastutav Kultuuriministeerium andis <arv>. aastal planeeritud <arv> Interneti-punkti asemel käiku ainult <arv>. Eriti suur mahajäämus on Pärnumaal , Valgamaal ning Lääne- ja Ida-Virumaal , sest neis maakondades saab internetti kasutada ainult igas neljandas rahvaraamatukogus . Mahajäämust rahvaraamatukogude internetiseerimisel on Riigikontrolli hinnangul võimalik kiiresti likvideerida , kui Kultuuriministeerium tagaks , et raamatukogude andmeside loomist rahastataks kooskõlas rahvaraamatukogude seadusega , kohalikud omavalitsused valmistaksid ette turvalised ruumid ja kindlustaksid Interneti-punktide edasise hoolduse ning sihtasutus Vaata Maailma aitaks sisustada punktid vajaliku tehnikaga . Rahandusministeerium peaks Riigikontrolli väitel aga eelnevalt analüüsima maksuseaduste muudatuste mõjusid , mis võivad internetiseerimist pidurdada või selle hoopiski peatada . APRILLIS SAAB <arv> AASTAT INTERNETI-üHENDUSE LOOMISEST EESTIS Interneti püsiühendus käivitus Tartust ja Tallinnast Rootsi satelliidi vahendusel kümme aastat tagasi , <arv>. aasta aprilli lõpupäevil . Interneti-ühenduse loomise initsiaatorid olid põhiliselt teadusasutused . Samal ajal sai Interneti püsiühenduse KBFI kaudu ka vabariigi valitsus ( Riigikantselei ) . EESTI PANKADEL ON LIGI <arv> <arv> INTERNETI-PANGA KLIENTI Eesti pankadel oli veebruari lõpu seisuga <arv> <arv> Interneti-panga klienti , telefonipanga kliente oli kokku <arv> <arv>. Hansapanga Interneti-pangal hanza.net oli veebruari lõpus <arv> <arv> klienti . ühispanga Interneti pangal U-Net oli veebruaris kehtivaid lepinguid <arv> <arv>. Sampo Panga Interneti-panga klientide arv ulatus veebruari lõpus <arv> <arv> kasutajani . Nordea Interneti-panga Solo Internet kasutajate arv kasvas <arv> kliendini . Krediidipanga Interneti-panka kasutas veebruari lõpus <arv> klienti . EUROVISIOONI VEEBILEHEL ON EESTI VÕIMSAIM VIDEOLAHENDUS “ Eurovision <arv> " veebileheküljel on võimsaim Eestis valmistatud videolahendus Internetis . “ Eurovision <arv> " infovärav kasutab esimest korda Eestis Interneti-pildi rahvusvaheliseks levitamiseks firma Akamai tehnoloogiat EdgeSuite , mis võimaldab tuhandetel internetikasutajatel korraga jälgida lauluvõistlusel toimuvat . EdgeSuite sai oma ristsed möödunud aasta <arv>. septembril , kui New Yorgi World Trade Centeri tornide rammimist jälgis Interneti vahendusel ligi <arv> <arv> üheaegset kasutajat . Tallinna Eurovisiooni lõppkontserdi puhul prognoosivad korraldajad paar korda väiksemat koormust . Kvaliteedi tagamiseks vahendavad videopilti rohkem kui <arv> <arv> Akamai serverit . Iga Interneti teel lõppvõistlust jälgida soovija suunatakse kõige lähema serveri teenindada , mis võimaldab eraldi juhtida ning tasakaalustada serverite koormust ja vältida olukordi , kus ühe serveri ülekoormus häirib kogu süsteemi tööd . Projekti vahendusel on Eurovisiooni lõppkontserti võimalik jälgida nii Euroopas kui ka mujal maailmas . USA AJAKIRI “ NEWSWEEK ” KIIDAB EESTI E-VALITSUST Ameerika ühendriikide ajakiri “ Newsweek ” avaldas positiivse artikli Eestist , kiites suurt Interneti-kasutajate arvu ja e-valitsust . Enam kui kuskil mujal maailmas räägivad Eesti valitsejad sõrmedega . Kasutades veebipõhist tarkvara , mille on loonud Eesti IT-firmad , teevad ministrid enamiku koosolekueelsest tööst . Seeläbi väheneb koosoleku aeg kolmandiku võrra . Ja kuna ministrite abid ei pea kohale toimetama suuri hunnikuid pabereid , hoiab e-kabinet kokku sadu tuhandeid eurosid igal aastal . “ Newsweek ” kirjutab , et Eestis on Interneti-ühendusi inimese kohta palju rohkem kui näiteks Suurbritannias või Saksamaal . Umbes <arv> protsenti pangatehingutest tehakse arvuti abil või WAP-telefonidega . Samuti kirjutab ajakiri , et sõites Eesti maapiirkondadesse , võib näha põtrade eest hoiatavate liiklusmärkide asemel @-märgiga liiklusmärke , mis viitavad enam kui <arv> raamatukogudesse või munitsipaalhoonetesse sisse seatud avaliku Interneti-punkti asukohale . INTERNETI-KASUTUS ON EESTIS AASTAGA HüPPELISELT KASVANUD Aastaga on Interneti kasutajate arv Eestis suurenenud ligi <arv> <arv> inimese võrra , kokku kasutas selle aasta talvisel uuringuperioodil Internetti <arv> protsenti <arv>-<arv>-aastastest eestimaalastest . Interneti-kasutuse kasv on toetunud peamiselt uute koduarvutite soetamisele ja neile Interneti-ühenduse saamisele . Veebruari lõpuks omas kodus arvutit <arv> protsenti Eesti elanikest , aasta varem oli koduarvuti omanikke vaid <arv> protsenti . Koduarvutitest on Internetti ühendatud ligi kaks kolmandikku , soodsate pakkumiste tõttu hakkab püsiühendus üha enam kodudest välja tõrjuma sissehelistamisteenust , näitas uuring . Statistika aluseks on Emori e-seire uuring , mis jälgib arvuti- ja Interneti-valdkonna ning e-kaubanduse arengut . JÄRGMINE MS OFFICE VÕIB TULLA TÄISMAHUS EESTIKEELNE Balti regiooni juht Torben Andersen ütles intervjuus Postimees Online'ile , et teeb kõik endast sõltuva selleks , et järgmine bürootarkvarapakett Microsoft Office oleks täismahus eestikeelne . Arvatakse , et inimeste harjumine eestikeelse versiooniga võtab aega . Taanis on näiteks <arv>-<arv>% laiatarbetarkvarast lokaliseeritud , Eestis toimub sama ilmselt paari aasta jooksul . Inimesed näevad , et tarkvara on lihtsam kasutada , ja hakkavad aja jooksul lokaliseeritud tarkvara enam kasutama . Järgmine Office'i versioon oleks täies mahus lokaliseeritud , kaasa arvatud PowerPoint . Ja Great Plains'i äritarkvara eestindamine peaks olema juba lõppjärgus . Serveritarkvara Microsoft üldjuhul ei lokaliseeri . Skandinaavias on üldjuhul lokaliseeritud Windows ja Office , mõnes riigis ka FrontPage . Tehnoloogia on hetkel seisus , kus kõnetuvastus töötab , kuid see pole veel täiuslik . Viimased kümme või viisteist aastat on öeldud , et kahe kuni nelja aasta pärast saame arvutiga probleemideta rääkida . Ning see “ kaks kuni neli aastat ” lükkub pidevalt edasi . Microsofti arvates on küsimus läbimurde saavutamises . Niipea kui saadakse inglise keele kõnetuvastus korralikult tööle , asutakse teiste keelte kallale , ja siis läheb see ehk veidi lihtsamalt kui inglise keelega .