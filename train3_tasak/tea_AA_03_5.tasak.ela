kirjak	tea_AA_03_5.tasak.ela	TOIMETAJALT <arv>-<arv> Infosüsteemide integreerimine on tänapäeva praktilise infotehnoloogia üks võtmeprobleeme , selleks otstarbeks on loodud mitmeid suurema või väiksema tähtsusega protokolle ja andmevahetuse standardeid ( nt. SWIFT ja EDI finantsvaldkonnas ) . Muutuv maailm tingib vajaduse uuendada neid protokolle-standardeid - see aga toob kaasa vajaduse muuta nende protokollide alusel andmeid edastavaid programme , mis on kulukas , aeganõudev ja sageli ka vigu põhjustav . On loomulik , et seepärast tegid juhtivad IT-firmad pingutusi ühtse , standarditud ja agiilse ( muudatusi salliva ) andmevahetusprotokolli loomiseks . eXtensible Markup Language ( XML ) <arv>ongi kujunenud erinevate infosüsteemide andmevahetuse standardiks . Kuid XMLi kasutatakse peamiselt serverirakendustes ( back-end applications ) , XML-põhiseid lõppkasutajarakendusi ( desktop applications ) on vähe . Põhjus : lõppkasutajarakendustes pole lihtne eraldada andmete sisu nende esitusest , mis on aga XMLi evitamise tingimuseks . Microsoft on selles osas teinud tõsise läbimurde : Microsoft Office <arv> pere toodete ( Excel <arv> , Access <arv> , Word <arv> , Outlook <arv> , FrontPage <arv> ) XML-põhine integratsioon on kasutajale läbipaistev ja efektiivne : töölehed , sisestus- ja väljastamisvormid , andmebaasid , veebilehed , tekst-dokumendid pole enam andmetöötluse lõpppunktideks , vaid on osaks andmetöötluse tsüklilises infrastruktuuris . Microsoft Office <arv> innovatiivseks komponendiks on InfoPath , mis teeb oluliselt hõlpsamaks ja efektiivsemaks andmete kogumise ja taaskasutamise/integreerimise üle paljude rakenduste . InfoPathi iseloomustab : InfoPathi tugiandmevorminguks on XML andmete XML-põhine kogumine ja integreerimine InfoPath võimaldab kasutada XMLi funktsionaalseid võimalusi , seejuures XMLi tundmata - XML-töötlus toimub “ kulisside taga ” , kasutaja ei pea teadma selle töötluse detaile . InfoPath lisab XML-dokumenti korraldusi ( processing instructions ( PI ) ) , mis määravad kindlaks XML-dokumendi töötlemise viise/võimalusi . InfoPath tagab järgmised põhitoimingud : vormide mallide loomine vormide täitmine andmetega . Vormide mallide loomiseks on InfoPath'i kavandamiskeskkond , milles töö on sarnane teiste Microsofti kasutajaliidese loomise keskkondadega : vajalikud väljad lohistatakse tööriistakastist kavandilõuendile jne. Kavandamise hõlbustamiseks on Microsoft loonud ka paarkümmend näidismalli , mille modifitseerimisest piisab tüüprakenduste loomiseks . InfoPath toetab vahetult ( out-of-the-box support ) veebiteenuste protokolle Simple Object Access Protocol ( SOAP ) , Universal Description , Discovery , and Integration ( UDDI ) ja Web Services Description Language ( WSDL ) . InfoPath'i käituskeskkond annab kasutajale võimsad vahendid sisestatava info redigeerimiseks ja verifitseerimiseks , näiteks : automaatne sõna/fraasi lõpetus ( autocomplete ) otsimine ja asendamine ( find and replace ) lohistamine ja pillamine ( drag and drop ) . Sarnaselt . NETIi koostefaili ( assembly ) manifestile , mis kirjeldab koostefaili sisu , on ka InfoPath'il vormi kirjeldusfail ( manifestifail ) , . xsf-fail . . xsf-fail seob info vormi loomise , kasutamise ja evitamise kohta . . xsf-fail luuakse automaatselt InfoPath'i poolt vormi kavandamise käigus ja pakendatakse teiste vormifailidega . xsn-faili . Analoogselt Visual Basic for Applications ( VBA ) programmeerimiskeskkonnaga on ka Microsoft Script Editor 'il ( MSE ) objektilehitseja , millega saab vaadelda InfoPath'i objektimudelit , selle kõiki omadusi ( properties ) , meetodeid ( methods ) ja sündmusi ( events ) . InfoPath'i failide modifitseerimine toimub deklaratiivselt , näiteks : XML skeemi-failide ( XML Schema files ) , . xsd-failide , modifitseerimine kavandamisel loodud vaatefailide ( view files ) , . xsl-failide , modifitseerimine XML mallifailide , . xml-failide , modifitseerimine . <arv> Vt näiteks : U. Vallner , SGML , HTML ja nüüd XML.// , A &amp; A ( <arv> ) Ennu Rüstern Ennu Rüstern - sündinud <arv>. jaanuaril <arv> Järvamaal . <arv>. aastal lõpetas TPI elektriinsenerina automaatika ja telemehaanika erialal , tehnikateaduste kandidaat tehnilise küberneetika erialal ( <arv> ) , aastast <arv> automaatika kateedri õppejõud , aastast <arv> TTÜ automaatjuhtimise ja süsteemianalüüsi õppetooli juhataja , aastatel <arv>-<arv> automaatikainstituudi direktor , <arv>. aastast automaatjuhtimise ja süsteemianalüüsi korraline professor , <arv> infotehnoloogia teaduskonna dekaan , <arv> kõrghariduse hindamise nõukogu liige . Täiendanud end Lundi Ülikoolis ( <arv> ) , Delfti Tehnoloogiaülikoolis ( <arv> ) ja Oulu Ülikoolis ( <arv> ) . Uurimistöö ja noorte teadlaste juhendamine süsteemide analüüsi numbriliste meetodite , dünaamiliste süsteemide modelleerimise ja juhtimise alal . On jätkuvalt arvamusel , et professor on ülikoolis üliõpilaste jaoks , mitte vastupidi . Ilmselt ei ole vaja tõestada , et info- ja kommunikatsioonitehnoloogia ( IKT ) on kiiresti muutuv ja arenev tehnikavaldkond . Samuti on üldtuntud tõde , et IKT erialade spetsialistide vähesus on muutumas üleilmastuvaks probleemiks ning takistuseks üleminekul teadmistepõhisele majandusele , vaatamata sellele , et hea kvalifikatsiooniga IKT spetsialistide töö on hästi tasustatud . Miks on maailmas välja kujunenud selline olukord ? Käesoleva artikli autor ei ole pädev niivõrd laiaulatuslikku probleemi analüüsima ja veel vähem sellele küsimusele vastama . Seepärast analüüsin lühidalt vaid koolituse probleeme IKT erialadel TTÜ infotehnoloogia teaduskonna näitel . Infotehnoloogia teaduskond valmistab ette IKT spetsialiste bakalaureuse- , magistri- ja doktori- õppe tasemel . Bakalaureuse- ja magistriõppes koolitatakse spetsialiste informaatika , arvuti- ja süsteemitehnika , telekommunikatsiooni , elektroonika ja äriinfotehnoloogia erialal , doktoriõpe toimub integreeritud info- ja kommunikatsioonitehnoloogia erialal . <arv>. aastast käivitus <arv>+<arv>+<arv> süsteem , st <arv>-aastane bakalureuseõpe , <arv>-aastane magistriõpe ja <arv>-aastane doktoriõpe . <arv>. aastast käivitus bakalaureuseõpe arvuti- ja süsteemitehnika ning äriinfotehnoloogia erialadel lisaks päevaõppele ka kaugõppes . Praegu õpib teaduskonnas üle <arv> üliõpilase ( sh. ca <arv> üliõpilast riigieelarvevälistel õppekohtadel ) ning töötab <arv> õppejõudu , teadurit ja inseneri . Õppetegevuse aluseks on õppekava , mille käivitamiseks on vaja õppejõude ja õpikeskkonda , üliõpilasi ja ressursse ( avalik-õiguslikes ülikoolides riiklikku koolitustellimust ) . <arv>. aastal töötasime välja IKT erialade uued <arv>+<arv>+<arv> süsteemi õppekavad , lähtudes Põhjamaade ja Euroopa tunnustatud ülikoolide kogemustest ning arvestades Eesti majanduse iseärasusi ja võimalikke arenguid . Uute õppekavade väljatöötamine on keerukas protsess kiiresti arenevas tehnikavaldkonnas , kuna tuleb prognoosida valdkonna ja ka majanduse arenguid vähemalt <arv>-<arv> aastat ette . Samuti eeldab see õppejõudude koosseisu analüüsi ja vajadusel täiendamist ning vastava õpikeskkonna ( õpperuumid , laborid , õppematerjalid jne. ) olemasolu või loomist . Õppekavade väljatöötamisel osales Eesti Infotehnoloogia- ja Telekommunikatsiooni- ettevõtjate Liidu hariduse nõukoda tagamaks õppekavade vastavust võimalikele arengutele ITK valdkonnas . Kõik õppekavad läbisid enne kinnitamist retsenseerimise Eesti Inseneride Liidus ja vähemalt ühes Euroopa ülikoolis . Väljatöötatud õppekavadest on rakendatud bakalaureuse- ja doktoriõppekavad . Õppekavade haldamisega ja järjepideva arendamisega tegeleb teaduskonnas õppekavade komisjon ITL hariduse nõukoja liikmete osavõtul . Õppetegevuse järjepidevuse , stabiilsuse ja kvaliteedi kindlustavad tugiprotsessid , st. õppetegevuse korraldamisega ning juhtimisega seonduv ja õppetegevuse jooksev analüüs . Õppeprotsessi väljundiks on vajaliku kvalifikatsiooniga lõpetajad . On loomulik nõuda , et iga õppekava lõpetaja peab olema konkurentsivõimeline mitte ainult Eesti , vaid ka rahvusvahelisel tööturul . Õppekava eesmärk ei saa olla töötute ettevalmistamine . Õppekavade ja -korralduse hindamiseks toimub periooditi õppekavade akrediteerimine välisekspertide poolt . TTÜ IKT erialade kõik õppekavad on akrediteeritud . Analüüsime IKT spetsialistide koolitusprobleeme teaduskonna praktilise kogemuse alusel . Alustame vastuvõtust . Vastuvõtt bakalaureuse- , magistri- ja doktoriõppe riigieelarvelistele kohtadele toimub konkursi alusel lähtuvalt eelmise õppeastme õpitulemustest . Riiklik koolitustellimus määrab riigieelarveliste õppekohtade arvu magistri- ja doktoriõppe tasemel . See on ka loomulik , kuna insenerihariduse omandamiseks kulub mitte vähem kui <arv> aastat ( <arv>-aastane bakalaureuseõpe + <arv>-aastane magistriõpe ) . Järelikult nn esmakursuslaste probleemid seonduvad eelkõige bakalaureuse- ja doktoriõppe alustamisega . Kuidas on bakalaureuseõppe esmakursuslased valmis iseseisvaks õppetööks ülikoolis ? Arvestades suurt konkurssi IKT erialadel on esmakursuslased üldjuhul hea baasharidusega . Lisaks riigieelarvelistele üliõpilastele on teaduskonnas ka märkimisväärne arv riigieelarveväliseid , st oma raha eest õppivaid üliõpilasi ( <arv>-<arv>% üliõpilaste üldarvust ) . Reaalselt on olemas teatav esmakursuslaste ettevalmistuse ebaühtlus , mis tingib vajaduse baashariduse normi viimiseks vabaõppe arvel täiendavate kursuste lülitamist õppekavasse , eelkõige matemaatikas ja füüsikas . Teiseks tekitab probleeme bakalaureuseõppe alustamisel iseseisev õppimine ehk üleminek käsusüsteemilt koolides akadeemilisele vabadusele ülikoolis . Doktoriõppe esmakursuslaste probleemiks on eelkõige teadusliku uurimistöö kogemuse varasem olemasolu või selle puudumine ja seda tuleb arvestada doktorandi õpingute planeerimisel . Teine suur probleemidering IKT spetsialistide koolituses on , et paljud üliõpilased peavad eelkõige majanduslikel põhjustel paralleelselt õpingutega töötama . Kindlasti on praktiline töökogemus vajalik ja väga kasulik , kuid kahjuks ei suuda paljud õppetööga paralleelselt töötavad üliõpilased nominaalõppeajaga ( näiteks bakalaureuseõppe nominaalne õppeaeg on <arv> aastat ) õppekava täita . Milline on tegelik olukord ? Kui bakalaureuseõppe esmakursuslastest töötavad vaid vähesed , siis kolmandal õppeaastal töötavad juba praktiliselt kõik . Magistrandid ja doktorandid töötavad enamasti paralleelselt õpingutega , sest elu tahab elamist ja selleks on raha vaja . Õnneks on paljud perspektiivitundega firmajuhid aru saanud , et oma firma töötajate õppimist on mõttekas toetada saamaks endale tulevikus kõrgema kvalifikatsiooniga spetsialiste . Töötamine paralleelselt õpingutega on tõsine probleem , jääb vaid loota firmajuhtide mõistvale suhtumisele neil töötavatesse üliõpilastesse . Töötavate üliõpilaste õpingute toetamine on investeering tulevikku . Hetkel mingit muud lahendust probleemile pole me leidnud . Tõsi küll , paljud üliõpilased suudavad oma aega planeerida nii , et jõuavad õpingutega paralleelselt töötades ka nominaalajaga õppekava täita . Kokkuvõtteks . TTÜ infotehnoloogia teaduskonna eesmärk on Eesti majandusele rahvusvaheliselt konkurentsivõimeliste spetsialistide ettevalmistamine . Prioriteetideks aastatel <arv>-<arv> on õppetöö üldine kvaliteet ja doktoriõpe , et kindlustada õppejõudude ning teadurite järelkasvu . Kõike seda saame teha ainult tihedas koostöös Eesti Infotehnoloogia- ja Telekommunikatsiooniettevõtjate Liiduga . Kalle Tammemäe , IT Kolledž/TTÜ Moodulit Javelin Stamp ( stamp - postmark ) on lühidalt kirjeldatud A &amp; A-s varemgi [ <arv> ] . Käesolev kirjutis toob juurde nii tarkvaralisi kui ka tehnilisi detaile , mis iseloomustavad seda tähelepanuväärset moodulit nii positiivsest küljest kui ka näidates ära puudujääke . Artiklis käsitletakse Javelin-mooduli iseärasusi ning on toodud kolm praktilist juhtu , mis demonstreerivad standardteekide laiendamise lihtsust objektorienteeritud keele omadusi kasutades . Artikkel on mõeldud nendele tudengitele , õpilastele või lihtsalt elektroonikast huvitatutele , kel on kogemusi mõne teise mikrokontrolleri või BASIC Stamp mooduliga ning kes otsivad uusi väljakutseid . Objektorienteeritud programmeerimine on kahtlemata üks võimalus , mis lubab tänu suuremale abstraktsusele lihtsamini esitada ja hallata oluliselt keerulisemat süsteemi käitumist . MOODULI JAVELIN STAMP OMADUSED  Joonis <arv>. Pealtvaade ( tegelikud mõõtmed <arv>*<arv> , <arv> cm ) Javelin Stamp on mitmes mõttes innovatiivne firma Parallax [ <arv> ] toodangus . Selles on : programmeerimiskeel Java mahukas rööpjuurdepääsuga programmimälu - <arv> kbaiti moodulil paiknev ökonoomne impulss-pingestabilisaator virtuaalne perifeeria , sh. lihtsamate funktsioonide teostamine taustrežiimis valmis teegid ja dokumentatsioon Internetis suhteliselt odav stardipakett - piisab ainult moodulist ( $<arv> ) ; arenduskeskkond on vabavara , jadaühendust personaalarvuti jadaväratisse saab ise teha , kulutades paarkümmend krooni pistikute ja juhtme peale väljaviik-ühilduv BASIC Stamp moodulitega . Negatiivse poolena võib välja tuua : piirangutega Java - puudub multilõimelisus , mälukoristus ( garbage collection ) e. mälu vabastamine erruläinud objektide alt aeglus - hinnanguliselt täidab kuni <arv> Java baitkoodi sekundis mittestandardne Parallaxi Java arenduskeskkond ( JIDE ) puudub kiire rööpliides , on ainult suhteliselt aeglane jadaliides . Alustades positiivsest , on üleminek Javelin-moodulitele BASIC Stamp kasutajate jaoks päris valutu . Olemasolevat alusskeemi muutma ei pea , sest Javelin on BASIC Stamp moodulitega väljaviik-ühilduv . Samas jõudluselt midagi märkimisväärset juurde ei tule , sest baasprotsessor ( Ubicom SX<arv>AC ) on sama , mis BASIC Stamp <arv>sx mooduliski . Katseseadme saavutatav funktsionaalsus kasvab aga kindlasti , kas või virtuaalse perifeeria arvel , mis on väikeste mööndustega ikkagi rööptöötlus , sest osa virtuaalse perifeeria funktsioonidest on täidetavad taustrežiimis : UART ( täisdupleks , riistvaraline vookontroll , puhverdatud ) PWM <arv>-bitine taimer <arv>-bit DAC sigma/delta ADC . Järgnevad virtuaalse perifeeria funktsioonid kulutavad küll põhirežiimi aega , kuid neid on otstarbekas kasutada tänu optimeeritud koodile : impulsside loendamine impulsi laiuse mõõtmine impulsside genereerimine RC-taimeriga ADC SPI-liidese meisterfunktsionaalsus . Oluliseks abiks arendajale on korralik Java klasside dokumentatsioon Internetis [ <arv> ] , mis välistab vajaduse leiutada jalgratast täiendavate välisseadmete ( täiturid , andurid ) juurdeühendamisel . Vabavara teegid tuleb vaid programmi kaasa haarata ning siis saab lähtuda valmisfunktsioonidest perifeeriaseadme funktsionaalsuse ärakasutamisel . Kui seade peaks mingil moel erinema valmisteekides kirjeldatust , siis võimaldab Java kui objektorienteeritud keele pärimismehhanism minimaalse vaevaga kohandada olemasolevat klassi kirjeldust uuele seadmele . Java teegid Internetis on pidevas arengus , on olemas meetmed , mille abil Parallax reguleerib uute teekide avalikku väljatöötamist ja lisandumist . Valmis ning arengujärgus teekidest võib nimetada : I<arv>C baasliides I<arv>C EEPROM kiip ( Microchip <arv>LC<arv> ) analoog-digitaalmuundur ADC<arv> temperatuuriandur ( Dallas Semiconductor ) ja reaalajakell IEEE<arv> ujukomaaritmeetika raadiovõrgu pakettside server tarkvaraline reaalaja kell vedelkristalltabloo ( Hitachi HD<arv> ) analoog-Joystick ultraheli distantsmõõtur ( Devantech Ltd. ) Interneti protokollid ARP , UDP , PPP jne. Parallax Stamp moodulite <arv> väljaviiku võib tunduda ebapiisav , niipea kui moodulit kavatsetakse kasutada vähegi keerukamas keskkonnas , kus tuleb analüüsida hulgaliselt nii pidevaid kui ka diskreetseid signaale ja juhtida paljusid erinevaid täitureid ( nt. robootikas ) . Samas avab väljaviikude täiuslik universaalsus võimaluse laiendada neid mis tahes jadarežiimis toimivate perifeeriaseadmetega . Mugavaim sarnane jadaliides on I<arv>C [ <arv> ] [ <arv> ] , mis vajab Javelinilt vaid kaht väljaviiku ja millele valmistatavate perifeeriaseadmete valik on sisuliselt piiramatu . I<arv>C töösagedus kuni <arv> kHz jääb Javelinil küll saavutamata , aga režiimide ( meister-sell ) osas piiranguid pole . Samavõrd kui I<arv>C on levinud ka <arv>-väljaviiguliste jadaliidesega seadmed ( signaalid : takt , andmed , valik ) , millest takt ja andmed on rööpselt taaskasutatavad üle mitmete seadmete . Javelini virtuaalperifeeriaseadme impulssmodulatsioon ( PWM ) kasutamisel vajatakse vaid üht väljaviiku iga servomootori kohta . Negatiivse poole osas nimetatud veidrustega Java alamhulk on tegelikult põhjalikult läbimõeldud strateegia tulemus ja sellega on lihtne kaasa minna . Multilõimelisuse puudumist kompenseerib mõneti kuni kuue samaaegse virtuaalse perifeeriaseadme võimalus<arv>. Mälukoristus ei ole väikestes projektides suur probleem , pealegi jääb ära mure mäluhalduseks kuluva halvasti planeeritava ajaga , mis võib reaalaja rakendustes ootamatuid probleeme tekitada . Tuleb vaid vältida objektide korduvat või rekursiivset tekitamist ning leppida võimalikult paljude staatiliste muutujatega . Väikest jõudlust ja mälumahtu arvestades ei saa ette heita ka ujukoma- ja <arv>-bitise täisarvtüübi ( long ) puudumist . Mõnevõrra tülikas programmi kirjutamise seisukohalt on opereerimine ainult ühemõõtmeliste massiividega , kuid ka seda nõrkust on aruka koodikirjutamisega lihtne varjata . Ettevaatlik peab olema vaid standard-Java teekide kasutamisega , sest nendes pole Javelin-Java iseärasusi kuidagi arvesse võetud . Java arenduskeskkond ( sh. ahelasisene silumine ) on intuitiivselt haaratav ja kohe kasutatav ka algaja jaoks . Ahelasisene siluja lubab programmi peatada , sammhaaval lahendada , vaadata nii staatilisi kui ka dünaamilisi muutujaid ning suhelda Javeliniga katsetamise käigus üle terminaliakna . Hättajäänut aitab ka JIDE-st käivitatav sidusrežiimis tugi . KOMPASSMOODUL CMPS<arv>  Joonis <arv>. Kompassmoodul CMPS<arv> ( tegelikud mõõtmed <arv>,<arv> *<arv> , <arv> cm ) Internetis olevas teegis kahjuks kompassmooduli CMPS<arv> [ <arv> ] valmisklassi pole . Et moodul kasutab I<arv>C-liidest , siis võib tarkvaras kasutada kas otse I<arv>C-klassi meetodeid või luua uus kompassi klass , mis pärib funktsionaalsuse I<arv>C-klassilt . CMPS<arv> on küllalt keerukas andur , mis sisaldab firma Philips Maa magnetväljale tundlikke komponente , millelt loetavaid signaale töötleb omakorda firma Microchip PIC<arv>F<arv> mikrokontroller . Tervikmoodul sisaldab seega märkimisväärses koguses nii riist- kui ka tarkvaralist intellektuaalset omandit . Üle I<arv>C on kättesaadavad <arv> registrit , mis on kasutatavad nii magnetvälja andmete lugemiseks kui ka anduri häälestuseks . Vähim andmevahetustsükkel koosneb neljast ühebaidisest pöördumisest , millest kolm on protokolli- ja sisendinfo andurile ning neljas on tagastatav andmebait - näiteks anduri positsioon Maa magnetvälja suhtes . Kokku kestab selline tsükkel Javelin Stamp ja CMPS<arv> vahel <arv> ms , millest järeldub , et niisuguseid andmekogumisi jõuab teha sekundis maksimaalselt <arv>. Järgneval joonisel ongi esitatud neljabaidine andmevahetustsükkel kompassanduri poole .  Joonis <arv>. Kompassmooduli pöördumistsükkel koosneb kahest alamtsüklist - ( <arv> ) seadme aadress , reziimi määramine ja ( <arv> ) seadme aadress , lugemine Kompass võib olla deklareeritud järgmiselt : public class CMPS<arv> extends I<arv>C ] ... } <arv>-KANALILINE ANALOOG-DIGITAALMUUNDUR ADC<arv> Javelini virtuaalperifeeria seadmete hulka kuulub delta-sigma analoog-digitaalmuundur . See vajab Javelinilt kaht väljaviiku iga analoog-digitaalkanali kohta ( lisaks veel diskreetsete komponentidena kaht takistit ja kondensaatorit ) , mis on vähegi keerukamas keskkonnas mõeldamatu väljaviikude kulu . Siin on märksa otstarbekam kasutada Nationali jadaliidesega analoog-digitaalmuundurkiipe , mis nõuavad Javelinilt küll kolme väljaviiku , aga laiendavad analoogsisendite arvu kuni <arv>-ni ( konkreetselt kiip ADC<arv> ) . Paraku on Parallaxi kodulehelt saadavas valmisteegis olemas klass vaid ADC<arv> jaoks , mis on ühekanaliline muundur - sel juhul oleks väljaviikude kokkuhoiu mõttes tõesti parem kasutada Javelini sisseehitatud sigma-deltamuundurit . Samas , alusklassina on kood kasutatav ning sellest saab paari meetodi asendamisega tuletada keerukamate Nationali kiipide jaoks sobivaid klasse . Järgneval pildil ongi ühe ADC<arv> pöördustsükli salvestus . Esimese taktivalangu ajal toimub kanali aadressi ja muundusrežiimi saatmine ADC<arv>-sse , millele järgneb kiibi poolt kanali digitaalväärtuse väljastamine . Kogu pöördustsükkel kestab umbes <arv> ms , mis ei ole märkimisväärne ajaline kadu . Kui projekt peaks vajama veelgi enam analoogsisendeid , siis iga järgneva ADC<arv> kiibi lisamiseks vajatakse vaid üht lisasisendit ( valikusignaal ) Javelinilt , takti- ja andmeahel on taaskasutatavad . Analoog-digitaalmuunduri ADC<arv> klassi deklaratsioon : public class ADC<arv> extends ADC<arv> ] ... }  Joonis <arv>. Pöördumistsükkel analoog-digitaalmuunduri ADC<arv> ühe kanali väärtuse lugemiseks EEPROM MC<arv>LC<arv> Javelin sisaldab teadupärast nii <arv> kbaiti jadapöörduses EEPROM-mälu kui ka <arv> kbaiti rööppöörduses RAM-mälu . Programmi mahalaadimisel salvestatakse see EEPROM'i , mooduli initsialiseerimisel kopeeritakse programm kiiremaks lahendamiseks omakorda RAM'i . EEPROM-mälu programmist vaba osa võib kasutada andmete energiasõltumatuks säilitamiseks , kuid seda ei ole majanduslikult eriti otstarbekas teha . Nimelt on EEPROM'i ülekirjutus- tsüklite arv piiratud ja kuigi spetsifikatsioonis nimetatud vähemalt <arv> <arv> tsüklit tundub olevat suur arv tervikprogrammide mahalaadimisteks , siis programmi töö ajal on lihtne seda ülekirjutamislimiiti kas või kogemata väga lühikese ajaga täis saada . Javelini moodul maksab aga kümneid kordi enam kui üle I<arv>C-liidese kättesaadav väline <arv>-väljaviiguline jadapöördusega EEPROM-mälu . Näiteks firma Parallax kodulehelt saadavas valmisteegis on kirjeldatud <arv>-kilobaidise EEPROM MC<arv>LC<arv> klass . Selle väiksem sugulane , Microchip kiip MC<arv>LC<arv> on küll <arv> korda väiksema mahuga , kuid selle teevad väärtuslikus mõningad iseärasused , nagu eriti vastupidav <arv>-kilobitine aadressivahemik , mis talub vähemalt <arv> miljonit ümberkirjutamist , ja plokkide kirjutamiskaitse . Kuna kiibi tavakasutuses muid erisusi peale lühema aadressi pole , siis võib rahulikult kasutada suurema kiibi valmisklassi , millelt võib üle võtta ( pärida ) kõik vanema omadused ja lisada vaid meetodid kiibi erifunktsionaalsuse kasutuselevõtuks : public class MC<arv>LC<arv> extends MC<arv>LC<arv> ] ... } Üksiku baidi kirjutamiseks EEPROM'i juhuslikul aadressil tuleb tegelikult teha neljabaidine jadapöördus üle I<arv>C-liidese nagu kompassmooduligi korral , millest järeldub , et suurte andmemahtude salvestamiseks peab kõvasti aega varuma . Kui üksik pöördus võtab aega <arv> ms , jõuab sekundis teostada vaid <arv> mälupöördust . Pöördumine järjestikuste mälupesade poole on siiski kiirem , sest aadressi suurendamisega saab EEPROM ise hakkama ja nii saab Javelin lugeda-salvestada sekundis kuni <arv> baiti . VÕRDLUS TEISTE JAVA MOODULITEGA Disaineril , kes peab tegema otsuse ühe või teise platvormi kasuks , soovitaks vaadata Systronik veebis [ <arv> ] toodud tabelit JStik , TINI<arv> , TINI<arv> TStik , JStamp , SaJe , Javelin Stamp võrdluse kohta . Peab tunnistama , et selles võrdluses kuulub Javelinile tõesti kõige tagasihoidlikum koht , kuid osalt on see tingitud asjaolust , et õblukesele Javelinile polegi õigeid tema klassis võistlejaid ning seepärast on ta sattunud absoluutkaalu , kus kaasvõistlejad erinevad temast kõigis parameetrites kümneid kuni tuhandeid kordi . Ka hinna osas pole Javelin absoluutne liider - Dallas/Maximi TINI mudelite seerias leiab paar dollarit odavamagi , mis samas tootluselt lööb Javelini pika puuga .  Eespool toodud tabel ei too aga esile Javelini nišši , mida teised tootjad kuidagi ei ohusta - see on vähim energiatarve , vähimad mõõtmed , mooduli minimalistlik terviklikkus , Basic Stamp väljaviik-ühilduvus ja ilmselt nendest tulenev minimaalne aeg ning kulu ideest teostuseni . On aga selge , et kui rakendus on kõrge andmetootlus- ja mälunõudlusega , vajades kiireid liideseid ( sh Ethernet ) ja standardite järgimist , tuleb vaadata teiste tabelis pakutud moodulite poole . JAVELINI JAVA Nagu juba eeltoodud tabelist ja andmetest näha , ei hiilga Javelini protsessor tootlikkusega ning kasutatav mälumaht seab täiendavaid piiranguid . Sellest järeldub esmajoones mälukoristuse ( garbage collection ) puudumine e. kõik objektid , mis korra on loodud , jäävad mälu koormama , sõltumata nende kasutuse lõppemisest . Javelini loojad toovad seejuures positiivsena välja asjaolu , et kuna protsessor ei pea tegelema mälukoristusega , mille ajaline maht on halvasti ennustatav , sobib Javelin seda paremini reaalajatöötluseks . Muud erinevused : <arv>-bitine täisarv standardse <arv>-bitise asemel ( loomulikult puudub siis ka <arv>-bitine täisarv e. long-tüüp ) puudub märgita aritmeetika , st. niipea , kui vanem bitt on <arv>' , tõlgendatakse arvu negatiivsena ( baittüübi ( byte ) vahemik on -<arv> ... +<arv> ) . Ainsana on positiivse täisarvuna tõlgendatav sümboltüüp ( char ) , vahemik <arv> ... <arv> sümboltüüp pole mitte <arv>- vaid <arv>-bitine , sellest järelduvana koosneb ka stringtüüp <arv>-bitistest ASCII sümbolitest puudub ujukomatüüp ja ujukomaaritmeetika standardsed Java klassiteegid kas puuduvad või on erinevad , lisaks on Javelinil oma spetsiifilised klassiteegid puudub multilõimelisus ( on võimalikud väga lihtsad ja piiratud koodiga taustprotsessid , mis on realiseeritud sisemise taimeri katkestuse kaudu virtuaalperifeeria seadmetena ) Java liidesed ( interface ) puuduvad . On küll võimalik kirjeldada abstraktseid klasse , mida teised klassid laiendavad ainult ühemõõtmelised massiivid . Loetelu on pikk ja välistab koodi ristkasutuse standardset Javat toetavate protsessoritega . Samas , lihtsustused on läbimõeldult planeeritud , intuitiivselt hoomatavad ning annavad tulemusena odavaima terviklahenduse . Omaette pärl on Javelini integreeritud disainikeskkonna JIDE ( Javelin Integrated Design Environment ) kasutamisel standardväljundi ja -sisendi võimalus , st. silumisel saab Javelinile anda konsooli kaudu stringsisendit ja samamoodi saata Javelinilt teateid konsoolile . Niisiis klassikaline “ Hello World ! ” programm on vaevata kirjutatav ja väljastabki JIDE konsooliaknasse vastava teate : public class HelloProg ] public static void main ( ) ] System.out.println ( “ Hello World ! ” ) ; } } Loomulikult on sellisest System.out.println meetodist kasu ainult silumisfaasis - autonoomses töörežiimis , kui jadakaabel on ära võetud , lähevad kõik teated “ õhku ” . KOKKUVÕTE Javelin Stamp laiendab õnnestunult Parallax Stampide tooteperekonda , viies nende programmeerimise kõrgemale abstraktsioonitasemele . Javelin on kasutatav kõikides kontrollintensiivsetes rakendustes , millesse on sobitatud BASIC Stamp mooduleid . Java keele kasutamine seab Javelini ühte ritta nüüdisaegsete tehnoloogiatega ( nt. Dallas TINI [ <arv> ] , Sun JINI [ <arv> ] ) , mida jätkuvalt arendatakse , tehes mooduli atraktiivseks eelkõige õppetöös . Katsetused näitavad siiski Javelini vähest sobivust andmetöötlusrikastes rakendustes , milleks tal ei jätku lihtsalt jõudlust . Samas on mooduli hind tagasihoidlike killast , mis koos tasuta arenduskeskkonnaga teeb siirde ideest rakenduseni kiireks ning jõukohaseks igale õpipoisile , sellidest-meistritest rääkimata .  Marion Lepmets , Tallinna Tehnikaülikool i arvutitehnika instituut Mis on tarkvaraprotsesside parandamine ehk Software Process Improvement TARKVARA <arv>-<arv> Käesolev artikkel kirjeldab , kuidas parandada tarkvaraprotsesse , et tõsta tarkvara kvaliteeti . Samuti käsitleb see laiemalt levinud protsessimudeleid ja -standardeid , mida protsesside hindamisel ja parandamisel saab abiks võtta . Seda lühikest kokkuvõtet ajendasid kirjutama viimasel aastal Eestis tehtud uurimistööd , milles tarkvaraprotsesside parandamist ja protsessimudeleid käsitletakse ebatäpselt . Tihtipeale ei tehta erinevate protsessimudelite ja -standardite vahel vahet . Samuti arvatakse , et protsesse võivad hinnata kõik , kes on tarkvarahindamise mudelit lugenud . Järgnev annabki ülevaate , kuidas ja kes tarkvaraprotsesse hinnata ning parandada saab . Tarkvaraprotsesside parandamisest räägitakse viimastel aastakümnetel aina enam . Selle üheks põhjuseks peetakse asjaolu , et protsesside parandamisega tõuseb toote kvaliteet ja suureneb arendajate teadlikkus , samal ajal lüheneb tarkvara tootmistsükkel ehk kasvabarendusfirma tootlikkus . Tarkvara kvaliteeti on võimalik parandada mitmel viisil . Levinumad teed on tarkvaratoote kvaliteedi , ressursi kvaliteedi või protsesside kvaliteedi parandamine . Esimesed kaks saavutatakse toodet testides ja arendajat koolitades . Selleks et parandada tarkvara tootmisega seotud protsesse , peab kõigepealt teadma , mida parandada . Tarkvaraprotsesse hinnataksegi selleks , et teada saada , mis seisus protsessid firmas hindamise hetkel on , seejärel hakatakse halvas olukorras protsesse parandama . Tarkvara tootmisega seotud protsesside hindamise tarvis on olemas mitmeid tarkvaraprotsessi mudeleid ning standardeid , tuntumad neist on Capability Maturity Model for Software ( CMM-SW ) ning ISO/IEC TR <arv> ( SPICE ) . Sellised tarkvaraprotsessi standardid nagu ISO/IEC <arv> ja ISO/IEC <arv> ei ole loodud tarkvaraprotsesside hindamiseks , sest neis pole vajalikke hindamiskriteeriumeid . Nimetatud standardite eesmärk on kirjeldada protsesse , mis vastavalt tarkvara või süsteemi pakkumise , arendamise ning hoolduse jaoks peaksid arendusfirmas olemas olema . Protsessipõhine lähenemine tarkvaratootmisele sai alguse arendusmetoodikate loomisest , mille tulemusena võeti kasutusele sellised mudelid nagu kose ( waterfall model ) ja Boehmi spiraali mudel ( spiral model ) . <arv>. aastatel pani Watts Humphrey aluse protsessikesksele lähenemisele tarkvara arendamises . Humphrey vaatles kogu tarkvara arendamist kui protsesside jada , kus igat protsessi on võimalik mõõta ning parandada . Watts Humphrey tegevusest arenes välja organisatsiooni küpsuse mudel ( Software Maturity Framework ) , mis on aluseks tänapäeval USAs ja Aasias kõige populaarsemale tarkvaraprotsessi mudelile CMM-SW . Seejärel on tarkvaraprotsesside parandamist hoogustanud uued protsessimudelid ja -standardid , mille esimeseks tellijaks USAs oli kaitseministeerium ja Euroopas Rahvusvaheline Standardimise Organisatsioon ( ISO ) . [ <arv> ] CAPABILITY MATURITY MODELS Aastal <arv> kirjeldas Watts Humphrey tarkvara küpsuse mudelit ( Software Maturity Framework ) , mille abil on võimalik hinnata kogu tarkvara arendusfirma küpsustaset . Sellest algsest mudelist on erinevate firmade tarbeks ajapikku välja arenenud rida küpsusmudeleid , millest tarkvara alal kaks tuntumat on CMM-SW , mille andis välja Software Engineering Institute ( SEI ) <arv>. aastal [ <arv> ] , ning Capability Maturity Model Integration ( CMMI ) , mis anti välja <arv>. aastal [ <arv> ] . CAPABILITY MATURITY MODEL FOR SOFTWARE CMM-SW mudel sisaldab nõudeid tarkvara kvaliteetsele arendamisele . Selle mudeli abil on võimalik hinnata tarkvara arendus- ning arendamisega seotud protsesside ja selle kaudu kogu tarkvarafirma küpsust . CMM-SW kirjeldab viit küpsuse taset , millest igal on nõuded teatud protsessidele . Soovitud taseme saavutamiseks peab tarkvarafirma täitma kõik nõuded protsessidele , mida sel tasemel nõutakse . Puuduste esinemisel järgmise taseme protsesse hindama ei asuta , vaid kõigepealt parandatakse puudulikud protsessid . Seega näitab CMM-SW , millised protsessid peavad firmal olema korras , et soovitud taset saavutada . Protsesse aitab CMM-SW alusel hinnata SEI loodud CBA IPI ( Capability Maturity Model-Based Assessment Internal Process Improvement ) metoodika [ <arv> ] . CAPABILITY MATURITY MODEL INTEGRATION CMMI erineb CMM-SW mudelist mitme protsessidele seatud nõude poolest . Peamiseks erinevuseks on aga see , et CMMI mudelil on kaks varianti : CMMI tasememudel ja CMMI jätkuv mudel , vastavalt staged- ja continuous-mudel . Tasememudel sarnaneb ülesehituselt ja loogikalt CMM-SW mudeliga . CMMI jätkuv mudel erineb neist selle poolest , et selle alusel ei ole võimalik hinnata kogu organisatsiooni küpsustaset , vaid hinnatakse iga protsessi küpsustaset eraldi . Seega on CMMI jätkuv mudel paindlikum , võimaldades tarkvara arendusfirmal hinnata kõigepealt just talle olulisemaid protsesse . Protsesside hindamise tarvis CMMI mudelite alusel on SEI välja töötanud SCAMPI ( Standard CMMI Appraisal Method for Process Improvement ) metoodika [ <arv> ] . ISO/IEC TR <arv> <arv>. aastal loodi projekt nimega SPICE ( Software Process Improvement and Capability dEtermination ) , mille eesmärk oli luua rahvusvaheline standard tarkvaraprotsesside hindamiseks ja parandamiseks . Standardi loomisse kaasati tarkvarafirmasid : selgitati välja nende protsesside hindamise vajadused ja katsetati hindamise mudelit selle arendamise perioodil tagasiside saamise eesmärgil . <arv>. aastal anti välja ISO/IEC TR <arv> , mis ei ole rahvusvaheline standard , vaid tehniline raport . ISO/IEC TR <arv> peaks saama rahvusvaheliseks standardiks <arv>. aastal . ISO/IEC TR <arv> , mis kannab ka nime SPICE , koosneb kahest mudelist : normatiivne ehk etalonmudel [ <arv> ] ja protsesside näidishindamismudel [ <arv> ] . Erinevalt CMM-SW mudelist ja sarnaselt CMMI jätkuva mudeliga on SPICE'i alusel võimalik hinnata tarkvaraprotsesside suutlikkust protsesside kaupa , mitte aga kogu organisatsiooni küpsust.Seega alustatakse tavaliselt protsesside prioritiseeri- misest , mida seejärel vastavas järjekorras hindama asutakse . SPICE <arv>-osalises dokumentat- sioonis on ka mudel [ <arv> ] , mis kirjeldab kogu protsesside hindamise ja parandamise protsessi . AMETLIK HINDAMINE JA NÕUDED HINDAJALE Selleks et ametlikult hinnata tarkvaraprotsesse SPICE'i , CMM-SW või CMMI protsessimudeli alusel , peab hindaja olema selleks koolitatud ja sertifitseeritud . Kuigi nõuded on sätestanud erinevad organisatsioonid - ISO SPICE'i ja SEI CMM-SW'i ning CMMI mudeli hindajale , on need väga sarnased . Sertifitseeritud hindajal peab olema tehniline kõrgharidus , varasem kogemus nii tarkvara arendamisel kui ka tarkvaraprotsesside hindamisel ning ta peab olema läbinud vajaliku koolituse . SPICE'i puhul peab sertifitseeritud hindajal olema kogemust kõigis viies SPICE'i protsessikategooria valdkonnas . Samuti peab tal olema varasem tarkvaraprotsesside hindamise kogemus ning ta peab olema läbi teinud vastava koolituse . Kompetentne SPICE'i sertifitseeritud hindaja ( Certified SPICE Assessor ) peab igal aastal hindama tarkvaraprotsesse . SPICE ajutine hindaja ( Provisional SPICE Assessor ) peab olema tarkvara arenduse kogemusega ning tehnilise kõrgharidusega ja koolitatud SPICE-alal samuti nagu serfitseeritud hindaja . Ajutisel hindajal ei pea olema varasemat protsesside hindamise kogemust SPICE-mudeli alusel [ <arv> ] . Eestile lähimaks ja sellega aastaid tegelenud SPICE'i sertifitseerimise keskuseks on FiSMA ( Finnish Software Metrics Association ) Soomes [ <arv> ] . CMM-SW alusel organisatsiooni küpsuse hindamiseks peab hindajal olema SEI autoriseeritud CBA IPI juhtiva hindaja sertifikaat ( CBA IPI Lead Assessor ) . Sertifikaadi saamiseks peab läbima kolm erinevat CMM-SW-alast koolitust ning rahuldama järgmised nõuded : <arv>aastane töökogemus tarkvara arendamisel , <arv>aastane töökogemus tarkvara projektijuhina , tehniline kõrgharidus ning viimase kahe aasta jooksul peab ta olema osalenud vähemalt kahes ametlikus tarkvaraprotsesside hindamises CMM-SW alusel [ <arv> ] . CMMI mudeli alusel tarkvaraprotsesside küpsuse hindamiseks peab olema hindajal SCAMPI juhtiva hindaja sertifikaat . Nõuded on samad mis CBA IPI puhul : <arv>aastane töökogemus tarkvara arendamisel , <arv>aastane töökogemus tarkvara projektijuhina , tehniline kõrgharidus ning viimase kahe aasta jooksul peab ta olema osalenud vähemalt kahes ametlikus tarkvaraprotsesside hindamises CMMI alusel [ <arv> ] . TARKVARAPROTSESSIDE HINDAMINE EESTIS Usun , et üha suuremal hulgal Eesti tarkvarafirmadel on rahvusvaheline klientuur , see nõuab tarkvara kvaliteedi konkurentsivõimelisuse tõestamist rahvusvahelisel turul [ <arv> ] . Oma tegevuse kvaliteeti saabki tõestada eelnimetatud tarkvara standardite ja mudelite abil . CMM oli esimene tarkvaraprotsessi hindamise mudel , mis <arv>ndate keskel Eestis kasutusele võeti . SPICE-mudelit tutvustas Eesti tarkvarafirmadele <arv>. aastal Risto Nevalainen Soome tarkvarameetrika assotsiatsioonist ( FiSMA ) . Risto Nevalainen on viimastel aastatel aidanud luua Balti riikidesse sarnaste tegevuseesmärkidega tarkvarameetrika assotsatsiooni - Baltic Software Metrics Association ( BaSMA ) , mis kuulub rahvusvahelise tarkvarameetrika assotsatsioonide võrgustikku ( International Network of Metrics Associations ) [ <arv> ] . <arv>. aastal osales Eesti Euroopa Komisjoni COPERNICUS-programmi raames toimuvas INSPIRE projektis , mille eesmärk oli suurendada rahvusvaheliste tarkvarastandardite kasutuselevõttu Kesk- ja Ida-Euroopas . Projektis osales neli Eesti tarkvarafirmat , SPICE-mudeli alusel hinnati tarkvaraprotsesse , et leida problemaatilisi kohti ning luua tarkvaraprotsesside parandamise kavasid . Kõik neli tarkvarafirmat pidasid tarkvaraprotsesside parandamist vajalikuks tegevuseks , mille käigus paraneb toote kvaliteet ning tarkvara arendajad saavad uusi teadmisi ja oskusi . TARKVARAPROTSESSIDE HINDAMINE JA PARANDAMINE SOOMES Viimasel kolmel aastal olen osalenud tarkvaraprotsesside hindamise ja parandamise töös Soomes . Peamiselt tegeles meie uurimisgrupp väikestes ja keskmise suurusega tarkvarafirmades tarkvaraprotsesside hindamisega SPICE-mudeli alusel [ <arv> ] . Kuna paljud tarkvarastandardid , k.a. tarkvaraprotsesside hindamise mudelid , on loodud eelkõige suurtele tarkvarafirmadele , siis peavad väikesed ja keskmise suurusega tarkvarafirmad neid oma vajadustele kohandama . Soomes on tarkvarafirmade eest selle keerulise töö ära teinud FiSMA ja loonud detailse tarkvaraprotsesside hindamise mudeli nimega FiSMA SPICE . See vastab SPICE'i etalonmudeli nõuetele ja on kohandatud väikese ja keskmise suurusega firma vajadusi arvestades . Ka BaSMA'st [ <arv> ] peaks lähiajal saama elujõuline organisatsioon , mis koostöös eelkõige FiSMA'ga saaks hakata pakkuma Eestis tarkvaraprotsesside hindamise ja parandamise alaseid teadmisi . MÕISTEID Tarkvaraprotsess hõlmab kõiki tarkvaratehnilisi ja halduslike tegevusi , mille abil kliendi soovid arendatakse tarkvaraks [ <arv> ] . Tarkvaraprotsesside parandamine tähendab meetmeid organisatsiooni protsesside muutmiseks , nii et need vastaksid organisatsiooni ärivajadustele ja saavutaksid tõhusamalt oma ärieesmärke [ <arv> ] . Tarkvaraprotsesside hindamine on organisatsiooni tarkvaraprotsesside korrakohane hindamine etalonmudeliga ühilduva mudeli alusel [ <arv> ] .  Ants Torim , TTÜ informaatika instituudi doktorant SISSEJUHATUS Objektorienteeritud lähenemise hetkeseisu on iseloomustatud mitmeti - nii võidukäigu kui ka läbikukkumisena . B. Meyer [ <arv> ] väidab , et suhtumine “ Me teame objektidest kõik , siin pole midagi uut ” on laialt levinud , kuid suures osas põhjendamatu . Kuigi paljud insenerid ja juhid on tuttavad objektitehnoloogia põhieesmärkidega , on ainult vähesed tõesti mõistnud sügavamaid printsiipe ja hakanud neid põhjalikult rakendama . Selge näib siiski , et objektitehnoloogia on kaotanud aja jooksul uue ja vähetuntud tehnoloogia imidži , saavutades samas suurema küpsuse . Üheks oluliseks läbimurdeks teel suurema küpsuse poole võib pidada OO disainimustreid [ Gamma , <arv> ] [ Eessaar , <arv> ] , mis kirjeldavad tüüpprobleemide läbiproovitud lahendusi . Antud artiklis võetakse disainimustrite asemel vaatluse alla disaini printsiibid , tutvustades eeskätt põhjalikku käsitlust , mis on antud äsjailmunud raamatus [ Martin , <arv> ] . Kui muster kehtib mingi tüüpprobleemi kontekstis ja hõlmab mingit osa disainist , siis printsiip pretendeerib üldkehtivusele ja hõlmab disaini tervikuna . Selline vahetegemine nende kahe vahel ei ole üldaktsepteeritud ( näiteks [ Larman ] vaatleb mustritena ka väga üldisi printsiipe ) , aga näib siiski mõttekas . ÜHESE VASTUTUSE PRINTSIIP Kui palju ülesandeid peaks üks klass täitma ? Ühese vastutuse printsiip üritab sellele küsimusele vastata . Sarnast printsiipi kirjeldas Tom DeMarco <arv>. aastal kohesiooni nime all [ DeMarco , <arv> ] ja selle printsiibiga on analoogiline kõrge kohesiooni disainimuster [ Larman <arv> ] . Printsiip ise on järgmine : Klassil peab olema ainult üks põhjus muutuda . [ Martin , <arv> ] [ MartinSRP ] Kui klassil on mitu põhjust muutuda , siis on tal ka mitu vastutust . Erinevateks vastutusteks on näiteks objektide äriloogika , objektide kasutajaliideses nähtavaks tegemine ja objektide haldamine andmebaasis . Sellele printsiibile võib kujutada ette järgnevaid vastuväiteid : Miks peaks üks klass täitma samal ajal ainult ühte ülesannet ? Kas saaks olla midagi loomulikumat kui see , et klass , mis omab mingit äriloogikat , suudab end samal ajal ka andmebaasi salvestada ja kasutajaliideses kuvada ? Milleks on vaja sellist klassi kolmeks tükiks lõhkuda ? Siin tooksin näite oma magistritööst [ Torim , <arv> ] . Meil on tegemist teatud liiki andmestruktuuridega - monotoonsed süsteemid - ja ülesanneteks on : <arv> ) andmestruktuuri elementide järjestamine kaalude järgi ( äriloogika ) <arv> ) monotoonse süsteemi visualiseerimine ( kasutajaliides ) . Oletame , et kombineerime need ülesanded ühte klassi Monotoonne süsteem . Tulemuseks saame järgmise disaini :  Klass Monotoonne süsteem vastutab andmestruktuuri elementide järjestamise ( sordi , min , max , ... ) ja andmestruktuuri kasutajaliideses visualiseerimise eest ( kuva , ... ) . Monotoonset süsteemi kasutavad Käsurea rakendus ja GUI rakendus ( GUI ingl. k. - Graphical User Interface ) . Monotoonne süsteem kasutab visualiseerimisülesande täitmiseks Graafikapaketti. Käsurea rakendus ei vaja Monotoonse süsteemi kasutajaliidese loogikaga seotud osa . Millised probleemid võivad sellise disaini juures tekkida ? Igasuguse tarkvara juures on sagedaseks vajaduseks selle tarkvara muutmine ja modifitseerimine . Kui nimetatud disaini on vaja sisse viia kasutajaliidese toimimist puudutav muudatus , näiteks sortimise järel kasutajaliideses kuvatava info automaatne muutmine , siis on oht , et see võib mõjutada ka Käsurea rakendust , mis tegelikult kasutajaliidest ei vaja . Seega on selline disain habras - muudatus võib lõhkuda süsteemi kohtades , mis ei tohiks sisseviidava muudatusega üldse seotud olla . Teiseks probleemiks on piiratud korduvkasutus . Et Monotoonne süsteem sõltub Graafikapaketist , siis on vaja koos Käsurea rakendusega installeerida ka Graafikapakett . Halvemal juhul hüppavad Käsurea rakenduse toimimise ajal ette kasutajaliidese aknad või kasutajaliidesega seotud veateated . Seega pole selline disain kuigi korduvkasutatav . Ühese vastutuse printsiibi rakendamisel võiks disain välja näha järgmine :  Monotoonne süsteem on jagatud vastutuste järgi kaheks klassiks : Monotoonne süsteem ja Monotoonse süsteemi GUI . Omavahel on need kaks klassi seotud kas läbi pärimise või delegeerimise . Monotoonne süsteem ja Käsurea rakendus ei sõltu enam klassist Graafikapakett . Korduvkasutuse ja disaini hapruse probleemid on lahendatud . Kasutajaliidese toimimisloogika muutmine ei saa enam kuidagi mõjutada Käsurea rakendust ja Monotoonne süsteem on korduvkasutatav ilma Graafikapaketita . Mõningaks probleemiks on suurenenud keerukus - üks klassidefinitsioon on rohkem , kuid antud juhul kaaluvad eelised selle üles . Üldistatult võiks sellist printsiibi rakendust kujutada järgmiselt . Disain enne ühese vastutuse printsiibi rakendamist  Klass Mitu vastutust omab kahte vastutust . Klassi Mitu vastutust teenuseid kasutavad klassid Klient<arv> ja Klient<arv> ( kliendid klassi pakutavate teenuste kasutamise mõttes , mitte klientarvutid vms. ) . Klass Mitu vastutust kasutab klassi Server ( server jällegi meie klassile teenuste pakkumise mõttes , mitte serverarvuti vms. ) teenuseid . Kliendid ja Server võivad olla ka mahukad paketid või teegid . Disain pärast ühese vastutuse printsiibi rakendamist  Klass Mitu vastutust on jagatud vastutuste järgi kaheks klassiks Vastutus<arv> ja Vastutus<arv>. Vastutus<arv> ja Klient<arv> ei sõltu enam klassist Server . AVATUD-SULETUD PRINTSIIP Avatud-suletud printsiibi probleemistikuks on muudatuste sisseviimine olemasolevasse süsteemi ja olemasoleva tarkvara kohandamine uutele nõudmistele . Avatud-suletud printsiibi sõnastas <arv>. aastal Bertrand Meyer oma raamatus Object-Oriented Software Construction , millest on ilmunud ka teine trükk [ Meyer , <arv> ] . Meyeri sõnastuses : moodulid peavad olema nii avatud kui ka suletud . Näivat vastuolu leevendab täpsem sõnastus : Tarkvaraolemid ( klassid , moodulid , funktsioonid jne. ) peavad olema avatud laiendamisele , aga suletud muutmisele . [ Martin , <arv> ] [ Martin , OCP ] Avatud laiendamisele tähendab , et tarkvaraolemi käitumist peab saama täiendada . Suletud muutmisele tähendab , et selline täiendus ei tohi muuta olemasolevat mooduli kirjeldust ( lähtekoodi ) . Võimalused seda sorti laiendamiseks annab OO-tehnoloogias pärimise ja abstraktsiooni kasutamine . Me võime defineerida uue käitumisega klassi , pärides vana klassi omadused ja defineerides need uues klassis sobivas kohas ümber . Võime muuta klassi käitumist , asendades mõne sellele klassile teenuseid pakkuva klassi samale abstraktsele liidesele vastava klassiga . Printsiip kehtib nende moodulite kohta , mis on valmis ja toimivad korralikult - lihtsalt on tekkinud vajadus teistsuguse käitumisega variatsiooni järele . Poolelioleva või vigase mooduli muutmist avatud-suletud printsiip ei keela . Sellele printsiibile võib kujutada ette järgmisi vastuväiteid : Milleks keelata ära toimiva mooduli muutmine ? Jah , olemasoleva mooduli muutmine , juhul kui sellest sõltub hulk olemasolevaid klientmooduleid , on tõesti ohtlik . Aga on ju selline lihtne võimalus nagu Copy/Paste ! Teeme moodulist koopia ja muudame koopiat ! Kas printsiibi autorid on tõesti nii ajast maha jäänud , et ei tunne sellist lihtsat võimalust ? Nii see küll ei ole . Copy/Paste lahendus võimaldab variatsioone kiiresti genereerida , kuid tekitab probleemi suure hulga erinevate moodulite haldamisega - algmoodulite variatsioonide arvu plahvatuslik kasv , paljud neist üksteisele väga sarnased , kuid mitte iial täpselt identsed [ Meyer , <arv> ] . Juhul kui näiteks algmoodulis juhtus olema märkamata jäänud viga , siis tuleks see parandada kõigis variatsioonides - nende ülesotsimine ja paranduste sisseviimine pole just meeldiv ülesanne . Illustreeriksin printsiipi jälle näitega oma magistritööst [ Torim , <arv> ] . Monotoonsete süsteemide analüüsimiseks saab kasutada mitut erinevat algoritmi . Kaks neist - Miinustehnika ja Plusstehnika - erinevad ainult eemaldatava elemendi valimise eeskirja poolest . Miinustehnika oli realiseeritud enne Plusstehnikat . Juhul kui Plusstehnika oleks realiseeritud Miinustehnika klassi kopeerides ja muutes , näeks disain välja järgmine :  Miinustehnika demo ja Plusstehnika demo on nimetatud algoritmide demonstratsioonprogrammid . Miinustehnika muutmine Plusstehnikaks ilma koopiat tegemata ei tule loomulikult üldse kõne alla , sest see lõhuks Miinustehnika demo . Avatud-suletud printsiibi rakendamisel näeks disain välja järgmine .  Plusstehnika pärib Miinustehnika omadused , defineerides ümber meetodi leia_eemaldatav ( šabloonmeetodi disainimuster [ Gamma , <arv> ] - meetodi rakenda käitumine muutub , sest tema kasutatav meetod leia_eemaldatav on ümber defineeritud ) . Erinevalt eelnevast disainist ei dubleerita mõlemale tehnikale ühist osa ja seos tehnikate vahel on pärimisseose kaudu selgelt välja toodud . Üldistatult võiks sellist printsiibi rakendust kujutada järgnevalt . Disain ilma avatud-suletud printsiibi rakendamiseta  Muudetu on Algse variatsioon , saadud koopia muutmise teel . ( Algsesse otsene muudatuste sisseviimine lõhuks Algse kliendi . ) Muudetu dubleerib osi , mis tal on Algsega samad . Disain avatud-suletud printsiibi rakendamisega  Laiendaja on Algse variatsioon , saadud pärimise teel . Dubleerimist ei ole , seos variatsioonide vahel on läbi pärimise selgelt välja toodud . VEEL PRINTSIIPE Järgnevalt annan lühikese loetelu printsiipidest , millel see artikkel lähemalt ei peatu ( mis ei tähenda , et need oleksid vähem olulised ) .  Printsiibi nimi Definitsioon Viited Liskovi asendatavuse printsiip Alamtüübid peavad olema võimelised oma baastüüpe asendama [ Martin , <arv> ] , [ Martin , LSP ] , [ Liskov , <arv> ] Sõltuvuste inversiooni printsiip a. Kõrgtaseme moodulid ei peaks sõltuma madaltaseme moodulitest . Mõlemad peaksid sõltuma abstraktsioonidest b . Abstraktsioonid ei peaks sõltuma detailidest . Detailid peaksid sõltuma abstraktsioonidest [ Martin , <arv> ] , [ Martin , DIP ] Liideste segregatsiooni printsiip Kliendid ei peaks sõltuma meetoditest , mida nad ei kasuta [ Martin , <arv> ] , [ Martin , ISP ] Madal sõltuvus Jaota vastutusi nõnda , et sõltuvused jääksid madalaks [ Larman , <arv> ] KOKKUVÕTE Kõigi käsitletud ja loetletud printsiipide kirjeldused on saadaval Internetist aadressil ( vt. viited ) . Objektitehnoloogiahuvilisel tasub kindlasti nendega tutvuda . Esitatud printsiibid ei pretendeeri sellele , et nad oleksid universaalselt “ head ” , eesmärgid , mida nad saavutada üritavad , on selgelt sõnastatud . Läbivateks teemadeks on siin korduvkasutuse ja tarkvara lihtsa muudetavuse tagamine , seega on need printsiibid suunatud eeskätt tarkvara evolutsioonilisele arendamisele .  Paul Leis , <arv> , Artikli selle osa kirjutamisel on kasutatud Eesti Ühispanga infoturbe spetsislisti Risto Laanoja käsikirjalisi materjale . SISSEJUHATUS Viimasel ajal on ägenenud häkkerlus , ründed infosüsteemidele , haruldased pole ka infotehnoloogilised kuriteod . Nii mõnigi firma on juba tõsiselt kannatada saanud . Globaaltasandil ei välistata kübersõdu . Firma infoturvet korraldab infoturbe juht . Mis ülesanded on infoturbe juhil , milles seisneb infoturbe korraldamine ? Et meie kõrgkoolid ( seni veel ? ) niisugusel erialal spetsialiste ei koolita ( infoturbe loengukursused on aga Eesti kõigis infotehnoloogiat õpetavates kõrgkoolides ) , siis pole ehk liiast pisiülevaade infoturbe juhi elukutsest . ” INFOTURBE JUHI AMET ON IMELIHTNE ” Infoturbe juhi lühike käsulaud : Ära püüa aru saada süsteemidest , mida sa turvama pead - piisab , kui kasutad oma kogemusi ja intuitsiooni . Ära krüpti andmebaase , eriti neid , mis sisaldavad tundlikke andmeid . Ära installeeri opsüsteemi ( andmebaasihaldesüsteemi jne. ) korrektsioone ( “ paikasid ” ) - see on liiga aeganõudev , süsteemi uues versioonis on korrektsioonid niigi sees . Kui töötaja firmast lahkub , jäta kehtima tema pääsuõigused - ei või iial teada , millal tal miskit vaja võib minna . Ära koosta turvapoliitikaid , -meetmeid ega -reegleid . Sa tead niigi , mida on vaja teha . Kui firmal siiski mingi turvapoliitika on , ära selle tähtsust üle hinda . Et turvapoliitikat keegi ajakohastanud pole , on see ilmselt vananenud . Printsiipi “ tee seda , mis kirjas , ja pane kirja mis teed ” ( “ do what you say and say what you do ” ) ära võta tõsiselt , ammugi pole mõtet seda toimimisjuhiseks pidada . Püüa infoturve täies ulatuses sisse osta - miks peaks firmas keegi infoturbele aega kulutama ja infoturbe probleemidega pead murdma . Pealegi - ehk saab nii ka vastutuse enda kaelast ära sokutada . Mitte mingil juhul ära raiska aega infosüsteemide inventuurile ega firma arvutivõrgu dokumenteerimisele . Anna kõigile töötajatele võimalikult suured õigused kõigis infosüsteemides . Kõik peavad kõigele ligi pääsema - see on demokraatlik ja õiglane , pealegi langeb nii ära ka tülikas pääsuõiguste haldamise probleem . Tugine ainult tehnoloogiale - tulemüürid , krüptimine ja viirusetõrje tarkvara on kõik , mida vajad . Ära raiska aega talitluspidevuse plaanide koostamisele - sa ju ei kaota pead ja oled piisavalt nutikas ka keerulises hädaolukorras . Pole mõtet kulutada raha seiresüsteemidele - kui midagi juhtub , saad sellest niigi teada . Ka varukoopiate tegemisel pole mõtet - see on vaid aja ja lintide raiskamine . Aga kui varukoopiaid siiski sunnitakse tegema , pole vaja testida nendelt andmete taastamist - küll andmed vajaduse korral kätte saab . Häkkerite rünnetega võitlemisel lähtu printsiibist “ probleemidega tegeldakse siis , kui nad esile kerkivad ” . Parooliks on sobivaimad sinu enda , sinu koera , naise või ämma nimi - on kindel , et nii sa paroole ei unusta . Siiski tuleks nad kindluse mõttes kleepida ka klaviatuuri alla ( kollase kleepsuga kuvari külge ei pane paroole enam keegi ) . Parooliasjanduse lihtsustamiseks võib samu ülesandeid täitvatel töötajatel sama parool olla . Paroole ( regulaarselt ) uuendada pole vaja , see tekitab ainult segadust . Kõige vähem segadusi tekib , kui valida parooliks “ parool ” . Töötajate infoturbealasel koolitusel ja treeningutel mõtet pole - las igaüks tegeleb parem oma põhitööga . INFOTURBE ORGANISATSIOONIST Infoturve seisneb firma infovarade käideldavuse , terviklikkuse ja konfidentsiaalsuse tagamises võimalikult väheste kulutustega , st. efektiivselt . Efektiivsus on siin äärmiselt oluline - vara kaitsmiseks tehtavad kulutused ei tohi ületada varade väärtust . Firma infoturbe eest vastutab firma tegevjuht . Infoturbe tagamiseks vajalike poliitikate , meetmete ja reeglite väljatöötamise tagab infoturbe grupp/osakond , mida juhib firma infoturbe juht ( Information Systems Security Officer , ISSO ) . Mõnes firmas kutsutakse seda ametit “ andmeturbe juht ” - ameti olemus sellest ei muutu . Infoturbe organisatsiooni loomisel on esimeseks küsimuseks , kellele infoturbe juht allub . Kaaluda võib nelja variandi vahel ( eksootilisemaid me ei vaatle ) : firma tegevjuht firma audiitorite grupi juht firma ( füüsilise ) turbe juht firma IT-juht Kõigil neil variantidel on oma positiivsed ja negatiivsed küljed , iga firma peab otsustama , milline neist variantidest talle kõige otstarbekam on . Infoturbe juhi allutamine firma tegevjuhile ( ka juhatusele või nõukogule ) tagab infoturbe juhi sõltumatuse IT valdkonna juhtkonnast ( IT-juhist ) . Positiivne : pole probleeme kehtestada vajalikke , kuid IT-le ebamugavaid infoturbe poliitikaid , meetmeid ja reegleid ning nende täitmist nõuda/kontrollida . Negatiivne : firma tegevjuht pole IT ja infoturbe probleemides piisavalt kompetentne , ka pole tal aega infoturbega tegeleda , seetõttu ei suuna ega kontrolli inforturbe juhi tegevust keegi . Pole haruldane , et niisuguse struktuuri korral koostatakse infoturbemeetmeid ja - reegleid “ raamatute järgi ” , arvestamata nende täitmise võimalikkust , otstarbekust ja kulukust . Näiteks võib kulutada palju ressursse mitteoluliste turvariskide vältimiseks/leevendamiseks , jättes samal ajal olulised ohud likvideerimata - kõike ju ei jõua . Nii luuakse eeltingimused infoturbe juhi ja IT konfliktiks . Infoturbe juhi allutamine firma audiitorite grupi juhile . Positiivne / Negatiivne ( võib olla nii positiivne kui ka negatiivne sõltuvalt realisatsioonist , isikutest ) : üks osa audiitorite grupi juhi alluvatest koostab poliitikaid , meetmeid ja reegleid , teine osa kontrollib nende vastavust kehtivatele õigusaktidele . Ka selle variandi puhul on ohuks infoturbe juhi võõrandumine IT-st . Infoturbe juhi allutamine firma ( füüsilise ) turbe juhile . Positiivne : firma turbe terviklik juhtimine , võimalik parem informeeritus ja koostöö turvaorganisatsioonis tervikuna . Sageli on vaja turvajuhtumite analüüsil/käsitlemisel füüsilise ja infoturbe juhi tihedat koostööd . Negatiivne : firma turbe juht pole IT ja infoturbe probleemides piisavalt kompetentne , infoturbe juht võõrandub IT-st . Infoturbe juhi allutamine firma IT-juhile . Negatiivne : “ kits kärneriks ” - kui infoturbe juhile maksab palka IT-juht , siis võib probleemiks olla IT-le ebasoodsate , kuid vajalike regulatsioonide kehtestamine . Positiivne : IT juht on IT probleemides kompetentne , regulatsioonide kehtestamisel saab toetuda IT reaalsete töömeetodite tundmisele . Et IT juht vastutab IT valdkonna eest tervikuna , siis praktikas on “ kits kärneriks ” sündroom haruldane . Näide . Firmas X allub infoturbe juht IT-juhile . Ülalnimetatud ebasoovitavate mõjude leevendamiseks ja turvatöö tõhustamiseks on loodud regulaarselt koos käiv firma turvakomitee , mille liikmeteks on kõigi firma turvaprobleemidega tegelevate üksuste juhid . Turvakomitee korraldab firma turvategevust tervikuna ja raporteerib firma juhatusele , olles nii IT-juhist sõltumatu ja turvaprobleemides ka IT-juhile ülimuslik organ . Analoogiliselt tuleb ka teiste ülaltoodud variantide puhul rakendada täiendavaid organisatsioonilisi meetmeid nende variantide negatiivsete külgede leevendamiseks . INFOTURBE SPETSIALIST Infoturbe korraldamisel osalevad mitmed erinevad spetsialistid , kes ei pruugi kuuluda infoturbe gruppi/osakonda ( ja seega ei allu andmeturbe juhile ) : infosüsteemide turvaadministraator - infrastruktuuri turvasüsteemide administreerimine infosüsteemide turvaanalüütik - infrastruktuuri turvasüsteemide kavandamine infosüsteemide turvainsener - infrastruktuuri turvasüsteemide loomine , ülalhoid . Siinkohal loetlesime nn. üldistatud erialasid , konkreetse firma puhul on nendel erialadel konkreetne sisu , näiteks tulemüüride administraator . Infotehnoloogias spetsialiseeruvad spetsialistid järjest kitsamalt ( “ spetsialist teab kõike mittemillestki , juht teab mittemidagi kõigest ” ) . Eestis pole kõrgkoolis nii kitsas spetsialiseerumine mõeldav , seetõttu tuleb infoturbespetsialiste infotehnoloogilise üldhariduse taustal täiendavalt koolitada . Mõistetavalt on vajalik andmeturbe juhi ja ülalnimetatud spetsialistide koostöö , et välistada ebaotstarbekaid regulatsioone ja tagada otstarbekate regulatsioonide täitmine . Infoturbe juhil endal võib aga olla kahesugune haridus : kas infotehnoloogiline ( tee “ infoturbe spetsialist - infoturbe juht ” ) või juriidiline ( sel juhul on vajalik infotehnoloogiline täienduskoolitus ) . Üldjuhul kehtib : mida suuremat infotehnoloogilist tuge firma vajab , seda enam võib infoturbejuht olla mittespetsialist . Väiksema firma puhul võib infotehnoloogiline kompetentsus vajalik olla . Missugused on infoturbe juhi põhiülesanded ? Firma infoturbe strateegilise plaani koostamine ( tänases kiiresti muutuvas maailmas on tüüpiline strateegilise plaani kestus <arv> aastat ) . Infoturbe taktikalise plaani ( enamasti on see aastaplaan ) koostamine - see on seotud firma eelarvega . Infoturbe taktikaline plaan peab tagama andmeturbe riskide piisaval tasemel leevendamise minimaalse hinnaga firma taktikalise äriplaani täitmiseks . Firma infoturbe organisatsioon ( infoturbe grupp/osakond + täiendavad organid ) loomine . Infoturbe organisatsiooni funktsioonid . Infoturbe organisatsiooni töökorraldus . Mida infoturbejuhilt eeldatakse ? Mis annab võimaluse edukalt täita põhiülesandeid ( mittetäielik loetelu , ei asenda ametijuhendit ) ? Loetleme : strateegilist mõtlemist probleemide püstitamis- ja lahendamisoskust tulemuslikkust otsustusvõimelisust projektide juhtimist suhtlemisoskust infotehnoloogiaalast kompetentsust infoturbe õigusalast kompetentsust ja veel palju muudki . INFOTURBE PLAANI TAHUD Infoturbe strateegilise ja taktikalise plaani olulisteks tahkudeks on : Teha inventuur/täiendada loetelu kõikidest infotehnoloogilistest seadmetest , süsteemidest ja andmebaasidest = infovaradest . Tagada , et kõigile turvatavatele infovaradele on määratud omanik/valdaja ( formaalselt on firma ise oma infovarade omanik ja delegeerib selle õiguse äripoole sisuliselt seda vara valdavale isikule ) . Infovara valdaja vastutab vara turvalise käitamise ( nt. pääsuõiguste haldamine ) ja säilitamise ( nt. varukoopiate tegemine ja säilitamine ) eest . Vajalike toimingute teostamise delegeerib valdaja omakorda IT-spetsialistidele , kuid mitte vastutuse ! Infovara valdaja peab tagama järgmised toimingud : Infovarade turvanõuete määramine Jäme riskianalüüs Turvameetmete määramine - vajaduse korral detailne riskianalüüs ja turvameetmete täpsustamine Jääkriskide aktsepteerimine Infoturbe käigushoidmine , mis seisneb : Muudatuste/intsidentide seires/halduses - infosüsteemide käideldavus on üheks olulisemaks infosüsteemide kvaliteedi näitajaks . Käideldavuse tegelikuks määramiseks on vaja fikseerida kõik infosüsteemide seisakud - nii plaanilised ( hooldus , tarkvara/riistvara uuendamine ) kui ka mitteplaanilised - intsidendid . Intsident üksikuna võetult võib tunduda mitteoluline , kuid koos teiste intsidentidega võimaldab teha järeldusi infotehnoloogia teenuse kvaliteedi kohta . Infoturbe perioodiline akrediteerimine Infovarade haldamise kontroll Uute/modifitseeritud infrastruktuuri komponentide infoturbe analüüs , riskide kindlaks- määramine ja vajaduse korral testimine vastavate turvameetmete ja käitusprotseduuride loomine/täiendamine/ modifitseerimine meetmete ja protseduuride täitmise kontroll . Uute/modifitseeritud rakenduste infoturbe analüüs , riskide kindlaksmääramine ja vajaduse korral testimine vastavate turvameetmete ja käitusprotseduuride loomine/täiendamine/ modifitseerimine meetmete ja protseduuride täitmise kontroll Talitluspidevuse plaanid ( kaasa arvatud kriisiolukorra plaanid ) Infotehnoloogiliste intsidentide registreerimise korraldamine ja kontroll Infrastruktuuri ja rakenduste seiresüsteemide arendamine ja seire kontroll Infosüsteemide pääsukontrolli täiendamine ja uuendamine Infotehnoloogiliste turvapoliitikate loomine/täiendamine/kaasajastamine . Selles artiklis me kõiki infoturbe plaani tahke ei käsitle , peatume lühidalt pääsuõiguste haldamisel , rünnete tuvastusel ja intsidentide haldusel . PÄÄSUÕIGUSTE HALDAMINE <arv> - PISUT TEOORIAT Pääsuõiguste määramine on nii teoreetiline , tehnoloogiline kui ka praktiline probleem . Me ei esita siinkohal pääsuõiguste haldamise vähegi arvestatavat käsitlust ( mis oleks lühikese artikli puhul võimatu ) , vaid püüame anda ettekujutuse pääsuõiguste haldamise teooria olemusest . Pääsuõiguste haldamise aluseks on pääsupoliitika . Pääsupoliitika määrab , missugustele ressurssidele omab keegi juurdepääsu ning missuguseid operatsioone võib seejuures sooritada . Näiteks on Unix-keskkonnas võimalikud neli järgmist operatsiooni : täita ( execute ) lugeda ( read ) lisada ( append ) kirjutada ( write ) . Pääsupoliitika realiseerub pääsukontrolli mehhanismi abil . ISO<arv> ( ISO Access Control Framework ) eristab pääsukontrolli jõustamise mehhanismi ( AEF , Access Control Enforcement Facility ) ja pääsuoloa andmise mehhanismi ( ADF , Access Control Decision Facility ) . Kui ADF otsustab , et pääs on lubatud , siis AEF suunab päringu objektini , vastasel korral kehtestatakse eriolukord ( joon . <arv> ) .  Joonis <arv>. ISO viitejälgija Pääsuoloa andmise ja pääsukontrolli jõustamise mehhanismid realiseerib viitejälgija . Viitejälgija ( Reference Monitor ) on pääsukontrollis kesksel kohal olev “ valvur ” , mis valvab kõiki kaitstavaid objekte ning otsustab , kas subjektide pääsutaotlused rahuldada või mitte . Viitejälgija tohib pääsuloa anda üksnes siis , kui see on turvapoliitika poolt lubatud . Märgime , et viitejälgijat saab modelleerida pääsu vahendava abstraktse automaadiga ( loodame , et lugejale on abstraktse automaadi mõiste tuttav ; kui mitte , siis võite selle lause tähelepanuta jätta , järgneva mõistmist see ei mõjuta ) . Viitejälgija koos mõningate lisafunktsioonidega moodustab infosüsteemi turvatuuma . Turvatuum peab olema : täielik , st. vahendama pääsu kõigi kaitstavate ressurssideni isoleeriv , st. peab olema kaitstud volitusteta mõjutuste eest kontrollitav , st. turvatuuma võime turvapoliitikat ellu viia peab olema võimalikult formaalselt tõestatav . Pääsukontrolli realiseerimisel on levinumateks meetoditeks pääsunimistul ( Access Control List , ACL ) põhinevad meetodid ( joon . <arv> ) .  Joonis <arv>. Pääsunimistud ( ACL ) Viitejälgija aktsepteerib kasutaja pääsu sihtobjektini , kui pääsunimistu sisaldab sellele pöördumisele vastavat elementi . Kasutatakse veel mitmeid teisi pääsukontrolli realiseerimise mehhanisme , millest praktikas on eriti olulised rollipõhistele pääsupoliitikatele tuginevad meetodid . Roll vastab ametile või ametis sisalduvale tööfunktsioonile . Näiteks võivad professoril olla järgmised rollid : lektor , teadur , nõustaja , õpetatud nõukogu liige , väitekirjade kaitsmiskomisjoni esimees jne. Õigused antakse rollile , mitte isikule . Rollile antakse vaid need õigused , mis on tarvilikud rolli ülesannete täitmiseks . Rollid võivad moodustada hierarhilise süsteemi , milles on määratav pärilikkuse suhe - detailsemalt määratud roll pärib ülemrolli õigused . Näiteks matemaatika lektor saab pärimise teel kõik lektori õigused . PÄÄSUÕIGUSTE HALDAMINE - PRAKTIKA Praktikas annab pääsuõigused infovarade valdaja vastavalt taotleja ülemuse ( nt. osakonna juhataja ) pöördumisele . Oluline on pääsuõiguste regulaarne ülevaatamine - töötaja funktsioonid võivad muutuda , ta võib firmast üldse lahkuda . Pole haruldane , et pääsuõigused oluliste infovarade juurde on firmast ammu lahkunud kodanikel . Märgime , et oluline on sätestada tarkvaraarendajatele ajutiste pääsuõiguste omistamine/nende äravõtmine firma operatiivsüsteemis ( live system ) . Ühelt poolt nõuab kohustuste lahususe printsiip , et arendajatel poleks üldse pääsuõigusi operatiivsüsteemis . Teisalt on vaid arendajatel kompetents operatiivsüsteemi avariide likvideerimiseks - seega tuleb avariiolukorras arendajatele need õigused anda . On aga vaja , et sel juhul oleks arendajate tegevus rangelt kontrollitav ja oleks tagatud nende õiguste automaatne äravõtmine avariiolukorra likvideerimisel . RÜNNETE TUVASTUSSÜSTEEMIDEST Internetiajastu nõuab infosüsteemidelt <arv>'<arv>-käideldavust . Kobartehnoloogia ( clustering ) , võrgukeskne infrastruktuur ( Storage Area Networks ) ja tehinguhaldurid ( Transaction Processing Monitors ) annavad võimaluse luua kõrgkäideldavaid infosüsteeme . Reaalseks käideldavuse tagamiseks nendest tehnoloogiatest kahjuks ei piisa : Internetis on piisavalt kurikaelu , kes meie infosüsteemi mitmesugustel motiividel ( ka naljapärast ) ründavad ja sellega infosüsteemi talitlust häirivad või seda halvavad . Kui <arv>. aastatel olid ründajateks vaid kõrge kvalifikatsiooniga arvutispetsid , siis tänapäeval on vabalt saada ründevara , millega iga koolipoisski võib nuritegusid toime panna . Ründajatel on mitmeid ” suursaavutusi ” , mis tõendab , et isegi hoolikalt kaitstud süsteemid pole ründekindlad . Pole kahtlust : rünnete vastu on vaja infosüsteeme kaitsta , aga selleks et kaitsta , tuleb esmalt teada saada , et meid rünnatakse . <arv>. aastal sai ründetuvastuse probleem ka rahvusvahelise ” tunnustuse ” : loodi Intrusion Detection Systems Consortium ( IDSC ) , mille eesmärgiks on rünnete tuvastussüsteemide loojate vahelise koostöö korraldamine . Vastavalt kasutatavale tehnoloogiale jagunevad rünnete tuvastussüsteemid väärkasutuse tuvastus- ja anomaalia tuvastussüsteemideks . Väärkasutuse tuvastussüsteemide põhiidee on lihtne : võrku siiratakse agendid , mis jälgivad võrguliiklust ja võrdlevad seda teadaolevate ründekäekirjadega ( intrusive signatures ) . Anomaalia tuvastussüsteemid on kasutatavad võrkudes , mille ” normaalne ” ( baas- ) seisund on määratletav . Baasseisundit võrreldakse perioodiliselt hetkeseisundiga ja kui hälve baasseisundist ületab teatava läviväärtuse , genereeritakse avariiteade . Mõned rünnete tuvastussüsteemide müüjad : Axent Technologies , BindView Development Corporation , Centrax Corporation , Cisco Systems , Internet Security Systems , Memco Software , Network Associates , Qwest Communications International , IBM , SecurityDynamics , Tripwire Security Systems . Märgime , et piisavat turvataset tagavat rünnete tuvastussüsteemi pole ega saagi olema . Tõhusaks ründetõrjeks on lisaks tuvastussüsteemidele vaja ka kõrge kvalifikatsiooniga spetsialiste-turvaadministraatoreid . Kahjuks süveneb turvaadministraatorite defitsiit - infosüsteemide arv kasvab eksponentsiaalselt , administraatorite arv vaevalt lineaarselt . Nii et tulevik on üsna tume , eriti kui silmas pidada ründajate kõrget kvalifikatsiooni . Siit : infoturbe juhi üheks tähtsamaks ülesandeks on tagada tuvastussüsteemide evitamine ja nende pidev ajakohastamine , ei tohi jätta tähelepanuta ka turvaadministraatorite ( täiend ) koolitust - kiiresti muutuvas maailmas vananevad turvaadministraatorite teadmised/oskused kiiresti . INTSIDENTIDE HALDUS Infosüsteemide käideldavus on üheks olulisemaks infosüsteemide kvaliteedi näitajaks . Käideldavuse tegelikuks määramiseks on vaja fikseerida kõik infosüsteemide seisakud - nii plaanilised ( hooldus , tarkvara/riistvara uuendamine ) kui ka mitteplaanilised - intsidendid . Intsident üksikuna võetult võib tunduda mitteoluline , kuid koos teiste intsidentidega võimaldab ta teha järeldusi infotehnoloogia teenuse kvaliteedi kohta . Seetõttu on oluline , et kõik intsidendid oleksid fikseeritud ja et neist kantaks ette infoturbejuhile ja teistele IT-juhtidele . Intsidentide tüübid Eristatakse kahte tüüpi intsidente : Juhuslikud/ühekordsed intsidendid Korduvad/statistilise iseloomuga intsidendid - esinevad sageli . Näiteks : IT-süsteemide perimeetri turvaintsidendid , välise e-posti intsidendid Kesksüsteemi autoriseerimisega seotud intsidendid jmt. Toome näitena intsidentide raporti malli : Info edastaja Nimi Üksus E-posti aadress Telefon Info intsidendi kohta Kuupäev Millal toimus ? Kus toimus ? Millal märgati ? Intsident Kirjeldus Tagajärgede kirjeldus Meetmete kirjeldus Kommentaarid Intsidentide raportite alusel koostatakse Infosüsteemide käideldavuse kuuaruanne : Süsteemi seisakute raport August <arv>  Main System Plaanitud seisakud Mitteplaanitud seisakud Plaanitud Mitteplaanitud Aeg Kestus ( min ) Arv Kestus ( min ) Nädala käideldavus Nädala käideldavus Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Süsteem<arv> <arv> <arv> <arv> <arv> <arv>,<arv>% <arv>,<arv>% Kuuaruanded võetakse kokku aastaaruandeks , kuu- ja aastaaruannete analüüs võimaldab teha olulisi järeldusi infosüsteemide käideldavuse dünaamika kohta , õigeaegselt märgata (eba)soovitavaid tendentse ja võtta tarvitusele neid välistavad/leevendavad abinõud/meetmed . KOKKUVÕTTEKS ” Infoturbe juhi amet polegi nii lihtne . ” Andro Kull , Tööturuameti informaatika osakonna juhataja Infopoliitika foorumil <arv>. aastal ütles Ants Sild ( Baltic Computer Systems ) järgmist : “ Riik , kellel on täita keskne koordinatsioonifunktsioon , avaliku halduse organisatsioonid kui teenuseomanikud ja infotehnoloogia firmad peaksid koostööd tegema . Paraku tuleb initsiatiiv reeglina just viimastelt . Tegelikult peaks initsiatiiv tulema avaliku halduse organisatsioonidest , IT-firmad pakuvad lahendusi . Initsiatiiv on olnud kasin , see viitab selgete infotehnoloogia valdkonda puudutavate strateegiate puudumisele . ” ( Sild , <arv> ) . Käesolevas artiklis ei taha ma arutleda tagajärgede üle , mis võivad kaasneda IS-strateegiate puudumisega , küll aga usun , et oskan üht-teist öelda põhjuste kohta , miks riigi tasandil olukord infotehnoloogia valdkonda puudutavate strateegiate koha pealt just selline paistab ja kas see ka tegelikult niisugune on . Käesoleva aasta kevadel kaitsesin Tallinna Pedagoogikaülikoolis magistritööd teemal “ Infosüsteemide strateegiline planeerimine Eesti avalikus halduses ” ( juhendaja PhD P. Leis ) , mille raames viisin Eesti avalikus halduses läbi uuringu eesmärgiga selgitada välja , kuidas on lood infosüsteemide strateegilise planeerimisega : kas selles vallas midagi tehakse , kuidas tehakse ning milliseid tulemusi on saavutatud . Teema tundus seda põnevam , et puutun sellega pidevalt kokku oma igapäevatöös , taolisi uuringuid aga kätte sattunud ei ole . IS-strateegia käsitlemiseks kasutasin ideoloogiat , mida illustreerib joonis <arv>. Terminite seletuseks : infosüsteemi ( IS ) ehk Information System all mõeldakse antud kontekstis tehnoloogiate , inimeste ja protsesside kogumit asutuse äriprotsesside toetamiseks , infotehnoloogia IT ehk Information Technology all pigem riistvara , tarkvara , kommunikatsioonivahendite jms. kogumit . Käesolevas artiklis on juttu IS-strateegiast , segaduse vältimiseks jätan käibel olevad terminid nagu IT-firma , IT-juht jms. muutmata . Kohati olen kasutanud ka inglise keelest üle võetud terminit IS/IT ( Ward , <arv> ) . Infosüsteemide strateegia protsess hõlmab nimetatud töö tähenduses kõigepealt infosüsteemide strateegia loomist ja seejärel strateegia elluviimist . Esimene algab strateegia eesmärgi püstitamisest ja lõpeb siis , kui strateegia on mingil kujul olemas , elluviimine algab strateegiliste plaanide koostamisest ja lõpeb tulemuste mõõtmise ning tagasisidega . Üldine lähenemine IS-strateegia loomisele käib samuti nagu igasuguse muu pikemaajalise plaani koostamine : sõnastatakse see , mida tahetakse saavutada , vaadatakse üle , kus hetkel ollakse , ja määratakse , mida tuleb teha selleks , et soovitud tulemuseni jõuda . Uuringust nähtub , et infotehnoloogia ja infosüsteemide strateegia küsimustega tegelevad asutustes väga erinevad institutsioonid , alates IT-osakonna või -büroo või infosüsteemide osakonna juhatajast ja lõpetades asutuse tippjuhi endaga . Samuti selgub , et <arv>%-l vastanud asutustest on IT-juhi ametikoht olemas , kuid see juht ei kuulu asutuse juhtkonda ; <arv>%-l asutustest on olemas IT-juhi institutsioon ja vastav töötaja kuulub ka juhtkonda ; <arv>%-l vastanud asutustest puudub IT-juht sootuks . Arvestades IT aina suurenevat osatähtsust asutustes , julgen viimati nimetatud näitajaid pidada muret tekitavateks . Olukord organisatsioonide üldstrateegia ja mis tahes kujul IS-strateegia olemasolu osas oli uuringu järgi üsna sarnane : umbes <arv>%-l vastanud asutustest olid olemas mõlemad , neist rohkem kui kolmandikul kajastub IS-strateegia ka üldstrateegias . Seega ei saa päris õigeks pidada väidet , et riigisektoris infotehnoloogia valdkonda puudutavad strateegiad puuduvad . Tuleks hoopis rääkida sellest , et riigis puuduvad selged IS-strateegiad . Oluliselt tähtsamaks selge IS-strateegia omadustest pean ma selle strateegia valmimise protsessi ennast ehk seda , millised sammud on vaja läbida , tagamaks selge IS-strateegia valmimine . Minu uurimistöö ei määratle parimat IS-strateegiat avaliku halduse organisatsioonide jaoks , vaid näitab ainult selleni jõudmise viisid . Lähtusin hüpoteesist , et Eesti avalikus halduses puudub ühtne lähenemine infosüsteemide strateegia planeerimisele , ja arvan , et suutsin selle ka tõestada . Pean siin silmas põhiliselt seda , et riigiasutused arenevad väga erinevate protsesside kaudu ja jõuavad seetõttu ka väga erineva tasemega lõpptulemusteni . Just see on minu arust üks peamisi põhjusi , miks saab väita , et riigi tasemel puuduvad selged IS-strateegiad . Mõned näited uuringust selle väite kinnituseks . Uuringus tõin ära kolm peapõhjust ehk riski , miks IS-strateegia protsess ei pruugi käivituda : ei tunnetata IS-strateegia vajadust . Siin oleks riigi poolt kindlasti tarvis korralikku selgitustööd , st. oleks vaja näidata , et ilma vastavasisulise tööta allasutustes ei ole ka riigi tasemel võimalik tagada IT jätkusuutlikku arengut ; selle töö jaoks puudub piisav aja- , inim- või raharessurss . Aja- ja inimressursi puudumist tuleb ilmselt käsitleda koos . Kuna ma ise olen informaatika osakonna juhataja riigiasutuses , siis tean , et lõviosa ajast kulub igapäevastele tavaülesannetele ja strateegiate loomiseks , nende ellurakendamiseks ning tulemuslikkuse hindamiseks jääb vähe aega . Lahenduseks võiks olla eraldi IT-juhi ametikoha loomine ( see oleks strateegiajuht , kes tegeleb strateegiaküsimustega ja kuulub kindlasti asutuse juhtkonda ) IT-osakonna juhataja kõrvale ( see oleks tegevjuht , kes tegeleb jooksvate küsimustega ) . Niisugune töö organiseerimine tuleb ilmselt kõne alla vaid kõrgema tasandi asutuste puhul ; madalama tasandi asutuste IT eest vastutajate tööülesannetes tuleb määrata prioriteedid : IT-juht vastutab eelkõige IS-strateegia väljatöötamise ja selle ellurakendamise eest ; strateegilist planeerimist tehakse liiga detailselt . Iga erineva suuruse ja funktsioonidega asutuse jaoks eksisteerib teatav IS-strateegia detailsuse aste , mida IT eest vastutajad peavad oskama tajuda . Kindlasti annaks siin kõigi riigiasutuste jaoks välja töötada üldised põhimõtted . Võrdluseks : maailmapraktikas tuuakse kolme suurema riskina välja tippjuhtide toetuse puudumist , vaba kommunikatsiooni ja ühtsuse puudumist organisatsioonis ning piisava kvalifikatsiooniga töötajate puudumist ( Teo <arv> , <arv> ) . Uuringust selgub , et IS-strateegiat vajavad väga erinevad organisatsiooni lülid olenevalt sellest , kes mida oluliseks peab . Seda vajatakse nt. : organisatsiooni üldstrateegias ; ressursside planeerimise protsessis ; organisatsiooni puudutavates seadusandlikes aktides ; tagasisides klientidega ; kõrgemate institutsioonide ettekirjutustes ; investeeringutes . Samuti näidatakse uuringus IS-strateegia seost eelarve ja investeeringutega . Selleks on mitu erinevat võimalust . Eelistatumaks peetakse varianti , kus IS-strateegiasse ettenähtud raha tuleb otse organisatsiooni strateegiast , kuid see eeldab tugeva üldstrateegia olemasolu . Reaalselt toimub IS-strateegia eelarve koostamine lihtsamalt - eelmisele eelarveperioodile lisatakse mingi summa , kuid seda võtet ei saa pidada õigeks , sest kulutused pole sel juhul põhjendatud . Eelarve tegemist kogu strateegia kohta küll pooldatakse , kuid reaalselt arvestatakse vaid eelarveaastate kaupa . Eesrindlikumates asutustes mõeldakse eelarve planeerimisel juba ka tänapäevasemate mudelite nagu TCO ja ROI peale , kuid seda kohtab üsna vähe . IT-arenduste prioriteetide määramisel jääb selgusetuks , mida riigis rohkem väärtustatakse , kas maksimaalset tulu või minimaalset kulu . Mõtte ilmestamiseks esitan siin lihtsustatud tabeli .  MAKSIMAALNE TULU ? MINIMAALNE KULU ? Raske mõõta Kerge mõõta Tulevikku suunatud , areng Olevikul baseeruv , protsess Investeeringupõhine , tululootus Eelarvepõhine , kulu jälgimine Keeruline tulemust ennustada Lihtne tulemust ennustada Risk suur Risk väike Ilmselt saab avaliku halduse jaoks kõige õigemaks pidada kombineeritud varianti , mille võiks nt. koostöös majandusanalüütikutega välja töötada kõigile haldusasutustele ühtsena . Väga tähtis on seejuures IS-strateegia tulemuste mõõtmine , sest vastasel juhul ei saadagi teada , kas plaanide koostamisel ja nende elluviimisel oldi edukad või mitte . Uuringust selgub , et tagasiside saamiseks eelistatakse tõhusaima vahendina rahuloluhinnangut . Paljud vastanutest pakuvad edukuse mõõtmiseks omaloodud mõõdikute süsteemi , alla viiendiku peab vajalikuks teha tasuvuse analüüs . Lisaks nimetatakse veel balanced scorecard süsteemi , tulemuste mõõtmist üksikute projektide kaupa , tulemuste mõõtmist eelarvega jms. Uuringust võib tuua veel palju näiteid selle kohta , kuivõrd erinevalt asutused IS-strateegia etappe läbivad . Tuleb välja , et suured erinevused on ka ametkondade vahel . Üldist olukorda illustreerib joonis <arv> ( kujutatud etappe on kirjeldatud allpool ) . Hinnangu andmise süsteemi täpsustuseks olgu öeldud , et iga etapi juures anti hinnang erinevatele selle läbiviimiseks väljapakutud variantidele : kui varianti peeti õigeks , anti sellele <arv> punkt , kui seda oli rakendatud ka konkreetses asutuses , siis <arv> punkti ; <arv> punkti näitab , et varianti ei peetud õigeks ja kui see variant ka asutuses kehtis , sai see hindeks -<arv>. Kokkuvõte ( <arv> vastanud asutuse tulemused keskmistati ) on joonisel <arv>.  Joonis <arv>. IS-strateegia protsessi etappide keskmine hinnang ametkondade kaupa Siinkohal võib muidugi küsida , miks niisugune olukord riigiasutustes üldse on kujunenud ja mida annaks selle parandamiseks teha ? Esimesele küsimusele vastamiseks võib välja pakkuda mitmeid variante : tegu võib olla erineva koolitusega , erinevate tõekspidamiste ja harjumustega , erineva organisatsioonikultuuriga , kontrolli puudumisega valitseva olukorra üle vms. Teisele küsimusele on kahtlemata keerulisem vastata . Usutavasti nõustub enamik lugejaid , et IS-strateegia protsessist peaks riigiasutustes valitsema ühtne arusaam . Alustama peaks sellest , mille jaoks ja kellele asutuse IS-strateegiat üldse vaja on , millised etapid tuleb strateegia loomiseks läbida , mis seal kohustuslike elementidena peab sisalduma jne. Hulgaliselt näpunäiteid annab IT juhtimise käsiraamat ( BCS , <arv> ) , mille suureks plussiks on pidevad täiendused . Leian aga , et siinkohal ei piisa vaid küsimuste püstitamisest , üldisematele küsimustele tuleks vastused leida kõrgemal , st. kogu riigi IT arengut määraval tasemel . Kindlasti peab IT-strateegia protsess eri taseme asutustes - ametite allasutused , ametid , ministeeriumid - olema erinev . Uuringus pakutakse välja järgmine skeem : <arv> ... <arv> aasta peale - IS/IT-strateegia , nt. ministeeriumi tase ; <arv> aasta peale - IS/IT-tegevuskava , nt. riigiameti ja inspektsiooni tase ; <arv> ... <arv> aasta peale - IS/IT-arengukava , nt. omavalitsuse ja ameti tase ; <arv> aasta peale - IS/IT lühiajalised eesmärgid , nt. inspektsiooni tase ; kuni <arv> aasta peale - IS/IT tähtsamad programmid ja projektid , nt. strateegiline plaan <arv> aasta peale igas asutuses ; kuni <arv> aasta peale - IT-raamkava , nt. ministeeriumi ja riigi tase ; üle <arv> aasta - infopoliitika , nt. riigi tase ; muu - vastustes pakuti veel pikaajalist riigi infopoliitika raamkava , seda , et strateegia peaks olema <arv> ... <arv> aasta peale ja kindlasti oleks igal aastal vaja üle vaadata eesmärgid ning projektid . Nagu jooniselt <arv> näha , leidis eelkirjeldatud skeem üldiselt poolehoidu .  Joonis <arv>. IS-strateegia olemus ja ajaline periood Siinkohal tuleb jälgida , et erinevad tasemed sobiksid omavahel kokku , st. et kõrgem tase saaks alamad tasemed ühendada . Hiljem oleks võimalik kehtestada kord , et riigi haldusorganitel tuleb IT-investeeringute taotlemiseks esitada detailne plaan , ühtlasi tähendaks see kehtestatud reeglite järgi vormistatud IS-strateegiat . Nii saaksid IT-investeeringute üle otsustajad ühtsetel alustel koostatud selgete strateegiliste plaanide elluviimist rahastada adekvaatsemalt . Strateegiate kogumine kõikidest riigiasutustest ja neist kokkuvõtete tegemine tagab , et otsustajad näevad selgeid suundi , millesse tasub investeerida - on see andmesidevõrkude ehitus või süsteemiarenduse tehnoloogiate täiustamine , riigiteenuste kodanikule kättesaadavaks tegemine või hoopis arvutispetsialistide infotehnoloogiaalane koolitamine . Võtmesõnaks peaks jääma ikkagi ühtsus , st. ei ole oluline , kas asutus X saab võimaluse soetada uus server või asutus Y kümme uut PC-d . Vaid ühtsetel alustel esitatud IS-strateegia peab näitama , millist tulu investeeringust oodatakse , ja seejärel peavad otsustajad analüüsima , kumb on tulusam riigi seisukohalt tervikuna . Kindlasti avaldavad siin mõju nii käesoleva hetke poliitilised suunad , Euroopa Liidu mõjutused jms. , millega tuleb arvestada ja mis on suurel määral aluseks investeeringute ( sh. IT-investeeringute ) üle otsustamisel . Leian , et eeldused probleemi Eesti avalikus halduses leevendada on täiesti olemas . IT-küsimuste eest vastutajate arvamusest nähtub , et üldiselt peetakse kõiki uuringus väljapakutud <arv> IS-strateegia protsessi etappi tähtsaks . Enamik vastanutest leiab , et IS-strateegia loomist tuleks alustada vajaduse kindlaksmääramisest ja strateegia loomise protseduurist - käesoleva artikliga tahan öelda , et selline protseduur võiks olla kõigi haldusasutuste jaoks eelnevalt välja töötatud . Edasi tulevad järjekorras kõne alla : IS-strateegia loomise meeskond ja ressursid ; riskikäsitlus ; konkreetne plaan strateegia väljatöötamiseks ; organisatsiooni ja IT missioon , visioon ning kõrgtasemel eesmärkide püstitus ; olemasoleva IT olukorra analüüsimine ; kriitiliste edufaktorite , arendusvajaduste ning nende prioriteetide määramine ; IT eelarve ja investeeringute planeerimine ; andmeturbe käsitlus ; IS-strateegia kirjapanemine ja kinnitamine ; IS-strateegia dokumendi tutvustamine kogu organisatsioonile ; IS-strateegia kehtestamine läbi strateegiliste plaanide ; IT-arenduste läbiviimine ; tulemuste mõõtmine ja tagasiside kogumine ; IS-strateegia protsessi järjepidevuse kindlaksmääramine ning tagamine . Kes asja vastu rohkem huvi tunneb , võib kogu eespool viidatud uuringu . pdf-failina maha laadida Interneti-leheküljelt <hyperlink> lingi “ Infosüsteemide strateegiline planeerimine Eesti avalikus halduses ( Paul Leis ) “ alt .  Uudised kogus Uuno Vallner , Majandus- ja kommunikatsiooniministeeriumi , riigi infosüsteemide osakonna arendustegevuse talituse juhataja X-TEE SAI EUROOPA LIIDULT ERIPREEMIA Itaalias Como järve ääres toimus <arv>. ja <arv>. juulil Euroopa Liidu eesistujamaa Itaalia korraldatud “ Euroopa e-Riigi konverents <arv> ” , milles osales üle tuhande delegaadi <arv> riigist . Konverentsile eelnes Euroopa Komisjoni poolt väljakuulutatud konkurss parimate eValitsus projektidele . Erkki Liikanen , Euroopa Komisjoni volinik , on rõhutanud , et infoühiskonna ehitamine ei ole ühekordne üritus , vaid pidev liikumine kodanikukeskse riigi suunas . See on üks Lissaboni protsessi eesmärk selleks , et Euroopa Liit muutuks aastaks <arv> maailma kõige konkurentsivõimelisemaks piirkonnaks . Konkursile oli esitatud <arv> tööd . Nendest said kolm tööd peaauhinna ja viiele tööle anti eriauhinnad . Üks eripreemia anti Eesti projektile X-tee projekti originaalse lahenduse eest . Autorite hinnangul on originaalseteks osadeks kogu süsteemi turvalahendus ja ühtne kasutajaliides kõigile andmekogudele . Pildil on osa Eesti delegatsioonist väljapaneku juures .  EESTI INFORMAATIKANÕUKOGU SEPTEMBRIISTUNG <arv>. septembril toimus Eesti Informaatikanõukogu järjekordne koosolek , kus peamiste teemadena olid kõne all Eesti lairiba-strateegia , riigi infopoliitika alused ja andmekogude süsteemi seaduse eelnõu . Lairiba- ehk kiire Interneti-ühenduse kättesaadavuse ja leviku edendamisele suunatud tegevused on kujunenud Euroopa infoühiskonna rajamise tegevuskavade üheks olulisemaks suunaks . Nõukogu andis ka põhimõttelise heakskiidu riigi andmekogude süsteemi seaduseelnõu kontseptsioonile . Uus seaduseelnõu on orienteeritud riigi andmekogude omavahelisele suhtlemisele ning teenuste pakkumisele . Eelnõu sätestab kõikidele andmekogudele samad põhinõuded ja kohustuse liituda andmevahetussüsteemiga X-tee . Eesmärk on vältida olukorda , kus registrites sisalduvaid andmeid kogutakse dubleerivalt , mistõttu need sageli ei ühti . Nõukogu soovib seaduseelnõu aruteluni valitsuses jõuda aasta lõpus . KAHEKÜMNE KUUE RIIGI VALITSUSE IT-JUHID PIDASID EESTIS AASTAKONVERENTSI <arv>.- <arv>. septembril toimus Tallinnas rahvusvahelise riigihalduse infotehnoloogianõukogu ( ICA - International Council for Information Technology in Government Administration ) <arv>. aastakonverents , kus osalesid <arv> riigi valitsuse infotehnoloogiajuhid . Aastakonverentsi keskseks teemaks oli reaalajas toimiv valitsus , mis peaks efektiivselt ja kõigi olemasolevate infokanalite kaudu pakkuma kodanikele vajalikke teenuseid .  ICA on ülemaailmne organisatsioon , mis ühendab erinevate riikide informaatika arendamise ja infosüsteemide töö korraldamise eest vastutavaid riigiasutusi . Organisatsioon kujutab endast rahvusvahelist foorumit IT-alase kogemuse jagamiseks valitsussüsteemi efektiivsemaks muutmisel . Selle liikmeteks on enamik juhtivaid tööstusriike nagu USA , Jaapan , Saksamaa jt. Eesti on üks vähestest Kesk- ja Ida-Euroopa riikidest , kes on saanud selle organisatsiooni täisliikme staatuse . Eesti valimine korraldajamaaks avaldab tunnustust Eesti saavutustele infotehnoloogia rakendamisel avalikus sektoris . Arvo Toomsalu , TTÜ arvutitehnika instituut His accomplishments were manifold , his was a great mind - perhaps one of the greatest of the first half of his century . Eugene Wigner  <arv>. detsembril möödub sada aastat <arv>. sajandi ühe kuulsaima matemaatiku ja arvutiteadlase John von Neumanni sünnist . John ( János , Johann ) sündis <arv>. aasta detsembris Budapestis Max ( Miksa ) Neumanni ja Margaret ( Margit ) Kanni esikpojana . John von Neumanni isa Max Neumann oli küllaltki varakas ja hea haridusega . Tal oli õigusteaduste doktori kraad ja ta töötas juristina hästi tasustataval kohal pangas . Ka tema ema pärines jõukast perekonnast . Mis puutub Neumannide perekonnanime ees oleva aadliseisust tähistavasse predikaati “ von ” , siis ostis Max Neumann selle <arv>. aastal , seega ei kuulunud John von Neumann sugugi sünniaadlisuguvõssa . Alghariduse omandas John kodus . Juba noorelt avaldus tema eriline huvi matemaatika vastu , kuid andekust ilmutas ta teisteski valdkondades . Nii oli John võimeline juba kuueaastasena rääkima nalju kreeka keeles , kaheksaselt huvitus ta tõsiselt ajaloost , lugedes hoolikalt läbi perekonna raamatukogus leiduva <arv>-köitelise üldajaloo . Vaatamata noorusele orienteerus ta hästi nii sotsiaalsete nähtuste kui ka keerukate matemaatikaprobleemide maailmas . Nooruki kiiret arengut soodustasid igati vanemad , pöörates väga suurt tähelepanu õpingutele . Ettevalmistumine tulevaseks teadlaskarjääriks algas <arv>. aastal , kui John von Neumann asus õppima Budapesti luterlikus gümnaasiumis , koolis , mis oli kuulus oma kõrge õppetaseme ja akadeemiliste traditsioonide poolest . Gümnaasiumiõpilasena tegeles ta väga intensiivselt matemaatikaga , täiendades end Budapesti ülikooli õppejõudude juhendamisel . Oma esimese matemaatikaalase artikli avaldas noor J. von Neumann juba enne kaheksateistkümneaastaseks saamist . Kui John von Neumann lõpetas <arv>. aastal edukalt gümnaasiumi , siis tekkis küsimus , millises vallas haridusteed jätkata . Isa Max Neumann lootis küll , et poeg järgib tema eeskuju ning valib ärialase karjääri , kuid äri ei ahvatlenud andekat noormeest . Pärast põhjalikku kaalumist otsustati , et õpinguid jätkatakse hoopiski keemiavallas . Kuigi noor John von Neumann ise ei olnud keemiast just eriti huvitatud , valis ta selle eriala isa soovitusel . Ilmselt etendas valiku tegemisel olulist osa asjaolu , et tänu saksa keemikute väljapaistvatele saavutustele aastatel <arv>-<arv> oli keemia üldse väga populaarne ja perspektiivseks peetav ala . Kuna neil aastatel oli juudi rahvusest noortel raske pääseda õppima Budapesti ülikooli , siis asus ta <arv>. aastal õppima keemiat hoopiski Berliini ülikoolis . Kahe aasta pärast jätkas ta õpingud aga Zürichi Tehnikakõrgkoolis ehk ETH's ( Eidgenössische Technische Hochschule ) . Pärast kaheaastase ülikoolikursuse läbimist Berliinis , kuid enne õppimist ETH's , astus John von Neumann õppima veel ka Budapesti ülikooli , et läbida seal doktorantuur matemaatikas . Tema doktoriväitekirja teema käsitles George Cantori hulgateooria aksiomatiseerimise küsimusi . Hoolimata suurest õppekoormusest läbis ta edukalt õpingud nii ETH's kui ka Budapesti ülikoolis . Tõsi , Budapesti ülikooli loengutes ta ei osalenud , piirdudes seal vaid doktorantuuris ettenähtud eksamite sooritamisega . <arv>. aastal lõpetas John von Neumann õpingud ETH's , saades keemiatehnoloogi diplomi . Samal aastal kaitses ta Budapesti ülikoolis edukalt doktoriväitekirja , omandades filosoofiadoktori kraadi matemaatikas . Aastatel <arv>-<arv> täiendas ta end matemaatikas veel ka Göttingeni ülikoolis . Seal asus ta tegelema kvantmehaanika küsimustega , arendades edasi kvantteooria matemaatilist aparatuuri . Aastatel <arv>-<arv> osales ta aktiivselt paljudel akadeemilistel konverentsidel ja kollokviumidel , publitseeris arvukalt artikleid erinevatest matemaatikaprobleemidest . Peagi äratas John von Neumanni aktiivne tegevus akadeemilistes ringkondades tähelepanu ning teda hakati pidama uueks tõusvaks teadusemaailma täheks . Tegevust õppejõuna alustas John von Neumann Berliinis , kus ta aastatel <arv>-<arv> pidas loenguid eradotsendina , siirdudes seejärel õppetööle Hambugi ( <arv>-<arv> ) . <arv>. aastal abiellus John von Neumann oma lapsepõlvetuttava Mariette Kovesiga . Varsti pärast abiellumist tekkisid John von Neumannil kontaktid Ameerika Ühendriikide kõrgkoolidega ning <arv>. aastal kutsuti ta külalislektoriks Princetoni ülikooli . Alates <arv>. aastast sai ta ülikooli korraliseks professoriks . Olles küll äärmiselt andekas ja hea teoreetik , ei sobinud praktiline õppetöö talle algul mitte just kõige paremini . Üliõpilased pidasid tema õpetamisviisi raskepäraseks , ta loengud olid raskesti jälgitavad ning suunatud eeskätt kuulajaskonna andekamale osale . <arv>. aastal nimetati John von Neumann Princetoni ülikooli Perspektiivuuringute Instituudi professoriks , sellel ametikohal töötas ta kuni oma elu lõpuni . <arv>. aastal sündis perre tütar Marina . Kuigi isa armastas tütart väga , jäi nendevaheline side siiski nõrgaks , sest John von Neumanni veendumuste kohaselt olid pere ja kodu siiski vaid teisejärgulise tähtsusega . Ilmselt peitub selles ka üks põhjusi , miks tema abielu ei kujunenud eriti pikaajaliseks . <arv>. aastal see lahutati , Mariette siirdus tagasi Budapesti , John von Neumann sidus kogu oma edasise elu jäädavalt Ameerika Ühendriikidega . Siinkohal tuleks lisada , et John von Neumann säilitas Saksamaal kõik akadeemilised positsioonid kuni natside võimuletulekuni ning erinevalt enamikust teistest juutidest ei asunud ta Ameerika Ühendriikidesse elama mitte poliitilise pagulasena , vaid seepärast , et nägi seal paremat väljavaadet oma akadeemilise karjääri jätkamiseks . USA kodakondsus anti talle <arv>. aastal . <arv>. aastatel uuris John von Neumann hüdrodünaamilise turbulentsi probleeme , saavutades selles vallas märkimisväärseid tulemusi . <arv>. aastal andis Ameerika Matemaatika Selts talle töö “ Almost Periodic Functions and Groups ” eest Böcheri auhinna . <arv>. aastal Euroopas reisides abiellus John von Neumann Klára Dániga . Teine abielu oli märksa õnnelikum . Kindlasti aitasid sellele kaasa abikaasade ühised huvid . Nii oli ta abikaasa nende esimeste spetsialistide seas , kes hakkasid tegelema elektronarvutitele programmide ettevalmistamisega . Neumannide kodu Princetonis mäletatakse senini kui väga külalislahket ja intellektuaalse õhkkonnaga kohta , kus iga külaline oli alati teretulnud . Kaasaegsete mälestustest nähtub , et John von Neumannile polnud võõrad ka inimlikud nõrkused . Ta armastas väga elegantselt riietuda , nähes välja pigem pankuri kui ülikooli professorina , samuti meeldis talle viibida kaunite naiste seltskonnas ja ega gurmaanluski talle võõras polnud . Eriti suurt huvi tundis ta igasuguste masinate ja mehhanismide , iseäranis autode ja kiire sõidu vastu . Kuid vaatamata kõigele jäi John von Neumanni põhihuviks ja pühendumisobjektiks alati teadustöö . Kui iseloomustatakse John von Neumanni teadustegevust USA's , siis rõhutatakse tavaliselt kahte momenti - tema osalemist aatomipommi ja esimeste elektrooniliste digitaalarvutite loomisel . Teise maailmasõja ajal töötas von Neumann sõjajõududes konsultandina . Alates <arv>. aastast oli ta Marylandi Aberdeeni ballistikauuringute laboratooriumi nõuandva komitee liige , lisaks ka Mereväe Suurtükiväebüroo liige ( <arv>-<arv> ) ning konsultant Los Alamose teaduslaboris ( <arv>-<arv> ) . <arv>. aastal liitus John von Neumann Los Alamoses töötanud ülisalajase USA aatomipommi loova teadlaste rühmaga . Selles jäi tema põhiülesandeks välja töötada tuumaprotsesside modelleerimise metodoloogia , mis võimaldanuks uurida tuumaprotsesse ilma praktilisi eksperimente korraldamata . John von Neumanni teeneks loetakse näiteks praktilise lahenduse leidmist aatomipommi sütikule , millega käivitati plutoonium-<arv> baasil valmistatud pommis ahelreaktsioon . <arv>. aastal hakkas John von Neumann aktiivselt tegelema mänguteooriaga , sel valdkonnal oli suur praktiline tähtsus riigi majanduse juhtimise seisukohalt . Praktiline töö ja kogemused , mis saadi keerukate protsesside matemaatilisel modelleerimisel Los Alamoses , äratasid John von Neumannis huvi arvutite vastu , mis oleksid suutelised kiiresti ja kvaliteetselt lahendama arvutusmahukaid ülesandeid . Tollal kasutatavate elektromehhaaniliste arvutite - õigem oleks neid nimetada pigem kalkulaatoreiks kui arvuteiks - võimalused olid äärmiselt piiratud . Vaatamata seadmete suurtele puudustele , oskas John von Neumann märgata arvuteis peituvat potentsiaali . Ta mõistis , et arvuteid saab ja tuleb kasutada märksa laiemalt kui pelgalt rutiinsete matemaatilis-loogiliste arvutuste sooritamiseks . Sõjajärgsel perioodil pühenduski John von Neumann põhiliselt uute võimsate elektronarvutite talitluse põhimõtete väljatöötamisele , osaledes aktiivselt ka nende ehitamises . Olulist osa John von Neumanni arvutitehnikaalase huvi tekkimisel etendas arvuti ENIAC . <arv>. aastal sõlmis USA Suurtükiväe Peavalitsus Pennsylvania ülikooliga lepingu elektronarvuti ehitamiseks , mille abil saaks kiiresti koostada suurtükiasjanduses massiliselt vajatavaid täpseid lasketabeleid . Seni oli taolisi tabeleid koostatud praktiliselt käsitsi . Hoolimata sellest , et arvutuse läbiviimiseks rakendati arvukalt kvalifitseeritud tööjõudu , ei suudetud vigu vältida . Arvuti ENIAC ( Electrical Numerical Integrator and Calculator ) ehitamist alustati John W. Mauchly ja John P. Eckerti juhtimisel Pennsylvania ülikooli juures asuvas Moore'i elektriinseneride koolis . Arvuti projekteerimisele kulus umbes aasta , sellele lisandus veel poolteist aastat seadmete ehitamiseks . Et töid tehti sõja ajal , siis olid need rangelt salastatud ja uuest arvutist teadis väga vähe inimesi . John von Neumann ühines ENIAC'i loojatega ajal , kui arvuti oli põhimõtteliselt juba projekteeritud . Kuigi elektrooniline lamparvuti ENIAC hakkas osaliselt tööle <arv>. aasta lõpul , loetakse selle lõplikuks valmimisajaks siiski <arv>. aastat . <arv>. aastal modifitseeriti arvutit John von Neumanni eestvedamisel . Et ENIAC sooritas andmeedastusi ja arvutusi rööpselt , siis põhjustas see raskusi programmide koostamisel . John von Neumann tegi ettepaneku võtta kasutusele koodikonverter , mis võimaldaks arvutusi läbi viia jadamisi . Samuti tehti ümberkorraldusi arvuti juhtimissüsteemis . Kõik see aitas kokku hoida arvuti programmeerimiseks ( programmi sisestamiseks ) kuluvat aega . Pärast täiustamisi töötas ENIAC veel kuni <arv>. aastani . Kuid juba enne , kui lõpetati tööd ENIAC'i juures , hakati kavandama uut ja veelgi võimsamat elektronarvutit , mida kavatseti seeriaviisiliselt tootma hakata . <arv>. aasta augustis olid Mauchly ja Eckert teinud ettepaneku ehitada arvuti EDVAC ( Electronic Discrete Variable Automatic Computer ) , kus oluliseks uuenduseks oli arvuti võime modifitseerida ise oma programmi . Selle arvuti loogikalise struktuuri väljatöötamisest võttis aktiivselt osa John von Neumann . Töö käigus väljatöötatud uudse arvutistruktuuri põhimõtteid üldistati ning süstematiseeriti ning <arv>. aastal avaldasid Arthur W. Burks , Herman H. Goldstine ja John von Neumanni nüüdseks arvutitehnika kullafondi kuuluva artikli “ Preliminary Discussion of the Logical Design of an Electronic Computing Instrument ” . Selles artiklis kirjeldatud põhimõtetest lähtuvalt projekteeriti edaspidi veel pikka aega nn. Neumanni arhitektuuriga elektronarvuteid . Kuigi artikkel valmis kolme autori ühistööna , on neist hiljem põhjendamatult meeles peetud vaid ühte - John von Neumanni . See asjaolu tekitas isiklikke vastuolusid endiste kolleegide vahel ning andis põhjust etteheideteks tema aadressil . Artiklil oli arvutiteaduse arengule märkimisväärne mõju , selles väljendatud seisukohad pole minetanud oma tähtsust tänapäevalgi . Põhilisteks probleemideks , millele artiklis keskenduti , olid kahendsüsteem ja arvuti talitluse korraldamine mällu salvestatud programmi abil . Von Neumanni arhitektuuriga arvuti keskseks seadmeks on suuremahuline suvapöördusmälu . Arvuti struktuuris tuginetakse kolmele printsiibile : <arv>. Arvuti koosneb neljast allsüsteemist - mälu , aritmeetika-loogikaseade , sisend-väljundseade ja juhtseade ; <arv>. Lähtutakse mällu salvestatava programmi ( nn. siseprogrammarvuti ) printsiibist . Käske esitatakse arvutis kahendarvudena , mida säilitatakse samas mälus , kus töödeldavaid andmeid ning töötluse käigus saadavaid tulemusi ; <arv>. Käskude jadatöötluse printsiip - korraga sooritatakse arvutis ainult ühe ( mälus säilitatava ) käsu võtt . Käsuvõtule järgneb käsu dekodeerimine ja täitmine . Käsuvõttu viib arvutis läbi spetsiaalne juhtseade . Aritmeetika-loogikaseade sooritab andmetega nii aritmeetilisi kui ka loogikalisi operatsioone . Arvuti elementbaasis nähti ette kasutada elektronlülitusi , sest ainult need suudaksid tagada arvutusseadme maksimaalse töökiiruse ( jõudluse ) . Esimeseks digitaalseks elektronarvutiks , kus ülalkirjeldatud põhimõtteid rakendati , oli <arv>. aastal Inglismaal Cambridge'i ülikoolis M. V. Wilkesi juhtimisel ehitatud arvuti EDSAC ( Electronic Data Storage Automatic Computer ) . Arvuti sisaldas <arv> elektronlampi ( trioodi ) , suutes täita umbes <arv> käsku sekundis . Arvuti mälu oli valmistatud elavhõbeviiteliinidel , mälus säilitati <arv> ( <arv>-bitist ) arvu . Mis puutub aga EDVAC' isse , siis selle ehitamine hakkas venima ning too arvuti hakkas tööle alles <arv>. aastal . Oma hilisemas tegevuses huvitus John von Neumann automaatidest , mis talitleksid analoogiliselt bioloogiliste organismidega ( inimesega ) , evides seejuures ka inimlikke omadusi . Ta unistas arvutist , mis suudaks nagu inimaju lahendada väga kiiresti keerukaid , st. mittetäieliku informatsiooniga ülesandeid . Oma töödes kirjeldas John von Neumann ka selliseid arvuteid ( automaate ) , mis oleksid suutelised end ise mitte ainult reprodutseerima , vaid ka täiustama . John von Neumanni viimaseks lõpetamata tööks jäi raamat intrigeeriva pealkirjaga “ The Computer and the Brain ” , kus keskenduti programmeerimise küsimustele . John von Neumann kirjeldas seal kahte lähenemisviisi programmeerimisele , kasutades selleks kahte keelt - nn. programmeerijakeelt ja masinakeelt . Neid erinevaid keeli seob transleeriv programm , mis vastandab automaatselt programmeerijakeeles koostatud programmile masinakeelse programmi . John von Neumann märgib , et ka inimese närvisüsteemis toimib kaks keelt : “ üks , mis on väga harjumatu masinakeel [ suhteliselt tundmatu närviimpulsside keel . - A. T . ] ja enam-vähem harjutud programmeerimiskeel , mille abil inimesed suhtlevad . ” Ta püüdis luua üldist teooriat , mille abil oleks olnud võimalik omavahel sobitada bioloogilisi süsteeme ( looduslikke automaate ) ja elektroonilisi analoog- ning digitaalarvuteid ( kunstlikke automaate ) . <arv>. aastal määras Ameerika Ühendriikide president D. Eisenhower John von Neumanni väga prestiižse USA Aatomienergia Komisjoni liikmeks . Uuel töökohal pühendus von Neumann jäägitult oma ülesannetele , loobudes selleks isegi tööst Princetoni ülikoolis . <arv>. aasta krooniti John von Neumanni panust tippteaduse arendamisel kolme väga kõrge autasuga - talle anti Albert Einsteini mälestusautasu , Enrico Fermi autasu ning Vabaduse medal . Kogu elu oli John von Neumann olnud väga hea tervisega , ränga hoobina tabas teda <arv>. aastal avastatud vähk . Hoolimata kiiresti halvenevast tervisest , püüdis ta jätkata tööd automaatide teooria kallal kuni oma elu lõpupäevadeni . Isegi raskesti haigena ei loobunud ta aktiivsest suhtlusest oma sõpradega . John von Neumann suri <arv>. veebruaril <arv>. aastal Washingtoni Walter Reedi haiglas . Temast jäi maha kaalukas teaduspärand , mis hõlmab erinevaid teadusvaldkondi . Umbes <arv> tööd on pühendatud füüsikale , ülejäänud on valdavalt seotud teoreetilise matemaatika ( loogika , hulgateooria ) ja rakendusmatemaatika ( statistika , hüdrodünaamika , aerodünaamika , ballistika , meteoroloogia , mänguteooria , arvutid ) probleemidega . Rahvusvaheliselt tunnustatud teadlasena oli John von Neumann paljude ülikoolide ( Princeton , Pennsylvania , Harvard , Istanbul , Maryland ) ja instituutide audoktor ning akadeemiate liige ( USA , Itaalia , Holland , Peruu ) . Teda autasustati kahe medali ( Medal for Merit , <arv> ja Medal for Freedom , <arv> ) . Jäädvustamaks väljapaistva teadlase mälestust asutas Elektri- ja Elektroonikainseneride Instituut ( IEEE ) <arv>. aastal John von Neumanni medali , millega autasustatakse väljapaistvate saavutuste eest arvutiteaduses ja tehnoloogias . Samuti antakse välja John von Neumanni nimelist aastapreemiat . 