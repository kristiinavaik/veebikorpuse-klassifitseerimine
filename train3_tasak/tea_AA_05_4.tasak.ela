kirjak	tea_AA_05_4.tasak.ela	TOIMETAJALT <arv>-<arv> UML - Unified Modeling Language on kavandatud üldotstarbelise modelleerimiskeelena ja nagu nimigi ütleb , peaks UML unifitseerima erinevaid keeli ja probleemvaldkondi tarkvara elutsükli jooksul . UML loomisel oli/on dilemmaks : ühelt poolt peaks UML olema võimalikult lihtne üldotstarbeline modelleerimiskeel , kuid teiselt poolt on vaja katta tohutu hulk erinevaid probleemvaldkondi , mis toob paratamatult sisse keerukuse . Asi pole küll nii hull nagu rohuteaduses : kui miski rohi ravib kõiki “ haigusi ” , siis ei ravi õieti midagi - aga modelleerimis- keele universaalsust ( sobivust paljudele valdkondadele ) ja lihtsust pole kerge saavutada . Pisut UML <arv>.<arv> tekkeloost . <arv>ndatel aastatel tuli tarkvaraarendusse objektorienteeritud programmeerimine , seejärel ka objektorienteeritud analüüs ja disain ( kavandamine ) . “ Meetodite sõja ” võitjaks osutus unifitseeritud meetod ( Unified Method ) , mille üheks oluliseks komponendiks oli UML . UML sai üldtunnustatuks ja <arv>. aastal kinnitas OMG ( Object Management Group ) UML <arv>.<arv> standardiks . UMLi täiendati : <arv> - UML <arv>.<arv> , <arv> - UML <arv>.<arv> , <arv> - UML <arv>.<arv>. Lisaks UMLile arendas OMG ka teisi modelleerimisvahendeid ( -keeli ) : Meta-Object Facility ( MOF ) , Extensible Markup Language ( XML ) , Common Warehouse Meta-model ( CWM ) ja System Modeling Language ( SysML ) . Samal ajal intensiivistas OMG töid MDA ( Model Driven Architecture ) väljatöötamisel . MDAst pidi saama “ järgmine samm süsteemide integreerimise ja elutsükli käsitlemisel ” . UMLs modelleerimine oli seejuures üks MDA nurgakividest - MDA vajadused tõid aga UMLi puudused ilmekalt esile . Eelnevate pisitäiendustega võrreldes oli vaja UMLi tõsisemat kohendamist . Eeldused UML <arv>.<arv> loomiseks olid olemas , OMG avaldas UML <arv>.<arv> <arv>. aasta lõpus . Siinkohal ei püüa me anda UML <arv>.<arv> iseloomustust , jätame selle edaspidiseks . Mainime vaid , et senise <arv> vaate ( diagrammi tüübi ) asemel on UML <arv>.<arv>s <arv> vaadet - UML <arv>.<arv> võtmesõnadeks on modelleerimise täpsus ja väljendusrikkus , mis on võrreldav Specification and Description L anguage ( SDL ) ja Real-time Object-oriented Modeling ( ROOM ) vahenditega . Modelleerimise täpsus ja väljendusrikkus saavutati järgmiste täiendustega . <arv>. Oluliselt tõhusam komponendipõhise arenduse tugi ( UML Composite structure ) <arv>. Hierarhiline dekompositsioon ja struktuuri ning käitumise integratsioon <arv>. Käitusaja ( runtime ) arhitektuuri modelleerimine <arv>. Toimingute semantika ( action semantics ) integreerimine käitumist kirjeldavate konstrukt- sioonidega ( behavior constructs ) <arv>. Kihilise arhitektuuri tugi <arv>. Käitumise modelleerimine äritasemel ( business level ) , kasutuskaasuste ( use case ) tasemel ja oluliselt täiendatud toimingudiagrammide ( activity diagram ) tasemel . Priit Raspel  Priit Raspel - sündinud <arv>. oktoobril <arv> Tallinnas . Lõpetanud <arv> Tallinna Polütehnilise Instituudi majandusteaduskonna informatsiooni mehhaniseeritud töötlemise erialal . <arv>-<arv> Tallinna Tehnikaülikooli vanemõpetaja , <arv>-<arv> AS Tarkvara tarkvara arendusjuht , <arv>-<arv> Innovatsioonipanga IT juht , <arv> Tööstuspanga IT arendusjuht , <arv>-<arv> AS Eesti Kindlustus IT arendusjuht , alates aastast <arv> SEB Eesti Ühispanga tarkvaraarendusdivisjoni IT arendusjuht . Aastast <arv> tehnikateaduste magister . <arv>-<arv> Mainori Ülikooli lektor , <arv>-<arv> Audentese Ülikooli lektor , aastast <arv> IT Kolle dþi lektor , aastast <arv> EBS lektor , aastast <arv> Mainori Kõrgkooli lektor Oli eelmise sajandi <arv>ndate aastate keskpaik , kui tollases Nõukogude Liidus kuulutati välja “ kogu maa arvutiseerimine ” ja kommunism sai lisaks nõukogude võimule ja kogu maa elektrifitseerimisele uue , kolmanda komponendi . Sellest hetkest sai ka tollases ENSVs arvutihariduse areng olulise tõuke . Asja ametlikuks formaalseks algatajaks oli NSVLi akadeemik Andrei Jerðov oma mõtteavaldustega “ teisest kirjaoskusest ” , mille all ta pidas silmas arvutiõpetuse kiiret viimist koolide õppeprogrammidesse ja arvutioskuse kõikehõlmavat levitamist “ laiadesse massidesse ” . Loomulikult oli selline kampaanialik käitumine iseloomulik tollasele nõukogude ühiskonnale , kuid samas olukorras oli ka tegelikult lääne ühiskond . Vaatamata lääne ühiskonna tunduvalt kõrgemale elatus- ja arengutasemele , ei olnud ka seal “ igaühe arvutioskus ” oluliselt paremal tasemel . Seda selle pärast , et personaalarvuti oli just äsja turul levima hakanud ja paljud polnud sellega veel kokku puutunud - nendega tegelesid vaid friigid . Kuigi esialgu saavutas lääs , võrreldes nende piirkondadega , kus meie elame , olulise edumaa , siis tänaseks on see vahemaa valdavalt kadunud , paljude piirkondadega võrreldes muutunud suisa edumaaks ja alla jääme ainult vähestele . Vähemalt me ise arvame nii . Igatahes oleme sellises olukorras , kus arvutustehnika on tunginud meie igapäevase elu , varasemast vaatevinklist vaadatuna , kõige kummalisematesse valdkondadesse , ja tahame või ei taha , arvuti kasutamine on paljudel juhtudel lausa paratamatus . Eriti agaralt tegelevad sellega noored , kes on leidnud arvutustehnikas ja kõiges sellega kaasnevas endale huvitava mänguasja , mis aitab sisustada aega , kuid ühtlasi ka arendab . Kasvavat noorust vaadates on kõhkluseta selge , et nad on omandanud midagi , mida meie selles vanuses veel omandanud polnud . On see nüüd too “ teine kirjaoskus ” või midagi muud vajalikku või mittevajalikku , pole päris selge , aga midagi seal on . On see parem või halvem kui eelmistel põlvkondadel ? Kas on ainult midagi lisandunud või vahest on ka midagi olulist kaotsi läinud ? Katsume selle üle natuke arutleda ja asjas veidike selgust saada . Tõuke selle artikli kirjutamiseks andis kaks kokkulangevust . Esiteks loomulikult see , et mul paluti kirjutada . Kuid just samal päeval juhtusin lugema järjekordset ühes ministeeriumis noorte spetsialistide poolt üllitatud dokumenti , milles esmapilgul hariliku harimatuse kõrval torkas tugevasti silma ka tohutu kirjaoskamatus . Lugesin seda dokumenti mitu korda ja sain aru , et tegelikult ei olnud selle kirjutaja üldse harimatu inimene , küll aga oskas ta oma haridust oskuslikult varjata kirjaoskamatuse taha . Siis tekkiski minus , mitte küll esimest korda , aga seekord veidi tugevamalt , küsimus : miks ei suuda noored ennast selgelt väljendada ? Neid ju õpetatakse koolis selleks samamoodi nagu meid omal ajal. Meetodid on ju samad . Või vahest selles ongi viga ? KIRJAOSKUS Kirjaoskuse andmine õpilastele on kooli kõige vanem eesmärk - kõigepealt hakati õpetama lugemist ja kirjutamist , siis mingil hetkel tulid juurde arvutamine ning loodusteadused ja nii see asi kasvas . Kogu koolis õppimine baseerub endiselt siiski lugemis- ja kirjutamisoskusel - ilma nende oskusteta tänapäevane haridussüsteem ei toimiks . Teiselt poolt annavad kõik teised õppeained omakorda tagasisidet ka kirjaoskusest . Lõplik kirjaoskus kujuneb välja kogu õpitu kogusummana ja on üldjuhul seda parem , mida laiem on inimese silmaring . Viimaste kümnendite jooksul on Eestis mitmeid kordi muudetud emakeele õpetamise metoodikaid , kuid põhijoontes õpetatakse minu lastele emakeelt samuti kui <arv> aastat tagasi minu põlvkonnale - grammatikareeglid , etteütlused , kirjandid , esseed , kohustuslik kirjandus jms. Seega peaks ju asi toimima , kuna aastakümnete jooksul on meie koolidest tulnud hulgaliselt kirjaoskajaid inimesi . Ja inimesed ju kogu aeg lõpetavad koole - seega on nad õppimisega hakkama saanud . Kuna õppimine baseerub kirjaoskusel , siis peaksid nad kirjaoskajad olema . Kirjaoskusel on lisaks õpetamise toetamisele ka teine ülesanne . Kirjaoskuse omandanud inimene peaks oskama oma teadmisi ja mõtteid väljendada ja kirjalikult talletada . Seejuures on oluline , et teised kirjutatut ka mõistaksid . Ja leidub ka selliseid , kes sellega hakkama saavad . Kogu aeg on olnud nii , et lugema-kirjutama õpivad kõik , aga oma mõtteid huvitavalt paberile panema ainult vähesed . Sinna kahe taseme vahele jääb suurem osa inimesi , kes oskavad vajalikke tekste vajalikul tasemel kirjutada - just sellisel tasemel , nagu nõuab nende hobi või amet . See osa moodustabki kirjaoskajate enamiku . Vähemalt siiani moodustas . Nüüd aga , jälgides tudengite kontrolltöid , kursusetöid , lõputöid jms , võib täheldada olulist muutust , võrreldes varasemaga - nende inimeste hulk , kes oma mõtteid arusaadavalt paberile oskavad panna , väheneb kogu aeg . Sama probleem on jõudnud värskete koolilõpetajate kaudu ka juba toimivatesse firmadesse ja riigiasutustesse . Võiks arvata , et aastatepikkune kogemus koolis lugemist-kirjutamist õpetada peaks aja jooksul metoodikaid paremaks muutes andma koolidele võime järjest paremaid kirjaoskajaid välja lasta . Siiski võib näha , et tegelikult on asjad teisiti . Miski on senise süsteemi pea peale pööranud , kuna tulemused on eeldatavale vastupidised . On selleks äkki kogu maailma mõjutanud arvutustehnika aktiivne kasutuselevõtt ja “ teise kirjaoskuse ” tulek ? Katsume jõuda asja tuumani ja arutleme edasi . “ TEINE KIRJAOSKUS ” Oleks liiga triviaalne mõelda “ teise kirjaoskuse ” all lihtsalt arvutiga kirjatükkide kirjutamise ja nende lugemise oskust . See ei mõjutaks oluliselt kuidagi kirjaoskuse õpetamist . Isegi kui lisame siia joonistamise ja piltide vaatamise oskused või laiendame “ kirjaoskust ” kuni kogu multimeedia loomise ja nautlemiseni , ei hõlma me ikkagi piisavalt suurt osa sellest mõistest . Kujundlikust seisukohast on see väga hea termin , kuid tegelikult juhib meie mõtted oma liigse tähenduslikkusega valesse suunda . Seepärast , et mitte lasta kasutataval mõistel juhtida mõtteid valele teele , peab võtma kasutusele mingi muu mõiste . “ Arvuti kasutamise oskus ” ei kõlba , kuna on tegelikult sama vale kui nimetada kirjutamist “ pliiatsi kasutamise oskuseks ” . See rõhutab oskust kasutada mingit konkreetset tehnilist vahendit sellele konkreetset sisu andmata . Seda enam , et kirjutada võib osata ka ilma pliiatsi kasutamise oskuseta ja kirjutamise oskus eksisteeris palju aega enne pliiatsi leiutamist . Pliiatsi leiutamise järel lihtsalt muutus selle tegevuse tehniline baas - kirjutamine muutus lihtsamaks ja kättesaadavamaks rohkematele inimestele . Kirjutajaid tekkis rohkem ja see tingis ka lugemisoskuse levimise massidesse , sest oli , mida lugeda . Sama on toimunud ka selle tegevusega , mida me praegu teeme arvutite abil . See tegevus ei tekkinud täna , vaid on arenenud erinevate tehniliste vahendite arengu ja kasutajagruppide laienemise kaudu . Selle tegevuse nimeks on “ informatsiooni käsitlemine ” . Arvutite tekkimine , nende kasutajaliidese igale inimesele jõukohaseks muutumine , hinna sobivale tasemele langemine ja eriti veel nende arvutite võrku ühendamine viis informatsiooni käsitlemise täiesti uuele tasemele . See muutis “ informatsiooni käsitlemise ” tähenduse laiemaks ja tegi selle erinevatel keerukuse tasemetel kättesaadavaks väga erinevatele inimrühmadele . NOORED JA ARVUTID Ilmselt ei ole vaja hakata põhjendama või tõestama , et noortel on parem õppimisvõime kui vanadel . See on üldteada fakt . Miks ma seda mainin ? Sest nooruses , vaatamata koolis rakendatavale sunnile ja süsteemsusele , omandatakse suur osa teadmisi kogemuslikult , intuitiivselt . Lihtsalt kõrvutades saadud kogemusi ja valides sarnastes situatsioonides toimunud sündmustest ja käitumismudelitest välja need , mis samasuguses situatsioonis tulevikus suurema tõenäosusega annavad soovitud tulemuse . Seda protsessi korratakse korduvalt , kuni kogemuste baasil lihvitakse välja optimaalseim käitumismall või tegelikkust paremini kirjeldav teadmine . Sel viisil omandavad tänapäeva noored , kes kasvavad arvuti kõrval , ka arvuti kasutamise oskused . Keegi näitab neile , kuidas arvutit käima panna , kus on klaviatuur ja kus hiir ja mis nendega teha saab , ja sellega tavaliselt “ sissejuhatus andmetöötlusesse ” piirdubki . Tegelikult ei ole isegi see vajalik , kuna “ esivanemate ja vanemate kolleegide ” käitumist jälgides saavad nad isegi aru , mida teha ja kuidas mingit seadet käsitseda . See on täiesti hämmastav , kuidas intuitiivselt õpitakse kasutama erinevaid programme , liikuma ringi Internetis , otsima muusikapalu ja mänge ( sellest asi tavaliselt algab ) , häälestama arvutit jne. Kõigest sellest enda lõbustamiseks tehtavatest tegevustest areneb välja selline oskuste komplekt , mida meie põlvkonna esindajatel pole mingit lootust üle lüüa . See on muidugi loomulik , sest kui järgmine põlvkond ei omandaks eelmise põlvkonna poolt loodud vahendite kasutamist paremini kui nende loojad , siis toimuks ju taandareng . Kõik tundubki korras olevat , aga päriselt nii see pole . KIRJAOSKUS VERSUS KIRJAOSKUS Tavaliselt juhtub see esimese põlvkonnaga , kes mingit uut tehnoloogilist vahendit kasutab . Juhtub see , et innustutakse liialt mingi vahvast tehnoloogiast , andutakse täielikult selle kasutamisele ja “ kantakse maha ” sellesama tehnoloogia eelmine tase . Nii juhtus see kirjutusvahendite arengu aktiivsel perioodil , kui suures kirjutamise-lugemise tuhinas unustati ära lugude-muinaslugude-seikluste jutustamine ja kuulamine . Üksteisega rääkimine taastus mingil määral alles telefoni leiutamise ja kasutusele võtmise järel . Nii on juhtunud ka praegu - suures arvutite kasutamise tuhinas on unustatud ära kaks asja - lugemine ja kirjutamine . Seda küll mitte päriselt , sest kirjutatakse ju üksteisele läbi interneti , ja kui kirjutatakse , siis oletatavasti keegi ka loeb midagi . Aga see ei ole endine kirjutamine ja lugemine , vaid on lihtsalt kirjalikuks tekstiks muutunud kõne . Aga mis on siis nende kahe erineva kirjutamise-lugemise , vana ja uue vahe ? Vaatame kõigepealt seda “ vanemat kirjaoskust ” . Mingi kirjatüki kirjutaja teadis kirjutamise ajal ja võttis igati arvesse seda , et kui keegi seda kirjatükki loeb , siis teda ennast kohal ei ole . See tähendab , et kogu informatsioon ja emotsioon peab sisalduma tervikuna selles kirjatükis , sest mingeid täiendavaid selgitusi ta selle lugemise hetkel enam lugejale anda ei saa . See omakorda eeldab teksti loogilist ülesehitust , teksti erinevate osade omavahelist seotust , mõistete ammendavaid definitsioone , objektide oluliste osade piisavalt täpseid kirjeldusi ja palju muud sellist . “ Uuem kirjaoskus ” on hoopis teise iseloomuga . Siin kasutatakse kirja tegelikult vestlemiseks . Kuna kirjutamine on tunduvalt aeglasem info edastamise viis , kui seda on rääkimine , siis üritatakse kirjutada võimalikult lühikeste fraasidega ja kirjeldada omi mõtteid minimaalselt vajalikus mahus ja isegi vähem - on ju vestluskaaslasel vestluse käigus võimalik küsida täpsustusi . Kõrvalharuna toimub muutus ka kasutatavates sõnades enestes . Et hoida kokku tähemärkide arvu ja suurendada seega kirjutamise kiirust , on tekkinud paljudele sõnadele nn e-suhtluse kirjapilt ja kujunenud välja vaikimisi kasutatavad reeglid lühema kirjapildi saavutamiseks . Nii näiteks kasutatakse tähekombinatsiooni “ ks ” asemel tähte “ x ” ja sageli kasutatavate sõnade puhul jäetakse ära täishäälikuid ( nii näiteks võib sõna “ näiteks ” kirjutada e-suhtluses “ ntx ” ) . Selliseid lühendeid sisaldava teksti lugemiseks peab muidugi teadma reeglistikku ja omama piisavat kogemust , kuna sama lühend võib tähistada sõltuvalt kirjutatu kontekstist hoopis teist sõna . Aga see pole üldsegi nii oluline , sest nagu eespool mainitud , on sisu tähtsam kui vorm. Pealegi on sõnad ja lauseehituski eesti keele arengu jooksul väga palju muutunud . Kui vaadata üle-eelmisel sajandil kirjutatud tekste , siis praegusest vaatevinklist lähtudes tunduvad need kohati halenaljakad . Probleemsemana võib tunduda see , et kirjapilt ei lange enam kokku hääldusega . Aga ka see on ju lõppude lõpuks ainult meie enda kokkuleppe küsimus - maailmas on palju keeli , mille hääldus ja kirjapilt on meie kogemuse seisukohalt vaadates täiesti erinevad . Sellisel kirjateel mõtetevahetamisel on vähemalt üks hea külg ja ka vähemalt üks halb külg . Hea on see , et inimene õpib oma suuremaid mõtteid kontsentreerima võimalikult lakooniliselt väljendatud mõttekatketena . Halb on aga see , et mõtete kontsentreerimise käigus kaob oskus väljendada sidusaid terviklikke mõtteid , mis ühe korraga mõistetavana välja öeldakse . Mul on olnud võimalik jälgida tudengite kirjatükkide stiili ja sidususe muutusi alates eelmise sajandi <arv>ndate aastate keskpaigast . Enamik töid , mis hindamiseks esitatakse , kannavad juba mitmete aastate jooksul sama pitserit - töö struktuur on kehv , mõtted on katkendlikud , laused on konarlikud , slängi kasutamisega on ilmselt üle pingutatud ja kokkuvõttes ei ole tööd loetavad . Kui ka töö pealkiri on ebaõnnestunult välja mõeldud , siis vahel ei saagi aru , mis selle töö eesmärk on . Samas esitatakse , kuigi vähe , ka üllatavalt häid töid , kus pea kõik eelmised puudused on olemata või ilmnevad väga nõrgalt . Kuidas osa inimesi suudab ja oskab , osa aga mitte ? See hakkas mind huvitama ja ma küsitlesin oma tudengeid . Ilmnenu ei tohiks olla kellelegi üllatuseks - need tudengid , kelle tööd on paremad , lihtsalt loevad raamatuid . Mida “ hullem bibliomaan ” konkreetne isik on , seda parema stiiliga on üldjuhul ka tema enda kirjutatud tööd . Kui nüüd panna kokku eespool kirjeldatud intuitiivne teadmiste omandamine ja raamatute lugemine , siis on täiesti selge , mis on allikaks ja kuidas kujuneb välja oskus väljendada arusaadavalt oma mõtteid - see põhineb teiste inimeste oskuste üldistamisel ja selle baasil oma maailmatunnetuse ning mõtlemisoskuse kujundamisel . Pole üldistusbaasi , pole oskusi . KAS KIRJAOSKUSE “ LÕPP ” ? Seda kindlasti mitte . Ilmselt on praegu lihtsalt mõõn ja kord oleme jälle laine harjal - areng on kord juba tsükliline . Kahte mõõna põhjust ma juba mainisin . Esiteks põhjustab mõõna kindlasti see , et vahendid on uued , nende kasutamise kogemus ka aktiivsel põlvkonnal alles liiga värske ja puuduvad üldistused , mille alusel järgmisi põlvkondi uuel tasemel õpetada . Puuduvad ka õpetajad , kes seda oskaksid , sest nemadki on vana koolitusega . Teiseks põhjuseks on kindlasti noore põlvkonna aktiivsus uute vahendite kasutamisel , mis jätab traditsiooniliste oskuste õppimise tagaplaanile . Aga see pole kõik . Kindlasti on üheks oluliseks mõõna põhjuseks ka see , et uus keskkond on küll tehniliselt “ üpris valmis ” , kuid loogiliselt ( sisu poolest ) üsna puudulik . See tähendab , et keskkond on olemas , aga sisu veel pole . Kuigi tehnilisi materjale ja entsüklopeedilisi katalooge on piisavalt , puudub seal pea tervikuna kogu ilukirjanduslik osa ja kogu inimkonna kultuuriline pärand . Samas on seal jälle suur hulk visuaalseid ja audioteoseid , mis kuidagi ei arenda kirjaoskust . Proportsioonid on paigast ära . Võiks öelda nii - õppija kolis “ uude keskkonda ” , aga õppematerjalid jäid “ vanasse keskkonda ” . Edukamad on need , kes suudavad opereerida mõlemas keskkonnas . See , et enamik seda ei suuda või ei taha , ongi kirjaoskuse mõõna peamine põhjus . Seega on meil vaja aega , et ladestuks Interneti “ kultuurikiht ” ja et olulisim osa “ vanast kultuurikihist ” jõutaks adopteerida uude keskkonda . Tuleb oodata , kuni tehniliselt valmis keskkond saaks funktsionaalselt valmis sellisel tasemel , et ta oleks suuteline asendama seni kasutatut . Sõna “ ootamine ” on siin küll tinglik - tegelikult peame me kõik , kes selleks suutelised , andma oma panuse sellesse arengusse . Ilmselt ei ole karta , et kirjaoskus kui selline kusagile kaoks , tõenäoliselt muudab vaid mingil määral oma vormi - lõppkokkuvõttes on tal liiga oluline koht kogu ühiskonna arengus . Iseasi on , kas säilib eestikeelne kirjaoskus . Järjest rohkem avaldatakse survet hariduse rahvusvaheliseks muutmiseks ja üha tugevamini pressib peale inglise keel . Praegu räägitakse doktoriõppe täielikult ingliskeelseks muutumisest . See toodab meile õppejõude , kes on ilmselt valmis muutma magistriõppe ingliskeelseks , seejärel võib-olla ka keskkooli jne. Sest haridussüsteem lihtsalt ei tooda enam eestikeelset kirjaoskust valdavaid spetsialiste . Kaob eestikeelne erialane terminoloogia ... Kaob võimalus õpetada erinevaid teadusi eesti keeles . Selle kõige suunamine on meie kätes . Jääb ainult valida õiged eesmärgid ja teha nende saavutamiseks õigeid otsuseid . Arvo Toomsalu , TTÜ arvutitehnika instituut Möödunud sajandi kuuekümnendate aastate keskpaigaks oli integraallülituste valmistamise tehnoloogia saavutanud juba sellise taseme , et võidi hakata tegelema keerukate , kõrge integratsioonitasemega lausintegraallülituste valmistamise probleemidega . Neist uuringuist ei jäänud kõrvale ka USA firma Texas Instruments , Inc . ( TI ) , mis oli <arv>. aastaks tõusnud üheks juhtivaks keskuseks integraallülituste väljatöötamise ja tootmise vallas . Tollal valmistati TIs peamiselt laias valikus erinevaid madala integratsioonitasemega digitaallülitusi , mille põhitarbijaskonnaks olid arvuteid ja juhtimissüsteeme tootvad ettevõtted . Soovides tarbijaskonda laiendada , jõuti firmas plaanini , milles nähti ette uute , kõrgema integratsioonitasemega mikrolülituste ( lausintegraallülituste ) väljatöötamine , mis sobiksid just laiatarbe-elektroonikatoodete valmistamiseks . Üheks põhjuseks , miks selline plaan sündis , oli asjaolu , et enam-vähem sarnaste projektidega olid hakanud tegelema TI peamised konkurendid Fairchild , Rockwell , Hitachi jt. Nii näiteks valmis Rockwelli ja Sharpi ühistööna lausintegraallülitus , mida hakati kasutama elektroonilises võrgutoitelises lauakalkulaatoris Sharp QT-<arv>D ( <arv> ) . Rockwelli lausintegraal- lülitusi kasutati patareitoitelistes kalkulaatorites Sharp EL-<arv> ( <arv> ) . Kirjeldades arvutitehnika arengut möödunud sajandi <arv>.- <arv>. aastatel , rõhutatakse tavapäraselt eriti arvutite muutumist massilise tarbimise objektiks . Neil aastatel toimus märkimisväärne kvalitatiivne hüpe elektrooniliste laiatarbekalkulaatorite arendamises ja tootmises . Muidugi ei tekkinud uued elektroonilised , integraallülitustele tuginevad kalkulaatorid tühjale kohale , vaid nad said võimalikuks tänu kiiretele edusammudele pooljuhtlülituste valmistamise tehnoloogias . Et paremini mõista , kuivõrd kiire areng neil aastatel toimus , olgu meenutatud kahte sündmust . <arv>. aastal valmistasid Suurbritannia firmade Bell Punch Co. LTD ja Sumlock-Comptometer LTD esimese elektroonilise lauaarvuti Anita . Selles arvutis kasutati üksnes elektronlampe , mille arv piirdus kõigest kolmekümne kolmega . <arv>. aastal valmistati aga Jaapani firmas Sony Corporation maailma esimene lauaarvuti MD-<arv> , milles kasutati juba ainult transistore . Kirjeldatud sündmused eelnesid vahetult <arv>. aastal TIs käivitatud projektile . Ettepanek laiatarbe-lausintegraallülituste väljatöötamiseks pärines tollaselt TI presidendilt Patric Eugene Haggertylt . Kui algselt kavandati laiahaardelist , väga erinevatesse laiatarberakendustesse sobivate lausintegraallülituste väljatöötamist , siis peagi otsustati piirduda konkreetsema eesmärgiga - luua spetsiaalsed lausintegraallülitused kalkulaatori tarvis . Firmas käivitatigi projekt tingnimetusega Cal-Tech ning selle juhtimine usaldati Jack Kilbyle , spetsialistile , kellel olid vaieldamatult kõige suuremad kogemused ja kompetents integraallülituste vallas<arv>. Peagi liitusid J. Kilby juhitava projektiga Jerry D. Merryman , kogenud spetsialist integraallülituste projekteerimise alal , ja James H. Van Tassel . Lisaks suurtele kogemustele tootmise korraldamise vallas oli Tassel väga kompetentne nii materjaliteaduse , mehaanika kui ka elektroonika küsimustes . Kui J. Merrymani ülesandeks oli tulevase kalkulaatori loogikalise struktuuri projekteerimine , siis J. Van Tassel keskendus selle riistvara küsimuste lahendamisele . Lisaks neile kaasati Cal-T echi projekti veel rida teisi TI spetsialiste . Projekteerimistööd käivitati <arv>. aasta oktoobris . Neid tehti suure saladuskatte all , ainult väga piiratud arv inimesi teadis täpselt , mis oli Cal -Techi põhieesmärk . Hoolimata töö pingelisusest ja keerukusest , tegid kõik osalised seda suure innuga . Sel ajal , kui J. Merryman tegeles kalkulaatori loogikalise struktuuri sünteesiga , keskendus J. H. Van Tassel selle tarvis sobiva väikese ja töökindla klaviatuuri väljatöötamisele . Kumbki ülesanne polnud lihtsate killast ja kuna puudusid ka kogemused taoliste ülesannete lahendamiseks , siis oli raske vältida ekslikke lahendusi . Näiteks pärast kalkulaatori loogikalise struktuuri valmimist otsustas J. Merryman loobuda välja- töötatud lahenduse testimisest kalkulaatori prototüübil ja asus kohe valmistama kolmest integraallülitusest koosnevat kiibikomplekti . Igati julge otsus , eriti kui arvestada seda , et seni polnud nii kõrge integratsioonitasemega mikrolülitusi firmas üldsegi valmistatud . Kuni selle ajani oli TI valmistanud madala integratsioonitasemega integraallülitusi , kus kiipides ei olnud üle paarikümne lihtsa loogikalüli . Nüüd tuli hakata valmistama lausintegraallülitusi , kus kiipidesse oli vaja mahutada kuni <arv> loogikalüli . Keerukate kalkulaatorkiipide valmistamisel rakendati tollal moodsaimat , TIs alles äsja kasutusele võetud MOS-tehnoloogiat . Kui aga esimesed kiibid valmis said , siis ei hakanud neist ükski tööle . Kiirustamine ja põhjen- damatu ootus , et keerukates loogikalülitustes ei saa esineda loogika- , topoloogia- või tehnoloogilisi vigu , maksis väga valusalt kätte . Sellised vead , millest suuremat osa oleks hõlpsasti saanud avastada juba kalkulaatori prototüübil läbiviidavate testimiste käigus , olid lipsanud valminud kiipidesse . Kasutades tavalisi standardseid madala integratsioonitasemega integraallülitusi , tuli nüüd kiipides erinevate vigade avastamiseks kiirkorras valmistada lausintegraallülituste funktsionaalsed analoogid ( mudelid ) . Pärast mudelite igakülgset testimist ja neis vigaste kohtade tuvastamist tehti kalkulaatorkiipides vajalikud parandused , nii et lõppude lõpuks hakkasidki need korrektselt funktsioneerima . Kui J. Merrymanil tuli heidelda kapriissete lausintegraallülitustega , siis ega lihtsamad polnud probleemid , mida pidi lahendama J. Van Tassel . Üheks pähkliks kujunes küsimus , kuidas korraldada kalkulaatorist arvutustulemite väljastamist . Tollal laialdaselt kasutatud gaaslahenduskuvaseadmed vajasid talitlemiseks kõrgeid pingeid . Tänapäeval nii tavalisena tunduvad indikaatorelemendid valgusdioodidel olid aga alles laborikatsete staadiumis . Et ükski standardne kuvaseade ei sobinud portatiivsele autonoomse elektritoitega kalkulaatorile , siis otsustati kuvapaneelist üldse loobuda ning asendada see miniatuurse printeriga . See , et kalkulaator väljastab informatsiooni ainult printväljastisena , ei olnud sel ajal midagi erakordset . Kuid TI lahenduse innovaatilisus seisnes selles , et kohmakate ja suurte elektromehaaniliste prindiseadmete asemel võeti kasutusele ökonoomne , väikese energiatarbe ja müratasemega , portatiivne termoprinter . Valik langes firma enda poolt loodud printseadmele . Kuid hoolimata isegi valitud prindiseadme ökonoomsusest , osutus see kalkulaatoris ikkagi üheks suurima võimsusega energiatarvitiks . Küllaltki tõsiseid raskusi tekkis kalkulaatori energiavarustuse korraldamisel . Juba projekt- ülesandes oli püstitatud nõue , et kalkulaatorit tuleb varustada elektrienergiaga autonoomsest toiteallikast , seega oli esmaseks ülesandeks leida selleks sobiv toiteelement või -elemendid . Algul kaaluti , kas mitte rakendada toitesüsteemis korduvkasutatavaid Ag-Zn-toiteelemente , kuid peagi loobuti sellest variandist ning otsustati ökonoomsemate Ni-Cd-toiteelementide kasuks . Kokku vajas kalkulaatori , Cal-Techiks , akumulaatori nimetatud energiatoitesüsteem ühtteist Ni-Cd-elementi . Just need elemendid moodustasid lõviosa kalkulaatori massist . <arv>. aasta lõpuks sai kalkulaator Cal-Tech valmis , seadme töötava mudeli demonstratsioon osutus igati edukaks . Cal-Tech kujutas oma aja kontekstis tõelist taskukalkulaatorit . Võrdlemisi lihtsa väliskujundusega -tollise alumiiniumkorpusega lausintegraallülitustel kalkulaator kaalus “ kõigest ” <arv>,<arv> naela<arv>. Kalkulaator opereeris <arv>-järguliste kümnendsüsteemis esitatavate operandidega , sooritades liitmis- , lahutamis- , korrutamis- ja jagamisoperatsioone . <arv>. aastal esitasid J. Kilby , J. Merryman ja J. Van Tassel , tuginedes C al-Techile , patenditaotluse ( Miniature Electronic Calculator ) , mille peale <arv>. aastal andis USA patendiameti neile välja patendi nr <arv> <arv> <arv>. Kuigi lausintegraallülitusi sisaldava kalkulaatori projekt osutus igati edukas , ei hakatud TIs kalkulaatorit siiski tootma . Vastavalt firma tulevikuvisioonile nähti ette orienteerumist ikkagi integraallülituste valmistamisele , mitte aga konkreetsete laiatarbekaupade tootmisele . Küll aga koguti Cal-Techi projekti käigus väärtuslikke teadmisi ja kogemusi , kuidas otstarbekalt korraldada keerukate lausintegraallülituste projekteerimist ja valmistamist . Tänu sellele projektile mindi Texas Instruments is integraallülituste valmistamisel üle uuele , kvalitatiivselt märksa kõrgemale tehnoloogilisele tasemele . Erinevalt aga paljudest teistest analoogilistest projektidest ei jäänud kalkulaator Cal-Tech vaid üheks järjekordseks huvitavaks , kuid unustusehõlma vajunud väljatöötluseks , vaid see seade jõudis siiski ka masstootmisse . Seda tänu TI ja kalkulaatoreid tootva tuntud Jaapani firma Canon Incorporated viljakale koostööle . Tõsi , turule jõudnud kalkulaator ei kandnud enam nime Cal-Tech , vaid Pocketronic . Muutunud polnud mitte üksnes kalkulaatori nimi , vaid seadme konkurentsivõime tõstmiseks oli tehtud täiustusi ka selle disainis . Pocketronicu kohandamisega vastavaks tollastele turunõuetele ja selle tootmisega tegeles Canon , TI ülesandeks jäi tootja varustamine kalkulaatori elektrooniliste tuumlülitustega , st kiibikomplektiga <arv>x . Esimesed Pocketronicud jõudsid Jaapanis müüki <arv>. aastal , USAs aga <arv>. aasta algul . Nagu oma prototüübis Cal-Techis kasutati ka Pocketronicus <arv>-järgulisi kümnendarve ( <arv> kohta enne koma ja <arv> kohta pärast koma ) , millega sooritati nelja põhilist aritmeetikatehet . Kalkulaatori juhtimiseks ( andmete sisestamiseks ) oli seade varustatud tavalise kümnendsõrmistikuga , mida täiendasid seitse funktsioonisõrmist [ + ] , [ ] , [ x ] , [ ÷ ] , [ C ] , [ Cl ] , [ ? ] ning neile lisanduv toitelüliti . Erinevalt enamikust kaasaegsetest taskukalkulaatoritest oli Pocketronic varustatud juhtsõrmisega [ ? ] , mille aktiveerimisel sooritati sisestatud arvandmetega ettenähtud aritmeetiline tehe ning saadud tulem prinditi välja . Et kasutajail oleks kergem jälgida nii sisestatavaid andmeid , siis sarnaselt Cal-Techiga puudus ka Pocketronicul kuvapaneel , samuti oli kerge kalkulaatoril sõrmistiku kohal läbipaistva suurendava plastkattega aknakeselt näha tulemit . Aknakese alt liikus läbi termoprinteri pabeririba , kuhu prinditi nii algandmed kui ka tulem . Võrreldes aga prototüübiga , tegi Canon Pocketronicus veel ühe olulise täienduse . Kasutusele võeti spetsiaalne kergesti vahetatav kassett termopaberlindi tarvis . <arv> grammi kaaluv kassett mahutas ligikaudu <arv> meetrit <arv> mm laiust termopaberlinti , millest piisas umbes <arv> arvutuse sooritamiseks . Väljastatavaid sümboleid sünteesiti <arv> x <arv>-punktilises rastris ning nende suurus oli vaid <arv>,<arv> × <arv> mm . Võrdluseks olgu mainitud , et Cal-Techi termoprinter sünteesis sümboleid rastris <arv>x<arv> punkti , mistõttu selle printeri poolt väljastatud sümbolite kujutise kvaliteet jättis paljugi soovida . Konstruktiivselt olid Pocketronicu elektroonikalülitused jaotatud kolmele väikesele trükiplaadile , mis omavahel ühendati kaablitega . Ühel trükiplaatidest asusid diskreetsetest raadiokomponentidest koostatud taktigeneraator , ajastuslülitus , termoprinteri ja toitesüsteemi liidestuslülitused . Teisel , kõige väiksemal trükiplaadil , paiknesid samuti diskreetsetest komponentidest moodustatud võimenduslülitused . Kolmas trükiplaat oli ette nähtud lausintegraallülituste monteerimiseks . Nendeks olid <arv>-viigulistes korpustes mikrolülitused TMC<arv>BM C , TMC<arv>AN C ja <arv>-viigulises korpuses TMC<arv>BJC . Kalkulaatori korpuses asusid veel termoprinteri mehhanism ja korduvkasutatavad Ni-Cd-toite- elemendid . Kalkulaatori elektroonikasõlmedes kasutati toitepingeid + <arv>,<arv> V ja - <arv>,<arv> V , keskmine võimsustarve ei ületanud <arv> W. Värskelt laetud toiteelementide komplekt tagas kalkulaatori pideva talitluse umbes kolmeks tunniks . Taskukalkulaatori Pocketronic mõõtmed olid <arv> x <arv> x <arv> millimeetrit , seadme mass koos toiteelementidega ei ületanud <arv> grammi<arv>. Kalkulaatori müügihind oli <arv>. aastal <arv> dollarit . Kuigi tänapäeval võib Pocketronicut leida veel vahest arvutitehnika muuseumidest , jääb see kalkulaator kindlasti püsima arvutitehnika ajalukku kui esimene laiale kasutajaskonnale määratud lausintegraallülitusi sisaldav (tasku)kalkulaator . <arv> Jack St. Claire Kilby ( snd <arv>.<arv>.<arv> Jeffersonis , USA ) töötas firmas Texas Instruments , Inc. aastatel <arv> kuni <arv>. <arv>. septembril <arv> demonstreeris Jack Kilby maailma esimest töötavat integraallülitust . Selleks oli <arv>/<arv> × <arv>/<arv>-tollisel germaaniumplaadikesel asuv generaatorlülitus . J. Kilby leiutis pani aluse pooljuhtlülituste valmistamise uudsele tehnoloogiale , mis tagas järgnevatel aastatel arvutitehnika tohutu kiire arengu . <arv>. aastal andis Rootsi Kuninglik TA Jack St. Claire Kilbyle Nobeli füüsikaauhinna , märkides ära tema väljapaistvaid saavutusi integraallülituste väljatöötamisel ja integraaltehnoloogia arendamisel . <arv> Kuidas nägi välja Cal-Techi konstruktsioon , seda võib näha näiteks võrguleheküljel <hyperlink> avaldatud fotodelt <arv> Võrgulehekülgedel <hyperlink> ja <hyperlink> avaldatud fotod annavad võrdlemisi hea ülevaate kalkulaatori Pocketronicu sõlmede konstruktiivsest lahendusest . Arvo Toomsalu , TTÜ arvutitehnika instituut PROGRAMSETE HARGNEMISTE TÖÖTLUSE KORRALDAMINE Täiendatud arhitektuuriga superskalaarsete protsessorite jõudlus sõltub oluliselt sellestki , kuivõrd kiiresti ja korrektselt õnnestub läbi viia programsete hargnemiste korral hargnemissuundade prognoosimine . Kuna protsessorite käsukonveierites on astmete arv pidevalt suurenenud , siis vääralt prognoositud hargnemised põhjustavad konveierite ümberlaadimisel märkimisväärseid info ja ajakadusid . Protsessorites , kus käske töödeldakse käsujärjekorraväliselt , jaotavad programmis esinevad hargnemised käsuakna üksikuiks jadamisi töödeldavaiks käsusegmentideks , mis sisuliselt tähendab käsutasemelise rööpsuse astme vähenemist . <arv> On avaldatud isegi sellist arvamust , et aastal <arv> on programsete hargnemiste prognoosi korrektsus protsessori jõudluspiirangute seisukohalt suurema tähtsusega kui jõudluspiirangud , mis tulenevad mikroprotsessorsüsteemi mälusüsteemi ebapiisavast läbilaskevõimest . Hargnemissuuna prognoosi võib läbi viia mitmeti - kas staatiliselt , dünaamiliselt või kombineerituna . Hargnemissuuna staatilisel prognoosimisel lähtutakse põhimõttest , et hargnemisel jätkub programmi edasine töötlus alati samast harust mis eelnevatelgi kordadel ( seda kogu antud programmi töötluse kestel ) . Staatilise prognoosi võib läbi viia kas riistvaralisel ( kasutades erilülitusi ) või tarkvaralisel ( kompilaatori poolt ) tasemel . Prognoosimisel võetakse aluseks üks kahest võimalikust sündmusest : <arv>. Hargnemine toimub alati . <arv>. Hargnemist ei toimu kunagi . Hõlbustamaks hargnemise prognoosimist lisatakse enamasti hargnemiskäskude käsukoodi täiendav bitt , mille väärtust kasutatakse hargnemise suuna ennustamisel . Hargnemissuuna dünaamiline prognoosimine toimub operatiivselt programmi töötlemise käigus . Prognoosiülesande lahendamisega tegeleb protsessori juhtüksuses eririistvara , mis prognoosimisel tugineb töödeldava programmi varasemale käitumusele . Kuna vahetult pärast programmi käivitamist puudub prognoosiüksusel teave programmi varasema käitumise kohta , sest seda pole veel kogunenud , on dünaamilise prognoosi usaldatavus esialgu siiski madal . Sedamööda , kuidas koguneb teavet programmi käitumuse kohta , tõuseb ka prognooside usaldatavus . Üldjuhul vastavad dünaamilise prognoosi tulemused tegelikkusele siiski paremini kui staatilise prognoosi omad . Meetodi puuduseks võib pidada aga vajatava riistvara keerukust ja maksumust . Lülitusi , milles otseselt viiakse läbi hargnemiste prognoosi , nimetatakse ennustiteks . Lihtsates ennustilülitustes kasutatakse prognoosimisel vaid üht prognoosibitti . Prognoosibiti väärtus näitab , kas eeldatav hargnemine leiab aset või mitte . Lihtsamate programsete silmuste puhul tagab selline algoritm küllaltki häid prognoositulemusi , kuid pesastatud silmuste korral jääb prognoosi usaldatavus madalaks . Prognoosi usaldatavust ( täpsust ) saab tõsta , kui kasutada kahte või enamat prognoosibitti . Enamasti piirdutaksegi ennusti tööalgoritmis kahe prognoosibitiga . Kahte prognoosibitti kasutav prognoosimeetod annab häid tulemusi programmide korral , mis sisaldavad palju sageli korduvaid silmusjuhitavaid hargnemisi ( näiteks ujupunktöötlusele orienteeritud programmid ) . Problemaatiliseks muutub prognoosi usaldatavus aga juhtudel , kui tegemist on omavahel sõltuvate ( korreleeruvate ) hargnemistega ( esineb tihti püsipunkttöötlusele orienteeritud programmides ) . Et kahebitist prognoosialgoritmi kasutav ennusti lähtub hargnemissuuna prognoosimisel ainult viimati toimunud hargnemise suunast , siis sõltuvused varasematest hargnemistest kajastuvad prognoosis nõrgalt . Joonisel <arv> on esitatud ühe- ( a ) ja kahebitise ( b ) ennusti talitlusalgoritmid , viimases võib kasutada kaht erinevat siseolekute vahetumise järjestust ( b<arv> ja b<arv> ) . Kahebitise ennusti talitlus variandis b<arv> toimub hüstereesialgoritmi kohaselt . Siirdekäskude tarvis säilitatakse nendele vastavate prognoosibittide väärtusi siirdeaadresside puhvris tabelina . BTB-tabeli ( joonis <arv> ) igas reas säilitatakse eraldi väljades siirdekäsu aadressi , antud siirdekäsule vastavat hargnemise siirdeaadressi ning sellega seotud prognoosibittide väärtusi . Käskude töötlemisel suunatakse iga käsu aadress nii käsuvahemällu kui ka BTBsse .  Joonis <arv>. Ühe- ja kahebitise ennusti talitlusalgoritm : T - hargnemine prognoositud suunas toimus ; ET - hargnemine prognoositud suunas ei toimunud . Sulgudes on näidatud prognoosibiti ( -bittide ) väärtus ( olekukood ) Aadresside võrdluslülitus võrdleb käsu aadressi BTB-tabelis säilitatavate aadressidega ja kui võrreldavad aadressikoodid langevad kokku , siis väljastatakse BTBst hargnemise sihtaadressi väärtus . Sellelt aadressilt jätkubki programmi edasine töötlemine . Et tulevikus vältida hargnemissuuna väärprognoosi , toimub vajaduse korral hargnemiskäsu töötluse lõppedes selle sihtaadressi väärtuse korrigeerimine . Ühtlasi korrigeeritakse BTB-tabelis hargnemiskäsuga seotud juht- informatsiooni väärtust . <arv> Mõnedes protsessorites ei säilitata BTBs prognoosibitte . Sellisel juhul kasutab ennusti informatsiooni , mida säilitatakse hargnemiste eelloo tabelis ehk BHTs ( Branch History Table ) . Järjest sagedamini võib protsessoreis kohata hargnemiste sihtaadresside vahemälu ehk BTACi ( Branch-Target Address Cache ) . Erinevalt BTBst säilitatakse BTACs iga hargnemise tarvis veel lisaks üht või kaht käsku hargnemise sihtaadressilt . Kui programmi käitumust soovitakse aga rohkem arvesse võtta , siis tuleks appi võtta ennusti , kus prognoosimine tugineb korrelatsioonipõhisele prognoosialgoritmile . Näiteks ( m , n ) -korre- latsioonipõhises ennustis lähtutakse hargnemissuuna prognoosimisel viimasest m hargnemisest . Kõigist võimalikest ( <arv>m) hargnemisest , kus igaühes kasutatakse seesmiselt n-bitist prognoosialgoritmi , valitakse välja üks konkreetne hargnemissuund . Seega tugineb ( m , n ) -ennusti talitlus hargnemiste globaalsele eelloole .  Joonis <arv>. Siirdeaadresside puhvri ( BTB ) korraldus Veelgi keerukamates prognoosiüksustes leiavad hargnemissuundade ennustamisel kasutamist hübriidennustid ( hybrid predictor ) . Üheks põhjuseks , miks täiustatud arhitektuuriga superskalaarprotsessoreis võib tihti kohata hübriidennusteid , on see , et prognoosi meetodid ja prognoosi- lülitused , mida kasutati skalaarseis protsessoreis , ei sobi superskalaarprotsessoreile . Tavaliselt on hübriidennustite prognoosi usaldatavus parem kui eelkirjeldatuil . Hübriidennustites ühendatakse kaks või enam sõltumatut ennustit , igaüks neist tegeleb mingi kindlat liiki hargnemise hargnemissuuna prognoosiga . Üksikute spetsialiseeritud ennustite optimaalne riistvara ja efektiivne talitlusalgoritm tagavadki hübriidennusti kiire ja kvaliteetse prognoosi ka suure arvu käskude rööpsel töötlemisel . Hübriidennustite arengus on jõutud multihübriidennustite ( multi-hybrid predictor ) loomiseni . Väidetavalt ulatub multihübriidennustite prognoosi usaldatavus ( confidence of prediction ) kuni <arv>%-ni . Üheks võtteks hargnemiste paremaks töötlemiseks on programmis sisalduvate käskude predikaatimine . Predikaaditud käskude puhul töödeldakse käske hargnemise mõlemas suunas rööpselt seni , kuni selgub lõplikult programmi edasine kulgemine . Ilmselt hakatakse tulevikus programsete hargnemiste ohjel veelgi laialdasemalt rakendama hübriidseid prognoosimeetodeid . Eriti suurt efekti annab see töötlusviis madala usaldatavusega hargnemiste korral<arv>. Kuna superskalaarprotsessoreis tuleb igal taktil tegeleda hargnemissuundade hulgiprognoosiga ( samaaegselt prognoosida hargnemisi mitmetes käsulõimedes ) , siis on vaja täiustada ennustilülitusi , mis rakendavad prognoosil korrelatsioonimeetodit . Korrelatsioonimeetodi kasuks räägib seegi , et see võimaldab hargnemissuundi prognoosida isegi neil juhtudel , kui hargnemiskäsu aadress pole veel täpselt teada . JÄLJEVAHEMÄLU Jäljevahemälu on käsuvahemälu eriliik , kuhu programmi töötlemise käigus talletatakse dünaamilisi käsujärgnevusi ( käsujadasid ) . Jäljevahemälu igas kandes ( mälureas ) säilitatakse käsujälge , mis võib sisaldada üht või mitut hargnemiskäsku . Sisuliselt on käsujälg käskude dünaamiline jada , mis omakorda võib koosneda mitmest käskude põhiplokist . Käskude põhiploki võtt toimub ühe protsessoritakti jooksul . Käsujäljed moodustatakse programmi töötluse käigus , st nad sisaldavad vaid neid käske , mida protsessoris programmi töötlemisel tegelikult kasutati . Käsujälgede salvestamine jäljevahemälus erineb käskude salvestamisest käsuvahemällu selle poolest , et jäljevahemälus paiknevad käsujäljed alati järjestikku , samas kui käsuvahemälus võivad käsud paikneda suvalises järjestuses . Jäljevahemälus säilitatavate käsujälgede töötlemise järjestuse määramisel arvestatakse mitte üksnes igas käsujäljes endas säilitatava järgmise jälje aadressi , vaid arvesse võetakse ka hargnemiste prognoosiüksusest saadavat informatsiooni . Üksikasjalisemalt on jäljevahemälu ehitust ja tööpõhimõtet kirjeldatud artiklis “ Jäljevahemälu ” [ <arv> ] . ANDMEVAHEMÄLU KORRALDUS JA OPERANDIDE VÄÄRTUSTE PROGNOOSIMINE Kui protsessoris suunatakse üheaegselt töötlusesse mitukümmend käsku , siis enamasti tähendab see , et sama palju andmeid ( operande ) on vaja õigeaegselt edastada protsessori töötlusüksustesse . Et protsessorite andmevahemälude infomahutavus ja toimekiirus vastaks püstitatud nõuetele , ehitatakse nad üles hierarhilise struktuurina . Kiire suure infomahutavusega mälukeskkonna kujundamisel jaotatakse andmevahemälud väiksemateks väga kiiret andmevahetust tagavaiks mälusegmentideks . Informatsiooni läbilaskevõime suurendamiseks andmevahemälusüsteemis ei piirduta vaid riistvaralis-struktuursete võtetega , järjest sagedamini rakendatakse ka andmete spekulatiivset ettelaadimist töötlusüksustesse . Analoogiliselt juhtinformatsiooni ( käskude ) töötluse kiirendamiseks kasutatavate prognoosi- mehhanismidega viiakse täiendatud arhitektuuriga superskalaarprotsessoreis läbi andmete ( operandide väärtuste ) prognoosimist . Protsessori jõudluse seisukohalt on äärmiselt tähtis , et ajaks , kui üks või teine käsk jõuab töötluse faasi , oleksid neis kasutatavad andmed kasutuskõlblikud ja -valmid . Seega on paratamatu , et kõrvuti käsuaadresside prognoosimisega tuleb prognoosida andmete aadresse ( andmeaadresse ) . Võrreldes käskude prognoosimisega , on andmete prognoosimine aga veelgi komplitseeritum . Andmete prognoosimisel peab arvestama käskudevaheliste andmesõltuvuste tekke võimalust ja vajadust tekkivaid probleeme operatiivselt lahendada . Andmete , käskudes kasutatavate operandide ja eeldatavate töötlustulemuste ( tulemite ) väärtuste prognoosil lähtutakse programmide lokaalsusprintsiibist . Programmi töötlemise käigus on eristatavad kaks andmeväärtuste ajalise moodustumise järgnevust , mida nimetatakse vastavalt lokaalseks väärtuste tekkelooks ( history ) ja globaalne väärtuste tekkelugu . Käskude eeldatavate töötlustulemuste ( andmete ) prognoosimisel kasutataksegi neid tekkelugusid . Lokaalsete väärtuste tekkelugu kirjeldab andmeväärtuste jada , mis on formeerunud konkreetse käsu eelnevate töötluste käigus . Globaalsete väärtuste tekkelugu moodustub aga kõigi töödeldud käskude eelneva töötluse alusel . Kui globaalsete väärtuste kogum on moodustatud programmi piisavalt pikaajalise talitluse tulemusena , siis hakkab see hõlmama ka lokaalsete väärtuste tekkelugu . Andmeväärtuste jadade moodustamisel võib lähtuda kahest mudelist - arvutuslikust või kontekstipõhisest mudelist . Protsessorites talitlevais väärtuseennusteis ( value predictor ) ehk andmeennusteis toimub lokaalsete väärtuste prognoosimine kas ainult ühe mudeli baasil , näiteks juurdekasvuennustid ( stride predictor ) , või tuginetakse mõlemale mudelile ( hübriidennustid ) . Andmete lokaalväärtuste prognoosi täpsus tõuseb , kui prognoosimisel võetakse arvesse programmi käitumise üldisi seaduspärasusi . Eriti häid tulemusi saavutavad andmete lokaalväärtuste ennustid siis , kui prognoositava käsu olemasolevate väärtuste jadas on täheldatav perioodilisus või selles esineb konstantne juurdekasv . Kuna hübriidennustites on ühendatud arvutuslik ja kontekstipõhine prognoosimeetod , siis suudavad nad paremini prognoosida tulevikus formeeruvate andmete ( tulemite ) väärtusi . Andmeväärtuste ennustamisel rakendatavate prognoosialgoritmide repertuaar on mitmekesine . Ennustid võivad töötada kas viimase väärtuse ehk LV- ( Last Value ) , juurdekasvu ehk STR- ( STRide) , kontekstipõhise ehk FCM- ( Finite Context Method ) või ka hübriidalgoritmi alusel . Kui väga lihtsustatult kirjeldada nimetatud prognoosialgoritme , siis : <arv>. LV-algoritmi alusel talitlev ennusti lähtub eeldusest , et käsus kasutatava operandi väärtus on sama , mis see oli sellesama käsu eelneva kasutamise korral . <arv>. STR-algoritmi rakendavas ennustis moodustatakse operandi tulevane väärtus sel teel , et operandi eelnevale väärtusele liidetakse teatav konstant ( juurdekasv , inkrement ) . Juurdekasv ei ole muud kui kahe järjestikuse andmeväärtuse vahe . Juurdekasvu väärtus kuulub aga korrigeerimisele juhul , kui seni kasutatud juurdekasvu väärtus erineb jada tegelikust juurdekasvust vähemalt kahel korral . <arv>. FCM-algoritmi puhul eeldatakse , et operandide väärtused esinevad teatava korduva jadana . Operandi uue väärtuse prognoosil lähtutakse tema eelnevast väärtusest . <arv>. Hübriidalgoritmis ühendatakse STR- ja FCM-algoritmid ühtseks , prognoosi täpsust tõstvaks tervikuks . <arv>. Kasutamist leiab samuti käsujäljepõhine prognoosialgoritm , kus käsku , mille tarvis andmete väärtust prognoositakse , vaadeldakse vastava käsujälje kontekstis . Andmeväärtuste prognoosi , eriti aga prognoositud andmete kasutamise seisukohalt on oluline selline näitaja nagu väärtuse viide ( value delay ) . Andmeväärtuse viite läbi saab takistatud prognoositud andmeid kasutavate käskude töötlemine . Andmeväärtuse viide tekib juhul , kui andmeennustile ei ole mingil põhjusel prognoosiks vajalikud eelnevad andmeväärtused kättesaadavad , näiteks käsukonveieri enda sisemiste viidete tõttu . Üheks võtteks , mis vähendab andmeväärtuste formeerimise viiteid , on protsessoreis käsujärjekorravälist töötlust toetavate käsukonveierite rakendamine , mis andmetöötlusel kasutavad spekulatiivseid andmeväärtusi . Neis konveiereis pole vaja ootama jääda töötluse tegelikke tulemeid , vaid erustatakse vastavalt töödeldava programmi ettenähtud kulule . Käsujärjekorravälise töötlusega käsukonveieri korral tuleb aga meeles pidada , et selle töötlusviisi puhul moodustuv andmete globaalsete väärtuste jada on järjekorravälise iseloomuga . Taoline globaalsete väärtuste jada on tundlik informatsiooni töötluse käigus tekkivaile muutustele , mis on põhjustatud kas möödalaskudest vahemälus või siis vääralt prognoositud hargnemistest . Programsete hargnemiste prognoosimine on tihedalt seotud töödeldavate andmetega . Tavaliselt sõltub hargnemise suund just käskudes töödeldavate andmete väärtusest . Üks tüüplahendusi , kuidas moodsais protsessoreis ühendatakse käsuvoos esinevate hargnemiste prognoos andmeväärtuste prognoosiga , on toodud joonisel <arv>. Esitatud süsteemi kuulub andmeennusti , mille ülesandeks on prognoosida operandide väärtusi , mida vajatakse hargnemisennustis hargnemissuuna määramisel . Kuna klassikalised hargnemis- ennustid suudavad küllaltki hästi prognoosida hargnemisi , siis valikulülituse ülesandeks on otsustada , kas hargnemissuuna prognoosimisel piirduda üksnes klassikalise hargnemisennusti poolt pakutava hargnemissuunaga või arvestada hargnemissuuna määramisel ka prognoositud andmeväärtusi . KÄSUTÖÖTLUSE KIIRENDAMINE TÖÖTLUSÜKSUSTES Täiustatud arhitektuuriga superskalaarne protsessor suudab ühel taktil töödelda <arv> kuni <arv> käsku . Et vähendada riskinähtusi , mis võivad tekkida rööpselt talitlevates töötlusüksustes esinevate käsu- ja andmesõltuvuste tõttu , rakendatakse protsessoreis registrikogumite ohjel registrite loogilist ümbernimetamist ja käskude järjekorravälist töötlust . Kuna protsessorites on arvukalt erinevaid töötlusüksusi , alates <arv>st kuni <arv>ni , siis rööptöötluse häireteta läbiviimiseks säilitatakse töötlust ohjavaid käske spetsiaalsetes ootepuhvrites . Töötlusprotsessi korralduse keerukusest annab tunnistust seegi , et protsessori ootepuhvrites võib samaaegselt sisalduda <arv> või enam käsku .  Joonis <arv>. Hargnemiste prognoosiüksuse põhimõtteline lahendus Infoliikluse kiirendamiseks ( signaalide levikuaja vähendamiseks ) töötlusüksuste vahel moodustatakse neist sageli kolme- kuni viieüksuselised klastrid ( kobarad ) . Iga klaster varustatakse individuaalse registrikogumiga , iga töötlusüksus aga individuaalse ootepuhveriga . Klastrite vahel ja klastrite sees asuvad spetsiaalsed lülitused ( nn otseedastusteed ) , mis oluliselt kiirendavad infoedastusi . Kui klastri piires suudetakse andmeid edastada vaid taktiga , siis klastritevaheliseks edastuseks kulub juba mitu takti . Seoses üleminekuga käskude rööptöötlusele on protsessoreis tekkinud vajadus veel täiendavate spetsiifiliste juhtlülituste - äratuslülituste ( wake-up logic ) järele . Äratuslülitused kuuluvad käskude väljutamise üksuse koosseisu , nad vastutavad selle eest , et nn uinuvad käsud saaksid õigeaegselt aktiveeritud . Uinuvateks käskudeks loetakse käsuaknas neid käske , mida ei saa töötlema hakata , sest käskudele vajalikud andmed ( operandid ) pole veel käideldavad . Äratuslülituste talitlusel lähtutakse operandidele lisatud tunnusbittidest ehk sildikoodi ( tag ) väärtusest , mille alusel otsustatakse , kas üks või teine operand on antud hetkel käideldav või mitte . Kui käsk väljastatakse käsuaknast töötlusesse , siis käsu tulemile omistatud sildikood teadustatakse ka kõigile teistele antud hetkel käsuaknas olevaile käskudele . Iga käsuaknas olev käsk võrdleb seda sildikoodi nende sildikoodidega , mis on omistatud tema poolt kasutatavaile operandidele . Juhul kui käsus kasutatava operandi sildikood ühtib töötlusesse suunatud käsu tulemi sildikoodiga , siis loetakse käsus vastav operand käideldavaks . Äratusoperatsiooni võib vaadelda ka toiminguna , mille eesmärgiks on tuvastada käskudevahelisi andmesõltuvusi . Eriti oluline on andmesõltuvuste õigeaegne tuvastamine käsujärjekorraväliselt töödeldavate käskude vahel . Kokkuvõttes võib öelda , et neis superskalaarprotsessoreis , kus käsuvoo töötluseks ettevalmistamisel kasutatakse käskude dünaamilist järjestamist ja käske töödeldakse käsukonveieris , on tarvilik , et protsessori juhtüksuses oleksid lülitused , mis sooritaksid registrite ümbernimetamist ja uinunud käskude äratamist .  Joonis <arv>. Ootepuhvreid ( RS ) sisaldava <arv>-astmelise käsukonveieri struktuur Kuidas sellises protsessoris võib olla käsukonveieri talitlus korraldatud , on näidatud joonisel <arv>. Kujutatud seitsmeastmelises konveieris salvestatakse töödeldav käsk konveieri astmete <arv> ja <arv> vahel ootepuhvrisse ( RS ) , kus ta viibib seni ( uinunud olekus ) , kuni talle vajalikud andmed ( operandid ) muutuvad käideldavaiks ja/või vabaneb talle vajalik töötlusüksus . Kui operandid on muutunud käideldavaiks ja vastav töötlusüksus on valmis käsku töötlema , siis uinunud käsk “ äratatakse üles ” ning suunatakse töötlusüksusesse . Pärast käsus ettenähtud infoteisenduste sooritamist võidakse käsk taas suunata ootepuhvrisse ( kui tegemist oli käsujärjekorraväliselt töödeldud käsuga ) ja hoida seda seal seni , kuni kõik algses käsuvoos talle eelnenud käsud on töödeldud . Pärast seda äratatakse käsk taas üles ja suunatakse käsukonveieri käskude erustamist toimetavasse erustamisastmesse . Ootepuhvreis paiknevad käsud kannete kaupa , igat ootepuhvri kannet teenindab individuaalne äratuslülitus . Äratuslülituste taoline korraldus on vajalik selleks , et rööpselt võiks toimuda ootepuhvris sisalduvate käskude äratamine ja ettevalmistamine edasiseks töötlemiseks . Otseselt tegeleb töötlusüksustesse töötlusvalmide käskude käsupandamist ühe kindla käsu väljavalimisega ja selle vastavasse töötlusüksusesse suunamisega valikuloogikalülitus . SUPERSPEKULATIIVSE PROTSESSORI ARHITEKTUUR Informatsiooni superspekulatiivtöötluse lähtekohaks on tähelepanek , et programmides saab olenevalt neis esinevaist käskudest ja käsujadadest küllaltki suure usaldatavusega prognoosida eeldatavaid töötlustulemusi . Praktika kinnitab , et sageli on edukalt võimalik prognoosida käskudes kasutatavate operandide väärtusi ning alustada käsuvoos antud käsule järgnevate käskude töötlemist veel enne , kui neile eelnevate käskude tulemid on moodustunud . Käskude töötluse ennetav alustamine aitab lühendada programmide töötluseks kuluvat aega , st protsessori jõudlus tõuseb . Sellise töötlusviisi abil ületatakse protsessoreis klassikalistele protsessorarhitektuuridele iseloomulikku jõudluspiirangut , mille kohaselt ei saa programmi töödelda kiiremini , kui selles kestab pikima käsuharu töötlus , arvestades ka andmesõltuvuste olemasolu . Klassikalistes superskalaarprotsessoreis tuginetakse programmi töötluse korraldamisel nn tugeva käsusõltuvuse mudelile ( strong-dependence model ) , mille kohaselt kehtib nõue , et jadamisi täidetavas programmis tuleb käsud täielikult ( täpselt ) järjestada . Selle mudeli kohaselt võivad kaks käsku olla teineteisest kas sõltuvad või mittesõltuvad . Tavaliselt aga eeldatakse , et käskude vahel eksisteerib sõltuvus . Käskude töötlemise ajal on keelatud neid sõltuvusi eirata või muuta . On ilmne , et taoline töötlusviis , kuigi lihtne ja läbipaistev , ei soosi just programmides sisalduva rööpsuse ärakasutamist nende töötluskiiruse tõstmiseks . Kui informatsiooni töötluse korraldamisel protsessoris lähtuda aga nõrga käsusõltuvuse ( weak-dependence model ) mudelist , nii nagu see toimub superspekulatiivse arhitektuuriga protsessoreis , siis aitab programmides sisalduva rööpsuse oskuslik ärakasutamine märgatavalt tõsta nende jõudlust . Nõrga käsusõltuvusega töötlusmudelis eeldatakse , et käskude töötlemisel on ajutiselt lubatav eirata nendevahelisi sõltuvusi , kuid tingimusel , et enne käskude töötluse lõpptulemite formeerumist saab taastada käskudevahelised tegelikud sõltuvused.Käskude spekulatiivtöötluse rakendamisel kasutatakse võtet , kus ühed käsud - produtseerivad käsud ( producer instruction ) - genereerivad tõepäraseid tulemeid , mida saab kasutada teiste käskude - tarbivate käskude ( consumer instruction ) - operandide väärtustena . Kusjuures tarbivate käskude töötlust võib alustada veel enne , kui produtseerivad käsud on jõudnud neile edastada operandide väärtused . Kui lähtuda nõrga käsusõltuvuse mudelist , siis saab protsessoris käske töödelda , ilma et kogu programmi käitumus oleks täielikult determineeritud . Sel juhul on protsessoreis võimalik kasutada käskude väga agressiivset spekulatiivtöötlust kas ajutiselt eirates käskudevahelisi sõltuvusi või muutes neid sõltuvusi seniks , kuni selguvad tegelikud andmeväärtused , mille alusel saab hiljem kõrvaldada käskude spekulatiivtöötlusel saadud väärtulemid . Juhul kui protsessor õnnestub tööle panna nii , et enamik spekulatiivtöötluse tulemeist on tõesed ( korrektsed ) , siis võib niiviisi talitlev protsessor arendada palju suuremat jõudlust kui protsessor , mis kasutab jäika käsusõltuvuste mudelit . Analoogiliselt käskude üldise spekulatiivtöötluse põhimõtte rakendamisega võib korraldada ka programsete hargnemiste spekulatiivset töötlust . Superspekulatiivseis protsessoreis kasutatakse sellel eesmärgi kahte omavahel ühendatud seadet või nagu neid enamasti kutsutakse - masinat . Esiplaanimasina ( front-end engine ) talitlus on korraldatud nõrga käsusõltuvuse mudeli kohaselt , kus massiliselt rakendatakse käskude spekulatiivtöötlust , prognoosides käskude võimalikku tulevast käitumust lähtuvalt nende käitumusest minevikus . Juhul kui selliselt töödeldud käskude prognoositud käitumus osutub tõeseks , siis aitab see võte vähendada käskude täitmiseks kulutavate etappide koguarvu . Seevastu tagaplaanimasin ( back-end engine ) talitleb jäiga käsusõltuvusega mudeli alusel . Selle abil kontrollitakse esiplaanimasina poolt saadud spekulatiivsete tulemite õigsust ja kui neis esineb väärtulemus , siis need kõrvaldatakse ( parandatakse ) . Lisaks talletab tagaplaanimasin programmi kulgemise ajaloo ( käitumuse ) , edastades selle ühtlasi esiplaanimasinale , et viimases saaks spekulatiivtöötlust tulemuslikumalt korraldada . Kokkuvõtlikult võib märkida , et superspekulatiivse mikroarhitektuuriga protsessoris püütakse maksimeerida kolme näitajat . <arv>. Käsuvoo läbilaset ( st kiirust , millega toimub käsuvoogu kuuluvate käskude käsuvõtt , dekodeerimine ja suunamine töötlusüksustesse ) . <arv>. Registrite andmevoo läbilaset ( kiirust , millega toimub töötlustulemite moodustamine ning registritesse talletatava informatsiooni kättesaadavaks tegemine käskudele ) . <arv>. Mälu andmevoo läbilaset ( kiirust , millega toimub informatsiooni salvestamine või lugemine mälust ) . Kõik nimetatud infovood on tihedalt seotud vastavate käskudega : käsuvoog hargnemisi töötlevate käskudega , andmevoog aritmeetika-loogikakäskudega ja mälu andmevood laade-salvestuskäskudega . Protsessori mikroarhitektuurse lahenduse valikul pööratakse eriti suurt tähelepanu just nimetatud käskude töötluse korraldamisele . Eksperimendid on näidanud , et superspekulatiivtöötlust rakendav protsessor võib saavutada jõudluse <arv> käsku taktis , ilma et selleks peaks eelnevalt kasutama keerukaid ja kalleid erikompilaatoreid . Joonisel <arv> on esitatud klassikaks muutunud superspekulatiivse protsessori mudel , mille esitasid Lipasti ja Shen <arv>. aastal [ <arv> ] ja mida autorid ise nimetasid supervoo- ( superflow ) arhitektuuriga protsessoriks . Vaadeldavas protsessoris rakendatakse jõudluse suurendamiseks erinevaid spekulatiivtöötluse võtteid . Käsuvoo töötlemisel püütakse protsessoris igal taktil töötlusesse suunata nii mitu käsku , kui palju on vabu töötlusressursse . Käsuvoo töötluse korraldamisel tuleb pidevalt tegeleda kolme keskse ülesandega . <arv>. Kuidas suurendada tingimuslike siirdekäskude läbilaset ? <arv>. Kuidas suurendada asetleidnud hargnemiste töötluse kiirust ? <arv>. Kuidas minimeerida viiteid , mis tekivad hargnemiste väärprognoosil ? Esimese ülesande edukaks lahendamiseks peab protsessor ühe takti jooksul suutma edukalt prognoosida mitme hargnemiskäsu käitumust . Selleks viiakse superspekulatiivseis protsessoreis prognoos läbi mitmes etapis , arvestades seejuures nii lokaalsete kui ka globaalsete hargnemiste eellugusid . Kui esimesel etapil , mis algab käskude käsuvõtufaasiga , selgub , et eksisteerib vajadus prognoosida mitme hargnemise edasist kulgu , st moodustada järgmise käsuvõtufaasi tarvis käitlemisele tulevate käskude aadresse , siis tuginetakse prognoosi läbiviimisel vastavate hargnemiskäskude globaalsele eelloole . Prognoosi teisel etapil , käskude käsukoodi dekodeerimise ajal , kontrollitakse ja hinnatakse eelnevaid prognoose spetsiaalses ennustuslülituses , võttes arvesse hargnemiste globaalseid ja lokaalseid eellugusid . Teises etapis püütakse avastada ja kõrvaldada esimeses etapis tehtud vigu ning formeeritakse lõplik prognoos hargnemissuundade suhtes . Teise ülesande puhul tuleb arvesse võtta nõuet , et superspekulatiivses protsessoris peab käsuvõtuga tegelev üksus ühe takti jooksul suutma korraldada rohkem kui ühe hargnemisega seotud käsu võtu ja õigete hargnemissuundade prognoosi . Kuid lisaks eelnevale kuulub üksuse ülesannete hulka samuti selle jälgimine , et korrektselt toimuks ka hargnemistega seotud käskude käsuvõtt , mestimine ja joondamine . Et toime tulla nii keerukate tegevustega , lülitatakse protsessori mikroarhitektuuri spetsiaalne käsujälgede vahemälu ( jäljevahemälu ) . Kuna jäljevahemälus säilitatavad käsujäljed võivad sisaldada mitmete juba varem aset leidnud hargnemiste kirjeldusi , siis vabaneb protsessor vajadusest tegeleda korduvalt samasisuliste prognoosiülesannetega ja tugineda vahetult jäljevahemälus olevale informatsioonile . Kolmanda ülesande edukas lahendamine pole vähem tähtis kui kahe eelmisega toimetulemine . Hargnemiste väärprognoosimine põhjustab käsukonveieris mullistumisi ( tühitakte ) , mille tagajärjel võib protsessori jõudlus märgatavalt väheneda . Mullistustest hoidumiseks töödeldakse protsessori töötlusüksustes hargnemisi n-ö teatava ennetusega . See võimaldab piisavalt varakult avastada ja kõrvaldada käskudevahelisi sõltuvusi . Üldiselt on enamikus programmides käskudevahelised sõltuvused küllaltki hästi prognoositavad , seega suhteliselt kergesti ka kõrvaldatavad .  Joonis <arv>. Superspekulatiivse arhitektuuriga protsessori mudel . FÜ - funktsionaalne üksus Hargnemiste väärprognoosidest põhjustatud ajakadude kompenseerimiseks rakendatakse superspekulatiivseis protsessoreis laialdaselt andmete spekulatiivtöötlust . Näiteks registrites liikuva andmevoo spekulatiivsel töötlusel ühendatakse operandide väärtuste prognoos nende väärtussammu ( value stride ) prognoosiga . Väärtussammu prognoosil võetakse aluseks see , et püsivalt toimub operandide väärtuste sammhaavaline kasv . Spetsiaalne riistvaraline lülitus analüüsib operandide väärtusi , tuvastades konstante ja juurdekasve operandide väärtustes , et nende alusel prognoosida operandide tulevasi eeldatavaid väärtusi . Juhul kui käsu olemasoleva eelloo põhjal ilmneb , et operandide tulevasi väärtusi ei saa usaldatavalt prognoosida , siis prognoosi eesmärgil alustatakse üleüldist käskudevaheliste sõltuvuste analüüsi . Keerukamate , suurema astmete arvuga käsukonveierite kasutuselevõtmine põhjustab tihti vajaduse andmesõltuvuste tuvastamiseks juba mitmes konveieri astmes . Superskalaarprotsessorites pööratakse suurt tähelepanu andmevoogude korraldamisele nii andmevahemälu- kui ka põhimälusüsteemis . Reaktsiooniaja lühendamiseks mälusüsteemis on nii kasutatavate operandide prognoosimine , adresseerimine kui ka nende joondamine viidud vahetult töötlusüksustesse . Tavaliselt põhjustavad mälupöördustel täiendavaid ajakadusid mitmed tegurid . <arv>. Aadresside genereerimisel tekkivad tupikolukorrad , mis pikendavad mälust loetavate käskude käsuvõtuaega , sest vajalikud käskude aadressid ei moodustu õigeaegselt . <arv>. Mälusüsteemis esinevad siseviited , mis sõltuvad nii mälulülituste sisestruktuuri keerukusest kui ka nende valmistamisel kasutatud tehnoloogiast . <arv>. Viited , mis tekivad mälupöörduste jadastamisest . Mälupöördustel võib paratamatult tekkida mälusüsteemi üksikute siseressurssidevaheline ' ” võistlus ” ning nende reguleerimine nõuab lisaajakulu . Aadresside genereerimise tupikseisudest põhjustatud viiteid aitab vähendada aadresside spekulatiivne genereerimine . Analoogiliselt operandide väärtuste prognoosile võib ka mäluaadresside moodustamisel kasutada indeksisammu meetodit . Kui sellele lisandub veel prognoositud operandide ettelaadimine , siis saab märgatavalt kiirendada informatsiooni liikumist mälusüsteemi ja protsessori või selle üksuste vahel . Analüüsides mälu andmevoogu , saab prognoosida ettelaetavate operandide väärtusi . Laadekäskude tulemusena mälust allalaetavate operandide väärtuste prognoosil tuginetakse afiinsusele laadekäskude aadresside ning laetavate andmete väärtuse vahel . Laadeväärtuste prognoosi viiakse läbi spetsiaalses prognoosiüksuses . Andmete laadevoog jaotatakse omakorda veel mitmeks eraldiseisvaks allvooks , mis protsessoris suunatakse rööpselt juba vastavatesse töötlusüksustesse . Seeläbi tagatakse põhimälusüsteemis piisavalt kõrge informatsiooni läbilase ning protsessorlülituses võib loobuda tsentraalsest suuremahulisest ja mitme pordiga andmevahemälust . JÄLJEPROTSESSORI ARHITEKTUUR Kuna programmides esinevad paratamatult käskudevahelised sõltuvused , siis käskude rööptöötluse läbiviimiseks tuleb operatiivselt analüüsida ja vajadusel ka ümber järjestada suurt hulka käsuvoo käske . Traditsioonilise superskalaarse arhitektuuriga protsessorid ei suuda jadatöötlusele orienteeritud programmides just kõige paremini leida rööptöötluseks sobivaid käsujärgnevusi . Palju paremini tulevad selle ülesandega toime jäljeprotsessorid . Jäljeprotsessori arhitektuuris on kesksel kohal programsed käsujäljed , mis sisuliselt kujutavad staatilise multiskalaarse tegumi dünaamilist varianti . Jäljeprotsessoris töödeldavat programmi võib aga vaadelda kui teatavat käsujälgede kogumit , mida rööpselt töödeldakse vastavais töötluselementides . Superskalaarsetes protsessorites on üheks keerukamaks ülesandeks sobivate käsukogumite ( käsuakende ) moodustamine ja aknas asuvate käskude töötluse korraldamine . Jäljeprotsessoris kasutatavaid käsujälgi võib samuti vaadelda kui omalaadseid käsuaknaid . Harilikult sisaldab üks käsujälg <arv> kuni <arv> käsku , nende seas võivad olla ka käsud , mille abil toimuvad programsed siirded . Opereerides protsessoris mitte üksikute käskudega , vaid käsujälgedega , saab märksa efektiivsemalt korraldada selle siseressursside optimaalset jaotamist ja koormamist , mille tulemusena tõuseb protsessorlülituse tootlikkus . Eriti märgatavalt kiireneb programsete hargnemiste töötlus . Kui eelnevalt vaadeldud protsessorarhitektuurides toimus hargnemiskäskude käitlemine teistest käskudest suhteliselt eraldatuna , siis jäljeprotsessoris vaadeldakse neid käsujälje kontekstis . Jäljeprotsessori talitlus nii käsuvoogude ( juhtimise ) kui andmevoogude töötlusel on korraldatud mitmetasemelisena . Mis puutub protsessori juhtimisse , siis selles saab eristada juhtimist programmi ( käsujälgede kogumi ) tasemel ja juhtimist käsujälgede ( käsujälge moodustavate käskude ) tasemel . Hierarhilisuse printsiibist lähtutakse samuti andmevoogude töötlemisel , eristades globaalseid andmeid ( andmed , mida kasutatakse erinevate käsujälgede ulatuses ) ja lokaalseid andmeid ( andmed , mida kasutatakse ainult konkreetse käsujälje piires ) . Joonisel <arv> toodud jäljeprotsessori lihtsustatud mudelis on näidatud protsessori põhilised funktsionaalsed üksused ning üksustevahelised sidemed . Jäljeprotsessori mikroarhitektuuris on kesksel kohal jäljevahemälu koos seda toetavate juhtlülitustega ning kogumik universaalseid rööpselt talitlevaid töötluselemente ehk PEsid ( Processing Element ) . Iga töötluselement on nagu pisike superskalaarprotsessor , mille käskude puhvris säilitatakse üht ( töödeldavat ) käsujälge . Lisaks asuvad töötluselementides eraldi registrikogumid lokaal- ja globaalmuutujate ( operandide ) tarvis ning otseselt infotöötlusega tegelevad funktsionaalsed üksused . Iga funktsionaalne üksus on varustatud individuaalse puhverlülitusega , kuhu suunatakse infotöötlusel saadud tulemid . Informatsiooni sisestamine töötluselementidesse ja selle töötlemine PEdes toimub rööpselt . Jäljeprotsessori kõrge jõudluse allikas peitubki selles , et temas kasutatakse ära nii üksikus käsujäljes sisalduv seesmine kui ka käsujälgede vahel eksisteeriv rööpsus . Jäljeprotsessori käsuvõtuüksus sooritab käsuvõtte käsuvahemälust ning formeerib saadud käskudest <arv>st kuni <arv>st käsust koosnevaid käsujälgi . Moodustatud käsujäljed salvestatakse jäljevahemällu , kus vajaduse korral programmi töötluse käigus saab neid ka modifitseerida . Jäljeprotsessori talitluse käigus tegeleb dünaamiliste käsujälgede moodustamisega käsujälgede moodustamise üksus ( dünaamilised käsujäljed on niisugused , milles arvestatakse juba programmi reaalset kulgemist ) . Formeeritud käsujäljed salvestatakse jäljevahemällu . Käsujäljed ( mõnes allikas nimetatakse neid käsuplokkideks ) läbivad enne jäljevahemällu salvestamist käskude ( käsujälje ) eeltöötluse üksuse . Käskude eeltöötluse üksuse ülesandeks on moodustada käsujäljed , mille töötlus PEdes kulgeks takistusteta . Selles üksuses toimub ühtlasi käskudevaheliste andmesõltuvuste analüüs . Vajaduse korral püütakse käske käsujäljes ümber järjestada nii , et kõrvalduksid või neutraliseeruksid andme- ja ressursisõltuvused . Samuti märgistatakse käsujälge kuuluvate käskude operandid ja tuvastatakse , kas tegemist on globaalsete või lokaalsete andmetega . Lokaalsed andmed seotakse PE lokaalregistrikogumis konkreetsete registritega , st viiakse läbi nende eelümbernimetamine ( pre-renaming ) .  Joonis <arv>. Jäljeprotsessori mudel . PE - töötluselement Et katkestuste töötluse korral oleks võimalik taastada töödeldava programmi katkestuse-eelset olekut , säilitatakse iga käsujälje tarvis veel täiendavat informatsiooni , mis kirjeldab käskude algset järjestust käsujäljes . Jäljemälus asuvate käskude võttu sooritab spetsiaalne käsujäljevõtuüksus . Juhul kui pöördusel jäljevahemällu esineb möödalask , siis käivitub skalaar- ja superskalaarprotsessoreist rakendatav käsujada moodustamise skeem , mille korral toimub programmi edasine täitmine vastavalt käsuvahemälus sisalduvaile käskudele , hargnemiskäskude korral aga prognoositud hargnemissuundadest . Sõltuvalt jäljevahemälu assotsiatiivsuse astmest väljastatakse käsuvõtul sellest rööpselt üks või enam käsujälge<arv>. Käsujälgede töötluse korraldamisel täidab keskset ülesannet lülitus , mida nimetatakse käsujälgede dispetšeriks ehk lühemalt jäljedispetšeriks ( trace dispatcher ) . Nii tegeleb jäljedispetšer käsujälgedes lokaalseid lähteandmeid ja tulemeid sisaldavate registrite sidumisega globaalseid andmeid säilitavate globaalsete registritega . On oluline , et registrite vastendamisel ei ole tarvidust kontrollida , kas käsujäljes esineb seesmisi andmesõltuvusi , sest need olid tuvastatud juba eelneva töötluse käigus käskude eeltöötluse üksuses . Seega , erinevalt klassikalisest superskalaarprotsessorist on jäljeprotsessoris käskudevaheliste sõltuvuste tuvastamine kandunud käskude käsuaknast väljastamise etapist käsujälje moodustamise etappi . Järelikult pole jäljeprotsessoreis , erinevalt superskalaarprotsessoreist , vaja käsuaknast käskude väljutamisega tegelevat üksust varustada täiendavate keerukate lülitustega , mis kontrollivad käskudevahelisi sõltuvusi . Jäljedispetšeri põhiliseks ülesandeks on siiski käsujälgede jaotamine töötluselementide vahel ning käsujälgede rööpne laadimine PEde käsupuhvreisse . Muidugi ei tohi laetava käsujälje pikkus ületada käsupuhvri mahtu ( käsuregistrite arvu puhvris ) . Jäljevõttude korraldamisel etendab olulist rolli järgmise käsujälje ennusti . Viimane peab olema suuteline igal protsessoritaktil prognoosima mitme järgnevalt jäljevahemälust võetava käsujälje aadressid . Jäljeprotsessoris ei prognoosita mitte üksnes programmides esinevaid hargnemissuundi ja käsujälgi , vaid samuti käsujälgede käskudes kasutatavate andmete ( operandide ) väärtusi . Selleks on protsessoris eraldi andmeennusti üksus , mis tegeleb käsujälje lähteandmete väärtuste prognoosiga . Andmeennusti tööd koordineeritakse järgmise käsujälje ennusti talitlusega . Andmeennusti poolt väljastatud informatsiooni kasutab järgmise käsujälje ennusti programsete siirete sihtaadresside prognoosil ning sobivate käsujälgede aadresside moodustamiseks . Põhiliseks probleemiks , mis raskendab andmeväärtuste prognoosi , on käsujälgede omavahelised sõltuvused . Vahetult toimuvad töödeldava informatsiooni teisendused töötluselementides . Iga PE sooritab infoteisendusi vastavalt temale eraldatud käsujälje käskudele . Kõik protsessoris sisalduvad töötluselemendid talitlevad autonoomselt ja rööpselt . Arvestades töötluselementide ja neis sisalduvate registrikogumite suurt arvu , on andmeedastuse korraldamisel jäljeprotsessoris , nii PEde sees kui ka nende vahel , lähtutud hajusalt paiknevate registerstruktuuride ohjel rakendatavaist põhimõtetest . Piisavalt kiire andmeliikluse tagamiseks ei kasutata PEdes eriti mahukaid lokaal- ja globaalregistrite kogumeid . Lisaks kasutatakse andmeedastuste kiirendamiseks laialdaselt täiendavaid lülitusi - andmete otseedastusteid . Tänu sellele kulub töötluselementides andmesiirdele vaid üks protsessoritakt . Andmevahetus PEde vahel läbi globaaltulemite siini on siiski mõnevõrra aeglasem . Harilikult vajab jäljeprotsessor toetust suure informatsiooni läbilaskevõimega mälusüsteemilt , mis suudaks operatiivselt varustada protsessoris kõiki töötluselemente vajaliku informatsiooniga . Tüüpiliselt varustatakse jäljeprotsessorid mitme kiire multiport-hajuskasutusega vahemäludega . Protsessori normaalse talitluse tagamiseks pööratakse erilist tähelepanu informatsiooni koherentsuse tagamisele vahemälusüsteemis . Samas võib leida jäljeprotsessorite lahendusi , kus kasutatakse vaid üht suuremahulist hajapöörduse põhimõttel talitlevat vahemälu . Kuigi taolist vahemälu on lihtsam ohjata , jätavad soovida mälu kiiruslikud näitajad . Jäljeprotsessori mälusüsteemi talitlust komplitseerib asjaolu , et iga protsessorisse kuuluv töötluselement väljastab teistest sõltumatult mälusüsteemi individuaalse asünkroonse laade-salvestusoperatsioonide nõudlustevoo . Kuna mälupöörduste läbiviimisel vajatavad mäluaadressid moodustatakse sageli spekulatiivselt ja käsujärjekorraväliselt , siis tuleb mäluohjega seotud üksustel tegeleda täiendavalt ka aadressivoogude analüüsi ja mälupöörduste järjestamise ülesannetega . Et vältida mäluaadressidevahelisi konflikte , kasutatakse spetsiaalset arbiiterlülitust ehk ARB-lülitust ( Address Resolution Buffer ) . ARB-lülituse põhiülesandeks on spekulatiivsete mäluoperatsioonide käigus tekkivate pöörduskonfliktide vältimine , vajadusel võib ta isegi blokeerida mälu talitlust häirivaid käske . Siiski mitte alati ei pruugi hajuskasutusega vahemälusüsteemis ARB-lülituse kasutamine anda parimaid tulemusi . Et kõik mäluohjega seotud tegevused peavad toimuma väga operatiivselt , siis viiakse need läbi riistvaralisel tasemel . Kui lühidalt kokku võtta jäljeprotsessori olulisemad arhitektuursed tunnused , siis tuleks esile tõsta järgmisi : <arv>. Jäljeprotsessor on superskalaarse protsessori edasiarendus . Erinevate jäljeprotsessorite vahel on lihtne tagada programset , masinakoodi tasemel ühilduvust . Selle omaduse poolest erinevad jäljeprotsessorid oluliselt praegu ülipopulaarsetest ülipika käsusõnaga ( VLIW-arhitektuuriga ) protsessoreist . <arv>. Vaatamata kõrgele jõudlusele , kasutatakse jäljeprotsessoris ainult üht juhtinformatsiooni voogu . Suure arvu käskude rööpne käsuvõtt aitab lihtsustada käskudevaheliste sõltuvuste tuvastamist ning paremini ette valmistada ( järjestada ) rööpselt töötlussesse suunatavaid käske ( käsujälgi ) . Võrreldes eelnimetatud VLIW-arhitektuuriga protsessoritega , pole jäljeprotsessorite korral vaja omada keerukaid ja võimsaid erikompilaatoreid . <arv>. Võrreldes klassikaliste superskalaarsete protsessoritega , õnnestub jäljeprotsessoris jõudluse piisavalt kõrge tase saavutada lihtsamate vahenditega . Protsessoreis on paremini tagatud töötlusressursside optimaalne ( ühtlane ja pidev ) koormatus . <arv>. Jäljeprotsessori mikroarhitektuur on orienteeritud informatsiooni agressiivsele spekulatiivtöötlusele nagu superspekulatiivprotsessoreiski . KOKKUVÕTTEKS Moodsad superskalaarsed mikroprotsessorid suudavad igal protsessoritaktil suunata töötlusesse kuni kuus käsku . Perspektiivsed , täiustatud arhitektuuriga protsessorid peaksid suutma igal taktil töödelda aga juba <arv> kuni <arv> käsku . Protsessorite jõudluse kasvu üheks reserviks on uute protsessorarhitektuuride väljatöötamine , kus paremini kasutatakse ära informatsiooni jadatööt- lusele orienteeritud programmides sisalduv käsutasemeline rööpsus . Siiski mitte selles ei seisne põhisuund , millest lähtuda protsessorarhitektuuride edasisel arendamisel . Kahjuks on programmides sisalduv käsutasemeline rööpsus liialt piiratud , eriti püsipunkttöötlusele orien- teeritud programmide korral . Mikroprotsessorite jõudluse radikaalseks tõstmiseks tuleb otsustavalt lahti öelda tuginemisest ainult peenekoelisele rööpsusele ja üle minna jämedakoelisele rööpsusele , nii nagu see on toimunud kiipmultiprotsessorites ( chip multiprocessor ) ja simultaanse hargtöötlusega protsessorites ( simultaneous multithreaded processor ) . Vaatamata sellele , et neis protsessoreis rakendatakse multiprogramset talitlusviisi , toimub üksikute protsesside või käsulõimede töötlemine ikkagi jadaprintsiibil . Veelgi kõrgema rööpsusastmega töötlusvõimalusi pakuvad PIM-arhitektuuriga ja rekonfigureeritava arhitektuuriga protsessorstruktuurid . Ühendades ühel kristallil uudsete arhitektuursete lahendustega ülikõrge jõudlusega protsessorlülitusi ülikiirete ja suuremahuliste mälulülitustega , on võimalik lahendada praegustes mikroprotsessorsüsteemides eksisteerivat “ mälumüüri probleemi ” . Vaadeldud täiustatud superskalaar- , superspekulatiiv- ja jäljeprotsessori arhitektuurid esin- davad mikroprotsessorite järgmist põlvkonda . Neis protsessorarhitektuurides informatsiooni töötlusel massiliselt rakendatav spekulatiivtöötlus peab kaasa aitama klassikaliste CISC-arhitektuuriga protsessorite jõudluspiirangute ületamisele . Kirjeldatud perspektiivsed protsessorarhitektuurid on samas vaheetapiks üleminekul informatsiooni peenekoeliselt rööptöötluselt jämedakoelisele . Tulevaste mikroprotsessorlülituste arhitektuuri märksõnadeks saavad informatsiooni rööptöötlus ja superskalaarsus , mis tugineb informatsiooni massilisele spekulatiivtöötlusele ning opereerimisele käsujälgedega . Millised vaadeldud protsessorarhitektuuridest hakkavad aga kõige rohkem mõjutama kõrg- jõudlusega mikroprotsessorlülituste edasist arengut , seda näitab juba lähitulevik .  Paul Leis <arv>. SISSEJUHATUSE JÄRG Sissejuhatuse alustuseks sobib A &amp; A käesoleva aasta teise numbri toimetajaveerg . Siinkohal jätkamegi sealtoodut . Meie kirjelduse aluseks on Alistair Cockburni , Jim Highsmithi , Craig Larmani , David J. Andersoni , Eli Schragenheimi ja Sanjiv Augustine'i tööd . <arv> , <arv> , <arv> , <arv> , <arv> , <arv> Agiilne projektijuhtimise metoodika pole hõbekuul , mis sobib kõikjal ja kõikidele projektidele . Agiilne projektijuhtimine sobib nendes valdkondades ja nendes projektides ( agiilprojektides ) , mille lähtetingimused on ähmased ( fuzzy ) , mille eesmärkide saavutamiseks on vajalik innovatsioon , millegi avastamine , st uurimuslik tarkvaraarendus . Agiilprojektide puhul pole traditsioonilise projektijuhtimise metoodika rakendamise eeldused ( nt täpselt määratletud toote spetsifikatsioon ) rahuldatud - järelikult pole see metoodika agiilprojektide puhul rakendatav . Agiilse projektijuhtimise tüüpilised valdkonnad on : tarkvaratooted ( operatsioonisüsteemid , vahevaratooted , äriintellektitehnika rakendused jmt ) ; sardtarkvara tooted ( nt autodes olev tarkvara ) ; ettevõtte sisemised IT rakendused . Märgime , et IT rakenduse “ isetegemine ” on vajalik konkurentsieelise saamiseks - turult võivad IT toote osta ka konkurendid . Uurimusliku tarkvara loomise protsessi eesmärkideks on : <arv> ) pidev innovatsioon - luua toode , mis rahuldab kasutaja käesolevaid nõudeid ; <arv> ) toote adaptiivsus - saab lisada kasutaja tulevikunõudeid rahuldavaid funktsioone ; <arv> ) lühendatud toote valmistamise/üleandmise aeg - kiiresti turule on üks põhinõudeid järjest ägeneva konkurentsi tingimustes ; <arv> ) inimeste ja protsesside adaptiivsus - vaja on kiiresti reageerida toote ja äri muudatustele ; <arv> ) usaldatavad tulemused - kvaliteet ei tohi kannatada . <arv>. VÄÄRTUSED Metoodikate ülesehituse loogika on järgmine . Lähtutakse põhiväärtustest , mida metoodika rakendamisega tahetakse saavutada . Praktikad on tegevused/toimingud , mis võimaldavad neid väärtusi saavutada . Agiilseid praktikaid on palju , nende kirjeldused on detailsed<arv>- on mõistetav , et artikli piiratud mahu tõttu me neid siinkohal ei käsitle . Printsiibid tuletatakse põhiväärtustest ( mitte küll nii nagu teoreemid matemaatikas ) , sellest tulenevalt määratlevad printsiibid , kuidas/mis tingimustel praktikaid rakendada . Selle artikli teemaks ongi “ filosofeerimine agiilse projekti- juhtimise printsiipide üle ” . Alustame loomulikult agiilse projektijuhtimise väärtustest . Pole üllatav , et agiilse projektijuhtimise põhiväärtusteks on samad väärtused , mis on kirja pandud agiilmanifestis “ Manifesto for Agile Software Development ” . Me tahame luua uusi , paremaid tarkvara arendusmetoodikaid . Me hindame : enam inimesi ja nendevahelisi suhteid kui protsesse ja arendusvahendeid ; enam töötavat tarkvara kui täielikku dokumentatsiooni ; enam kliendi osalust arenduses kui lepingute koostamist ; enam muudatustele reageerimist kui plaani järgimist . Mõned kommentaarid . Agiilsus : planeerimisele - plaani täitmisele vastandab visiooni loomise - uuringu ; ettemääratusele vastandab adaptiivsuse . Agiilprojekti puhul on meil nii tuntud kui ka tundmatuid tegureid ja nõudeid ning seetõttu on iga agiilprojekti puhul vaja leida tasakaal planeerimise ja muudatuste sisseviimise vahel . Muutuda võib nii projekti skoop , kasutatav tehnoloogia kui ka toote funktsionaalsus - ainult toote visioon on stabiilne . Projektid , mille puhul kulutatakse kuid/aastaid detailsele nõuete dokumenteerimisele , enamasti ebaõnnestuvad . Miks ? Tiim toimib lineaarselt nõuetelt tootele , tiimil võib olla häid ideid , mida ei saa evitada/kontrollida . Ja veel , traditsiooniline projektijuhtimise metoodika on “ dokumendilembeline ” <arv> , kuid dokumendid ei lahenda äriprobleeme , neid lahendab töötav tarkvara . Ka ei asenda dokumentatsioon vahetuid suhteid ei arendajate endi ega ka kasutajate ja arendajate vahel . <arv>. PÕHIPRINTSIIBID Agiilset projektijuhtimist tüürivad kuus põhiprintsiipi , mis on tuletatud Agiilmanifesti põhi- väärtustest : Luua innovatiivsete toodetega väärtus kasutajale : luua väärtus kasutajale ; rakendada iteratiivset , funktsioonipõhist kasutajale üleandmist ; tagada tehniline täiuslikkus . Liidrirollil ja koostööl põhinev juhtimisstiil : soodusta uuringuid ; loo adaptiivne ( iseorganiseeruv , enesedistsipliiniga ) tiim ; lihtsusta . Kasutajale väärtuse loomisel tuleb arvestada , et vaja on luua toode , millel on väärtus kasutajale nii täna kui ka homme - homse arvestamine nõuab aga adaptiivsust , toote/rakenduse kohen- datavust vastavalt uutele tingimustele . Traditsioonilises arendusprojektis loetakse plaanid õigeteks/ ” viimase instantsi tõdedeks ” . Projekti verstapostides kontrollitakse tehtu vastavust plaanile ja määratakse korrigeerivad tegevused , kui ilmnevad kõrvalekalded plaanist . Agiilprojektide verstapostides on põhirõhk senitehtust õppimisel , projekti adapteerimisel vastavalt tehtud avastustele/uurimisele , vastavalt sellele , kuidas on tiim projekti käigus targemaks saanud . Järgnevalt esitame mõned kommentaarid agiilse projektijuhtimise printsiipidele . <arv>.<arv>. KOMMENTAAR : USALDATAV , MITTE KORRATAV PROTSESS Alustame protsesside korratavusest . Traditsiooniline tarkvaraarendus hindab arendus- protsesside korratavust : näiteks CMMi teise taseme ühesõnaline määratlus ongi “ korratav ” . Agiilsõnavaras aga “ korratav ” puudub . Korratavus tähendab teha sama asja samal viisil samade tulemuste saamiseks . Korratav protsess eeldab samalaadseid sisendeid , mille alusel luuakse määratletud väljundid . Korratavus tähendab , et sisendite alusel väljundite saamise protsessi saab väikeste muudatustega korrata . See aga tähendab , et meil on alguses kogu vajalik informatsioon olemas - ainult sel juhul saame täpselt protsessi väljundit määratleda . Agiilprotsess on “ usaldatav ” : projekti eesmärgid , visioon saavutatakse ebamäärasu- sele/takistustele vaatamata . Usaldatav protsess lähtub aga väljunditest , mitte sisenditest : kuigi sisendid võivad protsessi käigus muutuda , tuleb leida teed/viisi vajaliku lõpptulemuse saamiseks . Kuna me ei saa erinevate protsesside puhul eeldada samu sisendeid , siis pole mõistlik kasutada ka kõikide projektide puhul samu protsesse ja samu praktikaid . Parimal juhul saab korratava protsessiga saavutada neid tulemusi , mida osati määratleda projekti alguses . Usaldatava protsessiga võib aga saavutada paremaid tulemusi ( isegi ootamatuid , üllatavaid ) , kui algul keegi arvata oskas . <arv>.<arv>. KOMMENTAAR : TÜÜRIMINE , MITTE ADMINISTREERIMINE Enamik projekte on üleadministreeritud ja allatüüritud . Põhiline erinevus on selles , et administreerimine tegeleb projekti keerukusega , projekti tüürija/liider aga muudatustega . Ilma piisava administreerimiseta liiguvad keerulised projektid kiiresti kaose suunas . Plaanid , kontrollid , eelarved ja protsessid aitavad projekti administraatoreid hakkama saada projekti keerukusega . Kuid projektides , kus prevaleerivad määramatus/hägusus , risk ja muudatused , pole need praktikad piisavad . Projektijuhid peavad olema nii administraatorid kui ka liidrid/tüürijad , kusjuures liidrirolli tähtsus kasvab märgatavalt , kui suureneb projekti uurimuslik iseloom . Liider ollakse mitte sellepärast , mida tehakse , vaid sellepärast , kes ollakse . Erinevalt administraatoritest ergutavad/julgustavad liidrid projekti muudatusi - ainult nii saab luua innovatiivset toodet/rakendust . Samal ajal vajavad nii projektid kui ka organisatsioonid nii administraatoreid kui ka liidreid . Liider olla tähendab tunnetada piiri selle vahel , mida me tegime eile ja mida me vajame homme . Administraatorid teavad eesmärki , liidrid mõistavad suunda . Kahjuks kalduvad administraatorid sageli projektide mikrojuhtimisse : detailsed plaanid ja nende täitmise kontroll . Kahjuks ( ? ) pole agiilprojektide puhul detail- planeerimine võimalik - mida võiks tähendada määramatuse detailiseerimine ? Muudatused on rasked , tülikad , paljudele vastumeelsed<arv>. Ka uurimuslikkus on raske , tülikas , paljusid isegi hirmutav . Kuid innovatsiooni saab saavutada vaid uurimuslike projektidega , determineeritud protsessiga seda saavutada pole võimalik : innovatsiooniks on vaja teha midagi teisiti kui varem . Sealjuures on kõigile teada , et konkurentsieelise saavutamise eeltingimuseks on innovaatilisus , järelikult saab konkurentsieelist saavutada vaid agiilprojektidega . Adaptiivsed , iseorganiseeruvad tiimid on agiilse projektijuhtimise nurgakiviks . Iseorganiseeruvaid tiime ei iseloomusta mitte juhtimise puudumine , vaid juhtimise stiil : tüürimine , mitte administreerimine . Ja veel : inimesed loovad uusi väärtusi , mitte struktuurid . Projektijuhi ülesandeks on tagada , et kõik tiimi liikmed mõistaksid projekti visiooni ja enda rolli selle saavutamisel . Projekti visioon sisaldab ka piirangute mõistmist . Informatsioon projekti visioonist ja täitmisest on oluline tiimiliikmetele . Projektijuht tagab eelkõige tiimiliikmete interaktsiooni/suht- lemise ja kordineerimise , alles seejärel dokumentatsiooni . Eesmärgiks on mõistmine/ arusaamine , mitte dokumentatsioon . <arv>.<arv>. KOMMENTAAR : ISEORGANISEERUVUS JA ENESEDISTSIPLIIN Paljude organisatsioonide tööd halvab “ hajutatud vastutus ” ( loe : vastutamatus ) . Otsuseid teevad komiteed , kel pole asjadest aimu , neid täide peavad viima aga need , kel pole otsustamise õigust . Võib ka öelda : ühed teevad ( mitte parimaid ) otsuseid , teised peavad ( teataval määral ) nende otsuste täitmise eest vastutama . Iseorganiseeruva tiimi vajalikuks tingimuseks on õigus teha otsuseid ja nende eest ka vastutada ning tulemustest aru anda . Rõhutame : vastutus pole mõeldav õiguseta teha olulisi otsuseid - kuigi pole haruldane , et praktikas püütakse seda ( vaieldamatut ) teesi ümber lükata . Iseorganiseeruvale tiimile antakse õigusi nii palju kui on mõistlik tõhusa ja jälgitava töö tagamiseks . Seejuures : iga funktsiooni arendaja võtab vastutuse selle funktsiooni eest , tiim võtab vastutuse iteratsioonil loodavate funktsioonide eest , samuti verstapostis ettenähtud funktsionaalsuse saavutamise eest . Niisuguse tiimi tüürimine pole mikrojuhtimine , kus juht seirab detailselt määratletud ülesannete täitmist : detailselt püstitatud ülesannete puhul pole isik ise teinud olulisi otsuseid , mille täitmist ta aga peab tagama . Samal ajal ei välista tüürimisprintsiip projektijuhi ainuisikuliste otsuste tegemist , kuid reeglina delegeerib projektijuht otsustamise tiimile . Distsipliin seisneb selles , et tehakse , mida ütled , ja öeldakse , mida tehakse . Selle ilusa printsiibi rakendamiseks on paljudel ettevõtetel hulgaliselt protsesse , protseduure , vorme , juhiseid ja muid dokumente , mida järjekindlalt ignoreeritakse . Agiilorganisatsioonidel on “ kõike seda ” vähe , aga sellest , mis on , peetakse kinni . Seega on : agiilorganisatsioonid distsiplineeritumad kui traditsioonilised . Agiilorganisatsioonidel pole ülevalt kehtestatud kord , vaid enesedistsipliin . Kui tiimi liikmetele anda enam autonoomiat , õigust teha olulisi otsuseid , siis on vajalik tiimi ensedistsipliin . Kui juht saavutab distsipliini ülesannete detailiseerimisega - “ tee seda ja seejärel toda ” , siis ta halvab initsiatiivi ja enesedistsipliini . Agiilsuse saavutamiseks peavad toimimisreeglid olema lihtsad . Lihtsad reeglid võimaldavad väledat , kiiret tarkvara arendust . Seejuures pole väledus lihtsuse tagajärg , kuid lihtsus teeb võimalikuks väleduse saavutamise . <arv>.<arv>. KOMMENTAAR : ÜLDISED REEGLID Reegel nr. <arv>. Ole nutikas igas olukorras . Teisi reegleid pole . ( Use your good judgment in all situations . There will be no additional rules ) . <arv> Edukas projektijuhtimine saavutab tasakaalu kaose ja korra vahel , seega on meil vaja pisut enam reegleid , et ka teatavat korda tagada . Kuid iga reegli lisamine võib pärssida tiimi innovaatilisust ja võimet võtta vastutust - seega tuleb reeglile nr. <arv> uute reeglite lisamisel olla ettevaatlik , mida illustreerib ka järgnev näide . Kindlaim viis keeruline/uurimuslik projekt põhja lasta on “ teha täpselt , mida kästakse ” . Täpselt saab täita ainult detailseid reegleid . Oma raamatus Artful Making <arv> kirjeldavad Rob Austin ( Harvard Business School i professor ) ja Lee Devin <arv> miljoni dollarilise IT-projekti krahhi . Projekti läbiviimise “ kuldprintsiibiks ” oli : “ Plaani tööd ja tööta plaani järgi ” ( “ Plan the work and work the plan ” ) . Austin ja Devin nimetavad niisugust lähenemist uurimuslikule projektile destruktiivseks . Detailsed reeglid - neid peab ka palju olema ( mida võiks tähendada “ <arv> detailset projekteerimisreeglit ” ? ) - teevad innnovaatilisuse mõeldamatuks : looming pole võimalik käsku täites . Agiilsus tagab loomingu : printsiibid ei määratle toiminguid , mida arendajad peavad tegema . Agiilprintsiibid määratlevad minimaalse hulga toiminguid , mis tagavad tiimi kollektiivse intellekti . Märgime , et reeglite üleküllus vabastab tiimi liikmed vajadusest mõelda , mis enamasti pole tiimi soovitav seisund . <arv>.<arv>. KOMMENTAAR : NAPILT PIISAV METOODIKA Agiilprojektide metoodika puhul kehtib : “ pisut vähem kui parasjagu ” . Ja veel : “ ole väle , aga ära kiirusta ” . Näiteks , kui arendaja ei testi oma funktsioone piisavalt , kiirustab testimisel , siis ta tegelikult aeglustab projekti - hilisem vigade parandus võtab oluliselt enam aega . Määratledes toimingud , mis on hädavajalikud , ja tehes neid hästi , saavutame projekti läbiviimise kiiruse/väleduse . Nagu näeme , pole meil miskit tartlaste mõiste “ väledus ” vastu , ainult kasutama peab seda õiges kontekstis<arv>. Ja loomulikult pole väledus agiilsus . Veel märgime , et enesedistsipliinita tiimidel muutub väledus kiirustamiseks ( they confuse quickness with hurrying ) . Siikohal võiks meenutada ka legendaarset korvpallitreenerit John Woodenit , kes oma tiimile ütles : “ Be quick , but don't hurry . ” <arv>. PRINTSIIPIDELT PRAKTIKATELE Printsiibid on juhised , praktikate järgi korraldatakse tegelik töö . Printsiibid aitavad adapteerida praktikaid vastavalt konkreetsetele olukordadele . <arv>.<arv>. AGIILSE PROTSESSI KARKASS Kuigi inimesed on olulisemad kui protsessid , pole protsessid väheolulised . “ Head ” protsessid vastavad ärieesmärkidele . Näiteks , kui ärieesmärk on mingi “ asja ” korduv , pidev tootmine , siis on ettemääratav , täielikult determineeritud protsess õigustatud , mõistlik . Kui aga ärieesmärgiks on usaldatav innovatsioon , siis on vajalik protsessikarkass , mis on paindlik , hõlpsasti adapteeritav .  Agiilprojekteerimise faasid on : visiooni loomine , prognoosimine , uurimine , adapteerimine , lõpetamine . <arv>.<arv>. FAAS : VISIOONI LOOMINE Projekti visiooni loomisel määratletakse mida , kes ja kuidas . Esiteks määratleb visioon rakendust/toodet üldiselt : eesmärk , rakenduse põhiomadused , skoop , piirangud , aeg , maksumus , kvaliteet , kuidas toimub projekti lõpetamine/tulemuste üleandmine . Teiseks , kes moodustab projekti huvigrupi : kasutajad , arendajad - keda võtta projekti tiimi ( kelle osalemine on kriitiline , kellel soovitatav , keda on parem mitte kaasata ) , projekti- ja tootejuhid , sponsor jt. Kolmandaks , kuidas projekti läbi viia : metoodika , protsessid , riskid ja nende leevendamine . <arv>.<arv>. FAAS : PROGNOOSIMINE Agiilprojekteerimine on mittetäieliku informatsiooni alusel hüpoteeside loomine , nende verifitseerimine ja valideerimine , ning lõpuks realiseerimine ja evitamine . Sel põhjusel ei harrastata agiilprojektide puhul sõna “ plaanimine ” , mida traditsiooniliselt seostatakse ettemääratusega . Sobivam sõna on “ prognoosimine ” . Olulised toimingud prognoosimise faasis : algne nõuete määratlemine ; olulisemate funktsioonide ( features ) , kasutuskaasuste ( use cases ) või kasutajalugude ( user stories ) määratlemine - olenevalt nõuete määratlemise ideoloogiast ; väljalaskeplaan ( väljalase , verstapostid , iteratsioonid ) , mis sisaldab ajakava ja ressursside määratluse ; riskide identifitseerimise ja leevendamise plaan ; projekti maksumuse hindamine ning nõutava administratiivse ja finantsdokumentatsiooni loomine . <arv>.<arv>. FAAS : UURIMINE Uurimisfaasis realiseeritakse tarkvararakenduse funktsioonid . Olulisemad toimingud : <arv> ) ressursside ja tehnikate haldus , riskide leevendamine ; <arv> ) tiimi koostöö ja iseorganiseerumise tagamine ; <arv> ) koostöö korraldamine tiimis , kasutajate , sponsorite ja huvigrupiga . <arv>.<arv>. FAAS : ADAPTEERIMINE Tulemuste analüüs/võrdlemine plaaniga . Korrigeerivad tegevused ( nõudeid/plaani pole vaja muuta ) või nõuete adapteerimine/kohandamine ( uurimisfaasi tulemusel vajab esialgu kavandatu muutmist ) . Pärast visiooni loomist on arendustsükkel tavaliselt prognoosimine- uurimine- adapteerimine , uue informatsiooni lisandumisel võib olla vaja ka visiooni muuta . <arv>.<arv>. FAAS : LÕPETAMINE Traditsiooniliselt on projekti lõpetamisel vajalikud järgmised toimingud : <arv> ) projekti üleandmine ( vastuvõtutestid , dokumentatsioon jmt ) ; <arv> ) projekti analüüs ( mis hästi tehtud , mis halvasti , mida järgmistes projektides paremini teha ) . Agiilprojekti puhul lisandub siia veel projekti innovaatilisuse analüüs , kas ja kuidas saab edaspidi kasutada antud projekti tulemusi ja/või viise/metoodikat nende saamiseks . <arv>. KOKKUVÕTE Tarkvaraarenduse agiilmetoodikatest on meil mitmel pool kirjutatud , ka antakse ülikoolide tarkvaratehnika kursustes ülevaade olulisematest agiilmetoodikatest . Siinkohal tahtsime juhtida tähelepanu agiilprojektide läbiviimise erisustele traditsiooniliste arendusprojektidega võrreldes . Nende erisuste eiramine vähendab agiilmetoodikate praktilise rakendamise tõhusust . <arv> Alistair Cockburn , Agile Software Development , ISBN <arv>-<arv>-<arv>-<arv>. <arv> Jim Highsmith , Agile Software Development Ecosystems , ISBN <arv>-<arv>-<arv>-<arv>. <arv> Craig Larman , Agile and Iterative Development : A Manager's Guide , ISBN <arv>-<arv>-<arv>-<arv>. <arv> Jim Highsmith , Agile Project Management : Creating Innovative Products , ISBN <arv>-<arv>-<arv>-<arv>. <arv> David J. Anderson , Eli Schragenheim , Agile Management for Software Engineering : Applying the Theory of Constraints for Business Results , ISBN : <arv>-<arv>-<arv>-<arv>. <arv> Sanjiv Augustine , Managing Agile Projects , ISBN : <arv>-<arv>-<arv>-<arv> . <arv> Vt <hyperlink> , The Project Management Institute's Project Management Body of Knowledge ( PMBOK ) . <arv> Meenutame Mark Twaini : Ainult märgades mähkmetes imik tervitab muudatusi . <arv> James C. Collins and Jerry I. Porras . Built to Last : Successful Habits of Visionary Companies . New York : HarperBusiness , <arv>. <arv> Rob Austin , and Lee Devin . Artful Making : What Managers Need to Know About How Artists Work . Upper Saddle River , NJ : Financial Times Prentice Hall , <arv>. <arv> P. Leis , Toimetajaveerg : agiilne projektijuhtimine , A &amp; A , Nr . <arv>'<arv> . Ivo Müürsepp , TTÜ raadio- ja sidetehnika instituudi doktorant SISSEJUHATUS Tänapäeva infohankesüsteemide ehitamisel kasutatakse aina rohkem digitaaltehnikat . Võib väita , et modernsed sonar- ja radarsüsteemid liiguvad digitaalraadio kontseptsiooni suunas , kus analoogtehnikas on realiseeritud ainult saate- ja vastuvõtuvõimendid ning kogu ülejäänud signaalitöötlus toimub juba digitaalsel kujul . Digitaalsete infohankesüsteemide eeliseks on lihtsam häälestamine , suurem töökindlus ja täpsus , samuti vähenevad kulud riistvarale , sest uue rakenduse tarvis pole ilmtingimata vaja vahetada välja kogu riistvara , piisab ainult seadme tarkvara muutmisest . Kõige olulisem on aga asjaolu , et digitaaltehnika võimaldab täiesti uusi põhimõttelisi signaalitöötluse lahendusi , millel “ analoogmaailmas ” vasted puuduvad . Näiteks digitaalradari loomiseks vajalikud suured arvutusvõimsused on tänapäeval digitaalsete signaaliprotsessorite näol juba olemas . Järgnevalt vaatleme lühidalt digitaalsete signaaliprotsessorite rakendamist infohankesüsteemides . PROTSESSORARHITEKTUURI ARENGUST Aastast <arv> pärineb esimene reprogrammeeritava arvuti kontseptsioon , kus nii andmeid kui ka programmi hoiti samas mälus , mis on tuntud von Neumanni arhitektuuri nime all . Taolise esmase lahenduse puuduseks on asjaolu , et nii käske kui ka andmeid tuleb lugeda järjestikku . Seetõttu kulub näiteks liitmiskäsu sooritamiseks kolm järjestikust lugemistakti : kõigepealt loetakse käsk ise , seejärel esimene liidetav ja siis teine liidetav . Harvardi arhitektuuri kasutavas arvutis on programmi ning andmete jaoks eraldi mälud ning ühendussiinid , võimaldades samaaegselt lugeda mälust käsku ning operandi . Eeltoodud liitmise näite korral loetaks samaaegselt liitmiskäsk ning esimene liidetav , järgmisel taktil loetaks sisse teine liidetav ning viimasega samaaegselt juba järgnev käsk . Nagu näha , saavutame riistvaralise keerukuse kasvuga tunduvalt suurema töökiiruse . Tänapäevased protsessorrakendused nõuavad aga aina suuremat jõudlus ning seetõttu on järgmise loogilise sammuna Analog Device' i poolt paljudes digitaalsetes signaaliprotsessorites ( DSP ) kasutusele võetud nn Harvardi superarhitektuur ( Super Harvard ARChitecture - SHARC ) . SHARC-arhitektuuri korral on tegemist Harvardi arhitektuuri edasiarendusega läbilaskevõime suurendamiseks . Andmete lugemiseks ja salvestamiseks on kasutusel kaks või enam siini ning iseseisvat mäluosa , mis võimaldab ühe operatsiooni jaoks vajalikud andmed mälust lugeda samaaegselt operatsioonikäsuga . Tulles tagasi liitmise näite juurde , loeks SHARC-protsessor liitmiskäsu ning mõlemad liidetavad mälust üheainsa takti jooksul . Järgnevalt kirjeldamegi SHARC-arhitektuuri võimalusi Analog Device' i digitaalse signaaliprotsessori TS<arv>S TigerSHARC ® näitel . DIGITAALSE SIGNAALIPROTSESSORI TS<arv>S EHITUS Analog Device' i DSP TS<arv>S TigerSHARC ® sobib hästi SHARC-arhitektuuri omapärade demonstreerimiseks . Protsessori lihtsustatud struktuuriskeem on kujutatud joonisel <arv>. Prot- sessori taktsagedus on <arv> MHz ( vanemal versioonil <arv> MHz ) . Esimesena silmatorkavaks asjaoluks on kolme <arv> biti laiuse andmesiini olemasolu . Iga andmesiini adresseerimiseks on protsessoris kolm <arv> biti laiust aadress-siini . Protsessori sisemälu kogumahuks on <arv> Mbit , mis on jagatud kolmeks <arv> biti laiuseks mäluplokiks . Igaüks kolmest mäluplokist on ühendatud ühega kolmest andmesiinist . Taolise ülesehituse tõttu on igal töötaktil võimalik mälust lugeda või sinna kirjutada kokku <arv> bitti , mis protsessori <arv>,<arv> ns töötakti kestuse juures annab teoreetiliseks protsessorisiseseks andmeülekandekiiruseks <arv>,<arv> Gbit/s . Ühte kolmest mäluplokist kasutatakse programmimäluna ning viimasega ühendatud siini käskude edastamiseks mälust juhtplokile . Andmete edastamiseks jäänud kaks <arv> biti laiust siini võimaldavad seega ühe takti jooksul mälust lugeda või sinna kirjutada kuni kaheksa <arv> biti pikkust ujukomaarvu või kuni kolmkümmend kaks kaheksabitist täisarvu .  Joonis <arv>. Digitaalse signaaliprotsessori TS<arv>S lihtsustatud struktuur TS<arv>S protsessori nn superskalaarne ehitus võimaldab tööd SIMD- ( Single Instruc tion Multiple Data ) režiimis , mis tähendab , et protsessor võib ühe töötakti jooksul täita kuni neli samaaegset instruktsiooni . Samaaegselt sooritatavad instruktsioonid ei saa siiski olla suvalised , vaid arvestada tuleb protsessori ressurssidega . Näiteks tänu kolme mäluploki olemasolule saab samaaegselt sooritada mitu mälust lugemise/kirjutamise operatsiooni , kuid samaaegselt ei saa lugeda/kirjutada ühte ja samasse mäluplokki . Ka kogu ülejäänud protsessori struktuur toetab tööd SIMD-režiimis , selleks on protsessoris kaks identset aritmeetika-loogikaplokki , vastavalt siis X ALU ja Y ALU ( vt joon <arv> ) . Kumbki ALU võimaldab samaaegselt sooritada ühte korrutus- , ühte aritmeetika- ja ühte nihutusoperatsiooni töötakti jooksul , seega kokku kuni kuus operatsiooni töötakti korral . Viimane arv kehtib ujukomaoperatsioonide puhul , baidi pikkuste täisarvude korral võimaldab näiteks ühe ALU aritmeetikaplokk kuni kaheksa arvu samaaegset liitmist ühe takti jooksul . Operatsioonikonveieri pikkus on ALUdel kaks takti , mis tähendab , et operatsiooni tulemus on kasutatav ülejärgmisel taktil pärast operatsiooni sooritamist . Juhul kui programm küsib tulemust juba varem , genereeritakse ootetakt . Vältimaks ootetaktidest põhjustatud ajakulu , tuleks programm koostada viimaseid võimaluse korral vältides . Analoogiliselt sisaldab aadressigeneraator kahte täisarvulise aritmeetika plokki IALU . Viimased võimaldavad sooritada erinevaid aritmeetika- ja loogikatehteid täisarvudega . IALUde peamiseks ülesandeks on operatsioonid aadresside ja viitadega ning trummelnihutite realiseerimine , kuid samuti on võimalik neid rakendada muude täisarvudega sooritatavate operatsioonide realiseerimiseks . Protsessori suurt töökiirust ja läbilaskevõimet toetavad ka sisend-väljundlülitused . Punktistpunkti ühendust toetavad neli ühebaidist kiiret ühendusporti andmeedastuskiirusega <arv> MB/s , andes seega nelja pordi peale kokku kuni <arv>,<arv> GB/s . Välise siiniga andmevahetuse tarbeks on signaaliprotsessoril siiniliides , mis võimaldab andmeedastuskiirust kuni <arv> MB/s . Protsessori südamikust sõltumatu kiire andmeülekande protsessori mälu ja välisseadmete vahel tagab sisseehitatud neljateistkümne virtuaalse kanaliga DMA kontroller . Lisaks eespool mainitule sisaldab protsessor TS<arv>S veel muid väikemaid funktsionaalseid sõlmi , nagu näiteks SDRAM kontroller jms , kuid käesoleva artikli mahu juures ei ole viimased piisavalt olulised ning seega siin käsitlemist ei leia . TS<arv>S KÄSUREA SÜNTAKS JA STRUKTUUR Nagu juba eespool mainitud , on TigerSHARC ® TS<arv>S protsessori näol tegemist nn superskalaarse arhitektuuriga protsessoriga , mis võimaldab täita üks kuni neli <arv>-bitist käsku ühe käsurea jooksul . Käsurea assemblerkeelne süntaks on järgnev : <arv>_käsk ; <arv>_ käsk ; <arv>_ käsk ; <arv>_ käsk ;; . Iga käsurida koosneb ühest kuni neljast käsust , mis on omavahel semikoolonitega eraldatud , käsurida ise lõpeb kahe semikooloniga . Käsk on <arv> biti pikkune sõna , mis aktiveerib ühe või mitu protsessori täitevsõlmedest mingi konkreetse operatsiooni läbiviimise eesmärgil . Kõik ühel käsureal olevad käsud loetakse mälust korraga ning samuti täidetakse ühe töötsükli jooksul samaaegselt . Osa käske koosneb kahest <arv> biti pikkusest operatsioonikoodist ning võtab seega käsureal kahe käsu jagu ruumi , samuti peab osa käske alati paiknema kindlal käsurea positsioonil . OPTIMAALSE VASTUVÕTJA REALISEERIMINE Demonstreerimaks TigerSHARC ® TS<arv>S digitaalse signaaliprotsessori jõudlust , toome järgnevalt lihtsa näite , kus mainitud protsessori baasil on realiseeritud Barkeri koodiga manipuleeritud sondeeriva signaali optimaalne vastuvõtja . Keeruliste koodidega manipuleeritud signaalide kasutamine on tänapäeva radar- ja sonartehnikas levinud suund , samuti kasutatakse signaalide kodeerimist paljudes teistes tänapäeva telekommunikatsioonitehnika harudes . Lühidalt seisneb näiteülesanne detekteeritud ja diskreeditud sisendrealisatsiooni filtreerimises konkreetse signaali jaoks sobiva filtriga . Joonisel <arv>akujutatud sisendrealisatsiooni töötlemisel saame joonisel <arv>bkujutatud väljundsignaali . Väljundsignaali maksimumi olemasolu ( kriipsjoonega tähistatud läve ületus ) teavitab objekti olemasolust , tipu asukoht aga annab ajalise viite ning seega ka kauguse objektini .  Joonis <arv>. Näiteülesande lähteandmed ( a ) ja tulem ( b ) Seitsmeelemendilise Barkeri koodi elementide väärtused on ] <arv> ; <arv> ; <arv> ; -<arv> ; -<arv> ; <arv> ; -<arv> } ning diskreeti- missagedus on selline , et iga koodielement koosneb kaheksast diskreedist , seega on kogu signaali pikkus <arv> diskreeti . Eeldame , et diskreeditud sisendrealisatsioon on salvestatud protsessori sisemälu teise mälublokki algaadressiga <arv> x <arv> <arv> , kõik arvutused toimuvad <arv>-bitiste ujukomaarvudega . Sisendsignaali ehitust arvestades oleks ilmset mõistlik signaali töötlus jaotada kahte etappi , esimesena Barkeri koodi filtreerimine ning teiseks koodielemendi filtreerimine . Joonisel <arv> on kujutatud Barkeri koodi filtri struktuuriskeem .  Joonis <arv>. Seitsmeelemendilise Barkeri koodi filtri struktuuriskeem Nagu jooniselt näha , saame väljundsignaali seitsme filtri koefitsientidega läbikorrutatud sisenddiskreedi summeerimisel . Et filtri koefitsientideks on ainult <arv> , siis reaalselt korrutamise järgi vajadus puudub , koefitsiendi -<arv> korral tuleb lihtsalt vastav element summeerimise asemel lahutada . Barkeri koodi filtri esmane versioon on järgnev : xr<arv> = [ j<arv> + = <arv> ] ;; xr<arv> = [ j<arv> + = <arv> ] ;; xr<arv> = [ j<arv> + = <arv> ] ;; xr<arv> = [ j<arv> + = <arv> ] ; xfr<arv> = r<arv> + r<arv> ;; xr<arv> = [ j<arv> + = <arv> ] ;; xr<arv> = [ j<arv> + = <arv> ] ; xfr<arv> = r<arv> - r<arv> ;; xr<arv> = [ j<arv> + = - <arv> ] ; xfr<arv> = r<arv> - r<arv> ;; xfr<arv> = r<arv> + r<arv> ;; xfr<arv> = r<arv> - r<arv> ;; xfr<arv> = r<arv> + r<arv> ;; [ k<arv> + = <arv> ] = xr<arv> ;; Käsuga xr<arv> = [ j<arv> + = <arv> ] loetakse X ALU registrisse xr<arv> viidaga j<arv> määratud aadressilt <arv>-bitine sõna ning samaaegselt suurendatakse viida väärtust kaheksa võrra , nii et viit näitab juba järgmise loetava mälupesa aadressi . Taoliselt loetakse mälust seitse sienddiskreeti ning viiakse viit lõpuks algsest ühe võrra suurema järjenumbriga mälupesale , kus paikneb juba järgmise väljunddiskreedi leidmiseks vajaliku seitsmiku esimene element . Neljandal real liidetakse käsuga xfr<arv> = r<arv> + r<arv> kokku kaks esimest elementi ( joonisel <arv> kaks vasakpoolset ) , x registri numbri ees tähistab , et operatsioon sooritatakse ainult X ALU s , f näitab , et tegemist on ujukomaoperatsiooniga . Operatsiooni tulem salvestatakse registrisse xr<arv> ning operandid võetakse sama ALU registritest xr<arv> ja xr<arv> . Nagu juba eespool mainitud , on operatsioonikonveier ALUs kahe takti pikkune , mistõttu on registri xr<arv> sisu kasutatav alles neljandal real , mitte kohe pärast mälust lugemist kolmandal real . Seetõttu toimubki esimene summeerimisoperatsioon alles programmi neljandal real . Käsukonveieri pikkust on arvestatud ka kogu ülejäänud filtriosa koostamisel . Ainsana ei õnnestu ootetakti genereerimist vältida üheksanda ja kümnenda rea vahel , kus registri xr<arv> sisu arvutamisel kasutatakse eelmisel real leitud registri xr<arv> sisu . Kõige viimasel real kirjutatakse leitud väljunddiskreet mällu viidaga k<arv> määratud aadressile ning viida väärtust suurendatakse ühe võrra , nihutades seda kohale , kuhu salvestatakse järgmine väljunddiskreet . Näeme , et esialgsel juhul kulub ühe väljunddiskreedi leidmiseks <arv> töötakti , kogu väljundrealisatsiooni leidmiseks tuleb antud protseduuri korrata nii mitu korda , kui palju väljunddiskreete on vaja leida . Toodud näites kasutasime ainult ühte arvutusplokki , kuigi on teada , et TS<arv>S sisaldab kahte identset ALU , seega saame töökiirust kahekordistada , kui salvestame sisendrealisatsiooni esimese poole ühte mäluplokki ning teise poole teise mäluplokki ja kasutame kummaski plokis olevate andmete samaaegseks töötlemiseks eraldi ALU . xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> + r<arv> ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> - r<arv> ;; xr<arv> = [ j<arv>+=-<arv> ] ; yr<arv> = [ k<arv>+=-<arv> ] ; fr<arv> = r<arv> - r<arv> ;; fr<arv> = r<arv> + r<arv> ;; fr<arv> = r<arv> - r<arv> ;; fr<arv> = r<arv> + r<arv> ;; [ k<arv>+=<arv> ] = xr<arv> ; [ j<arv>+=<arv> ] = yr<arv> ;; Näeme , et nüüd loetakse samaaegselt esimesest mäluplokist andmeid X ALU registritesse ja teisest mäluplokist Y ALU omadesse . Arvutusoperatsioonide sihtregistri ees puudub täht x , sel juhul sooritatakse sama operatsioon mõlemas mäluplokis korraga . Käsk fr<arv> = r<arv> + r<arv> ;; on samane käsureaga x fr<arv> = r<arv> + r<arv> ; yfr<arv> = r<arv> + r<arv> ;; . Seega toimub neljandal real kahe <arv>-bitise muutuja lugemine mälust , kaks täisarvulist viida suurendamise operatsiooni I ALU des , kaks summeerimisoperatsiooni X ja Y ALU des ning lisaks järgmise rea operatsioonikoodi lugemine programmimälust . Samaaegselt loetakse kolmest mäluplokist andmeid ning sooritatakse nelja summeerimisoperatsiooni ning sellest hoolimata kasutatakse hetkel ainult kolmandikku maksimaalsest võimalikust mälu- ja kahte kolmandikku arvutusressursist . Siiamaani on mäluoperatsioonid toimunud <arv> biti kaupa , kuid teatavasti on andmesiinid <arv> biti laiused ning võimaldavad seega suuremat andmeedastusmahtu . Sisendandmeid antud juhul neliksõnade kaupa arvutusplokkidesse lugeda ei saa , sest kasutatavad sisenddiskreedid ei paikne mälus kõrvuti . Kuid me võime järjest arvutada neli väljunddiskreeti , salvestada need järjestikku paiknevatesse registritesse ning seejärel korraga neliksõna kaupa salvestada . Sel juhul näeks filtri algoritmi viimane rida välja järgnev : Q[k<arv>+=<arv> ] =xr<arv> : <arv> ; Q[j<arv>+=<arv> ] =yr<arv> : <arv> ;; . Täht Q näitab , et mällu kirjutamine toimub neliksõna kaupa , seetõttu suurendatakse ka viida sisu nelja võrra , ning mällu kirjutatakse korraga registrite xr<arv>-xr<arv> ja yr<arv> - yr<arv> sisu . Tulemeid neljakaupa mällu kirjutades väheneb ajakulu umbes <arv>% . Kuna ühes filtreerimistsüklis arvutame neli tulemit järjest , siis avaneb ka siin võimalus käsuridade optimaalsemaks kasutamiseks , nimelt samaaegselt eelmise tulemi arvutamisega saame juba lugeda mälust andmeid järgmise väljunddiskreedi arvutamiseks . Taoliselt modifitseeritud algoritmi korral toimub andmete lugemine mälust pidevalt : xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> + r<arv> ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> - r<arv> ;; xr<arv> = [ j<arv>+=-<arv> ] ; yr<arv> = [ k<arv>+=-<arv> ] ; fr<arv> = r<arv> - r<arv> ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> + r<arv> ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> - r<arv> ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> + r<arv> ;; xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ; fr<arv> = r<arv> + r<arv> ;; ... Enamik käsupesadest sisaldab juba kolme käsku , olles seega otstarbekamalt kasutuses , samuti õnnestus kaotada ootetakt , asetades registri r<arv> sisu leidmise ja kasutamise vahele takti andmete lugemiseks registritesse r<arv> . Et filtri korral on tegemist tsüklilise algoritmiga , siis saab juba neljanda elemendi leidmise ajal lugeda sisendandmeid järgmise tsükli esimese elemendi jaoks ehk siduda viimase ja esimese elemendi arvutamine analoogiliselt ülejäänud elementide leidmisega . Sellisel juhul on ühe väljunddiskreedi leidmiseks kuluv ajahulk ainult <arv>% esialgse variandi puhul kuluvast ajast ehk alla <arv> ns . Järgnevalt vaatleme koodielemendi filtreerimise probleemi . Joonisel <arv> on kujutatud kaheksast diskreedist koosneva koodielemendi filtri struktuuriskeem . Nagu näha , seisneb elemendi filtreerimine kaheksa järjestikuse diskreedi summeerimises : , ( <arv> ) millest saame , et ( <arv> )  Joonis <arv>. Koodielemendi filtri struktuuriskeem Avaldisest ( <arv> ) näeme , et kaks järjestikust elemendi filtri väljunddiskreeti erinevad teineteisest ainult kahe elemendi võrra , seega saab optimaalse filtri koostada ka joonisel <arv> toodud kujul - nn libiseva keskmise algoritmina . Kusjuures näeme , et vajalik arvutusmaht ei sõltu üldse filtreeritava elemendi pikkusest , iga väljundelemendi leidmiseks on vaja sooritada kaks mälust lugemise operatsiooni , üks liitmine ja üks lahutamine .  Joonis <arv>. Libiseva keskmise algoritm Libiseva keskmise algoritmi esialgne assemblerkeelne versioon TS<arv>S jaoks võiks välja näha järgnevalt : xr<arv> = [ j<arv>+=<arv> ] ; yr<arv> = [ k<arv>+=<arv> ] ;; xr<arv> = [ j<arv>+=-<arv> ] ; yr<arv> = [ k<arv>+=-<arv> ] ;; fr<arv> = r<arv> - r<arv> ;; fr<arv> = r<arv> + r<arv> ;; [ k<arv>+=<arv> ] = xr<arv> ; [ j<arv>+=<arv> ] = yr<arv> ;; Kõigepealt loetakse mälust lahutatav element , seejärel liidetav , sooritatakse vajalikud operatsioonid ning salvestatakse tulem mällu . Filtri väljundsignaal jääb mällu kahe ploki vahele jagatuna , kuna viimase kirjutamisel DMA kaudu välismällu ei ole erilist vahet , kas lähteandmed paikneva tervikuna koos või tuleb sooritada kaks lühema kestusega DMA ülekannet erinevatelt algaadressidelt . Juhul kui väljundsignaal peab siiski olema ühes massiivis , peab viit j<arv> viitama samale mäluosale kui k<arv> , kuid poole väljundrealisatsiooni pikkuse suuruse erinevusega . Samuti pikeneb siis töötlusaeg ühe takti võrra , sest samaaegselt ühte mällu korraga kirjutada ei saa . Analoogiliselt Barkeri koodi filtriga saab ka siin liita erinevate väljunddiskreetide leidmiseks kasutatavaid käske samadele käsuridadele , suurendades seega veelgi töötluskiirust , viies elemendi filtri väljunddiskreedi leidmiseks kuluva aja <arv> nanosekundini . Et tegemist on rekurrentse algoritmiga , siis ei osutu antud juhul nelja diskreedi leidmine ja siis korraga mällu kirjutamine otstarbekaks , sest viimase peale kulub rohkem aega kui tulemite ükshaaval salvestamisel . Liites nüüd mõlema operatsiooni sooritamiseks kuluva aja , näeme , et ühe väljunddiskreedi leidmiseks kulub umbes <arv> nanosekundit , mis arvestades Nyquisti kriteeriumit , tähendab , et üks protsessor suudaks probleemideta reaalajas töödelda kuni <arv>-MHz sagedusega sisendsignaali . Sonartehnika puhul ei ületa tavaliselt kasutatavad sagedused paarisaja kilohertsi piire . Radari korral tuleb vastuvõetud signaal siiski enne vahesagedusele viia ning alles siis saab seda näites kujutatud filtriga töödelda . KOKKUVÕTE Protsessorite areng on jõudnud ülisuure jõudlusega digitaalsete signaaliprotsessoriteni , mille baasil on võimalik realiseerida kiireid töötlusalgoritme , mis ületavad oma võimalustelt analoogtehnikat mäekõrguselt . Siiski näeme , et reaalsel juhul ei ole alati konkreetse ülesande lahendamisel võimalik protsessori kogu maksimaalset ressursi ära kasutada , kuna algoritmide koostamisel on siiski esmatähtis nõutud sõlme realiseerimine , mitte protsessori jõudluse maksimaalne kasutamine . Siiski saab siinkohal töötlusalgoritmi otstarbekal koostamisel viimast nõuet võimaluste piires protsessori võimalustega sobitada , saavutades algoritmi täitmise jõudluse märkimisväärse kasvu . Lõpetuseks peab mainima , et signaaliprotsessor TS<arv>S ei ole enam signaalitöötlustehnika kõige viimane sõna , vaid uued TS<arv>S ja BlackFin seeria DSPd on palju suurema jõudlusega ning veelgi uuemate protsessorite väljatöötamine on pidevalt toimuv katkematu protsess .  Martin Sillaots , Audentese Mainori Ülikooli IT-teaduskonna prodekaan SISSEJUHATUS Käesoleva artikli autor on tegelenud õpetamisega <arv> aastat . Selle aja jooksul on erinevatele sihtgruppidele loodud erinevaid IT- ja juhtimisalaseid kursuseid ( nende hulgas ka projekti- juhtimise kursus , seepärast tuuakse teema käsitlemisel näiteid just sellest valdkonnast ) . Kursuse lahutamatu osa on õppejõu poolt loodav õppematerjal . Enamasti luuakse need paralleelselt esimese kursuse õppeajaga . Peatükid valmivad nädal või paar enne loenguid . Et materjali loomisel arvestatakse konkreetse kursuse vajadusi , on kursuslased rahul ja ka õppejõud õnnelik õpieesmärkide täidetuse tõttu . Järgmistele kursustele sama õppematerjal enam nii hästi ei sobi . Põhjused , miks õppematerjal teistkordsel kasutamisel ei sobi , on järgmised . <arv>. Sihtgrupid muutuvad . Näiteks projektijuhtimist võib õpetada gümnaasiumi , ülikooli või täienduskoolituse tasemel . Kursuse raskusaste muutub . Igas aines on teemasid , mida võib õpetada sihtgrupist sõltumata ( projektijuhtimises näiteks ajakava koostamise reeglid ) või mis on arusaadavad kursuslaste varasemate kogemuste tõttu ( näiteks projektijuhtimine ehitusorganisatsioonis ) . <arv>. Kursuslaste huvi muutub . Lisada tuleb uusi teemasid ja mõnedest tuleb loobuda . <arv>. Kursuse läbimiseks mõeldud aeg on erinev . Näiteks ühes kõrgkoolis on trimestrid ( <arv> nädalat ) , teises semestrid ( <arv> nädalat ) . Et aine proportsionaalselt etteantud ajavahemikku ära mahuks , tuleb mõnedest teemadest loobuda . Et kursuse eesmärgid saavutada , tuleb kava ja õppematerjalid ringi teha . Probleem seisneb selles , et esimese kursuse jaoks loodud materjalid on tavaliselt jäiga ülesehitusega . Näiteks projektijuhtimise majanduslikud aspektid on esitatud ühes HTML-failis . Järgmisel kursusel tuntakse huvi vaid ühe aspekti - projekti tasuvuse hindamise vastu . Üpris tülikas on õppematerjale tagantjärele lammutada . Seda enam , et tükeldamist tuleb teha uuesti iga kursuse alguses . Kui õppejõul on paralleelselt käimas mitu kursust , siis on konspektide ringitegemine peaaegu võimatu . Selleks lihtsalt ei ole aega . Eespool mainitud probleemi ennetamiseks on soovitatav õppematerjal kohe selle loomise käigus jagada sobiva sisu ja suurusega mooduliteks - õpiobjektideks . Õpiobjektiks võib olla näiteks tekst , ülesanne , õppejõu märkmed , fotod , helilõigud , rühmatööjuhendid - ühesõnaga kõik , mida õppetöös kasutatakse . Iga objekt varustatakse seda iseloomustava informatsiooniga - metaandmetega . Näiteks milline on õpiobjekti koht kavas , raskusaste , läbimiseks kuluv aeg jne. Selline liigendamine eeldab põhjalikku planeerimist , kuid struktureeritud õppematerjal aitab säästa aega järgmise kursuse jaoks sobiva õppekava ja konspekti kokkupanekul . Käesoleva artikli eesmärk on tutvustada maailmas ühte enim levinud meetodit õpiobjektide kirjeldamiseks - IMS LOM-i ( Instructional Management Systems Learning Object Metadata ) spetsifikatsiooni . Tutvustuse raames antakse lühiülevaade õpitehnoloogia standarditest ja õppematerjali jagamisest õpiobjektideks . Põhjalikumalt vaadeldakse IMS metaandmemudelit ja soovitusi väärtuste valikul . Viimases , suuremas osas on toodud näide projektijuhtimise konspekti metaandmetest XML formaadis . Lõpetuseks mainitakse ka alternatiivseid võimalusi metaandmete esitamiseks . ÕPITEHNOLOOGIA STANDARDID Õpitehnoloogia standardite eesmärk on tagada erinevate õpisüsteemide koostöövõime : <arv> ) kursuste ülekandmine ühest süsteemist teise ; <arv> ) õpiobjektide korduv ja ristkasutamine ; <arv> ) õpiobjektide säilitamine ja sorteerimine andmebaasides . Tegemist on spetsifikatsioonide , mitte standarditega . Need on alles kujunemisjärgus , täienevad ja muutuvad pidevalt ning pole üldist heakskiitu leidnud . Õpitehnoloogia standardeid koostavad näiteks järgmised organisatsioonid : <arv>. EduCom IMS ( Instructional Management Systems ) <hyperlink> ; <arv>. IEEE LSTC LOM ( Institute of Electrical and Electronic Engineering Learning System Technology Committee Learning Object Metadata ) ltsc.ieee.org ; <arv>. USA DoD ADLNet SCORM ( Department of Defence Advanced Distributed Learning Network Sharable Content Object Reference Model ) <hyperlink> Õpitehnoloogia standardeid võib liigitada järgnevalt : <arv>. Metaandmed - andmed õpiobjektide kirjeldamiseks . Võimaldavad õppesisu indekseerida , ladustada , leida ja taasesitada . Erinevate spetsifikatsioonide aluseks on enamasti IEEE LSTC LOM . <arv>. Sisupakendus - võimaldab eksportida kursusi või selle osi ühest õpisüsteemist teise . Maailmas kasutatakse enim IMS Content Packaging spetsifikatsiooni . <arv>. Õppija profiil - reeglid õppija isikuandmete jagamiseks . <arv>. Õppijate register - reeglid kursustele registreerunute info vahetamiseks . <arv>. Testid ja küsimused [ <arv> ] . Näiteks IMS-i veebilehel aadressil <hyperlink> on loetelu <arv> erinevast spetsifikatsioonist . ÕPITEGEVUSTE HIERARHIA Ükski eespool mainitud standard ei jaga juhiseid , kuidas õppematerjal alamosadeks jagada . Mõnes spetsifikatsioonis ( näiteks Simple Sequencing ) viidatakse , et kogu arenduse aluseks on õpitegevuste hierarhia ( Activity Tree ) . [ <arv> ] Õpitegevused on tegevused , mis on seotud õpetamisega või õppematerjalidega . Õpitegevus võib olla ka tegevuste grupp . Õpitegevused esitatakse hierarhilise struktuurina . Järgnevuse andmed määravad tegevuse või alamtegevuse teostamise nii , et saavutataks planeeritud õpieesmärgid . Õpitegevuste määratlemine on osa kursuse planeerimisest . Lihtsustatult koosneb kursuse loomine järgmistest osadest . <arv>. Analüüsimine : <arv>.<arv>. probleemi analüüs <arv>.<arv>. sihtrühma analüüs <arv>.<arv>. ainevaldkonna analüüs <arv>.<arv>. eesmärgi püstitamine <arv>. Planeerimine : <arv>.<arv>. sisu valimine <arv>.<arv>. meetodite valimine <arv>.<arv>. hindamisreeglite määramine <arv>. Arendamine : <arv>.<arv>. ajakava <arv>.<arv>. õppematerjalid <arv>.<arv>. administreerimisvahendid <arv>. Rakendamine - proovitunni läbiviimine <arv>. Hindamine - õppetöö efektiivsuse mõõtmine Kursuse sisu piiritlemise aluseks on eelnevalt püstitatud õpieesmärgid . Kursuse lõppedes peab sellel osaleja olema : <arv> ) jätnud meelde faktid , <arv> ) saanud aru mõistetest , <arv> ) tutvunud reeglitega , <arv> ) oskama sooritada iseseisvalt tegevusi . Kõigepealt tuleb määratleda tegevused , sest nendest sõltub ka õppetöö sisu . Kursusel käsitletavad faktid , mõisted ja reeglid peavad toetama omandatavaid tegevusi . Näiteks projektijuhtimise kursuse eesmärgiks on projekti planeerimise ja rühmatöö oskus . Enamasti on tegevus ( vilumus ) raskesti määratletav . Defineerimise lihtsustamiseks tuleb mahukam ja abstraktsem oskuste kogum jagada väiksemateks , hoomatavateks osadeks . <arv>. Töö jagatakse ülesanneteks . <arv>. Ülesanded jagatakse tegevusteks . <arv>. Tegevused jagatakse operatsioonideks [ <arv> ] . Milliste terminitega teatud taseme tegevusi tähistatakse , pole oluline . Tähtis on mõista , et igal tegevusel on alamtegevused . Näiteks projekti planeerimise tegevused on : <arv> ) eesmärgi ( ulatuse ) planeerimine ; <arv> ) kvaliteedi planeerimine ; <arv> ) ajaplaneerimine : <arv>.<arv>. ülesannete loetelu loomine ; <arv>.<arv>. ülesannete kestuse ennustamine ; <arv>.<arv>. ülesannete järjekorra määramine ; <arv>.<arv>. ajakava lühendamine ; <arv> ) maksumuse planeerimine ; <arv> ) organisatsiooni planeerimine ; <arv> ) infovahetuse planeerimine ; <arv> ) ressursside planeerimine ; <arv> ) alltöö planeerimine ; <arv> ) riskide planeerimine ; <arv> ) plaani ja projekti erinevate osade integreerimine . Näite lühendamise eesmärgil on detailsemalt lahti kirjutatud vaid ajaplaneerimise tegevus . Tulemuseks on tegevuste hierarhia . Hetkel veel peetakse silmas tegevusi , mida kursuslane peab valdama aine lõppedes . Õpitegevused ja eesmärgiks olevad tegevused võivad osaliselt kattuda , kuid kindlasti ei ole üksüheselt samad . Tegevuste hierarhia loomisele järgneb tegevusahelate koostamine . Enamasti on ühe tulemuse saamiseks võimalik läbida erinevaid tegevuste ahelaid . Sõltuvalt olukorrast võivad mõned tegevused vahele jääda . Näiteks väiksema projekti korral ei rakendata alltööd . Kui omandatavad tegevused on paigas , täpsustatakse faktid , mõisted ja reeglid , mida on tarvis teada , et tegevusi edukalt sooritada . Selliselt määratletakse õppesisu . Järgnevalt tuleb täpsustada õpetamise strateegiad ( näiteks isetegemine või ettenäitamine ) ja õpitegevused . Õpiobjektiks ei ole ainult õppematerjalid , vaid ka kursuse või tunni kulgu toetavad tegevused . Tunnis võivad toimuda näiteks järgmised tegevused : <arv> ) kursuslaste tähelepanu köitmine ; <arv> ) õpieesmärkide teadvustamine ; <arv> ) varemõpitust vajaminevate osade meeldetuletamine ; <arv> ) uue osa esitamine ; <arv> ) kursuslaste iseseisva töö juhendamine ; <arv> ) õpitu rakendamine ; <arv> ) tagasiside ; <arv> ) hindamine ; <arv> ) õpitu kinnistamine ja rakendamine teistes kontekstides . Enne , pärast ja osaliselt ka tunni ajal toimub õppetöö haldamine ( ruumid , tehnilised vahendid , ... ) . Põhiliselt uue osa esitamiseks ja õpitu kinnistamiseks kasutatakse järgmisi tegevusi : <arv> ) presentatsioon ( õppejõud tahvli ees ) ; <arv> ) iseseisev töö materjaliga ; <arv> ) nõustamine ; <arv> ) rühmaarutelu ; <arv> ) iseseisvad ülesanded ja harjutused ; <arv> ) rühmaülesanded . Kõigi eespool loetletud tegevuste läbiviimiseks võib luua õpiobjekte - näiteks õppematerjale või abistavaid juhendeid protsessi juhtimiseks . [ <arv> ] IMS LOM Järgnevalt tutvume põhjalikumalt IMS LOM-i spetsifikatsiooniga , mis esitab reeglid , kuidas kirjeldada õpiobjekte . IMS-i iga spetsifikatsioon sisaldab kolm suuremat dokumenti : <arv> ) Information Model - andmemudeli üldine kirjeldus ; <arv> ) XML Binding - juhised spetsifikatsiooni loomiseks XML-formaadis ; <arv> ) Best Practice - head tavad , rakendusnäited ja soovitused [ <arv> ] . IMS LOM-i andmemudel koosneb kahest osast . Esimeses osas tutvustatakse andmeid , mis on kooskõlas IEEE LOM-i standardi projektiga . Teises osas kirjeldatakse IMS-i metaandmete modifikatsioone . Käesolevas artiklis piirdume IMS-i ja IEEE ühisosa tutvustamisega . LOM-i ANDMEMUDEL Andmemudel esitab metaandmed hierarhilise tabelina . Elemendid on jagatud üheksasse põhigruppi . Andmemudeliga võib põhjalikumalt tutvuda Internetis aadressil <hyperlink> Alljärgnevalt on esitatud metaandmete tabeli lühikokkuvõte : <arv>. general - õpiobjekti kui tervikut kirjeldav info <arv>.<arv>. identifier - unikaalne identifikaator <arv>.<arv>. title - õpiobjekti nimi <arv>.<arv>. catalogentry - ressursside asukoht <arv>.<arv>.<arv>. catalog <arv>.<arv>.<arv>. entry <arv>.<arv>. language - õpiobjekti keel <arv>.<arv>. description - õpiobjekti sisukirjeldus <arv>.<arv>. keyword - ressursi võtmesõnad <arv>.<arv>. coverage - õpiobjekti teemade järjekord <arv>.<arv>. structure - struktuuri iseloom ( näiteks hierarchical ) <arv>.<arv>. aggregationlevel - kogumiku tase ( näiteks <arv> - üksik html leht , <arv> - illustreeritud html , <arv> html lehed + sisukord , <arv> - kursus ) <arv>. lifecycle - õpiobjekti ajalugu ja hetkeseis <arv>.<arv>. version - versiooni number <arv>.<arv>. status - hetkeseis ( näiteks draft , final , ... ) <arv>.<arv>. contribute - toetajad ja kaasautorid <arv>.<arv>.<arv>. role - toetuse tüüp ( näiteks author , script writer , ... ) <arv>.<arv>.<arv>. centity - toetaja nimi või loetelu ( tähtsaim esimesena , kui autor , siis ainult <arv> ) <arv>.<arv>.<arv>. date - avaldamise kuupäev <arv>. metametadata - õpiobjekti kirjeldust kirjeldavad andmed <arv>.<arv>. identifier <arv>.<arv>. catalogentry <arv>.<arv>.<arv>. catalog <arv>.<arv>.<arv>. entry <arv>.<arv>. contribute <arv>.<arv>.<arv>. role <arv>.<arv>.<arv>. entity <arv>.<arv>.<arv>. date <arv>.<arv>. metadatascheme <arv>.<arv>. language <arv>. technical - õpiobjekti tehnilised iseloomujooned <arv>.<arv>. format - ressursi andmetüüp ( näiteks video/mpeg , text/html , ... ) <arv>.<arv>. size - ressursi maht baitides <arv>.<arv>. location - url <arv>.<arv>. requirement - ressursile ligipääsemise tingimused <arv>.<arv>.<arv>. type - tingimuse tüüp ( näiteks operating system , browser ) <arv>.<arv>.<arv>. name - nõutud vahendi nimi ( näiteks any , microsoft internet explore r , ... ) <arv>.<arv>.<arv>. minimumversion - nõutud vahendi min versiooni number <arv>.<arv>.<arv>. maximumversion - nõutud vahendi max versiooni number <arv>.<arv>. installationremarks - märkused ressursi installeerimiseks <arv>.<arv>. otherplatformrequirements -muu info riist- ja tarkvaraliste nõuete kohta ( näiteks soundcard ) <arv>.<arv>. duration - õpiobjekti mahamängimise aeg sekundites <arv>. educational - õpitööga seotud parameetrid <arv>.<arv>. interactivitytype - interaktiivsuse tüüp ( näiteks active , expositive , ... ) <arv>.<arv>. learningresourcetype - õpiobjekti tüüp ( näiteks exercise , simulation , diagram , figure , table , narrative text , exam , experiment , problem statement , self assessment ) . <arv>.<arv>. interactivitylevel - interaktiivsuse tase ( näiteks very low , ... very high ) <arv>.<arv>. semanticdensity --subjektiivne hinnang õpiobjekti kasulikkusele , võrreldes selle mahuga <arv>.<arv>. intendedenduserrole - õpiobjekti sihtgrupp ( näiteks teacher , leaner , author , .. . ) <arv>.<arv>. context -- keskkond , kus objekti kasutatakse ( näiteks higher education , university first cycle , .. . ) <arv>.<arv>. typicalagerange - kasutajate vanusevahemik ( vabas vormis ) <arv>.<arv>. dificulty - raskustase põhisihtgrupile ( very easy , ... very difficult ) <arv>.<arv>. typicallearningtime - õpiobjekti läbimise kestus ( näiteks <arv> : <arv> : <arv> ) <arv>.<arv>. description - selgitus , kuidas õpiobjekti kasutada <arv>.<arv>. language - kasutuskeel <arv>. rights - ressursi kasutamise tingimused <arv>.<arv>. cost - kas ressursi kasutamine on tasuline ( näiteks yes , no ) <arv>.<arv>. copyrightandotherrestrictions - kas ressursil on autorikaitse ( yes , no ) <arv>.<arv>. description - kasutamisõiguste täiendavad kommentaarid <arv>. relation - õpiobjekti seosed teiste õpiobjektidega <arv>.<arv>. kind - seose liik ( näiteks ispartof , haspart , ... ) <arv>.<arv>. resource - viide seotud ressursile <arv>.<arv>.<arv>. identifier - teise ressursi identifikaator <arv>.<arv>.<arv>. description - teise ressursi lühikirjeldus <arv>.<arv>.<arv>. catalogentry - teise ressursi asukoht <arv>.<arv>.<arv>.<arv>. catalog <arv>.<arv>.<arv>.<arv>. entry <arv>. annotation - õpiobjekti kommentaarid <arv>.<arv>. person - kommenteerija nimi <arv>.<arv>. date - kommenteerimise kuupäev <arv>.<arv>. description - kommentaar <arv>. classification - õpieesmärkide klassifikatsioon <arv>.<arv>. purpose - klassifikatsiooni ülesanne ( näiteks discipline , skill level , ... ) <arv>.<arv>. taxonpath - klassifikatsiooni erinevad järjekorrad <arv>.<arv>.<arv>. source - klassifikatsiooni nimi ( näiteks , ametlik , kasutajasõbralik , ... ) <arv>.<arv>.<arv>. taxon - klassifikatsiooni punktide pingerida üldiselt üksikule ( kuni <arv> taset ) <arv>.<arv>.<arv>.<arv>. id - punkti identifikaator <arv>.<arv>.<arv>.<arv>. entry - punkti nimi <arv>.<arv>.<arv>.<arv>. description - punkti lühikirjeldus <arv>.<arv>.<arv>.<arv>. keyword - võtmesõnad [ <arv> ] IMS-i SOOVITUSED Milliseid metaandmeid õpiobjektide iseloomustamiseks kasutada , otsustab disainer . IMS soovitab kasutada järgmisi elemente : <arv>. general.language - õppematerjali keel ; <arv>. general.aggregationlevel - õpiobjekti keerukuse tase ( <arv>=puhas tekst , <arv>=illustreeritud tekst , ... ) ; <arv>. technical.format - õpiobjekti andmetüüp ( mpg , txt , ... ) ; <arv>. technical.requirement.name - õpiobjekti vaatamiseks vajaliku vahendi nimi ( IE , ... ) ; <arv>. educational.learningresourcetype - õpiobjekti tüüp ( Narrative Text , Exercise , ... ) ; <arv>. educational.context - õpiobjekti kasutuskeskkond ( Higher Education , ... ) ; <arv>. educational.interactivitytype - ( Active , Expositive , Mixed , Undefined ) ; <arv>. educational.interactivitylevel - ( very low , ... very high ) ; <arv>. educational.intendedenduserrole - kasutajate sihtgrupp ( Teacher , Leaner , Author , ... ) ; <arv>. educational.difficulty - õppematerjali raskusaste ( very easy , ... very difficult ) ; <arv>. educational.typicallearningtime - õppematerjali läbimiseks kuluv aeg ( <arv> : <arv> : <arv> ) ; <arv>. classification.purpose [ discipline ] - liigitus valdkonna järgi ; <arv>. classification.purpose [ Educational Objectives ] - liigitus õpieesmärkide järgi . Soovitused tuginevad IMS-i uurimustel ja kogemustel . Eespool loetletud õpiobjektide metaandmete esitamist peetakse heaks tavaks . Need peaksid võrdselt hästi sobima , sõltumata sellest , mis valdkonna õpiobjektidega on tegemist . Soovituste eesmärk on juurutada metaandmete sarnast kasutamist erinevates organisatsioonides . Üritatakse vältida “ kodukootud ” liigituste loomist [ <arv> ] . IMS-i metaandmeid on ka kritiseeritud , sest elementide kirjeldamiseks mõeldud valikud on piiratud . Näiteks on mõnede arvates interaktiivsuse tüüpe liiga vähe . Käesoleva artikli autori arvates on ka õpiobjekti tüüpe vähe . Näiteks tekkis vajadus õpiobjekti tüüp “ Näide ” järele , kuid seda etteantud sõnastikus pole . Kindlasti võib tekkida erinevatel kasutajatel teisigi probleeme . Metaandmete esitamine IMS on valinud metaandmete kirjapanemiseks XML-keele , kuid vahendid , milles neid üles märkida ja taasesitada , on jäetud lahtiseks . On võimalik valida teiste organisatsioonide poolt arendatud metaandmete redaktorite hulgast : <arv>. Aloha aloha.netera.ca/index.php ; <arv>. DC-dot <hyperlink> - veebipõhine DublinCore LOM editor ; <arv>. IMSE/VIMSE kmr.nada.kth.se/imsevimse/ ; <arv>. LOM editor <hyperlink> ; <arv>. Microsoft LRN ( Learning Rosource iNterchange ) <hyperlink> ; <arv>. Splash <hyperlink> ; <arv>. Sun Microsystems Developers Toolkit <hyperlink> [ <arv> ] . Enamasti on editorid Java-põhised ja vajavad Java Run Time Engine olemasolu . Seepärast kaustas autor XML-i kirjutamisel Notepad'i abi . Metaandmete lugemiseks sobivad eespool kirjeldatud metaandmete redaktrorid . XML-koodi esitamiseks võib kasutada Interneti brausereid [ <arv> ] . METAANDMETE NÄIDE Järgnevalt on toodud artikli autori poolt valitud metaandmed ja nende esitus XML-formaadis . Tabel <arv> Ajaplaneerimises kasutatava nooldiagrammi animeeritud näite metaandmed  Nr Elemendi nimi Elemendi väärtus Märkused <arv> general <arv>.<arv> identifier <arv> Vabalt valitav identifikaator <arv>.<arv> title Nooldiagrammi animatsioon <arv>.<arv> language ee <arv>.<arv> keyword nool nooldiagramm projekti kestus sündmuste hiliseim toimumisaeg kriitiline tee <arv> lifecycle <arv>.<arv> contribute <arv>.<arv>.<arv> role Author <arv>.<arv>.<arv> centity Martin Sillaots <arv>.<arv>.<arv> date <arv>-<arv>-<arv> <arv> educational <arv>.<arv> interactivitytype Expositive Passiivne <arv>.<arv> learningresourcetype Simulation Animatsiooni tüüp puudub lubatud sõnastikus <arv>.<arv> context University First Cycle Ülikooli <arv>. kursus <arv>.<arv> difficulty Medium Keskmine raskusaste <arv> relation <arv>.<arv> kind IsPartOf <arv>.<arv> resource <arv>.<arv>.<arv> identifier <arv> Kirjeldab , millise õpiobjekti alla käesolev objekt kuulub <arv> classification <arv>.<arv> purpose Educational Objective <arv>.<arv> taxonpath <arv>.<arv>.<arv> source Projektifaas <arv>.<arv>.<arv> taxon <arv>.<arv>.<arv>.<arv> entry Planeerimine Objekti <arv>. liigitus - projektifaaside järgi liigitades on tegemist planeerimise teemaga <arv> classification <arv>.<arv> purpose Educational Objective <arv>.<arv> taxonpath <arv>.<arv>.<arv> source Projektijuhtimise valdkond <arv>.<arv>.<arv> taxon <arv>.<arv>.<arv>.<arv> entry Ajajuhtimine <arv>. liigitus - juhtimisvaldkondade järgi liigitades on tegemist ajajuhtimise teemaga . Liigitusi võib lisada veel SAMAD ANDMED XML-FORMAADIS &lt; ? xml version= " <arv>.<arv> " encoding= " UTF-<arv> " ? &gt; &lt; lom xmlns= " <hyperlink> " &gt; &lt; ! lom - element , mis esitab opiobjekti kui terviku &gt; &lt; ! xmlns - viide IMS xml objektide nimedele &gt; &lt; general &gt; &lt; ! general - opiobjekti yldandmed &gt; &lt; identifier &gt; <arv> &lt; /identifier &gt; &lt; title &gt; &lt; langstring xml : lang= " ee " &gt; Nooldiagrammi animatsioon &lt; /langstring &gt; &lt; /title &gt; &lt; ! langstring - tekstparameetri keel tuleb eelnevalt tapsustada &gt; &lt; language &gt; ee &lt; /language &gt; &lt; keyword &gt; &lt; langstring xml : lang= " ee " &gt; nool &lt; /langstring &gt; &lt; /keyword &gt; &lt; keyword &gt; &lt; langstring xml : lang= " ee " &gt; nooldiagramm &lt; /langstring &gt; &lt; /keyword &gt; &lt; keyword &gt; &lt; langstring xml : lang= " ee " &gt; projekti kestus &lt; /langstring &gt; &lt; /keyword &gt; &lt; keyword &gt; &lt; langstring xml : lang= " ee " &gt; hiliseim toimumisaeg &lt; /langstring &gt; &lt; /keyword &gt; &lt; keyword &gt; &lt; langstring xml : lang= " ee " &gt; kriitiline tee &lt; /langstring &gt; &lt; /keyword &gt; &lt; /general &gt; &lt; lifecycle &gt; &lt; contribute &gt; &lt; role &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &gt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; Author &lt; /langstring &gt; &lt; /value &gt; &lt; ! source - kirjeldab , millisel allikal jargnev vaartus tugineb &gt; &lt; ! Author on IMS LOM sonastikus fikseeritud &gt; &lt; /role &gt; &lt; centity &gt; &lt; vcard &gt; begin : vcard fn : Martin Sillaots end : vcard &lt; /vcard &gt; &lt; ! vcard - virtuaalne visiitkaart &gt; &lt; ! fn - full formated name &gt; &lt; /centity &gt; &lt; date &gt; &lt; datetime &gt; <arv>-<arv>-<arv> &lt; /datetime &gt; &lt; /date &gt; &lt; /contribute &gt; &lt; /lifecycle &gt; &lt; educational &gt; &lt; interactivitytype &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &gt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; Expositive &lt; /langstring &gt; &lt; /value &gt; &lt; /interactivitytype &gt; &lt; learningresourcetype &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &lt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; Simulation &lt; /langstring &gt; &lt; /value &gt; &lt; /learningresourcetype &gt; &lt; context &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &lt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; University First Cycle &lt; /langstring &gt; &lt; /value &gt; &lt; /context &gt; &lt; difficulty &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &lt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; medium &lt; /langstring &gt; &lt; /value &gt; &lt; /difficulty &gt; &lt; /educational &gt; &lt; relation &gt; &lt; kind &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &lt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; IsPartOf &lt; /langstring &gt; &lt; /value &gt; &lt; /kind &gt; &lt; resource &gt; &lt; identifier &gt; <arv> &lt; /identifier &gt; &lt; /resource &gt; &lt; /relation &gt; &lt; classification &gt; &lt; purpose &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &lt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; Educational Objective &lt; /langstring &gt; &lt; /value &gt; &lt; /purpose &gt; &lt; taxonpath &gt; &lt; source &gt; &lt; langstring xml : lang= " ee " &gt; Projektifaas &lt; /langstring &gt; &lt; /source &gt; &lt; taxon &gt; &lt; entry &gt; &lt; langstring xml : lang= " ee " &gt; Planeerimine &lt; /langstring &gt; &lt; /entry &gt; &lt; /taxon &gt; &lt; /taxonpath &gt; &lt; /classification &gt; &lt; classification &gt; &lt; purpose &gt; &lt; source &gt; &lt; langstring xml : lang= " x-none " &gt; LOMv<arv>.<arv> &lt; /langstring &gt; &lt; /source &gt; &lt; value &gt; &lt; langstring xml : lang= " x-none " &gt; Educational Objective &lt; /langstring &gt; &lt; /value &gt; &lt; /purpose &gt; &lt; taxonpath &gt; &lt; source &gt; &lt; langstring xml : lang= " ee " &gt; Projektijuhtimise valdkond &lt; /langstring &gt; &lt; /source &gt; &lt; taxon &gt; &lt; entry &gt; &lt; langstring xml : lang= " ee " &gt; Ajajuhtimine &lt; /langstring &gt; &lt; /entry &gt; &lt; /taxon &gt; &lt; /taxonpath &gt; &lt; /classification &gt; &lt; ! kaks erinevat , mitte eriti sygavale minevat klassifikatsiooni &gt; &lt; /lom &gt; ALTERNATIIV <arv> Üks täiendav võimalus kirjeldada õpiobjekti metaandmeid on rakendada IMS sisupakenduse ( Content Packaging ) spetsifikatsiooni . Sisupakendamise eesmärgid on : <arv> ) õpiobjektide koostamise lihtsustamine ; <arv> ) objektide säilitamine andmevaramus ; <arv> ) objektide taaskasutamine ; <arv> ) kapseldamine - kõik vajalikud detailid ühes koos . Sisupakenduse tulemuseks on zip-fail , mille sees on : <arv> ) imsmanifest.xml ( kohustuslik nimi ) - info õpiobjekti kohta ; <arv> ) õpiobjektid - tekstid või muud õpimaterjalid , mille struktuuri manifest kirjeldab . Manifesti osad on : <arv>. Metadata - andmed manifesti kirjeldamiseks ; <arv>. Organizations - õpiobjekti struktuur(id) ; <arv>. Resources - viited õpiobjekti failidele ; <arv>. Manifest - alammanifestid . Õpiobjekti metaandmeid võib esitada manifesti ressursside osas [ <arv> ] . Näiteks projektijuhtimise vahendi - nooldiagrammi metaandmed manifesti sees . &lt; ? xml version= " <arv>.<arv> " encoding= " UTF-<arv> " ? &gt; &lt; ! xml versioon ja kooditabel &gt; &lt; manifest identifier= " MANIFEST " xmlns= " <hyperlink> " xmlns : imsmd= " <hyperlink> " &gt; &lt; ! manifesti avataag ja viide xml ja metadata reeglistikele &gt; &lt; metadata &gt; &lt; ! manifesti kirjeldavad andmed &gt; &lt; schema &gt; IMS Content &lt; /schema &gt; &lt; schemaversion &gt; <arv>.<arv>.<arv> &lt; /schemaversion &gt; &lt; imsmd : lom &gt; &lt; imsmd : general &gt; &lt; imsmd : title &gt; &lt; imsmd : langstring xml : lang= " ee " &gt; Nooldiagrammi animatsioon &lt; /imsmd : langstring &gt; &lt; /imsmd : title &gt; &lt; /imsmd : general &gt; &lt; /imsmd : lom &gt; &lt; /metadata &gt; &lt; organizations default= " <arv> " &gt; &lt; ! opiobjekti struktuur(id) &gt; &lt; organization identifier= " <arv> " structure= " simple " &gt; &lt; title &gt; motetu struktuur &lt; /title &gt; &lt; item identifier= " ITEM<arv> " identifierref= " RESOURCE<arv> " &gt; &lt; title &gt; Projekti algatamine &lt; /title &gt; &lt; /item &gt; &lt; /organization &gt; &lt; /organizations &gt; &lt; resources &gt; &lt; ! viide konkreetsele failile ja objekti kirjeldavad metaandmed &gt; &lt; resource identifier= " RESOURCE<arv> " type= " webcontent " href= " <arv>plan/<arv>aeg/<arv>yljar/<arv>noolanim/nooldiagramm.html " &gt; &lt; metadata &gt; &lt; imsmd : lom &gt; &lt; imsmd : educational &gt; &lt; imsmd : interactivitytype &gt; expositive &lt; /imsmd : interactivitytype &gt; &lt; imsmd : learningresourcetype &gt; simulation &lt; /imsmd : learningresourcetype &gt; &lt; imsmd : context &gt; university First Cycle &lt; /imsmd : context &gt; &lt; imsmd : dificulty &gt; medium &lt; /imsmd : dificulty &gt; &lt; /imsmd : educational &gt; &lt; /imsmd : lom &gt; &lt; /metadata &gt; &lt; file href= " nooldiagramm.html " / &gt; &lt; /resource &gt; &lt; /resources &gt; &lt; /manifest &gt; ALTERNATIIV <arv> Teine võimalus on luua õpiobjektidest andmebaas . Iga kirje selles baasis esitab õppematerjali tükki . Näiteks peatüki sissejuhatus , teema ülevaatlik käsitlus , alamteema detailne esitus jne. Vajalikud metaandmed on salvestatud eraldi väljades . Metaandmete põhjal koostatud päringute abil saab luua õppekavasid ja materjale vastavalt sihtgrupi vajadustele . Baas aitab täpsustada ka õpiobjektide sisu , et need oleks korratavad konspekti erinevates kohtades ja loetavad eri järjekorras . Projektijuhtimise metaandmebaasiga võib tutvuda aadressil <hyperlink> LÕPETUS Õpiobjekti metaandmeid on soovitatav kirja panna ka siis , kui tegemist on mitteelektrooniliste õppematerjalidega . Metaandmed aitavad täpsustada materjalide sisu ja lihtsustavad uue kursuse teemade valikut . ALLIKAD <arv>. Laanpere , M. Kikkas , K. A &amp; A nr <arv>. <arv> <arv>. IMS Simple Sequencing Specification [ <hyperlink> ] <arv>. Mart Laanpere informaatika didaktika kursuse konspekt <arv>. IMS Learning Resource Meta-data Specification [ <hyperlink> ] <arv>. IMS Learning Resource Meta-Data Information Model [ <hyperlink> ] <arv>. IMS Learning Resource Meta-Data Best Practice and Implementation Guide [ <hyperlink> ] <arv>. Antoinette J. Muntjewerff [ <hyperlink> ] <arv>. IMS Learning Resource Meta-Data XML Binding [ <hyperlink> ] <arv>. IMS Content Packaging Information Model [ <hyperlink> ] Uudised kogus Uuno Vallner , Majandus- ja Kommunikatsiooniministeeriumi IT arhitektuuri talituse juhataja RIIK ARENDAB E-TEENUSEID Koostöös Euroopa Regionaalarengu Fondiga panustab riik järgmise kolme aasta jooksul e-teenustesse <arv> miljonit krooni . Käivitunud on esimesed suuremad projektid . Digitaalne terviselugu saab <arv> <arv> <arv> , pereregistri loomine <arv> <arv> <arv> , rahvastikuregistri tarkvara <arv> <arv> <arv> ning politseiameti infosüsteemid ja e-teenused <arv> <arv> <arv> krooni . Siseministeerium kavatseb kulutada <arv> miljonit pereregistri projektile , mis tähendab , et sündidest ja surmadest saab varsti teatada kodunt lahkumata , esitades Internetis elektroonilise avalduse . Inimene päris oma andmeid muuta ei saa , aga ta saab esitada avalduse ja jälgida selle menetlemise käiku . Kuna pereregistri projekti all on plaanis ka kogu rahvastikuregister digitaliseerida , hakkab inimese jaoks vähenema paberite pakk , millega näiteks toetust taotlema minna . Politseiamet plaanib digitaliseerimisele kulutada <arv>,<arv> miljonit krooni , millest <arv>,<arv> miljonit läheb kodanikele erinevate e-teenuste pakkumiseks . Kaugema plaanina on politseiametil tulevikus kavas varustada ka politseinikud sülearvutitega , et kannatanu saaks avalduse kuriteo sündmuspaigal digitaalselt esitada . Sotsiaalministeerium plaanib <arv>. aastaks digitaalse haigusloo projekti valmis saada <arv> miljoni eest . Digilugu tähendab , et kogu info , mille arst haigusjuhtumi kohta kirja paneb , on kõigile haiglatele digitaalselt kättesaadav . MICROSOFTI UUS OPERATSIOONISÜSTEEM WINDOWS VISTA JÕUDIS TESTIMISJÄRKU Juuli lõpus hakkas Microsoft jagama järgmise Windowsi versiooni nimega Vista prooviversioone . Tööversioonis nime Longhorn kandnud Windows Vista nimi on Microsofti teatel inspireeritud maailmast , milles on üha enam infot ja võimalusi , uue operatsioonisüsteemi üheks põhitugevuseks nimetatakse turvalisust . Windows Vista esimene beetaversioon on mõeldud eelkõige arendajatele ja IT-professionaalidele . Microsofti sõnul lisatakse enamik lõppkasutajatele mõeldud funktsionaalsusest teise testversiooni . Microsoft plaanib tuua Windows Vista turule <arv>. aastal . ID-KAARDI AEGUNUD SERTIFIKAATE SAAB UUENDADA TASUTA ID-kaardi elektrooniliseks kasutamiseks mõeldud turvasertifikaadi on aasta algusest alates lasknud uuendada pisut üle <arv> inimese . Aegunud sertifikaatidega isikutunnistusi veidi üle <arv> <arv>. Aasta jooksul aeguvad sertifikaadid kokku ligi <arv> <arv> isikutunnistusel . Interneti kaudu hääletada võimaldavate ehk kehtivate sertifikaatidega isikutunnistuste omanikke on praegu <arv> <arv> ehk ligi <arv> protsenti Eesti elanikkonnast , nende hulgas on ka elamisluba omavad välismaalased . Aegunud või vähem kui <arv> päeva jooksul aeguvate sertifikaatide uuendamine on tasuta . Siseministeerium ja sertifitseerimiskeskus sõlmisid detsembris lepingu , mille alusel tasutakse ID-kaartide turvasertifikaatide uuendamise eest riigieelarvest . Vastavalt leppele hakati jaanuaris inimestele tasuta uuendama neid sertifikaate , mille kehtivusaja lõpuni jäi alla <arv> päeva , samuti saab sertifikaate uuendada pärast nende kehtivusaja lõppemist . Uuendatud sertifikaadid kehtivad kolm aastat . Ühe turvasertifikaadi uuendamine maksab riigile klienditeeninduspunktis <arv> krooni . Kümneaastase kehtivusajaga isikutunnistusel on kaks sertifikaati , mida kasutatakse elektrooniliseks tuvastamiseks ja digitaalse allkirja andmiseks . Kehtetute sertifikaatidega dokument pole elektrooniliselt kasutatav , seda saab pruukida vaid isikut tõendava dokumendina . MICROLINK JA HEWLETT-PACKARD TEEVAD BALTIMAADES KOOSTÖÖD Microlink sõlmis infotehnoloogiafirmaga Hewlett-Packard ( HP ) lepingu koostöö laiendamiseks Baltimaades . Lepinguga sai Microlink Lietuva HP uueks partneriks süsteemiintegratsiooni alal , samuti tihendavad ettevõtted koostööd teistes Balti riikides . Koostöö tulemusel saab Microlink pakkuda lahendusi , kus infotehnoloogiasüsteemidesse on integreeritud HP serverid , salvestusseadmed , tööjaamad ja lauaarvutid . MicroLinki <arv>/<arv> . majandusaasta konsolideeritud käive oli <arv> miljonit ja puhaskasum <arv> miljonit krooni , firmas töötab <arv> inimest . HP on globaalne lõppkasutajatele mõeldud infotehnoloogialahenduste pakkuja . PREFEKTUURID SAID INFOTEHNOLOOGIAKURITEGUSID MENETLEVAD ÜKSUSED Lõpule jõudmas on keskkriminaalpolitsei ( KKP ) projekt , mille abil loodi kõigisse Eesti prefektuuridesse infotehnoloogiakuritegusid menetlevad üksused . Eesti politsei , Suurbritannia ja Phare koostööprojekti raames soetati KKP IT-kuritegude talitusele , politseiprefektuuridele ja kohtuekspertiisi ja kriminalistikakeskuse ekspertidele kokku <arv>,<arv> miljoni krooni väärtuses kuritegude lahendamiseks mõeldud tark- ja riistvara . Politseiasutuste uurijad , spetsialistid ja eksperdid said erialast koolitust nii Eestis kui ka Inglismaal . Toimusid õppevisiidid Rootsi , Soome ja Hollandi kolleegide juurde . Kokku sai koolituse ligi <arv> politseiametnikku , prokuröri ja piirivalvurit . Välja anti ka taskuraamatud sündmuskohal IT-seadmetega ümberkäimise kohta , töötati välja IT-kuritegude menetlemise käsiraamat ja pandi kokku koolituspakett Sisekaitseakadeemia Politseikooli õppekavade täiendamiseks . Viimase suurima IT-alase kuriteo avastas KKP käesoleva aasta märtsis , kui koostöös pankade ja teiste riikide uurimisasutustega tuvastati Tallinnast Koplist juhitud ulatuslik rünne kümnete tuhandete Baltimaade ja teiste riikide arvutitele , mille eesmärgiks oli hankida neist pangaandmeid ja muud informatsiooni . ANDMEKAITSESEADUS LÄHEB UUENDAMISELE Justiitsministeerium alustas andmekaitsega seotud seaduste muutmise ja uuendamise ettevalmistamist . Töörühm peab üle vaatama riigisaladuse , isikuandmete kaitse ja avaliku teabe seadused ning kaasajastama kaitstava ja piiratud ligipääsuga ning avaliku informatsiooni mõisted ja regulatsiooni . Esialgse plaani järgi on kavas avaliku teabe seadust osaliselt muuta , isikuandmete kaitse seadust ja riigisaladuse seadust aga uuendada täies mahus . Uute seadustekstide loomisel võetakse arvesse ka infotehnoloogia arengut , mis ühelt poolt muudab elu mugavamaks , teisalt aga kätkeb isikuandmete kaitsega seotud ohtusid . Töörühm jaguneb kolmeks alatöörühmaks , mis tegelevad igaüks ühe seadusega . Neljaliikmelistesse rühmadesse kuuluvad kaitsepolitseiameti , kaitseministeeriumi , riigikogu põhiseaduskomisjoni ja justiits- ministeeriumi esindajad , samuti andmekaitseinspektsiooni peadirektor ning õiguskantsleri nõunik . INTERNETTI KASUTAB NÜÜD <arv> PROTSENTI EESTI ELANIKEST TNS Emori uuringu andmetel kasutab Eesti <arv>-<arv>-aastastest elanikest Internetti <arv> protsenti ehk ligi <arv> <arv> inimest , aastaga on nende arv kasvanud <arv> <arv> võrra . Iga neljas <arv>-<arv>-aastane Eesti elanik kasutab uuringu andmetel Internetti iga päev . Kõige rohkem on Interneti-kasutajaid lisandunud <arv>-<arv>- ja <arv>-<arv>-aastaste , madalama sissetulekuga ja suuremate linnade elanike seast . RIIGIKONTROLL AUDITEERIS IT KOORDINEERIMIST RIIGIS Puudulik IT-valdkonna koordineerimine pidurdab riigikontrolli hinnangul Eestis infoühiskonna arengut ning kui olukorra parandamiseks ei võeta kiiresti vastu asjakohaseid otsuseid , võib Eesti arenenud riikide tasemest pöördumatult maha jääda . Riigikontrolli audit , mis käsitleb riigi IT-valdkonna juhtimist ja arendusprojektide tulemuslikkust , tuvastas , et praegu ei toimu laiemat infoühiskonna terviklikku arendamist kogu riigis ega ka avaliku sektori IT-valdkonna ühtset koordineeritud juhtimist riigiasutuste tasemel . Riigieelarve koostamisel puudub mehhanism , mis tagaks avaliku sektori infotehnoloogilise infrastruktuuri tasakaalustatud ja jätkusuutliku rahastamise ning infoühiskonna arendamise tervikliku käsitluse . Infotehnoloogia rakendamine ja infosüsteemide arendamine avalikus halduses vajab stabiilset finantseerimist . Paljude riikide kogemuse põhjal võib väita , et minimaalselt vajalik IT rahastamine on üks protsent jooksva aasta riigieelarve kulust . Riigi infosüsteemide jätkusuutlikuks toimimiseks soovitas riigikontroll fikseerida see riigi eelarvestrateegias . Riigikontrolli hinnangul pidurdavad rahandusministeeriumi ning majandus- ja kommunikatsiooni- ministeeriumi senised erimeelsused riigi IT-valdkonna arendamise koordineerimise meetodite ja rahastamise korraldamise osas infoühiskonna arendamise sihtprogrammide kavandamist ja rahastamist ning sellesse valdkonda tehtavate kulutuste ja nende tulemuslikkuse hindamist . Riigikontroll leidis auditi aruandes , et riigil puudub ülevaade tegelikest IT-kulutustest , samuti pole kindel , et IT-valdkonnale eraldatud raha kasutatakse parimal viisil . Riigikontrolli hinnangul pole praegu avalikus sektoris IT-valdkonna arendamisel peamine probleem mitte rahanappus , vaid raha kasutamise otstarbekus . Riigikontrollil puudub veendumus , et infosüsteemide jaoks kavandatud riigieelarve raha kasutatakse sihtotstarbeliselt , säästlikult ja parimal võimalikul viisil . Riigikontroll märkis auditis ka , et infosüsteemide arendamist ei peeta ministeeriumiüleseks tegevuseks ning infosüsteemi kui terviku arendamisele ja jätkusuutlikule toimimisele pööratakse vähe tähelepanu . Auditi terviktekst on aadressil <hyperlink> KAS TIPPDOMEEN . EE KASUTAMINE JA HALDAMINE VAJAB ÜMBERKORRALDAMIST ? Jaanus-Janari Kogerman tegi otsedemokraatiaportaalis TOM ettepaneku muuta tippdomeeni.ee kasutamise ja alamdomeenide väljaandmise kord läbipaistvamaks . Kogerman leiab , et domeeninimede andmine ei peaks kuuluma Haridus- ja Teadusministeeriumi valitsemisalasse , vaid pigem Majandus- ja Kommunikatsiooniministeeriumi alluvusse . Majandus- ja Kommunikatsiooniministeeriumi seisukohta selles küsimuses loe aadressilt <hyperlink> SKYPE AADRESS KÕIGILE EESTI RIIGIASUTUSTELE ? Andrus Kallastu esitas otsedemokraatiportaali ettepaneku varustada kõik klientidega telefonitsi suhtlevad riigiasutused ja -ametnikud Skype aadressiga . RISO seisukohta selles küsimuses loe aadressil <hyperlink> EESTI ARVUTIKEEL VAJAB RIIGI TOETUST Arvo Mägi Delfis : Eesti riigi põhiülesandeks on eesti rahvuse ja eesti keele kaitse . Mis rahvusesse puutub , siis R. Taagepera ( EPL , <arv>.<arv> ) kutsub üles nägema , et rahvusena seisame surmaga silmitsi ja käitume nii , nagu surmasuus viibijal käituda ei tuleks . M. Berg ( EPL , <arv>.<arv> ) kirjutab , et koos rahvaarvu vähenemisega hääbub teaduskeel , kaovad omakeelsed õpetajad ja võime eestlastega Eesti riiki valitseda . Teaduskeele tähtis osa on arvutite tarkvaras kasutatav keel ehk arvutikeel . Suures osas on see ingliskeelne ja paljud leiavad , et nii ongi normaalne . Milleks teha kulutusi tõlketööle ? Aga milleks siis üldse teha kulutusi eestluse säilimisele ? ZONE MEDIA ON AMETLIK EUROOPA LIIDU ÜLEMDOMEENI EU REGISTRIPIDAJA Esimese Eesti ettevõttena sai Zone Media <arv>. septembril ametliku Euroopa Liidu ülemdomeeni EU registripidaja staatuse . Akrediteeritud registripidajana on Zone Medial õigus registreerida oma klientide kasutusse Euroopa Liidu tunnusega domeene . Ülemdomeeni EU eesmärk on Internetis identifitseerida Euroopa Liidus tegutsevaid ettevõtteid , organisatsioone , riigiasutusi ja füüsilisi isikuid . Ülemdomeeni haldajaks on EURid ( European Registry for Internet Domains - - <hyperlink> ) . EU domeeninimede registreerimine ei ole veel alanud . EURidi esialgse kava kohaselt algab see käesoleva aasta neljandas kvartalis . Domeeninimesid on võimalik registreerida vaid akrediteeritud registripidaja vahendusel . Zone Media avas ühtlasi domeeniga EU seotud teabelehekülje , mille aadressiks on <hyperlink> Leheküljel on võimalik tutvuda esialgse informatsiooniga ülemdomeeni EU kohta ning registreeruda vastavateemalise uudiskirja saajaks .