kirjak	tea_AA_02_4.tasak.ela	Allan Martinson Allan Martinson - sündinud <arv>. oktoobril <arv>. Lõpetanud <arv> Gustav Adolfi Gümnaasiumi ( Tallinna <arv>. Keskkool ) , <arv> Moskva Riikliku Ülikooli rakendusmatemaatika ja küberneetika teaduskonna spetsialiseerumisega algoritmikeeltele . <arv>-<arv> Eesti Päevalehe Moskva korrespondent , <arv>-<arv> Baltic News Service'i asutaja ja juhatuse esimees . Alates <arv>. aastast AS MicroLink juhatuse esimees . Baltic News Service'i nõukogu liige , Tallinna Väärtpaberibörsi nõukogu , Hill &amp; Knowlton Eesti nõukogu liige , SA Vaata Maailma nõukogu liige , Eesti Kunstiakadeemia kuratooriumi liige . Tallinna Vanalinna Rotary-klubi liige , Prantsuse Auleegioni ordeni kavaler ( <arv> ) . Peres kasvab neli poissi . Paul Leis : Alustame sinust . A &amp; A lugejatel , eriti tudengitel , on huvitav teada , kuidas noorest mehest saab IT suurfirma juht . Sa oled õppinud Moskva Ülikoolis . Miks valisid Moskva Ülikooli ? Allan Martinson : Siin on mitu põhjust . Esiteks Moskva Ülikool oli ja on väga tugev ülikool , siiamaani teoreetilise matemaatika alal üks tugevamaid maailmas . Teine põhjus - näha maailma . Kolmas põhjus : pääseda sõjaväest , kuigi sõjaväest lõpuks ei pääsenudki . Võimalused spetsialiseeruda olid Moskva Ülikoolis väga head , teaduskonnas oli <arv> kateedrit . Alates kolmandast kursusest oli võimalik valida kas rakendusmatemaatika või küberneetika haru , mina valisin küberneetika haru , minu põhikateedriks oli algoritmikeelte kateeder . Teoreetilise ettevalmistuse sain väga hea , näiteks tuli õppida programmeerima <arv> programmeerimiskeeles . P.L. : Paljud Moskva Ülikooli lõpetajad on siirdunud teadusse - tugeva teoreetilise baasi tõttu tundub niisugune valik üsna loomulik . Sina oled valinud teise tee . A.M. : Mitte kõik ei läinud teadusse , umbes pooled kursuse <arv> üliõpilasest siirdusid infotehnoloogiasse , nendest omakorda pooled sõjalise kompleksi teenistusse , nn. postkastidesse või muudesse salastatud ettevõtetesse . P.L. : Sa lõpetasid ülikooli <arv>. aastal , parajasti siis , kui algasid suured muudatused . A.M. : Siis tulingi Eestisse tagasi , <arv>. aastal olin alustanud oma esimese ettevõtmisega , Baltic News Service'iga , mille juhina töötasin kuni <arv>. aastani . P.L. : Miks siirdusid MicroLinki ? A.M. : See oli üsna loomulik üleminek : ma kuulusin mitmete MicroLinki tütarfirmade nõukogudesse , nii olin ma hästi kursis MicroLinki tegevusega , ka olid MicroLinki asutajad Rain Nõlvak ja Hanno Haamer minu ammused head tuttavad . P.L. : Ilmselt ei saanud Moskva Ülikooli rakedusmatemaatika teaduskond sulle anda ei juhtimisalaseid ega ka tänapäeva infotehnoloogilisi ( andmebaasid , vahevara jmt ) teadmisi . Kuidas oled ennast nendes valdkondades täiendanud ? A.M. : Ma olen lugeja tüüp , iga nädal loen vähemalt ühe raamatu ja umbes pooled neist on juhtimis- või infotehnoloogiaalased . Kursustel või täiendõppes pole osalenud . Ülikooliharidus andis mulle eelkõige kiire suurte infomahtude läbitöötamise ja üldistamise võime , mistõttu konkreetsete teadmiste omandamine pole probleemiks . P.L. : Mida loed sa oluliseks teiste , näiteks nende juures , kes tahavad MicroLinki tööle tulla ? A.M. : Kõige olulisem on intellektuaalne materjal , vaevalt on kellelgi täiskomplekt oskusi , mida MicroLinkis töötades vaja läheb . Kui on eeldusi ja tahtmist , on teadmised ja oskused omandatavad . P.L. : Tundub , et sinu kui juhi hariduslik/suhtumuslik olemus on välja selgitatud . Loodan , et siit on üliõpilastel nii mõndagi kõrva taha panna oma prioriteetide seadmisel . Läheksime nüüd MicroLinki juurde . Hiljuti võisime lugeda , et MicroLink on jälle kasumis . Mis siis ikkagi on MicroLink ? A.M. : MicroLink on ettevõte , kus on <arv> töötajat , ligi miljardikroonine aastakäive , põhifookuseks on Eesti , Läti ja Leedu korporatiivklientide ( suured ja keskmised ettevõtted ja riigiasutused ) infotehnoloogiliste põhivajaduste rahuldamine . Meie lipulaevaks on Süsteemide divisjon , mis on olemas kõigis kolmes riigis , Eestis on see MicroLink Süsteemid . Süsteemide divisjonis tegeldakse tarkvaraarendusega , Eestis on kompetentsideks Oracle , Java , Progress , Lätis on väga tugev Microsofti liin . Teiseks suunaks Süsteemide divisjonis on ärilahendused , eelkõige finantsinfosüsteemid . Kolmas suund selles divisjonis on IT infrastruktuurid , suured serverid ( Eestis Suni serverid ) ja suured kettamassiivid ning nendega kaasnevad tooted , näiteks turvatooted . Süsteemide divisjon annab umbes <arv>% meie käibest ja seal töötab ka umbes <arv>% meie inimestest . Teine divisjon on Data divisjon , millel on kaks põhivaldkonda : arvutivõrgud - suurte privaatklientide arvutivõrgud ja kesksüsteemide outsourcing , mis tähendab suurte serverite , andmebaaside ja ka rakenduste administreerimist . Data divisjon annab umbes <arv>% meie käibest , Eestis esindab seda MicroLink Data Kolmas on Arvutite ja Teenuste divisjon , mis ühelt poolt on personaalarvutite tootmine ja teiselt poolt kasvava alana personaalarvutite , Windowsi serverite ja perifeerseadmete teenindus . See divisjon annab umbes <arv>% meie käibest . Neljas divisjon on Delfi portaal , mis on küll väga tuntud , kuid annab vaid mõne protsendi käibest . Viies divisjon on hetkel ainult Lätis , see on Raadiolinkide divisjon , mis arendab ja toodab kõrgsageduslikke point-to-point raadiolinke kiirustele <arv>-<arv> Mbit/s . See on väga kiiresti kasvav ettevõte , mis suurendab aasta-aastalt oma käivet mitu korda . Turu-uuringute hinnangul me anname <arv>% selle valdkonna maailmaturust , kuid me oleme täis otsustavust oma osa maailmaturul tõsta . P.L. : Outsourcing on üks olulisematest tendentsidest firmade arengus , Microlink võib siin anda komplekseid lahendusi : arvutivõrk , serverid , tarkvaraarendus , teenindus . Kas sa võid tuua mõnda näidet , ärisaladusi reetmata , mõnest firmast , millele te täisteenust osutate ? A.M. : Heaks näiteks on näiteks Tallinna Börs , uue nimega HEX-Tallinn , kellele oleme kirjutanud nii tarkvara , müünud riistvara kui ka osutame outsourcinguteenust . HEX'i laienemisega Lätti kandus see koostöö ka sinna üle . Tallinna ja Riia börsid on parim näide MicroLinki ülebaltilise täisteenuse kontseptsioonist . P.L. : Mis sinu arvates tingib Eestis vajaduse IT-teenuse outsourcinguks ? A.M. : Eesti on niivõrd väike , et oma tarkvaraarenduse-meeskonda võivad endale lubada kõige enam kümme ettevõtet . Levinum on oma arvutisüsteemide haldamine ja hooldamine . Kuid ka siin pole firmadel kasvavate käideldavusnõuete tõttu otstarbekas vaid enda tarbeks kalleid serveriparke ja haldusmeeskondi pidada . P.L. : Outsourcingu oluliseks tingimuseks on usaldus - firma peab olema kindel , et tema tundlike andmete turvalisus on tagatud . Kuidas olete selle probleemi lahendanud ? Kuidas te oma kliente veenate , et nad võivad teid usaldada ? A.M. : Tundlike andmete puhul tuleb teenuse osutajal avada kliendile oma köögipool , kliendile tuleb anda täielik ülevaade tema andmete töötlemise protsessidest ja inimestest , kes neis protsessides osalesid . P.L. : Tööprotsesside korrektsuse tunnuseks on firmal sertifikaatide , näiteks ISO <arv> sertifikaatide , olemasolu . Kas MicroLinkil on niisuguseid sertifikaate ? A.M. : ISO sertifikaat on PC-tootjal MicroLink Arvutid , teenindusfirmal MicroLink ServIT , Läti MicroLink Süsteemidel , ka MicroLink Data tegevus on sisuliselt ISOga kooskõlas . P.L. : Microlinkis tundub kõik paigas olevat : head/perspektiivsed tegevusvaldkonnad , hea meeskond , korrektsed või sertifitseeritud tööprotseduurid . Miks siis firma ikkagi kahjumis oli ? A.M. : Aastatel <arv>-<arv> otsustasime minna väga kiire ja agressiivse laienemise teed . Microlink kasvas umbes <arv> korda kahe aastaga , kokku investeerisime umbes <arv> miljonit krooni . Omandatud ettevõtete maksumusest läks suur osa kohe kuludesse - siit tegevuskahjum tulebki . Nüüd aga oleme ajutised probleemid lahendanud ja Microlinki tulemused hakkavad stabiilselt paranema . Arvan , et umbes <arv>-<arv> aasta pärast hakkavad Microlinki investeeringud tugevates kasuminumbrites avalduma . Meie strateegia erines kardinaalselt teiste Eesti IT-ettevõtete omast : valisime kiire laienemise tee , samas kui teised arenesid samm-sammult ja tasapisi . P.L. : Üks valdkond , kus teie ülebaltiline IT-firma peaks eriti efektiivne/ahvatlev olema , on teiste ülebaltiliste firmade teenindamine - milleks osta teenust firmalt X Eestis , firmalt Y Lätis ja Z Leedus , kui seda võib osta MicroLinkilt kõigis neis riikides . A.M. : Nii see juba ongi . Võiks nimetada Coca-Colat , Statoili , Keskot , HEX'i , Balti realiseerimiskeskust , kokku üle <arv> projekti . P.L. : Lõpetuseks traditsiooniline küsimus . Mida sa soovitaksid tudengitel silmas pidada , et IT-valdkonnas edukas olla ? A.M. : Eestis on liiga palju mänedžere ja liiga vähe tugevaid spetsialiste . IT-tööstust vaadates näen , et olla tugev spetsialist , konsultant , süsteemiadministraator võimaldab suuremat teenimisvõimalust kui keskastme mänedžeril , kuid samas on tegu riskivabama eluga . Arvo Toomsalu , TTÜ arvutitehnika instituut Mikrokontrollerid Basic Stamp basic stamp Mikrokontrollerid BASIC Stamp on praegu eriti populaarsed just nende seas , kes teevad mikrokontrollertehnikas alles esimesi samme , kuid tihti kasutavad lülitusi ka professionaalsed mikrokontrollersüsteemide loojad . Menukuse põhjuseks on mikrokontrollerite BASIC Stamp kasutamise lihtsus ja mugavus - nende ohjamisega tuleb toime isegi tagasihoidlike programmeerimisoskuste korral . Viimastel aastatel on jõudsalt suurenenud robootikast huvitunud õpilaste ja üliõpilaste arv , kellel on tavaliselt soov ka ise mõni originaalne robotike valmis ehitada . Sageli osutuvad komistuskiviks ebapiisavad teadmised ja oskamatused mikrokontrollerit kui roboti üht olulisemat osa õigesti kasutada . Tutvustame üht võimalust , kuidas kiiresti ja suhteliselt lihtsate vahenditega mikrokontrolleriga seonduvaid probleeme lahendada . Selle asemel et näha tõsist vaeva ja raisata aega mõne universaalse sardmikrokontrollerkiibi “ taltsutamisega ” , saab kõike teha kiiremini ja valutumalt mikrokontrolleri BASIC Stamp abil . Mida kujutavad endast BASIC Stampid ja milliseid võimalusi nad pakuvad , sellele ongi pühendatud järgnev kirjutis . Mikrokontrollereid BASIC Stamp ( õigem oleks neid nimetada mikrokontrollermooduleiks ) valmistab aastast <arv> firma Parallax Inc . <arv> Parallaxi mikrokontrollerid leidsid kiiresti tarbijaskonna sooja vastuvõtu : <arv>. aasta keskpaigaks oli neid kasutusele võetud ligikaudu <arv> <arv>. Praegu valmistatakse seda tüüpi mikrokontrollereid juba viies erinevas variandis . Kõige esimene variant , versioon <arv>.<arv> , valmis jaanuaris <arv>. Sama aasta augustis lasti välja mikrokontrolleri täiustatud ja parandatud käsustikuga variant , versioon <arv>.<arv>. Sarja BASIC Stamp <arv> esimesed moodulid ( versioon <arv>.<arv> ) valmisid aastal <arv>. Mikrokontrollermoodulite BASIC Stamp iseloomulikeks tunnusteks , mis eristab neid teistest mikrokontrollereist ( mikrokontrollermooduleist ) , on orienteeritus lihtsa kõrgkeele kasutamisele , kompaktsus ja kasutusvalmidus . See sobib hästi isikutele , kelle kogemused mikrokontrollertehnika rakendamisel on vähesed või puuduvad üldse . Kõik seda tüüpi mikrokontrollerid lähtuvad ühtsest arhitektuursest kontseptsioonist . Mikrokontrollermooduli keskseks lülituseks on lihtne , kuid samas piisavalt võimas mikrokontrollerkiip . Kui moodsates sardmikrokontrollerites salvestatakse kontrollerkiibis sisalduvasse programmimällu tüüpiliselt juhtprogramm , mille abil ohjatakse kiibi poolt juhitava objekti tööd , siis BASIC Stampides salvestatakse kiibisisese sse püsimällu kompaktne PBASIC-keele interpretaator , juhtprogrammi säilitatakse aga mooduli täiendavas EEPROM-tüüpi püsimälukiibis . Mikrokontrollerkiibi suhtlus programmimälukiibiga toimub läbi jadakanali . Juhtprogrammid valmistatakse ette ( programmeeritakse ) universaalsel personaalarvutil ja seejärel salvestatakse sealt mooduli BASIC Stamp püsimällu ( EEPROM ) . Personaalarvuti ja mooduli BASIC Stamp omavaheliseks sidestuseks kasutatakse spetsiaalset arendus- ehk programmeerimisplaati ( BASIC Stamp Carrier Board ) . Viimaseid valmistatakse eraldi BASIC Stamp <arv> ja BASIC Stamp <arv> tarvis ( vastavalt BASIC Stamp <arv> Carrier Board ja BASIC Stamp <arv> Carrier Board ) , kuid on ka universaalseid arendusplaate , mis sobivad mõlemat tüüpi moodulitele ( BASIC Stamp Super Carrier ) . Moodulite BASIC Stamp funktsionaalsete võimalustega tutvumiseks ja õigete kasutamisvõtete omandamiseks on loodud mitmeid õppevahendeid , näiteks Board of Education ja BASIC Stamp Activity Board . Nende abil saab koostada lihtsamaid juhtimissüsteeme ning õppida juhtprogrammide koostamist PBASIC'us . Õppeks on eriti mugav kasutada nn stardikomplekte ( starter kit ) . Stardikomplekti kuulub kas sarja BASIC Stamp <arv> või BASIC Stamp <arv> moodul , arendusplaat , personaalarvuti ühenduskaabel ja laserplaat , millele on salvestatud komplekti kasutamiseks vajalik tarkvara . Pere PIC <arv>C<arv>x mikrokontrollerid Algselt kasutati mikrokontrollermoodulites BASIC Stamp firma Microchip Technology Inc . <arv>-bitiseid mikrokontrollereid perest PIC <arv>C<arv>x<arv>, kuid alates moodulitest BASIC Stamp <arv>E asendati need suurema jõudlusega , firma Scenix Semiconductors SX-pere kontrollerkiipidega SX<arv>AC ja SX<arv>AC . Vaatamata struktuuri suhtelisele lihtsusele suudavad pere PIC <arv>C<arv>x mikrokontrollerid arendada märkimisväärset jõudlust . Takteerimissagedusel <arv> MHz küünib mikrokontrollerite jõudlus kuni <arv> MIPS-ni [ <arv> , lk. <arv> ] . Mikrokontrollerite struktuurses lahenduses on tuginetud RISC-arhitektuurile . Väikese jälgpinna ja energiatarbega täisstaatilised kiibid pakuvad piisavalt funktsionaalseid võimalusi mitmesuguste juhtimisülesannete lahendamiseks . Pere PIC <arv>C<arv>x kiipide takteerimissagedus on vahemikus <arv> MHz ( PIC <arv>C<arv> ) kuni <arv> MHz ( PIC <arv>C<arv> ) . Mikrolülituste toitepinge võib muutuda vahemikus +<arv> , <arv> V kuni +<arv> , <arv> V. Kiibi energiatarve sõltub nii takteerimissagedusest kui ka talitlusrežiimist . Näiteks sagedusel <arv> MHz ja toitepingel +<arv> V on kiibi PIC <arv>C<arv> voolutarve <arv> milliamprit , kuid kui langetada takteerimissagedus <arv> kHz-ni ning toitepinge +<arv> V-ni , siis väheneb voolutarve kõigest <arv> ÜA-ni . Mitmekesine on kiibikorpuste valik . Mikrokontrollereid PIC <arv>C<arv> valmistatakse nii <arv>-viigulises DIP- ja SOIC-korpuses , kuid ka <arv>-viigulises SSOP-korpuses . Mikrokontrollerite sisemise programmimälu maht algab <arv> pesast ja ulatub <arv> pesani . Igas mälupesas säilitatakse <arv>-bitist sõna . Nii näiteks on kiibis PIC <arv>C<arv> programmimälu infomahutavuseks <arv> sõna . Tavaliselt on programmimäluks EEPROM , kuid kiipides PIC <arv>C<arv>x-JW on kasutusel UVEPROM . BASIC Stampides kiipe PIC <arv>C<arv>x ei kasutata . Mikrokontrollerkiipide andmemälu maht on <arv> kuni <arv> baiti . Andmemälu pesas säilitatakse üht <arv>-bitist sõna . Kiibi PIC <arv>C<arv> andmemälus saab säilitada vaid <arv> sõna . Sisend-väljundviike on <arv> kuni <arv> , minimaalne S/V-viikude arv on näiteks lülitusel PIC <arv>C<arv> . Mikrokontrolleri käsustiku struktuur toetab juhtimisalgoritmide realiseerimist . Nagu klassikalisele RISC-arhitektuurile iseloomulik , on mikrokontrollerite käsustik minimalistlik , piirdudes vaid <arv> ühesõnalise ( <arv>-bitise ) käsuga . Käske adresseeritakse lihtsate viisidega - otse- , kaud- või suhtadresseerimisega . Samasugused adresseerimisviisid on kasutusel ka andmete jaoks . Andmemälu aadressiruumis adresseeritakse samuti eriregistreid , sh. käsuloendurit . Kõik käsud , välja arvatud hargnemised , töödeldakse ühe käsutsükli jooksul . Hargnemiskäskude töötluseks kulub kaks käsutsüklit . Käskude töötlusel rakendatakse mitmetaktilist elementaarkonveierit . Kiirendamaks konteksti vahetust , on kasutusele võetud riistvaraline pinu . Kindlasti tuleb rõhutada mikrokontrolleri üht funktsionaalset iseärasust , nimelt pole see varustatud katkestustesüsteemiga . Küll on kiibis valvetaimeri lülitus , mida takteerib individuaalne kiibisisene RC-generaator . Mikrokontrollerkiip on viidav spetsiaalsesse energiasäästu ( suike- ) režiimi , kus tema voolutarve toitepingel +<arv> V langeb alla <arv> ÜA . Uuemates BASIC Stamp <arv> mooduleis ( BS<arv>E-IC , BS<arv>SX-IC , BS<arv>P-IC ) on kasutusel kõrgema jõudlusega <arv>-bitised firma Senix Semiconductors SX-sarja mikrokontrollerid . Viimased on viikühilduvad ja tarkvaraliselt ülesühilduvad pere PIC <arv>C<arv>x mikrokontrollerkiipidega . Põhiline erinevus mikrokontrolleriperede vahel seisneb SX-kiipide paremas jõudluses ja täiendavates funktsionaalsetes võimalustes ( erinevad variandid suikerežiimist väljumiseks , kiibi toitepinge alanemisele reageeriv detektorlülitus , analoogkomparaator ) . Mikrokontrollermoodulid BASIC Stamp Mikrokontrollermoodulid BASIC Stamp , nagu nende nimigi viitab , vastavad oma mõõtmetelt suuremale postmargile . Erandi moodustavad vaid OEM-tüüpi moodulid , mille jälgpind on mõnevõrra suurem . Kui näiteks mooduli BASIC Stamp <arv> ( Rev. B ) mõõtmed on <arv>x<arv> mm , siis moodulil OEM BASIC Stamp <arv> ( Rev. A ) on need <arv>x<arv> mm . Moodulite BASIC Stamp <arv> jälgpindade erinevused on veelgi suuremad . Toodetakse nii OEM-tüüpi valmismooduleid kui ka üksikdetailidest koosnevaid komplekte , mida kasutaja saab ise kokku monteerida . Praeguseks on välja töötatud BASIC Stampide viis struktuurivarianti , mis võivad olla valmistatud seitsme erineva mooduli kujul . Eristatakse järgmisi mooduleid : BASIC Stamp <arv> , BASIC Stamp <arv> , BASIC Stamp <arv>E , BASIC Stamp <arv>SX ja BASIC Stamp <arv>P . Kõige uuemat mikrokontrollermoodulit nimetatakse Javelin Stamp . Erinevalt teistest BASIC Stampi mooduleist , kus programmeerimine toimub Basic-keele vastavas modifikatsioonis , on Javelin Stamp orienteeritud Java-keelele . Struktuurse lahenduse üldpõhimõtete poolest on kõik BASIC Stampi moodulid sarnased , erinevused seisnevad kasutatavas mikrokontrollerkiibis , programmimälu infomahutavuses , S/V-viikude arvus ja mooduli ning personaalarvuti vahelises liideses . Tundes hästi ühe mooduli struktuuri , pole raske üle minna ühelt teisele . BASIC Stamp <arv> Kõige esimeseks BASIC Stampi pere esindajaks oli mikrokontrollermoodul BASIC Stamp <arv> , mida valmistatakse kolmes variandis - BASIC Stamp <arv> ( Rev. D ) , BS<arv>-IC j a OEMBS<arv> . Moodulid sobivad lihtsatesse rakendustesse , kus eriti oluline on kontrolleri võimalikult väikesed mõõtmed , mitte aga jõudlus või suur S/V-liinide arv . BASIC Stamp <arv> Moodulid BASIC Stamp <arv> on massiliselt kasutatavad . Need sobivad hästi mitte üksnes juhtimisülesannete täitmiseks , vaid ka mikrokontrollertehnika aluste õpetamiseks ja erinevate õppeeksperimentide sooritamiseks . BASIC Stamp <arv>E , BASIC Stamp <arv>SX , BASIC Stamp <arv>P Võrreldes eelkäija , BASIC Stamp <arv> -ga , on kõik nimetatud moodulid suurema jõudlusega . Näiteks ületab BASIC Stamp <arv>SX seda kiiruselt ligikaudu <arv>,<arv> korda ja programmimälu mahult <arv> korda . Mooduleid kasutatakse rakendustes , kus esmatähtis on mikrokontrolleri jõudlus . Samas peab arvestama , et moodulite energiatarve on suurem kui eelkirjeldatuil . Mikrokontrollermooduleid BASIC Stamp <arv> , BASIC Stamp <arv>E ja BASIC Stamp <arv>SX valmistatakse kas <arv>-viiguliste DIP-moodulitena ( BS<arv>-IC , BS<arv>E-IC , BS<arv>SX-IC ) või <arv>-viiguliste OEM-moodulitena ( OEMBS<arv> ) . BASIC Stamp <arv>P võib paikneda kas <arv>-viigulisel ( BS<arv>P-IC ) või <arv>-viigulisel ( BS<arv>P<arv>-IC ) DIP-moodulil . Nagu märgitud , tuleb mooduli BASIC Stamp programmeerimisel ühendada see vastava arendusplaadi abil personaalarvutiga . Kui moodulid BASIC Stamp <arv> sidestatakse personaalarvutiga läbi rööppordi , siis moodulite BASIC Stamp <arv> korral kasutatakse jadaporti . See , et BASIC Stamp <arv> kasutab rööpporti , ei tähenda veel , et andmeedastus ise toimuks rööpselt . Andmeid edastatakse läbi rööppordi jadamisi , seetõttu on ka BASIC Stampi personaalarvutiga ühendavas kaablis kasutusel vaid kolm liini . Millistel kaalutlustel ei kasutatud moodulite BASIC Stamp <arv> ühendamiseks jadaporti , nagu kõigi moodulite BASIC Stamp <arv> korral , jääb ebaselgeks . Kõik BASIC Stampi moodulite variandid sisaldavad järgmisi olulisemaid lülitusi ja komponente : <arv> ) kas pere PIC <arv>C<arv>x või SX mikrokontrollerkiipi , <arv> ) EEPROM-tüüpi programmimälukiipi , <arv> ) pingestabilisaatori kiipi , <arv> ) kvartsresonaatorit , <arv> ) pistikuid mooduli ühendamiseks . Illustreerimaks mooduli BASIC Stamp konstruktiivset lahendust , on joonisel <arv> kujutatud neist ühe miniatuursema , BS<arv>-IC-mooduli olulisemate komponentide paigutust . Tabel <arv> annab kokkuvõtliku ülevaate moodulite BASIC Stamp olulisematest tehnilistest näitajatest . Oluliseks parameetriks on vaadeldavate mikrokontrollerite puhul nende S/V-liinide arv ja talitlusrežiimid , need määravad kontrolleri ja väliskeskkonna vahelise infovahetuse viisi ja kiiruse ( infoläbilaskevõime ) . Moodulid BASIC Stamp ei paista silma just eriti laialdaste S/V-võimaluste poolest . Nii on moodulitel BASIC Stamp <arv> vaid <arv> rööpselt talitlevat S/V-liini ( mooduli S/V-viiku ) , BASIC Stamp <arv> evib <arv> rööpliini , mida täiendavad veel kaks jadaedastuseks määratud liini ( üks sisestuseks ja teine väljastuseks ) . Informatsiooni väljastamisel tohib mooduli S/V-viiku koormata <arv> mA vooluga , sisestamisel on sisendvool <arv> mA . Kuid mooduli summaarne väljundvool ei tohi ületada <arv> mA , sisendvool aga <arv> mA ( BS<arv>-IC ) . Mooduli S/V- viikude sisendtakistus on ligikaudu <arv> MW . Tabel <arv> Moodulite BASIC Stamp tehnilisi näitajaid   Joonis <arv>. Loogikalülituste paigutus moodulil BS<arv>-IC Tabelis <arv> on esitatud mooduli BS<arv>-IC S/V-viikudele edastatavate signaalide loetelu . Tabel <arv> Mooduli BS<arv>-IC sisend-väljundsignaalid  Tabelis on kasutatud järgmisi tähistusi : V IN - toitepinge ( +<arv> , <arv> kuni +<arv> V ) ; V SS - <arv>-potentsiaal ( signaalimaa ) ; V DD - toitepinge +<arv> V. Kui BASIC Stampi väline toitepingeallikas on ühendatud viikudele VINja VSS, siis väljastatakse viigule VDDstabiliseeritud pinge +<arv> V. Mooduli elektritoide võib toimuda ka viikude VDDja VSSkaudu , sel juhul on vajalik stabiliseeritud pinge +<arv> V ; PCO - mooduli programmeerimisel kasutatav väljundsignaal ( BUSY ) ; PCI - mooduli programmeerimisel kasutatav sisendsignaal ( D<arv> ) ; +RES - inverteeritud lähtestussignaal “ Reset ” ( sisend-/väljundsignaal ) . Kontrolleri normaalses töörežiimis on viigul loogikaline konstant “ <arv> ” ( ~<arv> V ) . Kui mooduli toitepinge langeb alla +<arv> V , siis väljastatakse viigule loogikaline konstant “ <arv> ” ja mikrokontrollerkiip siirdub suikerežiimi . Kui viiku kasutatakse sisendina , siis kutsub väline loogikaline signaal “ <arv> ” kiibis esile loogikalülituste lähtestuse ja automaatselt käivitatakse programmimälus oleva programmi täitmine algusest ; P<arv> kuni P<arv> - mikrokontrollerkiibi S/V-pordi järgud <arv> kuni <arv> ( sisend-/väljundsignaal ) . Pärast välise Reset-signaali vastuvõttu talitlevad viigud P<arv> - P<arv> sisenditena . Moodulitel kasutatakse programmimäluna jadatoimelisi EEPROM-kiipe . Püsimälukiipides garanteeritakse salvestatud informatsiooni säilitamine <arv> aasta kestel , ümberprogrammeerimise tsüklite arv küünib <arv> miljonini ( BS<arv>-IC ja BS<arv>-IC ) . Moodulitel BS<arv>E-IC ja BS<arv>SX-IC on salvestustsüklite arv suurusjärgu võrra väiksem . Mooduli BASIC Stamp energiavarustus toimub välisest alalispingeallikast pingega <arv> kuni <arv> V. Energiatarve sõltub mooduli tüübist ja kasutatavast töörežiimist . Näiteks kui tavarežiimis talitleva BS<arv>-IC keskmine voolutarve on ligikaudu <arv> mA , siis suikerežiimis langeb see <arv> ÜA-ni . Mooduli BS<arv>E-IC voolutarve on vastavalt <arv> mA ja <arv>ÜA ning moodulitel BS<arv>SX-IC <arv> mA ja <arv> ÜA . Moodulitel BS<arv>-IC ja BS<arv>-IC asuv pingestabilisaatorlülitus ( väljundpinge +<arv> V ) suudab tagada sisendpingel +<arv> V koormusvoolu <arv> mA . Mooduli BS<arv>SX-IC stabilisaatorlülituse koormusvool sisendpingel +<arv> , <arv> V küünib <arv> mA-ni . Seega omavad moodulite toitelülitused küllaltki suurt koormusvaru , mida võib kasutada mooduliga täiendavalt ühendatavate loogikalülituste elektritoite korraldamisel . BASIC Stampi arendusplaat BASIC Stamp Super Carrier ( Rev. A ) BASIC Stamp Super Carrier ( Rev. A ) on universaalne arendusplaat , mis sobib kasutamiseks koos moodulitega BS<arv>-IC , BS<arv>-IC , BS<arv>E-IC või BS<arv>SX-IC<arv> . Kuigi arendusplaadil on pesad nii mooduli BASIC Stamp <arv> kui ka BASIC Stamp <arv> tarvis , tohib samaaegselt olla plaadiga ühendatud vaid üks nimetatud mikrokontrollermooduleist . Arendusplaadi konstruktiivne lahendus on joonisel <arv>.  Joonis <arv>. BASIC Stampi arendusplaat BASIC Stamp Super Carrier ( Rev. A ) Arendusplaadi põhifunktsiooniks on tagada mooduli BASIC Stamp lihtne ja töökindel ühendus personaalarvutiga , et laadida personaalarvutist programme mooduli programmimällu ning vajadusel koostada lihtsamaid sidestuslülitusi juhitava objektiga . Selleks on arendusplaadil spetsiaalne montaaživäli , kuhu saab lisada täiendavaid loogikalülitusi või muid elektroonikakomponente . Arendusplaadil BASIC Stamp Super Carrier ( Rev. A ) asuvad : <arv>. <arv>-kontaktiline pistik ( PX ) mooduli BS<arv>-IC ühendamiseks personaalarvutiga . <arv>. DB<arv>-tüüpi pistikupesa ( SX ) moodulite BS<arv> ühendamiseks personaalarvutiga . <arv>. Pistikupesa ( BX ) välise <arv> V toiteallika ( patarei ) ühendamiseks . <arv>. Pistikupesa ( PX ) välisele toiteallikale ( nimipingega <arv>-<arv> V ) . <arv>. +<arv> V väljundpingega pingestabilisaatori kiip ( PReg ) . <arv>. Pistikupesad BS<arv>-tüüpi ( BS<arv> ) ja BS<arv>-tüüpi ( BS<arv> ) moodulite ühendamiseks . <arv>. Valgusdioodindikaator “ Toide ” ( Pow ) . <arv>. Lähtestusnupp “ Reset ” ( Res ) . <arv>. Täiendav montaaživäli ( PRA ) lihtsa liidestuslülituse või muu kasutaja poolt koostatava elektroonikalülituse tarvis . <arv>. <arv>-kontaktiline pistikupesa ( X<arv> ) , selles dubleeritakse moodulite BASIC Stamp S/V-liine . Moodulite BASIC Stamp programmeerimine Moodulite BASIC Stamp programmeerimine toimub keeles PBASIC ( Pbasic ) ehk Parallax-BASIC , mis on Basic-keele baasil loodud programmeerimiskeel . PBASIC'ust on loodud erinevaid versioone . Nii leiab PBASIC <arv> kasutamist moodulites BASIC Stamp<arv> , PBASIC <arv> aga moodulites BASIC Stamp <arv> . PBASIC kujutab klassikalise Basicu hübriidset vormi . Ta sisaldab lihtsustatult Basicu põhilisi võtmesõnu , millele on lisatud veel spetsiaalseid võtmesõnu erinevate sisend-väljund- operatsioonide paindlikuks sooritamiseks . Mikrokontrollerite BASIC Stamp iseloomulikuks omaduseks on see , et PBASIC-keele programme säilitatakse mikrokontrollerkiibivälises EEPROM-tüüpi programmimälus , PBASIC'u interpretaatorit aga kiibi sees olevas püsimälus . Sellest johtuvalt nimetatakse mooduli BASIC Stamp mikrokontrollerkiipi tavaliselt interpretaatori kiibiks , mitte aga mikrokontrolleriks . Kuna PBASIC'us koostatud juhtprogramme säilitatakse EEPROM-kiibis , siis ei ole ohtu , et mooduli BASIC Stamp elektritoitesüsteemist väljalülitamisel tekiks infokadu ( programmi hävimist ) . Keeleliselt on PBASIC väga lähedane Basicule , tegemist on lihtsa suhteliselt madala taseme keelega . Sellele on iseloomulik väike valik baasstruktuuride programmeerimise lauseid ja piiratud võimalused alamprogrammide kasutamisel . Samas ei tohiks keele omandamine valmistada raskusi isegi neile , kes teevad programmeerimisvallas alles esimesi samme . PBASIC'u eeliseks tuleb lugeda selle interaktiivsust , töö PBASIC-programmidega toimub suures osas dialoogirežiimis . Eriti kiiresti omandatakse PBASIC siis , kui omatakse kogemusi klassikalise Basicu kasutamises . PBASIC'usse on Basicust üle võetud mitmeid lausekonstruktsioone , nagu : GOTO , FOR...NEXT , IF...THEN , RETURN , GOSUB jmt. Neile on lisatud spetsiifilisi lauseid , mis on orienteeritud juhtimisülesannete kirjeldamiseks , nagu : SERIN , PWM , BUTTON , COUNT , DEBUG , FREQOUT jt. Näiteid PBASIC'us olevaist võtmesõnadest , mida rakendatakse moodulites BASIC Stamp <arv> ja <arv> sisestus-väljastusoperatsioonide kirjeldamisel , on esitatud tabelis <arv>. Tabel <arv> Sisestus-väljastusoperatsioonidel kasutatavaid PBASIC'u võtmesõnu  BASIC Stamp <arv> BASIC Stamp <arv> Täidetav funktsioon BUTTON BUTTON Lüliti oleku kontroll COUNT Sündmuste arvu loendamine sisendviigul etteantud ajavahemiku jooksul DEBUG DEBUG Info talitleva programmi kohta DTMFOUT Mitmesageduslike helisignaalide genereerimine FREQOUT Ühe või kahe siinussignaali genereerimine etteantud ajavahemiku vältel HIGH HIGH Loogilise muutuja “ <arv> ” omistamine etteantud väljundviigule INPUT INPUT S/V-viigu defineerimine infosisendiks LOW LOW Loogilise muutuja “ <arv> ” omistamine etteantud väljundviigule OUTPUT OUTPUT S/V-viigu defineerimine infoväljundiks POT Viigule ühendatud skeemielemendi takistuse mõõtmine PULSIN PULSIN Viigule edastatud impulsi kestuse mõõtmine PULSOUT Etteantud parameetritega impulsi väljastamine valitud viigule PWM PWM Digitaalsele väärtusele vastava analoogväärtuse väljastamine etteantud viigule ( kasutatakse impulss- modulatsiooni ) RCTIME Kondensaatori laade-/tühjenemisaja mõõtmine REVERSE REVERSE Valitud viigul andmeedastuse suuna vastupidiseks muutmine SERIN SERIN Asünkroonselt edastatavate jadaandmete vastuvõtt ( vastavalt standardile RS-<arv> ) SEROUT SEROUT Asünkroonselt edastatavate jadaandmete väljastus ( vastavalt standardile RS-<arv> ) SHIFTOUT Sünkroonselt edastatavate jadaandmete vastuvõtt SHIFTOUT Sünkroonselt edastatavate jadaandmete väljastus SOUND Ristkülikimpulsside genereerimine etteantud ajavahemiku jooksul TOGGLE TOGGLE Väljastusviigul oleva muutuja loogikalise väärtuse inverteerimine Kirjapildilt sarnaneb PBASIC-programm Basic-programmile . Näitena on allpool esitatud PBASIC'us koostatud moodulile BASIC Stamp <arv> programmifragment , mis paneb mooduli viigule P<arv> ühendatud valgusdioodi vilkuma etteantud rütmis . Valgusdioodi sisse- ja väljalülitatud olekute kestused ( <arv> ms ) on võrdsed . Seda ülesannet saab PBASIC'us kirjeldada erinevalt , siin on esitatud vaid üks võimalustest : output <arv> flash : out <arv> = <arv> pause <arv> out <arv> = <arv> pause <arv> goto flash Keskmiselt vajatakse iga PBASIC-lause säilitamiseks programmimälus <arv>-<arv> baiti mälumahtu , kuid keerukamate lausete korral võib mäluvajadus ulatuda kümnete baitideni . PBASIC'u kasutamisel peab arvestama sellega , et samaaegselt ei saa ühes ja samas programmis kasutada PBASIC-keelset ja PIC-mikrokontrollerite assemblerikeelset teksti . BASIC Stampi tarkvara väljatöötamiseks kasutatakse personaalarvutit , kus esmalt koostatakse tekstiredaktori abil programmi lähtetekst , mis seejärel silutakse . Programmi koostamine võib toimuda kas DOS'i keskkonnas ( mooduli BASIC Stamp <arv> ) või Windows'i keskkonnas ( kõik moodulite BASIC Stamp <arv> variandid ) . Ettevalmistatud PBASIC-programm laetakse arendusplaadile ühendatud mooduli BASIC Stamp programmimällu . Pärast programmi salvestamist käivitub selle täitmine automaatselt alates esimesest programmireast . Kui soovitakse aga mooduli programmimälus olevat programmi muuta , siis tuleb olemasolev vana programm asendada ( üle kirjutada ) uuega . Seejuures pole vaja programmimälu sisu eelnevalt kustutada , sest enne uue informatsiooni salvestamist programmimällu kustutab redaktorprogramm mälus säilitatava info automaatselt . Enne programmi väljastamist arvutist mooduli BASIC Stamp programmimällu tihendatakse see . Programmist kõrvaldatakse liigne informatsioon , nagu lähtetekstis olevad kommentaarid , muutujate nimed jms. Tihendamine on oluline ja kasulik eriti seetõttu , et moodulite BASIC Stamp programmimälude infomahutavus on võrdlemisi väikene . Nii piirdub mooduli BS<arv>-IC mäluruum kõigest <arv> baidiga . Olenevalt kasutatavast moodulist varieerub programmimälus säilitatava juhtprogrammi PBASIC ridade arv . BASIC Stamp <arv> korral on see vahemikus <arv>-<arv> rida , moodulid BASIC Stamp <arv> , BASIC Stamp <arv>E , BASIC Stamp <arv>SX ja BASIC Stamp <arv>P suudavad vastu võtta <arv>-<arv> programmirida . Kahjuks pole programmimälumahu suurendamine täiendavate mälukiipide juurdelülitamise teel võimalik , sest mikrokontrollerkiibis säilitatav interpretaatorprogramm ei suuda toetada juba olemasolevast suuremat mälumahtu . Küll saab väliste lisakiipidega laiendada kontrollerkiibi andmemälu infomahutavust . Javelin Stamp BASIC Stampi moodulisarja uusimaks esindajaks on Javelin Stamp . Mooduli on välja töötanud ja seda valmistab firma Parallax Inc. Javelin Stamp on orienteeritud Sun Microsystems' is loodud objektorienteeritud Java-keelele , mis väga hästi sobib juhtimisülesannete kirjeldamiseks . Javelin Stamp kujutab <arv>-viigulist DIL-moodulit mõõtmetega <arv>,<arv> x<arv> , <arv>x<arv> , <arv> cm . Mooduli keskseks lülituseks on mikrokontrollerkiip ( Java-interpretaator ) Ubicom SX <arv>AC . Kontrollerit toetab täiendav jadaandmeedastust sooritav programmimälukiip ( EEPROM ) mahutavusega <arv> kilobaiti ning ka sama suure infomahutavusega muutmälukiip ( SRAM ) . Hostarvutist allalaetav juhtprogramm salvestatakse küll EEPROM'i , kuid programmi talitlusel laeb kontrollerkiibis säilitatav interpretaator täidetavad käsud EEPROM'ist muutmällu . Mikrokontrolleris töödeldavate käskude käsuvõtt toimub rööpse andmeedastusega SRAM'ist . See tagab käskude märksa kiirema töötluse , võrreldes BASIC Stampidega , kus käske loetakse EEPROM'ist . Rööpset infovahetust võimaldavaid sisend-väljundviike on moodulil Javelin Stamp <arv> , neile lisandub veel kaks standardile RS-<arv> vastavat jadaedastuse viiku . Nagu BASIC Stampid , on ka Javelin Stamp varustatud autonoomse pinge-stabilisaatorlülitusega . Kuid erinevuseks on kompensatsioonstabilisaatori asendamine ökonoomsema impulss-stabilisaatoriga . Stabilisaatori väljundpinge on +<arv> V , selle sisendpinge võib olla vahemikus <arv>-<arv> V. Stabilisaatorlülitus tagab maksimaalse koormusvoolu kuni <arv> mA , seejuures ei ületa mooduli Javelin Stamp enda voolutarve <arv> mA . Hostarvutiga saab moodulit ühendada kas läbi standardse aeglase jada- või kiire USB-pordi . Javelin Stamp' i funktsionaalseks täienduseks on nn virtuaalse perifeeria ehk VP ( Virtual Peripheral ) kasutuselevõtmine . VP abil realiseeritakse püsitarkvaralisel ohjel esiplaani- ja taustaprotsesse . Taustaprotsessidena võivad toimuda andmevahetus läbi universaalse asünkroontransiiveri ( UART ) , impulsijadade formeerimine , taimerifunktsioon , <arv>-bitiste digitaal-analoog- ja analoog-digitaalmuundurite talitlemine . Esiplaaniprotsessidena vaadeldakse impulsside loendamist ja mõõtmist , aga samuti jadaliidese talitlust ülemarežiimis ( master mode ) . Käivitatud taustaprotsess toimib autonoomselt , sõltumata sellest , millist käskude jada mikrokontrolleris parajasti töödeldakse . Protsesside töötlemine esi- ja tagaplaanil võimaldab näiteks samaaegselt sooritada andmete jadaedastust ja mõõta mingi impulsi kestust . Tarkvara ettevalmistamine Javelin Stamp' ile toimub nagu teistele BASIC Stampi moodulitele . Rakendatakse Windowsi keskkonnas töötavat tekstiredaktorit JIDE ( Javelin Integrated Design Environment ) . Ettevalmistatud tarkvara ( juhtprogrammi ) allalaadimiseks kasutatakse vastava arendusplaadi abi . Võrreldes eelkäijatega on Javelin Stamp varustatud veel mitme lisafunktsiooniga , nagu : <arv>. Võime sooritada andmete sünkroonset jadaedastust . <arv>. Võime väljastada ja mõõta diskreetseid impulsse . <arv>. Võime loendada sündmusi . <arv>. Mooduli S/V-viikudel olevat informatsiooni on mugav ohjata . <arv>. Võimalus mõõta RC-ahelates toimuvate laade-tühjenemisprotsesside ajalist kestust . Tehniliste tingimuste kohaselt ulatub Javelin Stampi programmimälu ümberprogrammeerimise tsüklite arv miljonini . Analoogiliselt teiste moodulitega BASIC Stamp on kavas edasi arendada ja laiendada ka Javelin Stampi moodulisarja . Mikrokontrollermoodulid BASIC Stamp on polüfunktsionaalsed lülitused , mida saab edukalt kasutada erineva keerukusega juhtimisülesannete lahendamisel , aga samuti mikrokontrollertehnika aluste õpetamisel erineva ettevalmistusastmega kuulajaskonnale . Eriti tuleks rõhutada just viimast , sest praegu on kõikjal täheldatav väga kiire nõudluse kasv spetsialistide järele , kes tunnevad ja oskavad kasutada moodsat mikrokontrollertehnikat . Kogemused , mis on saadud mikrokontrollertehnika aluste õpetamisel inimestele , kelle teadmised ja oskused selles valdkonnas on äärmiselt tagasihoidlikud või puuduvad üldse , on tõestanud BASIC Stampide sobivust õpivahenditeks . Tänu lihtsa kõrgkeele kasutamisele ja valmis mikrokontrollermoodulite olemasolule suudavad õpilased lühikese ajaga omandada piisavalt teadmisi ja oskusi , et iseseisvalt koostada ja tööle panna lihtsamate juhtimissüsteemide riistvara ja kirjutada nende talitluseks vajalik tarkvara . Igati tervitatav on Java-keelele orienteeritud moodulite Javelin Stamp toomine turule . Kui Basic ( samuti PBASIC ) on nüüdseks juba vananenud ja piiratud võimalustega keel , siis Java-keele kasutamine laieneb väga kiiresti ning keel ise täiustub pidevalt . Kui pidada silmas perspektiive , siis just praegu on õige aeg hakata orienteeruma Javelin Stamp 'ide kasutamisele juhtimissüsteemides . Kasutatud materjalid <arv>. C. Kühnel , K. Zahnert . BASIC Stamp . Second edition . Newnes , <arv>. <arv>. Microchip PIC <arv>/<arv> Microcontroller Data Book . <arv>. <arv>. BASIC Stamp Programming Manual . Version <arv>.<arv>b. <arv>. BASIC Stamp Programming Manual . Version <arv>.<arv>c. <arv>. Javelin Stamp Manual . Version <arv>.<arv>. <arv>. A. Toomsalu . Mikrokontrollerpere PIC <arv>C<arv>x . // A &amp; A ( <arv> ) <arv> , <arv>. <arv> Üksikasjalisemat teavet firma toodete kohta leiab võrguaadressilt <hyperlink> <arv> Lisateavet PIC-mikrokontrollerite kohta leiab artiklist ( <arv> ) . Eik Aab , tehnikateaduste magister SISSEJUHATUS Igale TTÜ informaatikasuuna lõpetajale on ilmselt tuntud sellised mõisted nagu “ monotoonne süsteem ” , “ plusstehnika ” ja “ miinustehnika ” , sest monotoonsete süsteemide teooria tekkis just TTÜs hea mitukümmend aastat tagasi . Autor püüab artiklis vaadelda monotoonseid süsteeme ühe kindla nurga alt . Tundub , et sel viisil monotoonseid süsteeme vaadeldes tulevad esile monotoonsete süsteemide siseelu iseärasused , mis võivad nende kasutajale tulevikus kasulikuks osutuda . MONOTOONSED SÜSTEEMID Asja juures olid siis praegune emeriitprofessor Leo Võhandu ning Joosep Mullat . Antud teooriat on siiamaani pidevalt arendatud ning leitud on ilusaid ( loe : kiireid ) lahendusi [ <arv> , <arv> ] põhiliselt graafidega seotud probleemidele . Mis meil graafidest ? Graafidena saab esitada praktiliselt kõiki elus esinevaid sündmuseid , objekte ja protsesse . Seega , kui keegi mõtleb graafidel esitatud probleemile kiirema lahenduse , siis on ta leidnud kiirema lahenduse päris suurele hulgale reaalsetele probleemidele , mida saab esitada graafidel antud probleemina . Selle asemel et leida kiiremat arvutit või paremat programmeerimiskeelt , on sageli väga kasulik pöörduda hoopiski algoritmi “ sorkima ” , sest algoritmilisel tasemel leitud lahendus on põhimõtteline lahendus , mida saab kasutada suurel hulgal erineval riist- või tarkvaral . Monotoonsed süsteemid on süsteemid , mis koosnevad kahest osast : <arv> ) töödeldavate elementide hulk <arv> ) monotoonsuse tingimusele vastav kaalufunktsioon . Monotoonsuse tingimusele vastab kaalufunktsioon siis , kui see annab väärtuse igale üksikelemendile suvalise elementide alamhulga korral ning hulkade muutumisel muutub kaalufunktsiooni poolt antav väärtus kas ainult väiksemaks või suuremaks . Väärtus võib alati ka samaks jääda . Sel juhul on tegemist nõrga monotoonsusega . Monotoonsete süsteemide meetodit võib pidada algoritmide loomise metoodikaks . Igaüks , kes on püüdnud algoritmilisi probleeme lahendada , teab , kui raske on ühte korralikku algoritmi saada . Esimese algoritmi saab küll kähku kätte , kuid see ei ole tavaliselt kiire . Monotoonsete süsteemide meetod annab siinkohal ette väikese raamistiku . Ta ei piira oluliselt algoritmi looja loovust , kuid annab ette sihi ja väikese kava , mida järgides lahenduseni jõuda . MONOTOONSED SÜSTEEMID TEGEVUSES Vaatleme monotoonse süsteemi töötamise protsessi üldisemalt . Ütleme , et elemendid kuuluvad alguses hulka A , mida nimetame lähtehulgaks . Meil on ka hulk B , mida me nimetame lõpp- ehk eemaldatud elementide hulgaks , mis on alguses tühi . Lisaks on meil välja valitud kaalufunktsioon K , mis vastab monotoonse süsteemi tingimustele . Monotoonne süsteem töötab järgmiselt : <arv>. Leiame igale elemendile hulgast A funktsiooni K väärtuse . <arv>. Valime hulgast A elemendi , millele arvutati kas kõige suurem või kõige väiksem kaal ( on kogu protsessi vältel ühtemoodi ) . <arv>. Eemaldame elemendi hulgast A ja ning liidame ta lõpphulka B. <arv>. Kui hulka A kuulub veel elemente , siis pöördume tagasi punkti <arv> juurde . <arv>. Protsessi lõpp . Punktis <arv> toimuv on sihifunktsiooniks nimetatava funktsiooni ülesanne . Sihifunktsiooni suund ( suurima või vähima kaalu järgi töötamine ) valitakse monotoonse süsteemi loomisel . Ilmselt jääb lugejale arusaamatuks , mida sellise protsessi tulemuseks lugeda ja kuidas see üldse kasulik võiks olla . Tõstetakse elemendid ju lihtsalt ühest hulgast teise ja kõik ? ! Võib öelda , et selline protsessi ülesehitus tagab monotoonsetele süsteemidele elementide hulga struktuuri tunnetuse . Iga kord , kui arvutatakse järelejäänud elementide kaalufunktsioone , on kaalufunktsiooni baasiks veidike erinevad hulkade A ja B kooslused , mis mõjutab kaalufunktsiooni tulemust . Seega , pärast mõne elemendi eemaldamist võib teiste elementide järjestus kaalude järgi olla muutunud . Kuidas tulemusi saavutada ? Jälgides elementide ühest hulgast teise tõstmise protsessi , võime teha elementide kohta vajalikke järeldusi . Protsessist saab kasu lõigata vajalike elementide hulka ning elemente iseloomustavate karakteristikute arvutamise abil . Esimesena torkab ilmselt silma elementide hulgast A eemaldamise järjekord . Olenevalt kaalufunktsioonist muutuvad hulka A jäänud elementide kaalud vastavalt sellele , kuidas nad on seotud eemaldatud elementidega . Kaalude muutused mõjutavad hulka A jäänud elementide edasist eemaldamist . Järjekorranumbrit võib võtta kui ühte elemente iseloomustavat suurust . Selliseid suurusi võib palju välja mõelda ning järjestuse tekkides vaadata , mida need räägivad . Omast kogemusest võin öelda , et esimese korraga õiget tunnus-kaalufunktsiooni paari ei leia , kuid sellise leidudes võib imet teha . UUS VAADE Teeme siis uute monotoonsete süsteemide loojate elu veidi lihtsamaks . Kõige põletavam küsimus on ilmselt sobiva kaalufunktsiooni leidmine . Siinkohal pakuks autor uutele huvilistele välja sobiva vaate . Nimelt vajab kaalufunktsioon sisendparameetritena viidet elemendile hulgast A , millele kaalu arvutatakse , ning elementide hulka , mille suhtes esimese parameetrina antud elemendile kaalu arvutada . Jagame kaalufunktsioonid ning sellega koos ka monotoonsed süsteemid kaalufunktsioonile antava teise parameetri järgi kolme rühma : <arv> ) hulgal A baseeruvad monotoonsed süsteemid <arv> ) hulgal B baseeruvad monotoonsed süsteemid <arv> ) hulgal A ja B baseeruvad monotoonsed süsteemid . Nimetame neid edaspidi vastavalt A- , B- ja A+B-klassi monotoonseteks süsteemideks . Et nende kolme klassi erinevusi paremini mõista , võtame ühe lihtsa näite ja mängime sellel kõik kolm varianti läbi . Võtame ühe graafi , millel on kümme tippu . Moodustame ta selliselt , et temas oleks paar klikki ehk tippude hulka , milles iga tipupaari vahel on serv . Selle graafi all võime näiteks ette kujutada tarkvarasüsteemi , milles on kümme alamsüsteemi , ning seostega on näidatud , mis süsteem millega suhtleb . Defineerime lihtsad kaalufunktsioonid .  Joonis <arv>. Uuritav graaf A-klassi monotoonse süsteemi jaoks arvutab kaalufunktsioon igale elemendile , kui palju on tal seoseid teiste hulga A elementidega . Kerge on näidata , et antud funktsioon vastab esitatud tingimustele . Kui üks element hulgast A eemaldada , siis mitte ühegi hulka A jäänud elemendi kaal ei saa suureneda . See saab jääda kas samaks või kahaneda . Samuti on selline suurus alati arvutatav . Eemaldame kõige väiksema kaaluga elemente . B-klassi monotoonse süsteemi jaoks arvutab kaalufunktsioon igale elemendile tema seoste arvu hulga B elementidega . Antud juhul on samamoodi kerge näha , et kaalufunktsioon elementide eemaldamisel hulgast A jääb samaks või kasvab , kuid mitte kunagi ei kahane . A+B-klassi monotoonse süsteemi jaoks arvutab kaalufunktsioon seoste arvu mõlemale hulgale , kuid arvestab hulka B minevaid seoseid alati kahekordselt . B- ja A+B-monotoonsete süsteemide puhul eemaldame kõige suurema kaaluga elemente . Moodustame <arv>x<arv> naabrusmaatriksi , kus seose olemasolu märgime ühega ja puudumist nulliga .  Mängime protsessi A-klassi monotoonse süsteemiga läbi . Esialgsed kaalud : <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Vähima kaaluga elemendiks on element number kümme kaaluga üks . Eemaldame ta hulgast A ja arvutame uued kaalud ning järgime eelnevat protseduuri , kuni kõik elemendid hulgast A on eemaldatud . Kui kaks elementi kandideerivad eemaldatavaks võrdsete kaaludega , siis valime lihtsalt alati parempoolse neist . Reegleid valikuks võib tegelikult olla teisigi . <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> x- eemaldame : <arv> , kaal <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> x x- eemaldame : <arv> , kaal <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> x x x- eemaldame : <arv> , kaal <arv> <arv> <arv> <arv> <arv> <arv> <arv> x x x x- eemaldame : <arv> , kaal <arv> <arv> <arv> <arv> <arv> <arv> x x x x x- eemaldame : <arv> , kaal <arv> x <arv> <arv> <arv> <arv> x x x x x- eemaldame : <arv> , kaal <arv> x <arv> <arv> <arv> x x x x x x- eemaldame : <arv> , kaal <arv> x <arv> <arv> x x x x x x x- eemaldame : <arv> , kaal <arv> x <arv> x x x x x x x x- eemaldame : <arv> , kaal <arv> Nagu näha , liikus süsteem kõigepealt mööda neid tippe , millel oli kõige vähem seoseid , ning jõudis lõpuks kõige suurema klikini graafis . Tarkvarasüsteemidel katsetatuna oleksime kõigepealt saanud kätte kõige nõrgemalt integreeritud osad ja lõpuks kõige tihedamalt integreeritud osad gruppidena . Valides sihifunktsiooniks suurima kaalu otsimise , oleksime ilmselt saanud tulemuse , kus süsteem “ hüppab ” kõigepealt mööda suuremaid klikke ning lõpuks eemaldab kõige vähem seoseid omavad elemendid . Töötleme graafi B-klassi monotoonse süsteemiga . Antud juhul tuleb meil esimene element ise valida . Teeme seda sama “ parema käe reegli ” järgi ehk esimesena eemaldame jälle elemendi number kümme . Eemaldamise kaaluks on null . <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> x- eemaldame : <arv> , kaal <arv> <arv> <arv> x <arv> <arv> <arv> <arv> <arv> <arv> x- eemaldame : <arv> , kaal <arv> <arv> <arv> x <arv> x <arv> <arv> <arv> <arv> x- eemaldame : <arv> , kaal <arv> <arv> <arv> x x x <arv> <arv> <arv> <arv> x- eemaldame : <arv> , kaal <arv> <arv> x x x x <arv> <arv> <arv> <arv> x- eemaldame : <arv> , kaal <arv> <arv> x x x x <arv> <arv> x <arv> x- eemaldame : <arv> , kaal <arv> x x x x x <arv> <arv> x <arv> x- eemaldame : <arv> , kaal <arv> x x x x x <arv> x x <arv> x- eemaldame : <arv> , kaal <arv> x x x x x x x x <arv> x- eemaldame : <arv> , kaal <arv> Kui vaadelda eemaldamise kaale , siis on päris hästi näha , kus üks klikk lõppes ja teine algas . Seda saaks klikkide leidmisel ära kasutada . Viimasena töötleme graafi A+B-monotoonse süsteemiga . <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> <arv> <arv> x <arv> <arv> <arv> <arv> <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> <arv> <arv> x x <arv> <arv> <arv> <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> <arv> <arv> x x x <arv> <arv> <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> <arv> x x x x <arv> <arv> <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> x x x x x <arv> <arv> <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> x x x x x <arv> x <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> x x x x x x x <arv> <arv> <arv>- eemaldame : <arv> , kaal <arv> x x x x x x x <arv> x <arv>- eemaldame : <arv> , kaal <arv> x x x x x x x x x <arv>- eemaldame : <arv> , kaal <arv> Antud juhul oli järjestus vastupidine klassi A monotoonse süsteemi järjestusele . Kõigepealt leiti kõige tihedamalt integreeritud elemendid ja viimasena elemendid , millel oli kõige vähem seoseid . Klikkide leidmiseks oleks meil ilmselt vaja olnud teistsuguseid karakteristikuid kui eemaldamise järjekord ja eemaldamise kaal . Kõiki kolme katsetust vaadates on näha , et B-klassi monotoonse süsteemi protsess oli õige lühike . A ja A+B puhul pidime enne kogu naabermaatriksi läbima selleks , et summasid arvutada . B-variandi puhul oligi kogu protsess sama mahukas kui ülejäänud kahe esimene samm . See ei tähenda automaatselt , et B-klassi süsteemid oleksid kuidagi efektiivsemad . Praktika on näidanud , et protsessi käigus on karakteristikute arvutamine olnud keerulisuse poolest vastupidine st. A- ja A+B-variantidel on nende arvutamine olnud vähem mahukas kui B-variandi puhul , mis tasandab kolme erineva variandi arvutusmahukust . Ilmselt tabas lugeja juba , et B-klassi süsteemide puhul mõjutab esimese eemaldatava elemendi valik edasist järjestust . Lisada võiks , et järjestuse viimaste elementide järjekord sõltub sellest palju vähem kui esimeste oma . MEELESPEA MONOTOONSE SÜSTEEMI LOOJALE Siinkohal võiks monotoonse süsteemi ehitajale väikese meelespea luua . Vali sobiv monotoonse süsteemi tüüp . A-tüüpi süsteemid arvestavad kohe kogu pilti . On oht , et selle käigus midagi keskmistatakse . Oleneb sihifunktsioonist . B-tüüpi süsteemi puhul tuleb jälgida , et esimese elemendi valik midagi pea peale ei pööraks . Süsteem hakkab kohe juhinduma sellest esimesest eemaldatud elemendist . A+B-tüüpi süsteemi puhul saab veel mängida kordajaga , mida A või B hulga arvestuses kasutatakse . Toodud näites oli see <arv> : <arv> hulga B kasuks , kuid see võib olla suvaline muu mittetasakaaluline seis . Kui me võtaks mõlemat hulka võrdselt , siis peab vaatama , et kaalud ikka muutuksid , vastasel juhul pole süsteemist kasu . Vali sobiv kaalufunktsioon . Kaalufunktsioon peab vastama monotoonsuse tingimusele . Seda saab päris lihtsalt kontrollida ühe elemendi peal , liigutades teisi elemente hulgast A hulka B. Kui kaal selle käigus läheb ainult üles või alla , siis on kõik korras . Samaks võib ta alati jääda . Kaalufunktsioon peab olema arvutatav . Seega tähelepanu jagamis- vm. tehte puhul ! Kaal peab olema arvutatav igale elemendile hulkade A ja B erinevate koosluste korral . Muidugi asub element , millele kaalu arvutatakse , alati hulgas A. Koos kaalufunktsiooniga vali sobiv sihifunktsioon . Valida saab kas suurima või vähima kaaluga elemendi valimise vahel . Vali reegel võrdse kaalu saanud elementide vahel valimiseks . Pea seda reeglit silmas eriti B-klassi monotoonsete süsteemide puhul . Seal tuleb kohe esimene valik selle reegli järgi teha . Tavalised reeglid on nn. vasaku ja parema käe reeglid , kuid võib ka vaadata , missugune konkureerivatest elementidest on kõige kauem teistest paremas seisus olnud . Leia sobivad karakteristikud koos meetodiga , kuidas monotoonse süsteemi elementides “ ringituhnimisest ” võimalikult palju kasu lõigata . Kõik loetletud punktid moodustavad ühe terviku , mis annab algoritmi koostajale vajaliku tulemuse . Kuidas ja millisest otsast keegi alustab , on ilmselt väga isikupärane otsus . MONOTOONSETE SÜSTEEMIDE KASUTAMISEST Autor on paari aasta jooksul uurinud monotoonsete süsteemide kasutamist klasterdamisel ehk elementide rühmitamisel . Ülesanne on sarnane toodud klikkide leidmisega selle vahega , et naabermaatriksis on elementide sarnasusi või kaugusi iseloomustavad suurused . Magistritöö [ <arv> ] käigus loodi tarkvara nimega Klastervere , mis töötab kiiresti . Tuhande elemendi rühmitumise uurimiseks piisab paarist sekundist . Klasterveres kasutatav algoritm baseerub monotoonsetel süsteemidel . Üks süsteem otsib klastreid ning annab tarkvarale hea omaduse - keegi ei pea eelnevalt klastrite arvu ette andma , nagu tavaliselt sellised algoritmid nõuavad . Teine süsteem selgitab välja iga klastri täieliku ulatuse . Iga leitud klaster esitatakse puuna , mille juureks on nn. tuumelement , millest klaster alguse sai . Algoritmi töö tulemused võib kasutaja saada kolmel viisil : <arv> ) radiaalpuuna <arv> ) kuuluvusfunktsioonina <arv> ) tekstina . Tooksin siinkohal ära veel paar näidet tulemuste esitusviiside kohta . Klasterverest teeme pikemalt juttu mõni teine kord .  Joonis <arv>. Klastripuu esitus radiaalpuuna  Joonis <arv>. Klastripuu esitus kuuluvusfunktsioonina KOKKUVÕTE Monotoonsed süsteemid on metoodika , mis on välja mõeldud TTÜs mitukümmend aastat tagasi . Selle metoodika alusel loodud süsteemid on ennast näidanud väga heast küljest . Monotoonsed süsteemid koosnevad lihtsalt ühest kaalufunktsioonist ja töödeldavate elementide hulgast . Selline ülesehitus loob kiire algoritmi vajajatele lihtsa raamistiku uute algoritmide leidmiseks päris väikese vaevaga . Kaalufunktsiooni järgi võib monotoonsed süsteemid jagada kolme rühma . Iga rühma monotoonsetel süsteemidel on oma väike eripära . Väikese meelespea olemasolul võib igaüks päris mugavalt endale vajaliku algoritmi koostada .  Varjatud Markovi mudelid Tanel Alumäe , tehnikateaduste magister SISSEJUHATUS Käesolev artikkel annab lühikese ülevaate varjatud Markovi mudelitest ( Hidden Markov Models , HMMs ) . Tutvustatakse mudelite kasutamise eesmärke , erinevaid rakendusalasid , antakse ülevaade mudelite omadustest ning töö- ja kasutuspõhimõtetest . Kirjutises püütakse jääda võimalikult lihtsaks ning hoiduda pikka süvenemist vajavatest matemaatilistest detailidest . Varjatud Markovi mudelite kasutamise eesmärgiks on erinevate looduslike ja tehislike protsesside väljundite klassifitseerimine , ennustamine , identifitseerimine või mingit muud liiki analüüs . Vaadeldava protsessi väljundsignaal võib olla oma olemuselt diskreetne ( nt. tähed , täisarvud ) või vähem või rohkem pidev ( nt. digitaliseeritud kõnesignaal , börsiindeksi muutused , temperatuuritasemed ) . Markovi mudelite abil püütakse seda signaali iseloomustada , et saada rohkem teada selle tekitaja e. uuritava protsessi kohta . Loomulikult oleks üldjuhul parem otse protsessi sisemust uurida , kuid tihtilugu on see võimatu või liiga ressursinõudlik . Sellisteks näideteks , kus protsessi sisemuse uurimine on võimatu , on kõne- ja käekirjatuvastus , kus meile on teada ainult kuuldud või kirjutatud laused , kuid puudub võimalus teada saada , millist lauset rääkija või kirjutaja tegelikult väljendada püüdis . Liiga ressursinõudlik on protsessi sisemuse jälgimine näiteks ilmaennustuse puhul - sel juhul on meil teada küll temperatuuri- ja õhurõhutasemed ning muud sarnased andmed , kuid selle põhjustaja e. kogu planeedi kliima toimimise üksikasjalik jälgimine on liiga keeruline . Markovi mudelite rakendamise aluseks on usk , et uuritavat protsessi saab küllalt hästi tundma õppida , ilma et oleks vaja tema sisemist tööpõhimõtet täpselt modelleerida . Sel juhul eeldatakse , et vaadeldava signaali väljastas juhuslik protsess , mille parameetrid saab ligikaudselt kindlaks teha piisavalt mahuka vaatlusstatistika põhjal . MARKOVI AHELAD Varjatud Markovi mudeliteni jõudmiseks tuleks esmalt aru saada Markovi ahela omadustest . Lihtne näide Markovi ahelast on toodud joonisel <arv>. Markovi ahelal on lõplik arv olekuid S=S <arv> , S <arv> , S <arv> ning need sümboliseerivad vastavalt vihmast ( või lumesajust ) , pilvist ja päikesepaistelist ilma . Regulaarsete ajaintervallide järel süsteemi olek muutub ( võimalik , et samasse olekusse tagasi ) . Aega tähistame sümboliga t ning süsteemi olekut hetkel t sümboliga q t . Olekute jada q t võib olla näiteks ] S <arv> , S <arv> , S <arv> , S <arv> , S <arv> } , mis vastab kahele päikesepaistelisele päevale , millele pärast kahte pilvist päeva järgneb üks sajune päev . Oleku muutumine on juhuslik ning selle tingivad olekumuutustõenäosused a ij . Iga selline väärtus näitab , kui tõenäoliselt järgneb olekule i olek j. Erinevaid oleku muutustõenäosusi on kokku n <arv> , kus n on erinevate olekute arv , ning neid saab kõige mugavamini kirja panna maatriksina , näiteks antud juhul :  Markovi ahelate olekumuutustõenäosused on ajast sõltumatud ning selgelt on näha , et neile kehtib piirang , kus N on mudeli olekute arv .  Joonis <arv>. Kolme olekuga Markovi ahel Olekumuutustõenäosustega saab näiteks arvutada vastuse küsimusele : “ Täna päike paistab . Kui suur on tõenäosus , et selline ilm püsib veel kaks päeva ? ” Selleks tuleb arvutada . Selline vastus on linnainimese seisukohalt päris rõõmustav . Kuid arvutame , kui suur on tõenäosus , et vihmasele ilmale järgneb vähemalt kahe päeva jooksul päikesepaisteline ilm : tõenäosus , et vihmasele päevale järgneb kohe ilus ilm , on a<arv>; tõenäosus , et vihmasele päevale järgneb veel üks vihmane päev ning pärast seda kohe päikesepaisteline ilm , on a<arv>*a<arv>; vihmasele päevale võib ka järgneda pilvine päev ning pärast seda päikesepaisteline päev - selle sündmuse tõenäosus on a<arv>*a<arv>. Seega saame kirjutada , et meie oodatava sündmuse O toimumise tõenäosus on  . Sellise Markovi ahela põhjal ilma ennustamine illustreerib hästi Markovi ahelate töö- ja kasutuspõhimõtet . Praktikas on see töö loomulikult palju keerukam ja tugineb keerukamatele mudelitele . Markovi ahelad kuuluvad ühekordsete juhuslike protsesside hulka . Protsessi väljundiks on tema olekute jada , seega on see olekute jada “ vaadeldav ” . VARJATUD MARKOVI MUDELID Varjatud Markovi mudel on kahekordne juhuslik protsess . Mudel põhineb tavalisel Markovi ahelal , mille olekud ei ole aga vaadeldavad , s.t. nad on varjatud . Mudeli väljundeid genereerib teine juhuslik protsess , mis võib sõltuda sellest olekust , millises protsessi aluseks olev Markovi ahel parajasti on . Oletusi Markovi mudeli aktiivse oleku kohta saab teha ainult väljundsignaalide põhjal . Näitena võib ette kujutada nn. peidetud urnide mudelit ( joonis <arv> , adapteeritud artiklist [ <arv> ] ) : toas on mitu urni , igaühes neist on suur hulk erinevat värvi kuule . Eri värvi kuulide arv on igas urnis erinev . Kujuteldava protsessi väljund saadakse järgmiselt : tuppa siseneb inimene ning valib mingi juhusliku protsessi järgi esimese urni ja võtab sealt juhuslikult ühe kuuli . Vaatleja näeb ainult kuuli värvi , kuid ei tea , millisest urnist kuul valiti . Seejärel paneb ruumis olev inimene palli tagasi lähteurni ning mingi antud urniga seotud juhusliku protsessi mõjul valib järgmise ( või sama ) urni . Seejärel korratakse pallivalimisprotseduuri . Kogu sellise protsessi väljundiks on värvide jada .  Joonis <arv>. Urnide ja pallide mudel Selle näite põhjal võib tutvustada varjatud Markovi mudelite elemente . Mudel koosneb lõplikust arvust N olekust . Igas ajaühikus t liigutakse vastavalt aktiivse oleku muutustõenäosustele uude olekusse ( või samasse olekusse tagasi , täpselt nagu tavaliste Markovi ahelate puhul ) . Antud näite puhul on olekuteks urnid värvidega . Pärast iga muutust väljastab mudel mingi sümboli ( näiteks värvi ) . Sümbol valitakse vastavalt aktiivsele olekule vastavale juhuslikule protsessile . Näites on ju värvide jaotus igas urnis erinev , seega on ka erinevate värvide valimise tõenäosus sõltuv aktiivsest urnist . Formaalse definitsiooni järgi on varjatud Markovi mudel kolmik ( A , B , ) , kus on mudeli olekud on olekud , mis läbiti vaadeldava protsessi käigus on protsessi käigus tehtud vaatluste e. nähtud väljundsümbolite jada on võimalike väljundsümbolite hulk A on olekumuutustõenäosuste maatriks , B on väljundite tõenäosus olekus j , on algoleku tõenäosus iga oleku jaoks , Varjatud Markovi mudeli väljundid võivad olla ühe- või mitmemõõtmelised .. Ülaltoodud urni ja pallide näite puhul on mudeli väljundid ühemõõtmelised diskreetsed sümbolid ( värvid ) . Näidet võiks muuta nii , et iga urni juures tõmmatakse sellest korraga kaks palli - sel juhul oleks väljundiks kahemõõtmeline vektor . MUDELI TÖÖ PÕHIMÕTE Kui varjatud Markovi mudeli parameetritele A , B j a omistada väärtused , võib seda kasutada väljundite O genereerimiseks . Mudeli töö põhimõte on lihtne : <arv>. Valida algolek vastavalt erinevate algolekute tõenäosustele . Loomulikult ei tähenda see seda , et alati valitaks suurima tõenäosusega algolek , vaid eelkõige seda , et mudeli mitmekordsel töötamisel läheneb erinevate algolekute valimissagedus nende algolekuks olemise tõenäosusele . <arv>. Seada t=<arv> . <arv>. Väljastada sümbol O t =v k vastavalt aktiivse oleku väljundite tõenäosustele b t ( k ) . <arv>. Liikuda uude olekusse q t+<arv> =s j vastavalt oleku s i olekumuutuse tõenäosusvektorile a tj . <arv>. Kui t≤T , lõpetada töö , muidu alustada uuesti sammust <arv>. Oluline on , et seda algoritmi saab kasutada nii uute vaatluste e. väljundite genereerimiseks kui ka olemasolevate vaatluste genereerimise modelleerimiseks . MUDELITE TÜÜBID TOPOLOOGIA Selline mudel , kus igast olekust võib liikuda igasse teise olekusse , ei ole tavaliselt kõige otstarbekam , sest tema vabade parameetrite arv on liiga suur , seega on ka tema treenimine väga keeruline ega anna üldjuhul soovitud tulemust . Sellepärast kasutatakse praktikas sellised mudeleid , kus on lubatud ainult teatud üleminekud , teised on keelatud e. nende toimumise tõenäosus on võrdne nulliga . Joonisel <arv> , a on mudel , kus võimalik on liikuda ainult järgmisse olekusse või püsida samas olekus . Mudelit <arv> , b on täiendatud üleminekutega ülejärgmisse olekusse . Mudeli <arv> , c puhul on protsessi läbimiseks kaks paralleelset teed , võimalik on ka tee vahetamine protsessi käigus .  Joonis <arv>. Erinevad mudelitopoloogiad Nagu näha , on kõikidel juhtudel protsessil kindel algolek , seega mudeli parameetrile kehtib tingimus  VÄLJUNDID Nagu eespool mainitud , võivad varjatud Markovi mudelite väljundid olla diskreetsed või pidevad . Diskreetse väljundiga mudelite puhul võib iga olek väljastada sümboleid mingist lõplikust hulgast ning teada on iga sümboli väljastamise tõenäosus ( joonis <arv> , a ) . Kui väljundid on pidevad signaalid või pidevate elementidega vektorid , on asi pisut teistsugune . Sel juhul tuleb esmalt kindlaks teha või hinnata , millisele pidevale jaotusele väljund allub . Kõige sagedamini kasutatakse normaaljaotusele alluvate väljunditega mudeleid ( joonis <arv> , b ) . Sel juhul on mudeli parameetri B sisuks jaotuse keskväärtuse ja dispersiooni paar või selliste paaride vektor , juhul kui ka väljundiks on pidevate elementidega vektor . Keerulisemates mudelites kasutatakse tihti ka selliseid jaotusi , mis saadakse mitme normaaljaotuse summana ( joonis <arv> , c ) . Loomulikult võib pidevate väljundite tõenäosust esitada ka teiste jaotustega , näiteks logaritmilise või eksponentjaotusega .  Joonis <arv>. Erinevat tüüpi väljundite tihedusfunktsioonid MUDELITE KASUTAMINE Milles siis peitub varjatud Markovi mudelite kasulikkus ? Eelkõige selles , et tänu oma statistilistele omadustele on neid võimalik treenida modelleerima mitmesuguseid looduslikke protsesse ja nähtusi . Treenimise käigus seatakse mudeli parameetrid sellisteks , et mudel vastaks tema aluseks olevale protsessile võimalikult hästi . Pärast mudeli treenimist ehk mudeli parameetrite kindlakstegemist võime hinnata , kuidas mudel käitub . Täpsemalt , võime arvutada protsessi erinevate kulgemisteede tõenäosuse . See idee võetakse aluseks sellistes rakendustes , kus Markovi mudeleid kasutatakse ennustamiseks . Markovi mudelite abil saab hinnata , millised sisemised olekud protsess tõenäoliselt läbis nähtud väljundite genereerimisel . Selle teeb keerukaks kaks asjaolu . Esiteks , olekute ja väljundite vastavus ei ole üksühene , sest erinevad olekud võivad väljastada sarnaseid sümboleid . Teiseks , sama oleku poolt väljastatavad sümbolid võivad tugevalt varieeruda väärtuselt , samuti varieerub aeg , kui pikalt mudel ühes olekus püsib . Kõige tõenäolisemalt läbitud olekute teadasaamine ongi tihti varjatud Markovi mudelite kasutamise lõppeesmärk . Teist liiki rakenduste puhul võib läbitud olekute hindamine olla aluseks edasisele analüüsile , näiteks selleks , et hinnata protsessi edasisi tõenäolisi väljundeid . See eeldab muidugi , et mudelite parameetrid on teada . Neid parameetreid on aga võimalik ligikaudselt paika panna piisava hulga treeningumaterjali olemasolul . Selles seisnebki varjatud Markovi mudelite võlu . Sellisest abstraktsest kirjeldusest aitab aru saada järgnev näide . ISOLEERITUD SÕNADE TUVASTUS Esimeses näites püüame kasutada varjatud Markovi mudeleid kõneleja poolt öeldud isoleeritud sõnade äratundmiseks . Süsteem peab ära tundma ainult väikest hulka sõnu ( näiteks numbreid nullist üheksani ) . Sõnad esinevad alati isoleeritult , s.t. me teame alati , kus äratundmisele kuuluv sõna algab ja lõpeb . Iga sõna jaoks on meil palju treeningunäiteid ehk erinevate rääkijate poolt lausutud sõnade salvestusi . Üldine kõnetuvastusstrateegia on lühidalt järgmine : kõnesignaal sisestatakse läbi mikrofoni või telefoni arvutisse , kus see digitaliseeritakse . Digitaliseeritud kõnesignaal jagatakse lühikesteks , tüüpiliselt <arv> ms pikkusteks lõikudeks . Iga kõnelõigu spektrist arvutatakse tunnusvektor , mis paarikümne koefitsiendiga iseloomustab antud lõigus olevat informatsiooni . Tunnusvektorite arvutamisel on kaks põhilist eesmärki : vähendada infohulka ning tuua esile sellised tunnused , mis erinevate häälikute vahel võimalikult suurelt varieeruvad . Praktikas kasutatakse selleks kõige sagedamini nn. mel-cepstrum-koefitsiente ( MFCC ) [ <arv> ] . Spektraalanalüüsi tulemusena saadakse sõnale vastav tunnusvektorite jada ( joonis <arv> ) .  Joonis <arv>. Tunnusvektorite leidmine Markovi mudelite põhisel tuvastusel eeldatakse , et sellise vektorijada genereeris protsess , mida saab modelleerida varjatud Markovi mudeliga . Sõnade tuvastamiseks konstrueeritakse iga sõna jaoks oma Markovi mudel<arv>, mis peab modelleerima sõnade varieeruvusi erinevate kõnelejate realiseeringutes ning sama kõneleja siseseid varieeruvusi tingituna tema emotsioonidest ja intonatsioonist . Selleks tuleb kõigepealt otsustada , milline on kõige sobivam mudeli struktuur . Et sõnade hääldamise puhul on tegemist protsessiga , millel on selge algus ja lõpp ning suund , on otstarbekas selle modelleerimiseks kasutada nn. vasakult-paremale mudelit ( joonis <arv> , b ) . Taoline mudelitopoloogia tagab selle , et protsessi edenedes ( e. antud juhul sõna möödudes ) olekute indeksid suurenevad või jäävad samaks . Olekud võiksid siis sel juhul vastata sõnas olevatele statsionaarsetele osadele , näiteks häälikutele või häälikuosadele . Vasakult-paremale mudelis on võimalikud ka üleminekud ühest olekust ülejärgmisesse , mis peaks tagama selle , et nii saaks modelleerida ka selliseid sõnahääldusi , kus kiiremal või lohakamal hääldusel mõned häälikud või häälikuosad puuduvad ( nt. sõna “ üheksa ” lohakal hääldamisel kaob häälik /h/ , ning sõna hääldus on umbes /öeksa/ ) . Tänu üleminekule esimesest olekust kolmandasse suudab ka mudel sellist hääldust aktsepteerida , muidugi tingimusel , et ka treeninguandmetes on sarnaseid hääldusi . Teine otsus , mis mudeli topoloogia disainimisel teha tuleb , on mudeli olekute arvu valik . Esimeseks ideeks on seada olekute arv võrdseks vastavas sõnas olevate häälikute arvuga . Nii oleks näiteks sõna “ üks ” mudelis kolm olekut ja sõna “ üheksa ” mudelis kuus olekut . Teine idee oleks kasutada kõikides mudelites samasugust arvu olekuid ning leida optimaalne olekute arv katse ja eksituse meetodil . Praktikas kasutataksegi tihti teist ideed ning praktika on näidanud , et tüüpilised sõnamudelid ( eeldades , et tegemist on liht- , mitte liitsõnadega ) annavad vähemalt kuue oleku puhul häid tulemusi , kuuest edasi on tulemuste varieeruvus küllalt väike . Mudelite treenimiseks võetakse kõik mudelile vastava sõna treeningunäited ning optimeeritakse mudeli parameetreid nii , et mudel vastaks neile võimalikult hästi . Et mudeli parameetrite teadmisel on lihtne hinnata tõenäosust , kas vaadeldav sõna on genereeritud just selle mudeli poolt , maksimeeritakse parameetreid nii , et treeningnäidete genereerimise kogutõenäosus oleks võimalikult suur . Selleks kasutatakse tavaliselt nn. Baumi-Welchi-algoritmi , mille detailsema kirjelduse leiab igast kirjutisest , millele artikli lõpus viidatud on . Tundmatu sõna tuvastamiseks tuleb hinnata iga mudeli vastavust sellele sõnale . Selleks kasutatakse treenimise käigus leitud mudeli parameetreid , mille põhjal arvutatakse tõenäosus , et just see mudel genereeris kuuldud sõna . Kõige suurema tõenäosusega mudelile vastav sõna ongi ilmselt see , mis öeldi . Selliste tõenäosuste hindamiseks kasutatakse kõige sagedamini Viterbi-algoritmi , mida samuti siin lähemalt ei kirjeldata . Treenimis- ja tuvastusprotsess on visualiseeritud joonisel <arv>.  Joonis <arv>. HMM kasutamine isoleeritud sõnade tuvastamiseks MUDELITE RAKENDUSALAD Nagu eespool näidatud , saab varjatud Markovi mudeleid edukalt rakendada kõnetuvastusel . Toodud näide tegeles ainult isoleeritud sõnade tuvastamisega , kuid väga edukalt toimib ka seotud kõne tuvastus . Selleks konstrueeritakse tavaliselt eraldi mudelid kõigi keeles esinevate häälikute jaoks . Süsteemi sõnastikus on sel juhul defineeritud hääldused kõikide sisendkeeles esinevate sõnade jaoks , selle põhjal sünteesitakse häälikumudelitest pikemad sõnamudelid . Sarnaselt saab Markovi mudeleid kasutada käekirjatuvastusel . Ka siin kasutatakse põhimõtet , et tuleb modelleerida protsessi , mille väljund kirjutatud teksti näol on teada , ning leida selle genereerinud olekute jada . Nagu kõnetuvastuses , kasutatakse ka siin väljundi eelnevat töötlust , et eraldada digitaliseeritud käekirjast olulised tunnused . Tunnusteks on näiteks kaarte ja ahelate arv tähe erinevates piirkondades [ <arv> ] . Kõne ja keele alal on Markovi mudelitele veel rakendusi . Eestis on selliseid statistilisi mudeleid pruugitud keele morfoloogia analüüsimiseks [ <arv> ] . Väga agaralt rakendatakse varjatud Markovi mudeleid ka bioinformaatikas . Näiteks on tihti vaja otsida teatud liiki proteiinijärjendeid väga suurtest varamutest , mis sarnaseb mingi sõna otsimisega tekstist . Proteiinidel on aga selline huvitav omadus , et nende “ väljanägemine ” ei ole fikseeritud , vaid varieerub , umbes nagu varieeruvad sama sõna erinevad realiseeringud inimkõnes . Markovi mudelite abil on seda varieeruvust edukalt simuleeritud [ <arv> ] . VAHENDID Internetis on üleval mitmesugust tarkvara varjatud Markovi mudelitega tegelemiseks . Kõige võimsam neist on ilmselt Cambridge'i Ülikoolis loodud Hidden Markov Model Toolkit ( HTK , [ <arv> ] ) . Pakett on saadaval koos C-keelse lähtekoodiga ja kompileeritav nii Windowsi kui ka Unixi keskkonnas . Kuigi HTK on mõeldud eelkõige kõnetuvastuse uurimiseks , kasutatakse seda ka paljudes teistes valdkondades , nagu kõnesüntees , käekirjatuvastus , bioinformaatika jms. Paketil on suur ja aktiivne kasutajate kogukond . Matlabi kasutajatele võib soovitada paketti nimega Hidden Markov Model Toolbox ( <hyperlink> ) . KOKKUVÕTE Käesolev artikkel tutvustas lühidalt varjatud Markovi mudelite teoreetilisi aluseid , näitas , kuidas neid kasutada looduslike protsesside analüüsimiseks , ning demonstreeris ühte lihtsat rakendust isoleeritud sõnade tuvastuse näitel . Markovi mudelid sobivad hästi selliste nähtuste analüüsiks , mille puhul reeglipõhine lähenemine ei ole otstarbekas kas meie teadmiste vähesuse või protsessi enda keerukuse tõttu . Markovi mudelite kasutamine toetub eelnevate vaatluste statistikale ning lootusele , et tänu oma statistilistele omadustele suudab mudel ise protsessiga kohaneda . Varjatud Markovi mudelitel on ka mõningaid põhimõttelisi puudusi , mida selles artiklis ei kirjeldatud . Neid puudusi , nagu ka mitmeid elegantseid Markovi mudelite rakendusalgoritme , on tutvustatud paljudes viidatud kirjutistes .  Ants Kukrus , TTÜ professor Tänapäeva infoühiskonnas on üha tähtsamaks muutunud mitmesuguse info kogumine , süstematiseerimine ja väljastamine . Sidusteenuste ülemaailmselt arvutivõrkude kaudu kättesaadavate ja pakutavate elektrooniliste andmebaaside tormiline areng tõstis päevakorda olemasoleva õigusliku regulatsiooni puudulikkuse ning andmebaaside nõrga kaitse . Andmebaaside loomine ja haldamine on töömahukas ning nõuab suuri investeeringuid , mistõttu andmebaaside tegijad on huvitatud oma intellektuaalse loomingu efektiivsest kaitsest . Andmebaaside õiguskaitse omab suurt tähtsust eriti elektroonilises vormis andmebaaside puhul , kuivõrd need ei vasta tava ja teose tunnustele , nende loomine on pikk protsess , aga andmete kättesaamine toimub silmapilkselt . Teatavasti tagab Internet mitmeid juurdepääsuvõimalusi infole , lihtsaks on muutunud materjali kopeerimine , ilma et koopia kvaliteet oleks originaalist halvem , ja materjali muudetud kujul arvutivõrgus ringlusse saatmine . Paljudel juhtudel on andmebaasi tegijal võimatu oma õiguste rikkumisi kontrollida , ja see sunnib pidevalt üle vaatama meetmeid intellektuaalomandi kaitsel . ANDMEBAASI MÕISTE RAHVUSVAHELISEL TASANDIL Berni kirjandus- ja kunstiteoste kaitse konventsioonis<arv>( edaspidi - Berni konventsioon ) , Intellektuaalomandi õiguste kaubandusaspektide lepingus e. TRIPS lepingus ( ingl. Agreement on Trade-Related Aspects of Intellectual Property Rights ) <arv> ja WIPO autoriõiguse lepingus ( ingl. WIPO Copyright Treaty ) <arv> eraldi andmebaasi mõistet defineeritud ei ole . Berni konventsiooni artikli <arv> p-dest <arv> ja <arv> tuleneb , et autoriõigusega kaitstavate teoste hulka kuuluvad teoste- ja infokogumikud ( sh. andmebaasid ) , mis sisu , valiku ning korraldamise tõttu moodustavad intellektuaalse loomingu . Et kaitsta andmebaasi autoriõigusega , peab see olema originaalteos , originaalsus peab kajastuma tema struktuuris ja ülesehituses . Andmebaasi sisu autoriõigus ei kaitse . TRIPS lepingu artikli <arv> p-s <arv> on sätestatud põhimõte , et nii arvutiga kui muul viisil loetavad andmete või muu materjali kogud , mis oma sisu valiku või korralduse tõttu moodustavad intellektuaalse töö tulemuse , on kaitstavad autoriõigusega nagu teosed , nimetatud säte on kooskõlas Berni konventsiooni artikkel <arv> p-dega <arv> ja <arv>. WIPO autoriõiguse lepingu artiklis <arv> on sätestatud , et andmekogud , sh. andmebaasid , on mis tahes vormis andmete või muu materjali kogud , mis oma sisu valiku või korralduse tõttu moodustavad loometöö tulemuse , ning on seetõttu kaitstavad autoriõigusega . Tulenevalt Berni konventsioonist , TRIPS lepingust ja WIPO autoriõiguse lepingust on andmebaasid autoriõiguse objektiks , kui need on koostatud isiku loometöö tulemusel . Probleem oli aga selles , et paljud suured andmekogud ( näiteks telefonikataloogid ) ei saanud juba neis sisalduvate andmete tõttu olla originaalsed , kuid nende koostamisel olid tegijad teinud suuri investeeringuid , mis aga jäid autoriõiguse kaitse alt välja . Uued suunad andmebaaside õiguskaitsel sätestati Euroopa Parlamendi ja Nõukogu <arv>. märtsi <arv>. aasta direktiiviga <arv>/<arv> EÜ andmebaaside õiguskaitse kohta ( ingl. Directive <arv>/<arv> EC of the European Parliament and of the Council on the legal protection of databases ) ( edaspidi - andmebaasi direktiiv ) . <arv> Vastavalt direktiivi preambula p-le <arv> hõlmab termin “ andmebaas ” kirjandus- , kunsti- , muusika- ja muude teoste kogumikke ning muu materjali kogumikke , mis sisaldavad näiteks tekste , helisid , kujundeid , arve , fakte ja andmeid . Heli- ja audiovisuaalsed salvestused , kinematograafilised , kirjandus- ega muusikateosed eraldiseisvatena käesoleva direktiivi reguleerimisalasse ei kuulu . Termin “ andmebaas ” ei hõlma arvutiprogramme , mida kasutatakse andmebaaside loomisel ja nendega töötamisel vastavalt preambula p-le <arv> , niisuguste programmide kaitse on sätestatud <arv>. mail <arv>. a. direktiivis <arv>/<arv>/EÜ . Andmebaasi direktiivi alusel liigitatakse andmebaase järgmiselt : <arv> ) andmebaasid , mis sisu valiku või korralduse tõttu vastavad teose tunnustele ja mida kaitstakse autoriõigusega seaduse alusel ( so . kogumikke ) ; <arv> ) andmebaasid , mis ei ole teosed ja mida kaitstakse sui generis põhimõttel . Andmebaaside sui generis kaitse põhimõte on kaitsta investeeringute tegijate huve . Andmebaasi direktiivi artiklitega <arv>-<arv> on reguleeritud nende andmebaaside kaitse , mida kaitstakse kui teoseid . Artiklitega <arv>-<arv> reguleeritakse aga sui generis õiguse alusel kaitstavaid andmebaasi tegija õigusi . Vastavalt direktiivi artikli <arv> p-le <arv> võib andmebaasi autoriks olla füüsiline isik , füüsiliste isikute grupp või juriidiline isik , kui liikmesriigi seadus seda lubab . Vastavalt direktiivi artiklis <arv> sätestatule on autoril õigus lubada kolmandatele isikutele : <arv> ) andmebaasi ajutist või alalist reprodutseerimist kas tervikuna või osaliselt mis tahes viisil ja mis tahes vormis ; <arv> ) tõlkimist , kohandamist , töötlemist või mis tahes teistsugust muutmist , ning selle tegevuse tulemuse mis tahes reprodutseerimist , levitamist , ülekandmist , visuaalset esitust või esitamist üldsusele ; <arv> ) andmebaasi või selle koopia levitamist üldsusele mis tahes vormis . Sätestatud on ka levitamise õiguse lõppemine ühenduses ; <arv> ) mis tahes edastamist , visuaalset esitust või esitamist üldsusele . Autoriõiguse alusel kaitstavate andmebaaside kaitse tähtaeg on sama mis kirjandusteostel ( autori eluiga + <arv> aastat pärast surma ) , vastavalt artiklile <arv> p. <arv> . Sui generis õiguse alusel kaitstavate andmebaaside tähtaeg hakkab , vastavalt artikli <arv> p-le <arv> , kulgema alates andmebaasi lõpetamise kuupäevast ja lõpeb <arv> aasta pärast , arvates andmebaasi lõpetamise kuupäevale järgneva aasta esimesest jaanuarist . Erandid piiratud tegevusest on sätestatud direktiivi artiklis <arv> autoriõigusega kaitstavate andmebaaside kasutamisel . Andmebaasi tegija õigused on piiratud kasutamiseks isiklikel , hariduslikel , teaduslikel , informatsioonilistel , halduslikel , õigusmõistmise ja ühiskondliku julgeoleku eesmärkidel . Ilma autori nõusolekuta võib väljavõtteid isiklikeks vajadusteks teha vaid mitteelektroonilistest andmebaasidest . Nagu eespool mainitud , ei ole Berni konventsioonis andmebaaside kui autoriõiguse objekti kaitse eraldi sätestatud . Berni konventsiooni artikli <arv> lõike <arv> kohaselt kaitstakse autoriõigusega kirjandus- ja kunstiteoste kogumikke , sealhulgas andmebaase , mis oma sisu valiku ja korraldamise tõttu moodustavad intellektuaalse loomingu . Siit tulenevalt kuuluvad andmebaasid autoriõiguse kaitse alla kui kogumikud Berni konventsiooni tähenduses . Lisaks on vastavalt Berni konventsiooni artiklile <arv> ( <arv> ) võimalik kaitsta ka autoriõigusega mittekaitstavate andmete ja muu materjali kogusid , kui need on valminud isiku loometöö tulemusel . Seega , kui andmebaas on valminud isiku intellektuaalse jõupingutuse tulemusel , vastab see teose tunnustele , mille määrab Berni konventsioonist tulenevalt kindlaks iga liikmesriigi seadusandlus , ning andmebaasi kaitstakse autoriõiguse normide alusel . Berni konventsiooniga sarnases sõnastuses on andmebaaside kaitse määratletud ka TRIPS lepingus . TRIPS lepingu artikli <arv> ( <arv> ) kohaselt on andme- või muu materjali kogud , nii arvutiga kui ka muul kujul loetavad , mis nende sisu valiku või korralduse alusel moodustavad intellektuaalse loomingu , kaitstavad autoriõigusega kui teosed . TRIPS lepingu säte , mille kohaselt võivad andmekogu sisuks olla mis tahes andmed või muud materjalid , on kooskõlas Berni konventsiooni artiklitega <arv> ( <arv> ) ja <arv> ( <arv> ) . Berni konventsiooni artikliga <arv> on kooskõlas WIPO autoriõiguse lepingu artikkel <arv> , milles on sätestatud , et andmete ja muu materjali kogusid mis tahes vormis , mis nende sisu valiku või korralduse alusel moodustavad intellektuaalse loomingu , kaitstakse autoriõigusega . Seega kaitstakse teose väljendusvormi , mitte aga ideid , meetodeid jm. Andmebaasid igas vormis , kui nende struktureerimine või töötlemine nõuab originaalset lähenemist , on kaitstavad sellisena , nagu nad on loodud . Nagu Berni konventsioonis ja TRIPS lepinguski ei laiene autoriõiguslik kaitse andmetele või materjalidele endale - andmebaasi sisuks võivad olla täiesti erinevad autoriõiguse objektid - kuid ei tohi siiski kahjustada nende andmete või muu materjali suhtes õigusi omavate isikute huve ( WIPO autoriõiguse lepingu artikkel <arv> ) . Kui andmebaasi sisuks on lihtsalt üksikud andmed , siis ei kaitsta seda kui teost autoriõiguse tähenduses . ANDMEBAASIDE KAITSE EESTI AUTORIÕIGUSE SEADUSE ALUSEL Eesti autoriõiguse seaduse ( edaspidi AutÕS ) § <arv> lõike <arv> punkt <arv> sätestab andmebaasi mõiste , mille kohaselt on andmebaas süstemaatiliselt või metoodiliselt korrastatud iseseisvate teoste andmete või muu materjali kogu , mis on individuaalselt kättesaadav elektrooniliste või muude vahendite abil . Andmebaasi mõiste ei hõlma selle tegemiseks ega käivitamiseks vajaminevat arvutiprogrammi , mis on eraldi kaitstavad ( AutÕS § <arv> lõike <arv> punkt <arv> ) . Andmebaasi mõiste Eesti autoriõiguse seaduses on tuletatud andmebaasi direktiivist lähtudes . Andmebaasi süstemaatiline või metoodiline korraldus tähistab isiku poolt tehtavat loometööd ehk psüühilist jõupingutust andmebaasi koostamisel . Andmebaasi individuaalne kättesaadavus tähendab seda , et andmebaasi osi , s.o. teoseid , andmeid või muud materjali , peab kasutaja üksikult eraldatult kätte saama . Niisugune individuaalse kättesaadavuse põhimõte välistab andmebaasi mõiste alt üksikud helisalvestised , suurema osa audiovisuaalseid teoseid ( näiteks filmid ) ja muud teosed , mida ei saa osadeks lahutada . Multimeediateoste puhul tuleb igal konkreetsel juhul eraldi otsustada , kas selle teose osi on võimalik eraldi , s.o. iseseisvate osadena kasutada või mitte . Kriteerium , mille kohaselt andmebaas võib olla kättesaadav nii elektrooniliste kui muude vahenditega , näitab , et andmebaasid on kaitstud , sõltumata nende väljendusvormist , s.o. sõltumata sellest , kas nad on vormistatud paberkandjal , elektroonilises vormis CD-ROM'il või avaldatud üldsusele arvutivõrgus . <arv> AutÕS § <arv> <arv> defineerib teose mõistele mittevastavat andmebaasi kui teoste , andmete või muu materjali süstemaatiliselt või metoodiliselt korraldatud kogu , mis on individuaalselt kasutatav elektrooniliste või muude vahendite abil . Võrreldes teose mõistele vastava andmebaasi definitsiooniga on peamine erinevus kahte liiki andmebaaside vahel seotud teose mõistele vastava andmebaasi koostamiseks tehtud loomingulise panusega . Vaidluse tekkimisel loomingulisuse olemasolu või puudumise kohta andmebaasi koostamisel peab poolte nõudmisel otsuse tegema kohus . Tuleb märkida , et sui generis õigusega on hõlmatud andmebaasi sisuks oleva materjali ( teosed , andmed või muu materjal ) kaitse , samal ajal kui andmebaaside kaitsmisel autoriõigusega on hõlmatud ainult andmebaasi koostamisel tehtud loomingulise osa vormistus . Seega peab andmebaasi tegija , juhul kui andmebaasi kuuluv materjal on autoriõigusega kaitstav , küsima autoriõiguse valdajalt selle materjali kasutamiseks luba . Kuivõrd originaalsuse nõue välistas enamiku andmebaaside vastavuse teose tunnustele , aga tihti on just andmebaasi tegija teinud olulise investeeringu andmebaasi sisuks olevate andmete kogumiseks , omandamiseks , kontrollimiseks , süstematiseerimiseks või teistele kättesaadavaks tegemiseks , täiendati Eesti autoriõiguse seadust andmebaasi tegijate töö tulemuse kaitsmiseks uue , sui generis kaitset sätestava VIII <arv> peatükiga - Andmebaasi tegija õigused , mis jõustus <arv>. jaanuaril <arv>. AutÕS § <arv> <arv> lõike <arv> punktides <arv>-<arv> on sätestatud juhud , millal andmebaasi õiguspärane kasutaja võib ilma andmebaasi tegija nõusolekuta ja tasu maksmata teha väljavõtteid andmebaasi olulisest osast või seda taaskasutada : <arv> ) juhul kui mitte-elektroonilise andmebaasi sisust tehakse väljavõte isiklikeks vajadusteks ; <arv> ) juhul kui koos andmebaasi avaldamisallika kohustusliku äranäitamisega tehakse andmebaasist väljavõte illustreeriva materjalina õppe- või teadusliku uurimistöö eesmärkidel nende eesmärkidega motiveeritud mahus ja tingimustel , et selline kasutamine ei taotle ärilisi eesmärke ; <arv> ) juhul kui väljavõtte tegemine või taaskasutamine toimub avaliku julgeoleku , haldustegevuse või õigusemõistmise käigus ulatuses , mis vastab ühiskondliku julgeoleku kaitse , haldusfunktsioonide teostamise ja õigusmõistmise eesmärkidele . Mida käsitleda andmebaasi olulise osana , jääb kohtupraktika otsustada . Et see sõltub konkreetse andmebaasi sisust , eesmärgist , sellesse tehtud investeeringutest ja paljudest teistest teguritest , on seda mõistet raske määratleda . Samuti jääb mõiste segaseks andmebaasidirektiivis . WIPO määratleb olulist osa järgmiselt : “ Oluline osa on andmebaasi sisu silmas pidades iga andmebaasi osa , sealhulgas väikeste osade kogum , millel on kvalitatiivselt või kvantitatiivselt oluline tähendus andmebaasi väärtusele ” . Seega tagatakse andmebaasi tegijatele ülalmainitud varalised õigused nende andmebaaside suhtes . Küll aga ei sätesta AutÕS andmebaasi tegijale autori isiklike ( moraalsete ) õigustega sarnaseid õigusi . AutÕS § <arv> <arv> sätestab andmebaasi õiguspärase kasutaja õigused ja kohustused . Andmebaasi õiguspärasel kasutajal on õigus teha väljavõtteid ja taaskasutada igal eesmärgil üldsusele õiguspäraselt avalikustatud andmebaasi sisuks ( hinnates kvalitatiivselt ja/või kvantitatiivselt ) olevaid ebaolulisi osi . Küll ei tohi seda teha korduvalt ja süstemaatiliselt ning viisil , mis pole kooskõlas andmebaasi tavalise kasutamisega . Samuti ei tohi andmebaasi õiguspärane kasutaja andmebaasi ebaolulisi osi kasutades kahjustada andmebaasi sisusse kuuluvate teoste autorite õigusi ega teha tegusid , mis on vastuolus andmebaasi tavapärase kasutamisega või kahjustavad põhjendamatult andmebaasi tegija seaduslikke huve ( AutÕS § <arv> <arv> ) . Andmebaasi tegija õigused tekivad andmebaasi valmimise päeval ehk andmebaasi tegemise lõpetamise päeval . Andmebaasi tegija õiguste kaitse tähtaeg on AutÕS kohaselt <arv> aastat , arvates andmebaasi valmimise päevale järgneva aasta esimesest jaanuarist avalikustamata andmebaasi puhul , või <arv> aastat , arvates andmebaasi esmakordsele avalikustamisele järgneva aasta esimesest jaanuarist avalikustatud andmebaaside puhul ( AutÕS § <arv> <arv> lõiked <arv> ja <arv> ) . Kui enne nimetatud tähtaja lõppu tehakse andmebaasi sisu oluliseks muutmiseks uus , oluline investeering , pikeneb õiguste tähtaeg eeltoodud sätete alusel <arv> aastaks ( AutÕS § <arv>lõige <arv> ) . Vaidluse korral jääb olulise investeeringu mõiste kohtupraktika defineerida . Andmebaasi tegijaks AutÕS tähenduses võivad olla nii füüsilised isikud kui ka äriühingud ( AutÕS § <arv>) , milline käsitlus põhineb andmebaasidirektiivi artikli <arv> sätetel . Seega ei kuulu sui generis kaitse tingimata andmebaasi autorile kui füüsilisele isikule . Õiguste omanikuks on konkreetse andmebaasi tegija ehk juriidiline isik , kelle algatusel ja investeerimisel andmebaas loodi . <arv> RT II <arv> , <arv>/<arv> , <arv>. <arv> RT II <arv> , <arv> , <arv>. <arv> RT II <arv> , <arv> , <arv>. <arv> Official Journal of the European Communities , <arv> , Nr . L<arv>/<arv> . <arv> Anne Kalvi . Andmebaaside õiguskaitsest . // Õigusinstituudi Toimetised ( <arv> ) <arv> , lk. <arv>. Leo Võhandu , TTÜ emeriitprofessor Vaidlused kõikvõimalike eelarvete õiglase või ebaõiglase koostamise ümber muutuvad aiva ägedamaks . Igal tasemel tehtavate ressursside jaotamise tulemuste puhul leiab solvunu alati kõmualti ajakirjaniku , kes on valmis nii õigeid kui ebaõigeid seisukohti trükki panema . Kostab arvamusi , et kõiki rahuldavat jaotamist ei saagi piiratud ressursside korral teha . Jaotusest oma osa saavate objektide jaoks leidub ikka mõni parameetri väärtus , mis konkurentide omadest erineb ja selle ( või nende ) alusel saab alati parajat mürinat teha . Kas see on paratamatus ? Oh ei ! Sellised jaotusprobleemid ei ole ainult sotsiaalteadlaste , poliitikute ja majandusmeeste pärusmaa , vaid appi tuleb võtta igal juhul matemaatika meetodid . Asja klaarimiseks uurime lähemalt päranduse jaotamise probleemi . Põhjuseks on lihtsalt see , et allakirjutanul oli esimest korda selle temaatikaga tegemist juba üle kolmekümne aasta tagasi . Juristid , kes pärandusasjadega tegelevad , peaksid elama üpris korralikult , sest kui asi päranduse jagamisel juba kohtuni läheb , siis ei taha ükski osapool eriti kergesti järele anda . Veniv kohtuprotsess ongi aga see , mis advokaadile kena honorari garanteerib . Alles hiljuti oli raadios naljalugu , milles üks osaline kurtis : “ Noh , näed , me lahutusprotsess lõppes nii , et naine sai suvila ja mina auto . ” Sõber kohe küsima , mis ülejäänud varast sai . “ Oh , see läks kõik advokaatidele . ” Nali naljaks , aga ega see tõde siit eriti kaugel olegi . ( Pärimisest tigedam on tavaliselt suhtlemine lahutusprotsesside korral ! ) Miks sellised protsessid nii vaevased on ? Põhjus on lihtne , raskused peituvad pärijate erinevates subjektiivsetes väärtushinnangutes pärandustompu kuuluvate esemete kohta . Igal pärijal on sama eseme kohta tavaliselt erinev väärtus . Kui ühe pärija hinnangud kokku liita ja talle seadusega eraldatud osa välja arvutada , siis erineb see mingi enda arvates objektiivselt töötava ekspertgrupi hinnangutest enamasti kaunis tublisti . Kas on rohtu , mis avitab ? On küll ! Nende ridade autor kohtus selle temaatikaga esmakordselt <arv>. aastal poola akadeemiku Hugo Steinhausi põneva raamatu “ Matemaatiline kaleidoskoop ” kaudu . Selles oli toodud Steinhausi poolt ajakirjas Econometrica <arv>. aastal avaldatud artikli “ Õiglase jaotuse probleem ” lühikokkuvõte . Kordame siinkohal probleemi sisu . Kolm pärijat pärib nelja jagamatut asja : maja , autot , traktorit ja maali . Oletame , et kõigil on õigus saada pärandusest võrdne osa . Steinhausi raamatus esitati suhteliselt lihtne meetod , mis arvestas erinevust pärijate subjektiivsete hinnangute vahel . On ilmne , et iga pärija hindab esemeid erinevalt ja loodab võrdse jaotuse korral saada ka erineva summa . Märgime , et Steinhaus kasutab lahenduse otsimiseks ( seda selgelt nimetamata ) teise poolaka Knasteri poolt <arv>. aastal avaldatud artiklis antud meetodit . Muide , Knaster nimetab probleemi just Steinhausi poolt <arv>. aastal püstitatuks . ( Vahemärkus . Teise maailmasõja ajal oli Steinhaus tegelikult Poolas valenime kasutades “ põranda all “ . Huvitav , kuidas tal selle probleemi avalikustamine õnnestus ? ) Knasteri meetodi idee on lihtne ja üpris elegantne . Päranduse jagamiseks tehakse ühekordne oksjon . Iga pärija annab kõigile pärandustombu asjadele enda arvates õiglase hinna . Oksjoni korraldaja “ müüb ” iga asja selle eest kõige rohkem pakkunule . Oletame , et hinnad olid sellised . MajaMaalAutoTraktorSummaSoov Ants<arv> Berta<arv> Carl<arv> Näeme , et pärijate Antsu , Berta ja Carli arvamused asjade väärtuste kohta on vägagi erinevad . Seda peegeldab ka iga pärija ooteväärtust peegeldava pärandiosa väärtus veerus Soov . Asjad jaotuvad nii : maja saab Carlile ( <arv> ) , maal Carlile ( <arv> ) , auto Antsule ( <arv> ) ja traktor Bertale ( <arv> ) . Et Antsu ooteväärtus oli <arv> , siis on tal enda arvates veel saada <arv> ühikut , Bertal <arv> ühikut ja Carlil tuleb maksta <arv> ühikut . Kui me nüüd niimoodi tekkivast ühiskassast õigustatud nõuded ära maksame , siis jääb järele veel <arv> ühikut . Jaotame selle ülejäägi võrdselt . Iga pärija saab <arv> ühikut . Kogutulemus on seega : Ants = auto ( <arv> ) + <arv> + <arv> = <arv> Berta = traktor ( <arv> ) + <arv> + <arv> = <arv> Carl = maja ( <arv> ) + maal ( <arv> ) - <arv> + <arv> = <arv>. Iga pärija võitis seega oma alghinnanguga võrreldes <arv> ühikut , mis Antsu puhul teeb <arv>% , Bertal <arv>% ja Carlil <arv>% võitu alglootusega võrreldes . Esimesel hetkel näibki , et tegemist on väga hea meetodiga . Kõik pärijad said tunduvalt rohkem , kui nad lootsid . Ometi paistab siit välja ka Knasteri meetodi rakendamise peamine raskus : Carlil peab olema <arv> ühikut vaba raha teistele pärijatele väljamaksmiseks . See ei tarvitse alati nii olla . Kui ma igiammu selle meetodiga tutvusin , siis tekkis mul loomulik küsimus , kuivõrd sõltub sellise oksjoni tegelik tulemus pärijate objektiivsusest . Kui näiteks Berta oskas ennustada , et Carl pakub <arv> ühikut maja eest , siis ta võiks endapoolset panust tõsta näiteks <arv> ühikuni , saades lisavõitu veel <arv> ühikut ! ( Kontrollige ! ) Asusin asja lähemalt uurima ja saatsin ajakirja “ Nõukogude Õigus ” ka vastavasisulise artikli , mis <arv>. aastal pärast pikka marineerimist avaldatigi saatesõnaga “ Nuputamiseks ” . Juristid ei soovinud nähtavasti meetodi kasutust võimalikuks pidada , sest tollaste seaduste järgi määras pärandustombu väärtuse ekspertide grupp , kelle hinnangud ei tarvitsenud aga ühtida pärijate subjektiivsete arvamuste ja ootustega . Grupi töö tulemuseks on muidugi honorarivoog advokaatide taskusse . Endapoolse panusena näitasin selles artiklis , et pärijal on riskantne mängida teiste pärijate hinnangute oodatavale kõrgusele . Parima tulemuse saab iga pärija siis , kui ta annab esemetele oma subjektiivselt õige hinnangu . See garanteerib suurima võimaliku võiduprotsendi . Viltupanek ja väärtuste tahtlik ülehindamine vähendab tulukust ja võib võitmise asemel viia isegi kaotusteni . ( Väliskirjanduses jõudis sama tulemuseni alles <arv>. aastal H. Raiffa oma raamatus “ The Art and Science of Negotiation ” . Harvard Univ . Press . ) KADEDUSEST Steinhausi-Knasteri meetod on efektiivne , kuid tal on üks puudus , mis jällegi tuleneb inimloomusest . Nimelt võib jagamise lõpptulemus tekitada pärijates kadedust . Miks minu lisavõit ei ole protsentuaalselt sama suur kui mõnel teisel pärijal ? Meie väikese näite korral sai Ants võitu <arv>% , Berta <arv>% ja Carl vaid <arv>% . Sellist pärimise tulemust teada saades võis Carlil tekkida loomulik kadedus , miks teised temast nii palju rohkem võitu said . Kadeduse kaotamiseks ( nn. kadedusvabaks jaotamiseks ) võib õige mitut moodi tegutseda . Näiteks üks variant võiks minu arvates olla kas või selline . Pakkumiste ülejääk jaotatakse vastavalt iga isiku oodatud algsoovile : A= ( <arv> x <arv> ) <arv>+ <arv> + <arv> = <arv> ) = <arv>,<arv> ühikut , B= ( <arv> x <arv> ) /<arv> = <arv>,<arv> ühikut , C= ( <arv> x <arv> ) /<arv> = <arv>,<arv> ühikut . Sellise jaotuse tulemuseks on parajasti <arv>/<arv> = <arv>,<arv> ehk <arv>,<arv> % võitu kõigile asjaosalistele . Knasteri protseduuril on muidugi see pluss , et kogu pärijateseltskonna heaolek saavutab maksimumi , sest iga osaleja saab eseme , mida ta kõige kõrgemalt hindab ( vastastikune kompenseerimine ei muuda summaarset heaolumõõtu ) . Paraku pole Knasteri protseduuri rakendamine alati eriti lihtne , sest mängu tuleb ka kauplemises osalejate hinnangute tõepärasus ja lisaks veel jaotamise võrdsustatavus ( defineerime selle veidi hiljem ) . BRAMSI-TAYLORI JAOTUSMEETOD KAHE PÄRIJA KORRAL Oluline pööre kogu metoodikasse tuli alles <arv>-ndate aastate keskpaiku , kui poliitikateadlane Steven Brams ( New Yorgi ülikool ) ja matemaatik Alan Taylor ( Union College Schenectady , NY ) asusid koostööd tegema selle nii olulise , kuid keerulise teema juures . Koostöö tulemuseks oli kaheastmeline jaotusprotseduur . Et meetodi rakendamisel pole teoreemid tähtsad , siis piirdumegi näidetega , mis peaksid asja olemuse selgeks tegema . Esimene samm seisneb efektiivse ja kadedusvaba leppe saavutamises . Autorid nimetavad seda võtestu osa Häälestuva Võitja meetodiks . Nad eeldavad , et kumbki pärija annab igale esemele arvulised kaalud , mille kogusumma on parajasti <arv>. See on kasulik võte , sest niimoodi elimineeritakse pärijate hinnangusüsteemide tasemeline erinevus . ( Knasteri protseduuri näites oli ju keskmiste ooteväärtuste erinevus üsna suur : Bertal ainult <arv> ja Carlil tervelt <arv> ühikut . ) Bramsi ja Taylori meetodil on aga veel teine etapp . Kui eelmisel sammul saadud jaotus miskipärast ei meeldi kas ühele või mõlemale pärijale , siis võetakse appi veel teine õiglase jaotuse protseduur , nn. võrdelise jaotuse meetod . Tavaliselt läheb seda lisameetodit aga väga harva tarvis . Selgitamegi Häälestuva Võitja meetodit lihtsa näitega Bramsi ja Taylori raamatust . Eeldame , et kahe pärija puhul annab kumbki esemetele sõltumatult väärtuspunkte , nii et nende summa oleks <arv>. ( Need võivad olla nn. avalikult teatatud punktid , mis võivad erineda pärija sisemistest süvahinnangutest ! ) Meie eesmärk on jagada esemed kahe pärija vahel nii , et tekkiv jaotus rahuldaks mõlemat poolt . E<arv>E<arv>E<arv>Punktisumma Ants<arv> Karla<arv> Olgu tegemist kolme esemega E<arv> , E<arv> ja E<arv> , mille puhul on antud kummagi pärija individuaalne punktide jaotus kogusummaga <arv>. Iga eseme puhul on kõrgem hinnang tähistatud rasvase kirjaga . Asumegi esemeid jaotama vastavalt pakkumistele . Algselt saab Ants endale esemed E<arv> ja E<arv> , mis annab talle kokku <arv> + <arv> = <arv> oma punkti . Viimane ese E<arv> läheb Karlale , kes saab sellega <arv> oma punkti . Seega peab Antsult midagi Karlale ära andma , et võrdsust luua . Antsu hinnang on Karla omale lähedasem E<arv> puhul ( <arv>/<arv> = <arv>,<arv> ) , E<arv> annaks suhteks <arv>/<arv> = <arv>,<arv> . Anname siis E<arv> Antsult üle Karlale ja vaatame , mis juhtub . Antsule jääb alles <arv> oma punkti ja Karlale tekib <arv> + <arv> = <arv> oma punkti . Näeme , et asi paranes oluliselt , kuid täielikku tasakaalu pole veel saavutatud . Lõpplahenduse saamiseks otsime tasakaalustavat suhet alfa , nii et tulemuspunktid oleksid kummalgi pärijal võrdsed . Selleks koostame võrdust määrava seose <arv> alfa = <arv> + <arv> ( <arv> - alfa ) + <arv>. Sellest seosest leiame alfa = <arv>/<arv> = <arv>,<arv> . Seega peaks Ants saama <arv>% oma E<arv> hinnangust ehk <arv>,<arv> punkti ja Karla saaks <arv> + <arv> + <arv>.<arv> x <arv> = <arv>,<arv> oma punkti . Näeme , et tasakaal ongi saavutatud ja sealjuures mõlemale poolele kasulikult . Algselt lootis kumbki pool saada <arv> punkti sajast oma hinnangute põhjal , saadi aga tervelt <arv>,<arv> punkti , so peaaegu kolmandik rohkem . Bramsi-Taylori teoreem garanteerib , et niimoodi toimides saame jaotuse , mis on efektiivne - iga jaotus , mis on rangelt parem ühe pärija jaoks , on rangelt kehvem teise jaoks võrdsustatud - Antsu hinnanguväärtus kogutulemusele on sama mis Karla-poolse jaotuse väärtus kadedusvaba - kumbki pärija ei vaheta mingil juhul oma saadud pärandiosa teise pärija paketi vastu . See viimane omadus on eriti kasulik . Näiteks kui Karla hindaks Antsu poolt saadud pärandiosa , siis ta saaks oma hinnangute põhjal selle väärtuseks ainult <arv> x <arv>,<arv> = <arv>,<arv> punkti . Miks ta peaks sellega nõustuma ? Teiselt poolt saaks Ants Karla pärandiosale hinnanguks <arv> + <arv> + <arv>,<arv> = <arv>,<arv> . Nii et kokkuvõttes peaksid mõlemad pärijad olema veendunud , et nad võitsid oma kaaspärijat suhtega <arv> : <arv> ja imestama , et kuidas teine oma hinnangutes nii loll oli . See aga ongi ju tähtis , et iga pärija oleks oma pärandiosaga igati rahul . Nii langeksid ära igasugused kohtuprotsessid . Nüüd tuleb aga üks taolise jaotamise juures väga oluline punkt . Kogu jaotamine on tehtud eeldusel , et kumbki pärija andis esemetele tõesed hinnangud . Kui ühel poolel on eelnevatest läbirääkimistest teada , et vastaspool hindab mõnda eset suhteliselt eriti kõrgelt , siis võib esimene pärija tõsta vastava eseme hinnangut kõrgemale ja sellega parandada oma pärusosa suurust . Kui mõlemad pooled niimoodi arutavad ja vastamisi kavalat ennustamismängu mängivad , siis tekib majandusteooriast tuntud Nashi mäng , milles kummagi mängija tõeväärtusteks on nn. Nashi tasakaalupunktid . See teooria on paraku piisavalt keeruline ning A &amp; A veergudel käsitlemiseks veidi raskevõitu . Et vastaspooli mõistatamismängust kaugemale peletada , on Brams ja Taylor välja mõelnud oma meetodi teise osa , mis peaks kummalegi poolele hoiatav olema ja sundima neid tõeseid alghinnanguid andma . VÕRDELISE JAOTAMISE MEETOD Vaatleme jälle Antsu ja Karla vahelist pärimisprobleemi E<arv>E<arv>E<arv>Punktisumma Ants<arv> Karla<arv> Brams ja Taylor pakuvad jaotusmeetodiks lihtsa võrdelise jaotuse , kus iga eseme puhul saab kumbki pärija oma hinnanguosa vastava eseme koguväärtusest , mida mõlemad pärijad sellele kokku annavad . Nii saaks Antsu osaks <arv>/ ( <arv> + <arv> ) = <arv>,<arv> eseme E<arv> väärtusest ehk <arv>,<arv> x <arv> = <arv>,<arv> ühikut , <arv>/ ( <arv> + <arv> ) = <arv>,<arv> E<arv>-st ehk <arv>,<arv> ühikut ja <arv>/ ( <arv> + <arv> ) = <arv>,<arv> ehk <arv>,<arv> ühikut . Kokku seega <arv>,<arv> + <arv>,<arv> + <arv>,<arv> = <arv>,<arv> oma ühikut . Kui teha samasugune arvutus Karla jaoks , siis saame samuti <arv>,<arv> oma hinnanguühikut . Tegemist on seega kadedusvaba jaotusega , mis on ilmselt ka võrdsustav . Selle meetodi plussiks on suhteliselt nõrk sõltuvus hinnangute tõepärasusest . Tohutuks miinuseks aga see , et pärandiosa suhteline määr on tükk maad madalam kui häälestuva jaotamise korral . Kuidas aga nende esemete võrdelist jaotamist praktiliselt korraldada ? Auto korral on mõeldav , et enne oksjoni läbiviimist lepivad osapooled kokku , mida näiteks suhtes <arv> : <arv> jaotamine tähendab . Näiteks nii , et üks kasutab autot kolm aastat , seejärel saab omanikuks teine pärija . Kuna siin pole ette teada , kes vastava eseme saab , siis võib arvata , et osaluse õiglase jaotusliku kasutamise süsteemi paikapanek ei tohiks väga raske olla . Teine võimalus on esemed maha müüa ja saadud raha jaotada vastavalt võrdsussuhtele Seda võimalust tuleb kindlasti siis kasutada , kui ese või selle kasutamine pole kuidagi jaotatav . Senine praktika on näidanud , et meetodi teise osaga “ hirmutamine ” aitab tavaliselt juba esimeses osas saavutada tõeseid hinnanguid . Pealegi ei ole pärijatel ju enne hinnangute andmist teada , millised on konkurendi usutavad nivood . Optimistlik ülepakkumine annab aga tõestatavalt kehvemaid tulemusi kui tõeste väärtuste omistamine . KOLM JA ENAM OSALIST Churchilli ja Nicholsoni memuaaridest on soovi korral võimalik leida , millisel viisil toimus Stalini ja lääneliitlaste vahel mõjupiirkondade jaotamine II maailmasõja lõpu eel . Äge kauplemine käis Balkani ümber . Praegused tulised sündmused Vahemere piirkonnas näitavad , et tollaste jagamiste kaudmõjud mängivad veel praegugi olulist rolli . Bramsi ja Taylori raamatus on näidatud , et proportsionaalne jaotamine ei garanteeri ei efektiivsust , võrdsust ega kadedusvabadust . Parimaks lahendusviisiks on Häälestuva Võitja meetod , kui sellele enne hinnangute andmist lisada pooltevaheline lepe ühe jagamatu objekti võrdsustava käsitlemise kohta . Kõik osalised teavad , et selle objekti võib saada ainult üks osaline . Niisugune võimalus surub pooli saavutama õiglast eellepet . Vastava protseduuri väljatöötamine on suhteliselt lihtne töö , mille jätame huvilise lugeja teha . Analoogilised meetodid on kasutatavad ka valimiste läbiviimisel . Valimistest on väga põneva raamatu kirjutanud üks meie kuulsamaid poliitikuid prof. Rein Taagepera . See peaks raamatukogudest suhteliselt kergesti leitav olema . Peab kohe lisama , et valimiste korraldamisel tekib terve rida paradokse , kus võitjaks osutub kandidaat , keda õigupoolest ükski partei vastaval kohal näha ei tahtnud . Et meil on valimised tulemas , siis võiks edaspidi ehk lühidalt peatudagi valimismatemaatikal .  Koodinäidete roll programmeerimise õpetamisel KOOLITUS <arv>-<arv> Nagu igas õppetöös , nii on ka programmeerimise õppimisel näited tarvilikud , sest need aitavad teooriat siduda praktikaga võimaldavad mõnikord probleeme ja lahendusi selgemalt ning lühemalt välja tuua on konkreetsema mõtlemisega õppijale kergemini arusaadavad on võrreldes jutustava tekstiga kergemini mõistetavad teisest keelekeskkonnast tulnud lugejale . TAUST Koodinäidete hulk ja roll programmeerimisalases õppematerjalis sõltub märgatavalt nii teemast kui ka autori kirjutusstiilist . Teoreetilistes ja üldistavates käsitlustes on nende roll väike , nt [ <arv> ] . Näidete osa on tähtis konkreetse keele või algoritmi õpingutel , moodustades vahetevahel kogu materjali skeleti [ <arv> ] , mille külge teemade seletamiseks , ühendamiseks ja silmaringi laiendamiseks lisatakse teoorialõike . KASUTUSVALDKOND Näidete põhjal õppimine pakub traditsioonilisele teooriapõhisele hierarhilisele süsteemile alternatiivi , võimaldades konkreetsete olukordade analüüsi abil liikuda üksikult üldisele . Ehkki selline lähenemine võib tunduda taunitavalt kaootiline , sobib ta nii noortele õppijatele kui ka killustunud programmeerimistehnoloogiamaailmas lahenduste otsijatele . Algajate puhul on tähtsam võimalus kasutada lihtsat töötavat süsteemi lähtekohana edasistel katsetustel . Kogenud programmeerija suudab ka veidi keerukamat koodi jälgides tabada üldisemaid seaduspärasusi . Abstraktsema mõtlemisega õppijale piisab mõistmiseks seletavast loengust või kirjeldavast materjalist . Samateemalise näite lisamisel aga suureneb materjali mõistvate inimeste arv tunduvalt , sest nii seletuse kui näite poolt tuleva abi tulemusena suudetakse ületada taipamiseks tarvilik künnis . NÄIDE ÕPPIMISE ALUSENA Töötavast näitest alustades võib alati kindel olla , et vähemalt etteantud kitsendavate tingimuste korral lahendus toimib . Seda polegi nii vähe . Näidet muutes on võimalik pidevalt kontrollida , millisest hetkest alates ei vasta tulemus oodatule , ning teha kindlaks kasutatavad piirid . Nii on võimalik pisiosi varieerides süsteemi tundma õppida ning omandatud põhimõtete alusel edaspidi tarvilikke tulemusi saada . Seejuures peab jälgima , et näidetes kasutatavad lihtsustused oleksid läbi mõeldud ning poleks praktikas rakendatavuse seisukohalt liiga suured . Oskuslikult valitud näidete ning mittestandardsetest erijuhtudest hoidumise puhul aga õnnestub küllalt lihtsa näidetekomplekti varal omandada võtete tuumik , mille külge edaspidiseid teadmisi kinnitada . Selline tuumik on eriti tähtis nooremate ning väiksema üldistusvõimega õppijatele algteadmiste omandamisel , kuid on kasulik ka kogenumate õppijate ja keerulisemate teemade puhul . HEA NÄITE OMADUSED Näite juures pean tähtsaks , et see oleks piisavalt lü hike ning haaratav , kuid samas terviklik ja töö tav . Selliste näidete kasulikkust olen märganud mitme õppija juures - eriti algõppes aitab haaratav näide näha puude taga metsa . Nii on mõnigi märganud ja tundnud rohkem julgust keelte õppimisel , kus lihtnäidete käivitamine liialt keeruline ei tundu . Basicu print “ Tere ” on pea kõigile arvutikaugetele inimestelegi mõistetav . Pascali begin writeln ( 'Tere' ) ; end. võtab juba mõnegi ettevaatlikuks . Et Java-keelne esimene tervitus ekraanile tuua , on vaja juba eri ettevalmistust , et õpihimu kaduma ei läheks : public class Tervitus ] public static void main ( String[ ] argumendid ) ] System.out.println ( “ Tere ” ) ; } } See tundub enamasti olevat rohkem , kui õppiv inimene korraga vastu võtta suudab . Toodud näidetes on piirid seadnud keel , veidi põhjalikumaid tekste koostades tuleb aga jälgida , et ilustused jälgitavust segama ei hakkaks ning õnnestuks vahendi poolt pakutud lihtsust säilitada . begin writeln ( '********' ) ; writeln ( '* Tere *' ) ; writeln ( '********' ) ; end. on juba märgatavamalt keerukam esmapilgul mõista kui eeltoodud lühem Pascali-tervitus . Kui algne on suudetud enese jaoks lahti mõtestada , siis on loomulik , et liigutakse keerukamate näidete poole , kuid arvutiõpetaja ei tohi järele anda kiusatusele alustusnäidetele vürtsi lisada , kartes , et näide tundub muidu liialt lihtne ja labane . Siinsed lõigud on toodud algõppest , kuid sama kehtib iga uue teema juurde minekul . Pole olemas liialt lihtsat nä idet , mida ei vää riks alustuseks lä bi mõ elda . Taibukate õppijate korral võib sellest kiiresti üle minna , kuid nii jääb igaühele mingi pidepunkt ja kõrgemal tasemel ebaõnnestumise korral võib sellest lühikesest koodilõigust hakata taas rakendust looma , ilma et peaks kord rongist maha jäänuna kogu teemaga algusest peale liituma . Olen püüdnud üliõpilaste tarvis muude näidete kõrvale pea iga teema kohta koostada kuni mõneteistkümnerealise algnäite . Hoolimata sellest , et mõnikord näib see lapsik , on just sellised puhtad põhjad kõige paremini sobinud õppijatele oma ideede lisamiseks . Lühidusest aga tähtsamgi on terviklus . Kui veidi pikemat koodi on võimalik mõninga analüüsi tulemusena mõtestada , üldistada ja haarata , siis mõne käivitamiseks või mõistmiseks olulise komponendi kõrvalejätt seab eriti iseõ ppija raskesse olukorda , kuid toob muilegi muresid . Paljast Pascali writeln ( 'tere' ) ; taolist lõiku tasub üksinda näitena teksti tuua vaid siis , kui võib kindel olla , et õpilane tunneb konteksti , millesse käsklus kuulub , ning saab iseseisvalt hakkama selle kompileerimise ja käivitamisega . Et aga õpetaja arvates teevad pealtnäha labased teemad küllalt kaua õpilastele peavalu , peab õpilaste teadmiste eeldamisega ettevaatlik olema , eriti kui on võimalik suhteliselt väikese mahulisaga jätta kood terviklikuks . KÄ IVITATUD NÄ IDE Tore , kui näitele on lisatud ka selle töö vä ljund . Nii on võimalik kergemini ka ilma arvutita kujutleda , milline võiks olla tulemus ; samuti arvutil võrrelda , kas tulemus vastab oodatule . Sel juhul peab aga edukaks kasutamiseks loodud väljund olema kindlasti sellesama koodilõigu , mitte ilustatud variandi tulemus . Esimesel juhul on võimalik märgata ka nüansse , mille abist muul juhul tuleb loobuda ning mis võivad mõnikord olla vähemalt niisama tähtsad kui näite enesega edasiantav sõnum . Nii on ilustatud väljund lisatud näiteks Tomcati-nimelist veebiserverit tutvustavate näidete juurde [ <arv> ] , mis nõuab algajalt pikka analüüsiaega või head abilist toimimise mõistmiseks . Koodi paigutamisel raamatusse tasub proovida enne selle töövõimet masinal - liialt kergesti kipuvad sisse tulema trü kivead ning üksainus vale märk võib algajale tundidepikkuseks takistuseks saada . KOMMENTAARID Kommentaaridega tasuks lühemate näiteprogrammide juures kokkuhoidlik olla . Kui võimalik , siis on algajale lugejale parem lisada eraldiseisev selgitav tekst koos vajadusel sinna kopeeritud koodilõikudega , mitte aga pikad kommentaarid koodi sees . Põhjus ikka sama mis eespoolgi - hoides näite lühemana , tundub see lihtsam ja kergemini haaratav , mis omakorda soodustab mõistmist ja kasutamist . Pikalt kommenteeritud koodi puhul võib kuluda märkimisväärne osa ajast eraldamaks , milline osa koodist on mõeldud otse käivitamiseks ning milline selgitusteks , isegi kui erinevus on selgelt välja toodud . Alles juhul , kui kood on juba nagunii lehekülgedepikkune ning korraga pole seda võimalik haarata , on kasulik kommentaarid koodi sisse kirjutada . Siis on kõik ühes kohas koos . KOKKUVÕTTEKS Viie aasta jooksul programmeerimist õpetades ning sellealaseid materjale kirjutades , neid tundides kasutades ja tulemusi analüüsides olen jõudnud järgmistele järeldustele : lühikesed koodinäited on kergemini haaratavad käivitamisvalmis näited aitavad mõista konteksti ja vältida tehnilisi probleeme näide ja tema väljund käivad kokku kommentaarid olgu võimalikult lühikesed  Toomas Kirt , tehnikamagister , Vaimu modelleerimine Käesoleva kirjutise eesmärgiks on tutvustada põgusalt viimaseid arenguid tehisintellekti loomisel ning püüdeid ja mõtteid hinge/vaimu arvutis modelleerimise vallas . Kirjutise aluseks on valdavalt James S. Albus'i ja Alexander M. Meystel'i raamat “ Engineering of Mind ” , mis ilmus <arv>. aastal kirjastuse Wiley seerias Series on Intelligent Systems . Et olen oma töös kasutanud ja uurinud tehisnärvivõrke , mis osaliselt matkivad inimaju mõningaid funktsioone , siis olen püüdnud ka laiemalt tutvuda inimese mõtlemisprotsessiga . Antud raamat oli esimene minu kätte sattunud kokkuvõtlik teos , mis püüab anda viiteid kogu ajutegevuse modelleerimisele arvutis . Enamik raamatust on pühendatud reaalajas toimivatele kontrollsüsteemidele , mis oleksid ise võimelised oma tegevusi juhtima . Kuid kahtlemata on märkimisväärselt huvitavad esimesed peatükid , milles on põhitähelepanu pööratud inimese ajus toimuvatele protsessidele ja nendest arusaamisele . Autorite poolt pakutud mudel ei ole kindlasti veel lõplik , sest töö inimvaimu uurimisel jätkub . Raamatu kandvaks ideeks on vabanemine dualismist/kahesusest , mille aluseks on kaks teineteisest sõltumatut alget - mateeria ja vaim ( Descartes'il res extensa ja res cogitans ) . Kõnealune idee on kandunud ka tänapäeva , kuid üha enam laienevad teadmised inimese enese ülesehitusest aitavad aru saada inimese tegelikust olemusest . Nagu pealkirjaski mainitud , on tegemist vaimu modelleerimisega . Aga mis on vaim ? Vaim ei ole füüsiline asi . Pole kahtlustki , et see on erinev meie ajust , nagu ka elu on erinev meie kehast . Vaim on protsess , nagu ka elu on protsess . Vaimu protsess leiab aset meie ajus , nagu elu protsess toimub meie kehas . Võrdlusena võime näiteks öelda , et vaim on protsess , mis toimub ajus , nagu programm on protsess , mis jookseb arvutis . Tänapäeval uuritakse väga intensiivselt mõlemat , nii tehis- kui ka naturaalset/looduslikku intellekti . Nendes valdkondades on jõutud nii kaugele , et see , mida ammust ajast peale on müstikasse kuuluvaks peetud , on tõsise teadusliku uurimistöö objektiks . Mida enam laieneb teadmine inimvaimu ülesehitusest ja toimimisest , seda vähem jääb ruumi uskumusteks ja müütideks . Usume ju nimelt seda , mille olemasolu ei saa kontrollida . Vaatamata edusammudele intellekti uurimises , ei ole märkimisväärset murrangut siiski veel toimunud . Kuigi parimad algoritmid arvutites suudavad võita malemaailmameistreid , ei suuda arvuti veel siiani jäljendada kuueaastase lapse arusaamist kõnest . Seega ei ole arvutid veel arenenud piisavalt intelligentseks . Intellekti definitsioonina võiks antud kirjatükis käsitleda süsteemi võimet käituda otstarbekalt tundmatus keskkonnas , kus otstarbekas käitumine on selline , mis suurendab eesmärgi saavutamise tõenäosust . Bioloogiliste olendite põhieesmärgiks on oma geenide levitamine . Seda saab vaadata nii füüsilisest kui ka vaimsest vaatevinklist . Viimasel juhul on tegemist ideede ja tõekspidamiste levitamisega . Nagu juba definitsioonis öeldud , annab kõrgem intellekt vähem intelligentsetega võrreldes eesmärkide saavutamisel teatud eelise . Mida kõrgem intellekt , seda paremini suudab indiviid oma tegevusi ette planeerida ja hinnata , mida erinevad lahendusteed endaga kaasa toovad . Intellekti võib suurendada õppimise kaudu . Elusloodus on õppinud läbi evolutsioonilise arengu ning teadmiste omandamise mehhanismiks on olnud muteerumine ja looduslik valik . Looduslik valik on võimaldanud jätkata nendel , kes on paremini kohastunud ümbritseva keskkonnaga . Üksikud isendid omandavad teadmisi protsessi abil , mis talletab ajus eluajal omandatud kogemust . Intelligentsuse saavutamiseks on vaja omandada õppimise läbi kogemust/teadmisi . Intelligentsed süsteemid suudavad vahetada informatsiooni kommunikatsiooni teel . Suhtlemine toimub keelt kasutades . Keel koosneb märkidest , milleks võivad olla kas või kehalised märguanded , kuid oluline on , et nii sõnumi edastaja kui ka vastuvõtja jaoks tähendaks edastatud märk sama sõnumit . Keele tekkeks on vaja , et osaleksid vähemalt kaks indiviidi ja nendel oleks midagi teineteisele öelda . Raamatu autorid käsitavad aju kui arvutavat organit , mis suudab tajuorganite kaudu sisestatava informatsiooni alusel teha valikuid , saavutamaks seatud eesmärke . Kui vaatame aju detailsemalt , siis põhimõtteliselt võime lugeda inimaju arvutusmasinaks , mis nagu arvutigi arvutab binaarselt . Iga neuron ajus saab olla kas aktiivne või mitteaktiivne . Aktiveerumise korral annab närvirakk oma väljundite kaudu aktiveerumissignaali edasi järgmistele neuronitele ning vastavalt nende lävefunktsiooni väärtusele nad kas ergastuvad või mitte . Ergastumiste ahela tulemusena antakse kehale signaal sisendile vastavaks reaktsiooniks . Seega on inimaju kontrollisüsteem , mis arvutab tegevussamme , mida peame ette võtma soovitud eesmärkide saavutamiseks . Inimaju on ka koht , kus talletatakse varasemat kogemust ehk teadmist . Teadmised võivad olla väga mitmesugused , näiteks eneseteadvus , kogemustega saadud teadmised ( pliit on kuum ) , oskused ( suusatamine ) , informeeritus ( kell on üks ) , uskumus ( päkapikud toovad kommi ) . Teadmisi loovad ajus sisendsignaalid . Aju ja vaim selle sees on mõjutatud kahte tüüpi signaalidest - sisemistest ja välistest . Sisemised on need , mida tekitab aju ise , nagu näiteks nälg , hirm , armastus ja muud tunded , mis on vajalikud selles maailmas toimetulekuks ja valikute tegemiseks . Välised signaalid on need , mis jõuavad ajju meeleorganitest ja kirjeldavad ümbritsevat keskkonda . Saadud informatsiooniga loob aju dünaamilise maailma ja selle toimimise mudeli . Tajuorganitest saadud informatsioon on vahetu ja seda võrreldakse eelnevalt ajus talletatud informatsiooniga , et anda tajutavale sümboolne tähendus ning see klassifitseerida . Kuidas aga aju käsitleb sümboolset informatsiooni , on hetkel veel kaunis selgusetu . Tajumine võimaldab aru või teada saada , kuidas maailm näeb välja meeleorganite vahendusel . Tajumine võimaldab koguda ja kinnitada teadmisi ning korras hoida sisemist ettekujutust välisest maailmast . Informatsiooni talletatakse raamatu autorite hinnangul kaartide , piltide ja väärtuste jadadena ning see on klassifitseeritud hierarhiliselt . Näiteks nägemisel tekib objektist kahte liiki infot - mis asi see on ja kus see asub . Ajus on konkreetsed piirkonnad , mis tegelevad teatud liiki informatsiooni töötlemisega . Näiteks asuvad atribuudid , millega kirjeldatakse loomi , samas ajuregioonis , mis on seotud kuju , värvi ja liikumisega . See on tehtud kindlaks moodsa tehnoloogiaga , mis võimaldab mõõta erinevate ajuosade aktiivsust teatud situatsiooni esitamisel katsealusele . Tajumise puhul on oluline tähelepanu ja selgusele jõudmine selles , mis on tähtis . Iga intelligentse süsteemi jaoks on kõige tähtsam see , mis toimub siin ja praegu . Mida kaugemal , seda ebaolulisem objekt/ sündmus inimesele näib . Et tajuorganitega ei ole võimalik tajuda ümbritsevat maailma kogu selle mitmekesisuses , siis pööratakse tähelepanu peamiselt olulistele detailidele . Seetõttu on ka näiteks inimeste näpuotsad palju tundlikumad kui ülejäänud osa käest . Nagu juba eespool mainitud , püüavad intelligentsed süsteemid saavutada seatud eesmärke . Eesmärk on soovitud tulemus või maailma olek , mida käitumisega on kavas saavutada või säilitada . Eesmärgi otsimine on intelligentse käitumise peamine põhjus . Peaeesmärk on intelligentse süsteemi olemise aluseks . Intelligentne süsteem ei rända sihitult maailmas ringi ega reageeri ümbritsevale keskkonnale lihtsalt refleksidega , vaid toimib nii , et kõige otstarbekamalt saavutada seatud eesmärki . Seega on intelligentsetes süsteemides peamine eesmärk . Kui eesmärk on seatud , siis peab toimima mingi süsteem , mis võimaldab seatud eesmärki saavutada . Peab toimuma planeerimise ja valikute tegemise protsess . Kui on näiteks soov minna poodi , siis on see kirjeldatav kaunis lihtsalt : “ mine poodi ja osta süüa ” , ent tegelikkuses on sellega seotud hulk tegevusi , mida on samuti vaja planeerida - mine poodi , otsi toit , osta toit , tule tagasi . “ Mine poodi ” omakorda tähendab , et peame riietuma , ukse avama , õue minema jne. “ Riietumine ” tähendab , et peame teadma , mis ilm õues on jne. “ Ukse avamine ” sisaldab motoorseid tegevusi - võtme võtmine , lukuauku asetamine ning keeramine , mida teeme instinktiivselt ilma sellele tegevusele palju mõtlemata . Kui vaatame poest söögi ostmise plaani , siis näeme , et tegemist on hierarhilise planeerimisega . Iga tegevus sisaldab omakorda alamtegevusi , mis jagunevad kuni instinktiivsete tegevusteni välja . Valikuid aitavad teha emotsioonid , mis on kui bioloogilised kulufunktsioonid ning võimaldavad hinnata , kui palju mingi tegevusega endale heaolu luuakse . Uurimustes on kindlaks tehtud <arv> emotsiooni tüüpi . Näiteks on soov valida välja söögipala , kuid ninaga tajutav lõhn annab märku , et toit ei ole kõige värskem ja selle söömisega ei ole võimalik oma heaolu parandada , ning see jääbki söömata . Tehisintellekti loomisel on oluliseks küsimuseks , kuidas anda masinale eneseteadvus , mida võime ka hingeks nimetada . Inimeste mõtetes on ikka veel elujõus dualism ja paljuski peetakse teadlikku vaimu ( hinge , karmat ) millekski muuks kui ajutegevuse tulemiks . Lihtne hüpotees teadvuse kirjeldamiseks oleks , et teadvus esineb igas süsteemis , mis on piisavalt keerukas , esitamaks ümbritseva maailma keerukust ja dünaamikat . Eneseteadvus on igas süsteemis , mis lisab oma sisemisse maailmamudelisse iseenda objekti . Kui üritada aru saada mõtlemisest , siis mõtlemisprotsessi võib käsitada kui vestlust mina-objektiga sisemises maailmamudelis . Selline oleks lühike kirjeldus olemasolevast ( loomulikult on ka nende ridade kirjutamisel toimunud maailmapildi oluline avardumine ) teadmisest , kuidas inimvaim toimib . Raamatu autorid on antud teadmise põhjal loonud süsteemi , mis mingile sõidukile paigaldatuna suudab planeerida oma tegevust , jõudmaks sihtmärgini , ning takistuste ilmnemisel teeb ka plaanidesse muudatusi , et eesmärki saavutada . Kahtlemata on see alles keerulisemate süsteemide väljatöötamise algus . Aju sisaldab umbes <arv>neuronit , millest enamik saab informatsiooni tuhandetest sisenditest sünapsidest ja väljastab sõnumeid sadadele väljunditele sagedusega <arv> Hz . Täpne aju mudel teeb umbes <arv> <arv> operatsiooni sekundis . Kuid funktsionaalne samaväärsus ajuga on võimalik saavutada palju madalama arvutustasemega , sest bioloogilises ajus toimivad neuronid on mürarikkad ja ebausaldatavad . Seega hinnatakse , et aju arvutusväärtus on umbes <arv> <arv> operatsiooni sekundis . Kui iga sünaps suudab talletada ühe biti informatsiooni , siis võiks aju mälumaht olla ideaaljuhul umbes <arv>baiti . Hinnatakse , et päevas sureb umbes <arv> <arv> ajurakku . Sellest tulenevalt võib aju mälumahuks võtta paar suurusjärku madalama arvu <arv>baiti ( <arv> Gb ) , mis on juba hetkel arvutites olemas . Kui vaadata viimase aja arenguid protsessorivõimsuse suurenemises , siis hinnanguliselt <arv> aastaga on võimalik saavutada kümnekonna tavalise lauaarvutiga samasugune arvutusvõimus , nagu seda on inimajul . Nagu näha , on vähem kui inimpõlvega võimalik luua inimese ajuga samaväärset arvutusvõimsust omav tehisarvuti . Kui selle ajaga tehakse ka oluline murrang tehisintellekti väljatöötamises , siis on oodata samasugust murrangut meie maailmapildis ning seega oleks vaja luua ka teatav ühiskondlik valmisolek selleks murranguks : miski meie enda loodu saab meiega intellektilt samaväärseks , kui mitte veelgi võimekamaks . Seega tuleb end harjutada mõttega , et järgmise põlvkonna moodustavad mitte ainult meie bioloogilised järeltulijad , vaid ka inimeste poolt loodud tehislikud järeltulijad , kes kannavad meid ja meie ideid edasi oma maailmamudelis .