kirjak	tea_AA_00_5.tasak.ela	Paul Leis Äri-intellektitehnika Äri-intellektitehnika - business intelligence - on üks kuumemaid suundi tänapäeva infotehnoloogias . Pole ka imestada - e-kaubanduse , e-panganduse ja muude e-teenuste tormiline areng võimaldab firmadel saada tohutu hulga kliendi- ja tehinguandmete omanikuks . Kuidas aga neid andmeid firma huvides ( kõige tõhusamalt ) ära kasutada ? Missugused “ tagatoatehnoloogiad ” ( serveritehnoloogiad ) tagavad kliendikeskse teenindamise , olemasolevate klientide ustavuse , uute klientide värbamise , kasumlikud tooted , sisemiste ja väliste nuritegude avastamise ning nende vältimise jmt ? Hõbekuulina ( silver bullet ) nähakse siin “ äri-intellektitehnikat ” . Mis on äri-intellektitehnika ? Võib arvata , et tegemist on intellektitehnika ( artificial intelligence ) meetodite rakendamisega ärivaldkonnas . Ja nii see ongi . Äri-intellektitehnika on intellektitehnika meetodite ja tehnoloogiate kompleks otsustustegevuse toetamiseks ärivaldkonnas , mis : võimaldab IT-süsteemidel dünaamiliselt kohanduda muutuva ( äri ) keskkonnaga toetab ( arukate/tõhusate ) otsuste tegemist mittetäielike ( isegi vasturääkivate ) andmete puhul Äri-intellektitehnika toetub andmehoidlatehnoloogiale ( data warehousing ) - iseenesest mõistetavalt vajavad intellektisüsteemid andmeid , mille alusel analüüse/järeldusi teha . Pisut lihtsustatult võime traditsiooniliste infosüsteemide ja intellektisüsteemide olemust/erinevust iseloomustada järgmiselt . Päring ( query ) traditsioonilises infosüsteemis annab vastused küsimustele , mida me oskame/saame baasiohjekeeles ( nt SQL ) formuleerida . Näiteks tehingusüsteemis : “ leida klient Jüri Koti viimane (kinnisvara)tehing ” või andmehoidlas/analüüsisüsteemis : “ leida Rakvere kontori <arv>. ja <arv>. aasta käivete erinevused kvartalite lõikes ” . Intellektisüsteemid võivad aga anda vastuseid ka neile küsimustele , mida me baasiohjekeeles ei oska/ei saa formuleerida ( nt “ missugused tegurid mõjutasid <arv>. aasta kasumit Pärnu maakonnas ? ” või “ leida rahapesukahtlusega kliendid ” ) . “ Vastused formuleerimatutele küsimustele ” toovad esile aga andmetes peituvad seosed , mis võivad osutuda eriti huvitavateks/väärtuslikeks , olla aluseks uutele äriideedele , -toodetele , lubada ette näha hädaolukordi ( ründeid , tõrkeid jmt ) jne. Andmekaevandamine - seoste avastamine andmetes - on äri-intellektitehnika üheks olulisemaks tehnoloogiate kompleksiks . Tähtsamad andmekaevandamise tehnoloogiad on : otsustuspuud ( decision trees ) (tehis)närvivõrgud ( neural nets ) kobardamine ( k-nearest neighbors and clustering ) reeglipõhised tehnoloogiad ( rule based technologies ) statistikapõhised tehnoloogiad ( statistical technologies ) geneetilistel algoritmidel põhinevad tehnoloogiad ( genetic algorithms based technologies ) Igal kaevandamistehnoloogial on oma parim kasutuspiirkond , mistõttu arvestatavad intellektitehnika süsteemid/tooted toetavad enamikku loetletud tehnoloogiatest . Selles A &amp; A numbris tutvustab A. Meister tehisnärvivõrke . Loodame peagi ka teisi andmekaevandamistehnoloogiaid tutvustada . Pole valdkonda , kus andmekaevandamist rakendada ei saaks , populaarsemateks kasutusaladeks on tänapäeval : juhtide infosüsteemid ( Management Information Systems , MIS ) kliendisuhete haldussüsteemid ( Customer Relationship Management , CRM ) - ülikuum rakendusala , klientide segmenteerimine on mõnedel firmadel võimaldanud hiilgetulemeid saada juba klassikalised pangandusrakendused : rahapesu pangakaardipettused krediidihaldus riskihaldus energiasüsteemide/-võrkude diagnostika Andmekaevandamise süsteemide andmeesituse ja -vahetuse standardite ( nagu ikka : eri firmade toodete integreeritavuse tagamiseks ) loomise eest hoolitseb rahvusvaheline töörühm - Data Mining Group ( DMG ) , mille liikmeteks on Oracle , IBM , NCR , SPSS ja Magnify . Loetleme ka mõned tuntumad äri-intellektitehnika tooted : Enterprise Miner ( SAS ) DARWIN ( Oracle ) IWS ( Sybase ) BusinessMiner ( Business Objects ) Knowledge Access Suit , Data Mining Suit ( Information Discovery ) Intelligent Miner for Data V<arv>R<arv> ( IBM ) Clementine , AnswerTree , Neural Connection ( SPSS ) COGNOSuit , KnowledgeSTUDIO ( Cognos ) PATTERN : Score ( Magnify ) TeraMiner ( NCR ) Märgime veel , et TTÜ emeriitprofessor Leo Võhandu on juba aastakümneid äri-intellektitehnikaga tegelenud , kuigi esimesed paarkümmend aastat ta ( ilmselt ) ei teadnud , et see , millega ta tegeleb , on äri-intellektitehnika , Lõpetuseks soovitus tulevastele magistrantidele/doktorantidele : ( äri- ) intellektitehnika on suurepärane valdkond väitekirjade kirjutamiseks nii matemaatikutele , infotehnoloogidele kui ka ökonomistidele , miks mitte aga ka meedikutele , bioloogidele , juristidele , pedagoogidele jt. Kalle Tammemäe IT-Kolledž - eesti uusim kõrgkool Olles juba mitmeaastase osalusega A &amp; A riistvararubriigi eest vastutaja , tuli üllatusena senisest temaatikast väljuv pakkumine - kirjutada A &amp; A avaartikkel . Nimelt kirjeldas TTÜ professor Tanel Tammet k.a. teises numbris ühise tähelepanu objekti , Infotehnoloogia Kolledžit ( ITK ) , juba piisava põhjalikkusega ja tulevikku vaatavalt . Teiselt poolt , praegu saab juba toimunule toetuda , teema on kuumemgi kui pool aastat tagasi ning reaktsioonienergiat tuleb aina juurde . Vahepealsete nappide kuudega on saanud teoks see , mis kevadel oli vaid mõtetes ja paberil . ITK elab regulaarelu õppekava täitmise nimel , selle <arv> üliõpilast teevad igapäevatööd oma oskuste ning teadmiste arendamisel ja peenhäälestamisel . Toimib ning keerustub tugistruktuur , jõudes oma keerupaaride , torude ja kanalite kaudu iga tegusa rakuni . Arengustsenaariumide hulk katab kõike , alates jooksvast päevast läbi täismõõtmete saamiseks vajalike tegevuste kuni <arv>-<arv> aasta kauguse oodatava tagasisideni , säilitades lähtes pärandatud dünaamikasädet . Nüüd , kus neli õppenädalat on möödas , hakkab moodustuma ITK tudengkond kui iseseisev tunnetuslik üksus . Selle esinduse valimised toimuvad oktoobri lõpus ning seejärel peaks saama stiihiline sisemine struktuur seadusliku väljundi . Eks ITK tudengitel on raske - pole vanemaid eeskujusid kohapealt võtta . Oma tulevikku õppeasutuses , rääkimata tulevases töökohas , tunnetatakse veel hägusalt . Hiljuti läbi viidud ankeetküsitlus andis siiski väga positiivse tulemusega tagasiside - vaatamata paratamatutele turvameetmetele on ITK käivitunud sisemiselt ja väliselt avatud kõrgkoolina , mida iseloomustab hea tehniline varustatus ning kõrge kvalifikatsiooniga õppejõud . Probleemid , mis ITK-d kummitavad , on samad mis teistelgi kõrgõppeasutustel . Professionaalsete õppejõudude-praktikute nappus , ruumi- ja finantsküsimused . Olles seadnud sihiks anda praktikale orienteeritud diplomiharidust , vajab ITK eelkõige õppejõude , kes on end teostanud või teostavad samal ajal IT-tööstuses . Paraku loodi ITK just nimelt selleks , et IT-valdkonnas olevat spetsialistide põuda leevendada ! Loomulikult on ITK erialaõppejõudude kaadri kujunemisse projekteeritud tulevikus oma vilistlaste kaasalöömine . Kuna esimest lendu tuleb veel oodata kaks ja pool aastat , millele lisandub paar aastat arvestatavate töökogemuste saamiseks , siis tuleb seniks leida ja ära kasutada kõik muud koostöövõimalused . ITK tegevus on lepinguliselt põimitud Tallinna Tehnikaülikooli ja Tartu Ülikooliga , seejuures on koostöö arendamisel peetud silmas suuremat tulemust , kui on võimalik saavutada eraldi rabeldes . Ühe väljundvormina valmistab ITK ette tulevasi kraadiõppureid ülikoolidele . Nõutav eelkvaliteet kraadiõppeks tähendab TTÜ ja TÜ aktiivset osalemist ITK õppekavade koostamises ja teostamises . Teiselt poolt on kõrgkoolide õppejõudude taseme taastootjaks teadustöö , milleks vajalik teadmine ja baas on ajaloolis-ratsionaalselt koondunud ülikoolide juurde . See tähendab , et ITK õppejõud peavad tööülesannete seatud kõrgusel täitmise huvides osalema paralleelselt ülikoolide juures läbiviidavates teadusprojektides . Lähtudes väliskogemusest , kus <arv>-<arv>-aastane kolledžiõpe on aastakümnetepikkune ühiskondlik kogemus , tehakse kolledžites valdavalt vaid õppemetoodilisi uurimistöid . Tõepoolest - ülikoolide õppejõud on tavaliselt nii haaratud teadustööga , et pedagoogiliste oskuste arendamine kipub jääma tagaplaanile . Kui ülikooli õppejõud on tippteadmiste vahendaja , siis kolledžisüsteemi õppejõul on võimalik osa aega kulutada teadmiste vahendusprotsessi enda arendamisele . Kokkuvõttes tasakaalustavad mõlemad koolitussüsteemid teineteist ning <arv> täiendavat IT-tudengit ühe või teise ülikooli juures poleks andnud nii palju positiivset ning arengut kiirendavat tagasisidet kui praegune , eraldiseisev lahend . Üheks koostöövormiks ülikoolide ja firmadega on ühiste tehnoloogialaborite kasutamine . Pole midagi kiiremini vananevat kui infotehnoloogilised seadmed ning kui õppimise ja tööleasumise vahel on juba paariaastane vahe , tuleks arvestada olulise ümberõppimisega - vahetunud on standardid , protokollid , kasutusmudel . Samas , “ nuppu katsumata ” praktikuks ei saa ja erilaborite järele vajadus jääb . Ratsionaalne on see ainult siis , kui nende kasutajate ring on piisavalt lai , et katta hankimis- ja kasutuskulusid . Infotehnoloogia ei ole loodud lahutamiseks , vaid ühendamiseks ning selle läbi loome- e. õppeprotsessi kiirendamiseks . Suvisel käivitusperioodil oli värskendav taastõdeda , kui seotud on infotehnoloogia ülejäänud majandusharudega - kui Kolledži tuliuus arvutipark maksis <arv> miljonit krooni , siis Kolledži õppehoone remont koos ventilatsioonisüsteemi väljaehitamisega oli sellest ligi kolm korda kallim . Sellest järeldub , et infotehnoloogiakeskse ettevõtte loomise ja tööshoidmise käigus saavad tööd nii projekteerijad , ehitajad , kunstnikud , ajakirjanikud kui ka kümnete muude erialade oskajad . Kokkuvõttes tuleneb sellest meeldivalt rahustav tõdemine , et pole olemas ainult informaatikutest koosnevat infoühiskonda - tegemist on ikka tervikuga , mille koostisosad ei võitle eraldumise nime lvaid täiendavad üksteist . Info- ja sidetehnoloogia on tõepoolest üheks inimkonna arenguteljeks - see on haakunud ja põimunud läbi kõigi teiste tegevusvaldkondadega . Omaette küsimus on ITK positsiooni tugevus Eesti küllastumas IT-haridusturul . Üks arengut soodustav tegur oleks ekspansioon naaberregioonidesse , kuid värskeim uudis on see , et Riias avati <arv>. oktoobril täiendõppeasutus IT-spetsialistidele , rääkimata arenenumatest Läänemere-riikidest , kellele kolledži õppevorm on piisavalt tuntud . Õnneks on tänapäeva IT tase teinud võimalikuks virtuaalsed vallasrežiimis õppevormid ning arvestades valdkonna dünaamikat , tekib uute kursuste nišše pidevalt juurde - ole ainult valvas ja kiire . Kokkuvõttes ei saa IT-õppeasutus olla flegmaatiline erak , vaid <arv> tundi ööpäevas IT-maastikku silmitsev , otsiv , analüüsiv , eksperimenteeriv ja ideid ellu viiv kollektiiv . Allakirjutanule on selles protsessis osalemine esimene sellelaadse hiidvastutusega seotud kogemus , kusjuures kindlaks tegutsemisajendiks on soov näha IT-Kolledžit jõudmas ja paigutumas kindlale kohale Eesti kõrgharidussfääris . Muutub ja vahetub kõik , alates üliõpilastest , õppejõududest ja administratsioonist , lõpetades õppekava , tehnoloogia , riist- ja tarkvaraga - aga Kolledž ning selles omandatud oskused ja haridus kinnistuvad sadade IT-spetsialistide teadvusesse . Ühtlasi kasutan võimalust tervitada kõiki A &amp; A lugejaid - just teie teete ajakirja selliseks , nagu ta on ! Viktor Petermann - tehnikateaduste magister , Rein Paluoja - TTÜ automaatikainstituudi dotsent Tõrketaluvus kommertsarvutisüsteemides Alates mikroprotsessorite tehnoloogia loomisest <arv>. aastatel langevad arvutustehnika hinnad pidevalt . Tulemuseks on , et arvuteid võib leida kõikides eluvaldkondades . Kaasaegsed süsteemid on tugevalt automatiseeritud ja koosnevad mitmest komponendist . Inimene aga ei ole täiuslik ja ka inimese poolt loodu ei ole täiuslik . Komponendid , millest süsteemid koosnevad , võivad suvalisel hetkel rikki minna . Paljudes süsteemides võivad taolised komponentide rikkiminekud katkestada kogu süsteemi töö või seda halvendada , mis võib olla väga kallis , nii rahas kui ka inimeludes . Seega on täiesti selge , et süsteemid peavad olema tõrketaluvad . Teiste sõnadega peavad süsteemid töötama edasi , vaatamata komponentide rikkiminekule , või kui rikete arv on liiga suur ja töö jätkamine ei ole enam võimalik , siis minema rikki etteprojekteeritud viisil . Vajadus tõrketaluvuse järele on mitte ainult traditsiooniliselt kriitiliste arvutustega seotud reaalajasüsteemides ( näiteks tuumareaktorite ja lennukite juhtimissüsteemides ) , vaid ka tavalistes ärivaldkondades . Veel kümme aastat tagasi ei olnud tõrketaluvus ärivaldkondades kaugeltki prioriteetide hulgas , kuid nüüdseks on olukord muutunud . Kliendid on harjunud teenustega , mis peavad olema kättesaadavad ööpäevaringselt ja üle maailma . Heaks näiteks on pankade poolt pakutavad internetipanganduse ja elektrooniliste kaartide teenused . Kahjud teenuste teostamata jäämisest võivad ulatuda tuhandetesse ja isegi miljonitesse dollaritesse . <arv>. TõRKETALUVAD ARVUTISüSTEEMID Tüüpilise arvuti saab jagada kolme põhisektsiooni : protsessor , mälu ja sisend/väljundseadmed . Tõrketaluvate arvutisüsteemide projekteerimisel jaotatakse neid ressursse tihti selliselt , et nad moodustaksid vahetatavaid riistvaraühikuid . Vahetatavateks riistvaraühikuteks nimetame füüsilisi ühikuid , mida saab rikkimineku korral välja vahetada ja lisada süsteemi nii , et see ei häiriks teiste ühikute tööd [ Cri<arv> ] . Vahetatavaid riistvaraühikuid lisatakse süsteemi usaldusväärsuse tõstmiseks . Tõrketaluvad riistvarasüsteemid jaotatakse , lähtudes nende omadustest ja kasutamisvaldkonnast , nelja rühma [ Sie<arv> ] : kriitiliste arvutustega süsteemid pika elueaga süsteemid kõrge käideldavusega süsteemid üldkasutatavad arvutid Kriitiliste arvutustega süsteemid on kõige rangemate usaldusväärsuse nõuetega , sest need on süsteemid , mida kasutatakse reaalaja juhtimissüsteemides . Taoliste süsteemide abil juhitakse tuumareaktoreid , lennukeid ja kosmoselaevu ning nende rikkiminek võib nõuda tuhandeid inimelusid ja miljardeid dollareid tagajärgede kõrvaldamiseks . Üheks kriitiliste arvutustega süsteemide näiteks on kosmosesüstiku ( Space shuttle [ Pra<arv> ] ) juhtimissüsteem . Süsteem koosneb viie arvuti kompleksist , millest neli on primaarsed ja üks - varuarvuti . Pidevalt töötavad ainult primaararvutid , mis on täpselt ühesuguse riist- ja tarkvara- arhitektuuriga . Kõigi nelja arvuti väljundeid hääletatakse pidevalt laeva täitevmoodulites . Lisaks sellele kuulab iga arvuti teiste arvutite väljundeid ja võrdleb neid oma väljunditega . Rikkimineku avastamise korral lülitatakse rikkis arvuti kohe välja . Niisugusel viisil saab hääletada välja kuni kaks rikkiminekut ( kui need ei juhtu üheaegselt ) . Kolmanda rikkimineku avastamise korral lülitatakse kõik primaararvutid välja ja laeva juhtimine antakse varuarvutile . Varuarvuti on teistsuguse riistvarakonfiguratsiooniga ja kasutab ka teise firma poolt arendatud juhtimistarkvara . Tavaliselt laeva juhtimises varuarvutit ei kasutada ja see teostab muid , laeva juhtimisega mitteseotud funktsioone . Varuarvuti võetakse kasutusele ainult juhul , kui primaararvutite rikked võivad põhjustada laeva juhitavuse kadu . Pika elueaga süsteemid on terve klass süsteeme ( kosmoselaevad , lennukid jne ) , mis pakuvad oma teenuseid olukordades või keskkondades , kus hoolduspersonali teenuste kasutamine süsteemi parandamiseks ja rikkis osade väljavahetamiseks on väga raske , kallis või isegi võimatu . Pika elueaga süsteeme kasutatakse nende funktsioonide teostamiseks , mis ei ole otseselt seotud süsteemi juhtimisega ja millest saab ka teatud aja jooksul loobuda . Niisugused süsteemid peavad olema suure liiasuse tasemega ja sisaldama piisavalt varumooduleid süsteemi rekonfigureerimiseks komponentide rivist väljalangemise korral . Tõrgete avastamine , diagnoos ja süsteemi rekonfigureerimine peab toimuma automaatselt või neid peab olema võimalik juhtida hoolduskeskusest . Kõrge käideldavusega süsteemid on loodud spetsiaalselt kriitiliste ärivaldkondade jaoks , kus on väga ranged käideldavusnõuded ja iga minut , kui süsteem ei toimi , läheb väga kalliks . Taolistes süsteemides kasutatakse kalleid vigade avastamise mehhanisme ja kõik komponendid on tavaliselt dubleeritud , mis lubab saavutada peaaegu katkematut funktsioneerimist . Näiteks on Stratus Continuum süsteemide käideldavus <arv>,<arv> % [ STR ] , mis tähendab , et süsteem ei tööta ainult <arv> minutit aastas . Kõrge käideldavusega süsteemide suurim puudus on kõrge hind ja vajadus kasutada spetsiaalseid operatsioonisüsteeme , mis küll võimaldab saavutada vajalikku käideldavuse taset , kuid vähendab süsteemide rakendatavust nõrga tarkvaralise toetuse tõttu . Üldkasutatavad arvutid on tavalised tööjaamad ja serverid , mida me kasutame pidevalt oma igapäevaelus . Üldkasutatavaid arvuteid kasutatakse väga erinevates valdkondades , alustades teadus- ja insenerirakendustest ning lõpetades andmebaasi- ja ärirakendustega . Esimesed üldkasutatavad arvutid olid väga madala töökindlusega . Viimasel ajal on nende töökindlus pidevalt paranenud , kuid jääb siiski alla kõrge käideldavusega süsteemide ( näiteks Tandem ) omale ( vt. tabel <arv> ) . Üldkasutatavate süsteemide peamised eelised on madal hind ja hea tarkvaraline toetus , mis teeb need hinnatuks just ärivaldkondades , kus peamiseks kriteeriumiks on saada võimalikult suurt tulu võimalikult väikeste kulutustega . Üldkasutatavates arvutites ei toimu lausdubleerimist , nagu seda tehakse kõrge käideldavusega süsteemides . Dubleeritakse ainult kõige sagedamini rikki minevaid komponente . Muid komponente kaitstakse vigu avastavate ja parandavate koodide abil või kasutatakse vigu avastavaid koode kombinatsioonis ajalise liiasusega . Lisaks sellele ühendatakse süsteemi käideldavuse tõstmiseks kaks või enam arvutit rühmadesse ( cluster ) , kus ühe arvuti rikke korral võivad teised rühma liikmed enda peale võtta selle arvuti funktsioonid . Ülalmainitud meetmed võimaldavad tõsta üldkasutatavate süsteemide käideldavust nii , et see oleks võrreldav kõrge käideldavusega süsteemide omaga . Näiteks IBMi Parallel Sysplex süsteemi käideldavus on samuti <arv>,<arv> % [ IBM<arv> ] . Öeldust tulenevalt kasutatakse üldkasutatavaid arvuteid väga paljude kriitiliste ärifunktsioonide teostamiseks . Tabel <arv> - Riketevaheliste operatsioonide arv eri süsteemides [ Sie<arv> ]  Nagu teada , ei esitata kommertssüsteemidele rangeid reaalajalisi nõudeid ega pea nad töötama ka pikka aega hoolduseta . Nii on täiesti selge , et kriitiliste arvutustega ja pika eluea jaoks projekteeritud süsteemid ei sobi kommertssüsteemide jaoks , ja seega me neid enam ei vaatle . Järgnevates punktides vaatleme tuntuimate kõrge käideldavusega ja üldkasutatavate süsteemide arhitektuure ja põhiomadusi . <arv>. KõRGE KÄIDELDAVUSEGA SüSTEEMID Kõrge käideldavusega arhitektuuride põhimõte baseerub kõigi süsteemi elementide ja neid ühendatavate sideliinide dubleerimisel , nii et oleks täielikult välditud süsteemi rikkiminek ühe suvalise komponendi rikkimineku tõttu . Taoline lausdubleerimine võimaldab ehitada töökindlaid masinaid , kasutades väga lihtsaid , kuid kahjuks ka kalleid arhitektuure . Kõrge käideldavusega arhitektuure on pakutud mitmeid , näiteks Tandem NonStop Himalaya , Stratus Continuum ja Sun Netra ft <arv>. Kõik nad on väga paljus sarnased ja üles ehitatud ühel põhimõttel : kõik süsteemi komponendid peavad olema dubleeritud . Ka tõrgete avastamise mehhanismid on sarnased . Süsteemide moodulid koosnevad kahest identsest komponendist , mille väljundeid pidevalt võrreldakse . Kui kahe komponendi väljundites avastatakse erinevusi , tähendab see mooduli rikkiminekut , mis nõuab süsteemi rekonfigureerimist . Kolme arhitektuuri erinevused seisnevadki lähenemises süsteemi rekonfigureerimisele . Tandem-süsteemis kasutatakse selleks otstarbeks peamiselt tarkvaralist lähenemist . Iga protsessiga on seotud varuprotsess , mis töötab füüsiliselt teistel riistvaralistel komponentidel ja jälgib pidevalt primaarse protsessi seisu . Primaarse protsessi või selle teostamiseks vajalike riistvaraliste komponentide rikke korral jätkab teenuste teostamist varuprotsess . Stratus illustreerib puhast riistvaralist lähenemist tõrgete töötlemisele ja põhineb kuumal riistvaraliste ressursside liiasusel . Iga riistvaralise mooduliga ( mille sisemine struktuur on tõrgete avastamise eesmärgil dubleeritud ) peab töötama paralleelselt ja tegema täpselt samu toiminguid samasuguse arhitektuuriga varumoodul , mille väljundeid ignoreeritakse kuni primaarse komponendi rikkiminekuni . Primaarmooduli rikke avastamisel lülitatakse moodul otsekohe välja ja teenuste teostamist jätkab varumoodul . See aga tähendab , et ühe funktsiooni teostamiseks kasutatakse tegelikult <arv> moodulit , mis on väga kallis . Sun Netra ft <arv> töötleb tõrkeid nagu Stratuski riistvara tasemel . Tõrgete avastamine toimub samuti dubleerimise ja võrdluse abil , kuid rikke korral ei lülitata moodulit otsekohe välja , nagu seda tehakse Stratuses , vaid testitakse komponentide riistvara leidmaks , milline neist on rikki läinud , ja välja lülitatakse ainult rikkis komponent . See teeb süsteemi arhitektuuri odavamaks , kuid muudab keerulisemaks ja aeglasemaks süsteemi rekonfigureerimise . Järgmises kolmes punktis vaatleme Tandem NonStop Himalaya , Stratus Continuumi ja Sun Netra ft <arv> arhitektuure ja töötamise põhimõtteid lähemalt . <arv>.<arv>. TANDEM NONSTOP HIMALAYA Tandem-süsteemi loomise põhieesmärgiks oli luua kõrge käideldavusega arvutisüsteem , mida saaks kasutada ärivaldkondades transaktsioonide töötlemiseks ja mis rahuldaks taolistele süsteemidele esitatavaid nõudeid . Tandem NonStop Himalaya [ TAN<arv> , TAN<arv> ] koosneb multifunktsionaalsest keskseadmest , multifunktsionaalsest kontrollerist , sisend-väljundliidestest ning sisendi-väljundi- ja protsessoritevahelistest siinidest ( vt. joonis <arv> ) . Kõik süsteemi komponendid on dubleeritud . Iga multifunktsionaalne keskseade koosneb kahest protsessorist , mis soovitavad täpselt samu operatsioone ja mille tulemusi pidevalt võrreldakse vigade avastamise eesmärgil . Kui protsessorite tulemused on erinevad , lülitakse multifunktsionaalne keskseade otsekohe välja . Kõik antud multifunktsionaalses keskseadmes täidetavad protsessid hajutab operatsioonisüsteem allesjäänud multifunktsionaalsete keskseadmete vahel ( igas arvutis peab olema vähemalt kaks multifunktsionaalset keskseadet ) . NonStop Kernel operatsioonisüsteem tagab , et kõik süsteemi protsessid oleksid dubleeritud erinevatel protsessoritel ( õigemini multifunktsionaalsetel keskseadmetel ) . Vajalikke teenuseid teostab igal ajahetkel ainult üks protsessor , mida nimetatakse primaarseks . Iga operatsioon nõuab kahe kontrollpunkti saatmist varuprotsessile . Esimene kontrollpunkt saadetakse enne operatsiooni ja see sisaldab järjenumbrit ning operatsiooni teostamiseks vajalikku informatsiooni . Teine kontrollpunkt sisaldab operatsiooni tulemusi ja see saadetakse pärast operatsiooni edukat teostamist . Varuprotsess installeerib saadetud muudatused ja muudab oma protseduuride numbrit . Nüüd vaatleme erinevate komponentide rikkimineku võimalusi . On võimalikud kolm olukorda : läheb rikki varuprotsess , läheb rikki primaarprotsess ja läheb rikki kõrgema taseme protsess , mis käivitas antud teenuse . Kui läheb rikki varuprotsess , lõpetatakse operatsioon korrektselt . Kui läheb rikki primaarne protsess , peab varuprotsess kas teostama operatsiooni ise või kasutama kontrollpunktiga saadetud informatsiooni . Kui läheb rikki protsess , mis käivitas antud teenuse , siis teenust teostatakse ja saadetakse teenust käivitanud protsessile vastus ( mis läheb selle protsessi rikke tõttu kaduma ) . Pärast teenust käivitanud protsessi rikke avastamist asendatakse see kohe varuprotsessiga , mis kordab päringut . Et vajalik operatsioon oli juba tehtud , siis saadetakse päringule vastuseks selle operatsiooni tulemused , mis vastavad päringu sõnumi järjenumbrile . Sarnast skeemi saab kasutada ka tarkvararakenduste tõrketaluvuse saavutamiseks . <arv>.<arv>. STRATUS CONTINUUM Stratus Computer , Inc alustas tõrketaluvate arvutisüsteemide tootmist <arv>. aastal ja oli esimene , kes pakkus ainult riistvaralistel lahendustel baseeruvat tõrketaluvat arvutisüsteemi . Stratus toodab arvuteid Continuum Series <arv> , <arv> ja <arv>. Nende arhitektuur on sarnane , vahe seisneb pakutavas jõudluse tasemes . Continuum [ STR ] -süsteemi väga oluliseks omaduseks on see , et lisaks Stratuse poolt arendatud VOS-operatsioonisüsteemile toetab ta ka Hewlett-Packardi HP-UX operatsioonisüsteemi [ Rei<arv> ] , mis võimaldab kasutada selle platvormi jaoks arendatud rakendusi ja teeb ta väga atraktiivseks paljudes ärivaldkondades . Taoline ühtesobivus on saavutatud tänu HP PA-RISC protsessorite kasutamisele . Continuum-süsteemide käideldavuse määr on <arv>,<arv> % [ STR ] , mis tähendab , et lubatud mittetöötamise aeg on ainult <arv> minutit aastas . Stratus Continuum koosneb ühest või mitmest moodulist , mis ühendatakse , kasutades spetsiaalset moodulitevahelist siini . Iga moodul ( vt. joonis <arv> ) koosneb protsessori plaadist , sisend/väljundkontrolleritest ja perifeeriaseadmetest , mis on ühendatud siinide abil . Kõik mooduli komponendid on dubleeritud . Stratus Continuum-arvutites , erinevalt selle eelkäijast Stratus XA/R Series <arv> , on mälu tõstetud protsessoriga samale plaadile , mis võimaldab oluliselt suurendada süsteemi jõudlust . Stratus XA/R Series <arv> arvutis oli mälu samasugune vahetatav riistvaraühik nagu ka kõik teised komponendid ja kõik pöördumised mällu toimusid ühise siini kaudu , mis oluliselt vähendas mälu poole pöördumise kiirust . Mälu on Stratus Continuum-arvutis sarnaselt kõikide teiste komponentidega dubleeritud ning lisaks sellele kaitstud ka vigu korrigeerivate koodide abil . Stratus Continuum-süsteem on väga suure liiasuse tasemega ja põhineb lähenemisel , mida nimetatakse dubleerimine varumoodulitega ( pair-and-spare ) . Lisaks sellele , et kõik moodulid on dubleeritud , koosneb iga moodul kahest identsest alamoodulist , mis on omavahel sünkroniseeritud , tehes täpselt samu operatsioone ja pidevalt võrreldes oma töö tulemusi . Võrdluse ebaõnnestumisel lülitakse komponent otsekohe välja . Teenuste teostamist jätkab rikkiläinud komponenti dubleeriv komponent . <arv>.<arv>. SUN NETRA FT <arv> Süsteemi Sun Netra ft <arv> [ SUN ] ülesehituse põhimõtted ( vt. joonis <arv> ) ja vigade avastamise mehhanismid on sarnased teiste kõrge käideldavusega arhitektuuridega ja seega me neid ei vaatle . Peamine erinevus teistest arhitektuuridest seisneb protsessorite rikete töötlemises . Süsteem koosneb kahest protsessormoodulist , millel võib olla üks kuni neli protsessorit ja mälu , mis on ühine kõigi protsessorite jaoks . Mõlemad protsessormoodulid on täiesti identsed ja töötavad sünkroonis . Protsessormoodulite rikete avastamiseks võrreldakse nende väljundeid sisend/väljundsillas . Väljundite identsuse korral suunatakse tulemus siini . Erinevuse korral tulemus külmutatakse ja protsessormoodulites käivitatakse kontrolltestid , mille abil testitakse mooduli komponente . Kontrolltestid on üles ehitatud nii , et iga avastatud veaga seostatakse numbriline väärtus ; mida suurem see väärtus on , seda tõsisem on viga . Testide lõppemisel väärtused summeeritakse ja suurema väärtusega ( tõsisema rikkega ) protsessorkaart lülitatakse välja . Süsteem jätkab töötamist ühe protsessorkaardiga , mis ei võimalda teist protsessori rikkiminekut enam taluda . Rikkis protsessorkaart tuleb välja vahetada nii kiiresti kui võimalik . <arv>. ÜLDKASUTATAVAD ARVUTISüSTEEMID Süsteemide tõrketaluvuse saavutamise meetodid üldkasutatavate arvutite puhul võib jagada kahte rühma . Esimene vaatleb arvuti iseenda tõrketaluvust , teine on seotud mitmete arvutite ühendamisega rühmadesse nii , et nad töötaksid ühise süsteemina ja pakuksid kasutajale tõrkeid taluvat teenust . Rühmadesse ühendamise põhimõte on paljus väga sarnane kõrge käideldavusega süsteemides kasutatavaga , kuid sellel on ka väga selgeid erinevusi . Põhierinevus seisneb selles , et komponentide dubleerimine ( või veel suurema liiasusastme kasutamine ) toimub mitte komponentide , vaid arvutite tasemel , mis võimaldab oluliselt suurendada süsteemi paindlikkust . Loomulikult saab rühmadesse ühendada ka kõrge käideldavusega arhitektuuridega arvuteid , kuid nende kõrge hinna ja äärmiselt hea käideldavuse taseme tõttu ei ole see üldjuhul otstarbekas . <arv>.<arv>. SüSTEEMISISENE TõRKETALUVUS Üldkasutatavate süsteemide arhitektuurid ei ole mõeldud süsteemi rikete täielikuks vältimiseks ja siin ei kasutata lausdubleerimist , nagu on seda tehtud kõrge käideldavusega arhitektuurides . Nende arhitektuur on kompromiss süsteemi tõrketaluvuse , jõudluse ja hinna vahel . Liiasusega kaitstakse ainult kõige sagedamini rikki minevaid mooduleid , kusjuures liiasust kasutatakse just nii palju , et see võimaldaks saavutada optimaalset tõrketaluvuse , hinna ja jõudluse suhet . Süsteemi komponentide rikete uuringud näitavad , et suurema osa moodustavad ketaste ja mälu rikkiminekud ning voolukõikumisega seotud probleemid . Protsessorite rikked moodustavad ainult väga väikese protsendi kõigi komponentide riketest [ HP ] . Siinjuures on oluline öelda , et protsessorid on kogu süsteemi kallimaid komponente ja nende dubleerimine tõstab süsteemi hinda märkimisväärselt . Seega ei ole protsessorid üldkasutatavates arhitektuurides dubleeritud . Selle tõttu ei luba ükski üldkasutatav arhitektuur läbipaistvat taastamist protsessori ja operatsioonisüsteemi rikkiminekust . Peamine rõhk on pandud mälu , sisend-väljundseadmete ja toiteallikate tõrketaluvuse tagamisele . Üldkasutatavate arvutite klass on väga suur ja koosneb väga erinevat tüüpi arvutitest . Üldkasutatavaid süsteemseid platvorme on jämedalt võttes kolme tüüpi : suurarvuti ( S/<arv> ) , UNIX ( HP<arv> , IBM AS/<arv> , IBM RS/<arv> , Sparc Solaris ) ja Windows NT ( Intel ) . Loomulikult on nendes kasutatavad tõrketaluvuse mehhanismid erinevad . Lihtsamates arvutites kasutatakse tavaliselt mälu , sisend-väljundseadmete ja protsessori vigade avastamiseks andmete ja juhtinformatsiooni paarsuskontrolli . Ketaste tõrgete talumiseks on mõnedes mudelites ette nähtud ka RAID- ( redundant array of inexpensive disks ) kettamassiivide kasutamine . Tüüpiline vigade töötlemine seisneb operatsioonide kordamises . Toiminguid ei korrata tavaliselt kohe pärast vea avastamist , vaid mõne aja pärast , et võimaldada tõrget põhjustanud sündmusel mööduda . Paus võib kesta <arv> millisekundist <arv> sekundini . Kõrgtasemega UNIX-i serverites ja suurarvutites kasutatavad meetodid on keerulisemad . Nendes rakedatakse paljusid tehnikaid , mis on tüüpilised kõrge käideldavusega arhitektuuride jaoks . Artiklis [ DHB<arv> ] on toodud ülevaade tähtsamate UNIX-arvutite ( Data General AV<arv> , Digital , Hewlett-Packard HP <arv> K-Class , IBM RS/<arv> Model S<arv> , NCR WorldMark <arv> , Sun E<arv> ) tõrketaluvuse omadustest . Arvutite põhimälu ja tihti ka vahemälu ( Digital , Sun ) on kaitstud vigu parandavate koodidega . Arvutil Sun E<arv> on võimalik üheaegselt käivitada mitut Solaris-operatsioonisüsteemi varianti . Süsteemi ressursid jaotatakse erinevate variantide vahel . Selline jaotamine võimaldab seda , et mälu teatud piirkondade , protsessori või operatsioonisüsteemi rikkimineku korral läheks rikki ainult üks versioon ja kõik teised jätkaksid häirimata tööd . Enamik arhitektuure toetab kettamassiive RAID <arv> , RAID <arv> , RAID <arv>+<arv> , RAID <arv> , kusjuures rikkiläinud kettaid saab vahetada ka töö ajal. Kettamassiivide liidesed on üldjuhul dubleeritud . Lisaks sellele on süsteemid varustatud ka varutoiteallikate ja ventilaatoritega ( IBM , HP , NCR ) ning kaitstud sisemiste akudega ( IBM ) . UNIX-i serverites on väga suurt tähelepanu pööratud tõrgete ennetamisele . Kõik serverid võimaldavad jälgida ja logida ketaste , protsessori ja mälu vigade esinemise sagedust ja tõsidust . Kõik süsteemid võimaldavad jälgida ka süsteemi temperatuuri , ning Suni ja NCRi arvutites on võimalik mõõta ka üksikkomponentide ( protsessori , mälu ja sisend-väljundkontrollerite ) temperatuuri . Kõigi jälgitavate sündmustega saab siduda vastavate raportite saatmist hoolduspersonalile ning ka konkreetseid toiminguid ( kui neid õnnestub eelnevalt määrata ) . Suni , NCRi ja HP serverites saab kasutada ka dünaamilist mälu ja protsessorite aktiveerimist ning deaktiveerimist , mis võimaldab eemaldada tõenäoliselt rikki minevaid komponente teenuste teostamisest enne nende täielikku rikkiminekut . Tõenäoliselt rikki minevaid komponente saab identifitseerida neis esinevate vigade sageduse ja tõsiduse järgi . Veel tugevamal tasemel on tõrgete talumine suurarvutites . Näiteks viienda ( mai <arv> ) ja kuuenda ( mai <arv> ) generatsiooni S/<arv> arvutid [ IBM<arv> ] sisaldavad lisaks UNIX-i masinates leiduvatele omadustele ka lisamälu ja lisaprotsessoreid , mida saab kiiresti aktiveerida ekstreemsete olukordade korral . Peale selle süsteem varustatud dubleeritud krüptoprotsessoriga ning on võimaldatud süsteemse mälu eraldi piirkondade restart ja dünaamiline sisendite-väljundite rekonfigureerimine . Kõik sisend-väljundelemendid on vahetatavad süsteemi tööd katkestamata . <arv>.<arv>. RüHMADE KASUTAMINE Arvutite grupeerimiseks on kolm põhilähenemist : andmete ( ja andmetöötluse ) hajutamine , andmete ( ja andmetöötluse ) dubleerimine ning primaarvarukoopia mudeli kasutamine . Andmete hajutamisel on iga andmeühik salvestatud täpselt ühes asukohas , mis võimaldab andmeid , programme ja koormust jagada erinevate asukohtade vahel . Tõrketaluvust antud lähenemine tõsta ei võimalda , sest ühe asukoha hävimisel hävivad ka kõik selles asukohas asuvad andmed . Andmete dubleerimise korral on iga andmeühik dubleeritud kõikides asukohtades . Andmete dubleerimisel peab süsteem garanteerima , et iga koopia oleks sisemiselt konsistentne ( internal consistency ) , ja sedagi , et kõikide koopiate andmed oleksid konsistentsed ka omavahel ( mutual consistency ) , mis nõuab väga palju ressursse ning vähendab oluliselt süsteemi jõudlust . Omavahelist konsistentsust on kõige lihtsam saavutada , kasutades täielikku tsentraliseerimist , mis vähendab jõudlust kõige vähem . Sel juhul täidab üks server kõigi klientide päringuid ja saadab teistele serveritele seisundi muutumise sõnumeid . See algoritm on sisuliselt primaar-varukoopia mudel , ainult selle vahega , et varuservereid on mitu . Primaar-varukoopia mudelit vaatleme lähemalt allpool . Omavahelist konsistentsust saab saavutada ka , kasutades hajutatud kriitilise sektsiooni algoritme , näiteks Lamport'i , Ricart-Agrawala , Suzuki-Kasami leviedastuse ( broadcast ) , Singhal'i heuristilist ja Raimond'i puul baseeruvat algoritmi [ Sin<arv> ] . Vaatleme lähemalt hajutatud kriitilise sektsiooni teostamise universaalseid jõudluse piire [ Sin<arv> ] : Siin T on keskmine sõnumi edastamise aeg , N - asukohtade ( serverite ) arv , E - kriitilise sektsiooni teostamise aeg , mis omaette võib nõuda mitme sõnumi edastamist . Näiteks Lamport'i algoritmi korral on see arv <arv> ( N-<arv> ) ja Ricart-Agrawala algoritmi korral <arv> ( N-<arv> ) . Maksimaalne vastuse aeg on saadud Little'i seaduse [ Sin<arv> ] abil : süsteem täidab päringuid kiirusega r = <arv>/ ( T+E ) ja süsteemi suure koormuse korral on vastuse aeg N/r = N/ ( T+E ) . Niisiis on andmete dubleerimine ressursse ja aega nõudev tegevus , mille tõttu langeb süsteemi jõudlus ja suureneb võrgu koormus . Aktiivse dubleerimise korral peab klient ootama kõikide ( või enamiku ) serverite vastust , mis on kallis ja koormab võrku . Kui nõutav vastus tuleb kõikidelt serveritelt , siis võib ühe serveri rikke korral klient jäädagi ootama selle serveri vastust lõpmatu aja jooksul . Sellise olukorra vältimiseks tuleb serverite rikkimineku avastamiseks ja süsteemi rekonfigureerimiseks kasutada keerulisi algoritme . Primaar-varukoopia mudelis suhtlevad kliendid ühe ( “ primaarse ” ) serveriga . Primaarserver töötleb kõiki päringuid ise ja edastab varuserveritele ( slave või backup , siit pärinebki nimetus primary-backup ) ainult seisundi muudatusi . Kui primaarserver rikki läheb , siis valitakse välja uus varuserver , mis võtab üle primaarserveri funktsioonid . Primaar-varukoopia mudel on väga atraktiivne oma töökindluse , odavuse ja hea jõudluse tõttu . Primaar-varukoopia mudeli protokollide teooriat on kirjeldatud [ BMS<arv> ] . Põhiliseks probleemiks primaar-varukoopia protokollis on varukoopia hooldamine . Kirjanduses jagatakse tihti varukoopia hooldamise protokollid kahte rühma : <arv>-ohutu ( <arv>-safe ) ja <arv>-ohutu ( <arv>-safe ) . <arv>-ohutute protokollide korral töödeldakse kliendi päringut ainult primaarserveris , vastatakse kliendile kohe ja alles siis edastatakse sõnumeid varuserveri(te)le . <arv>-ohutute protokollide korral töötleb primaarne server kliendi päringut , seejärel installeeritakse muudatused varuserveri(te)sse ja alles siis saadetakse kliendile vastus . <arv>-ohutute protokollide kasutamisel süsteemi jõudlus peaaegu ei vähene , sest ( i ) varuserveri(te)sse saadetakse redo logi , mida iga transaktsioone töötlev süsteem kirjutab igal juhul ja ( ii ) primaarserver vastab kliendile kohe pärst transaktsiooni kehtestamist , seega kriitilise funktsiooni teostamise aeg ei pikene . Peab aga arvestama , et <arv>-ohutu protokolli kasutamisel võivad mõned transaktsioonid kaduma minna . Ei tohi alahinnata mõnede transaktsioonide kadumise võimalust . Kui teatud transaktsioonid on kadunud , siis tähendab see , et ei saa teha ühtegi nendel transaktsioonidel baseeruvat tehingut . <arv>-ohutud protokollid saadavad varuserveri(te)le redo logi- sid nagu on tehtud <arv>-ohututes protokollides , aga nende korral ei saa server vastata kliendile enne , kui varuserveri(te)st saadakse kinnitusi seisundi muutumise sõnumi vastuvõtmise kohta . See pikendab vastuse aega vähemalt <arv>T ( T on keskmine sõnumi edastamise aeg ) võrra . Primaar-varukoopia mudel on oma heade omaduste poolest väga populaarne ja seda on kasutatud ka paljudes kommertsrakendustes . Kõigi põhiliste üldkasutatavate süsteemsete platvormide jaoks ( IBM S/<arv> , IBM RS/<arv> , HP <arv> , SUN E<arv> , Digital AlphaServer , Intel'i protsessoritel baseeruvad Windows NT arvutid ) on töötatud välja primaar-varukoopia mudeli põhimõtetel töötav rühma haldamise tarkvara , mis võimaldab ühendada kaks või enam arvutit ühte rühma tõrketaluva teenuse pakkumise eesmärgil . Põhilised rühmade omadused on järgmised : Mitme arvuti varundamine . Rühma saab ühendada mitu arvutit , kusjuures üks arvuti saab olla varuarvutiks üheaegselt mitmele arvutile . Üleminek mitmele arvutile . Arvuti rikkimineku korral saab selle funktsioone jaotada mitme arvuti vahel . Kaskaadne üleminek . Mitme arvuti järjestikuse rikkimineku korral peab olema võimalik rikkis arvutite funktsioone uuesti jaotada allesjäävate arvutite vahel . Valikuline üleminek . Juhul , kui antud arvutis on rikki läinud ainult teatud rakendused , peab olema võimalik viia üle teisele arvutile ainult neid . Dünaamiline varumasina valik . Võimaldab rikete korral valida varuserverit dünaamiliselt , lähtudes nende koormusest või teistest parameetritest . Enamik rühmade haldamise rakendusi töötavad “ ühiste ketaste printsiibil ” , mis on väga sarnane HA-NFS [ BEM<arv> ] protokolliga . Põhimõte seisneb selles , et kaks või rohkem serverit on ühendatud ühe ketta külge ( võib olla ka mitu ketast ) . Ainult ühel serveril ( hetkel primaarsel ) on õigus kasutada ketast igal ajahetkel . Normaalse töö käigus täidab kõiki operatsioone primaarserver , mis salvestab muudatused ja taastamiseks vajaliku informatsiooni ( logi ) kettale ja vastab kliendile . Peamiseks taolise lähenemise kitsaskohaks on ühine ketas , mis võib rikki minna üheainsa tõrke tõttu . Väljapääsu antud olukorrast võimaldab kahe dubleeritud kettamassiivi kasutamine . Kaks kettamassiivi on ühendatud omavahel valguskaablitega , mille andmeedastuse kiirus on võrreldav SCSI-siini kiirusega . Kirjutamisoperatsioonide kiirendamiseks kasutatakse kuni mitme gigabaidist , patareidega kaitstud vahemälu , mis võimaldab teostada kettale kirjutamise operatsioone asünkroonselt . Taolisi kettasüsteeme toodavad näiteks EMC , IBM , Sun Microsystems ja Amdahl . Vahemaa kettakastide vahel võib ulatuda <arv> kilomeetrini [ SM<arv> ] , mis võimaldab väga head katastroofikaitset . <arv>. KOKKUVõTE Nagu nägime , jaotatakse tõrketaluvate riistvarasüsteemide arhitektuurid nelja rühma : kriitiliste arvutustega , pika elueaga , kõrge käideldavusega ja üldkasutatavad arhitektuurid . Et kommertssüsteemid ei ole reaalajaliste nõuetega ega pea töötama pika aja jooksul ilma hoolduseta , ei sobi kriitiliste arvutustega ega pika elueaga süsteemide arhitektuurid nende jaoks . Kommertssüsteemides saab kasutada kõrge käideldavusega ja üldkasutatavaid arhitektuure . Kõrge käideldavusega arhitektuuride põhimõte seisneb kõigi süsteemi komponentide ja neid ühendatavate sideliinide dubleerimises nii , et oleks täielikult välditud süsteemi rikkiminek ühe suvalise komponendi rikke tõttu . Taoline lausdubleerimine võimaldab ehitada usaldusväärseid arvuteid , mille käideldavus on <arv>,<arv> % ehk ainult viis minutit mittetöötamist aastas . Kahjuks on aga kõrge käideldavusega arhitektuurid väga kallid . Sõltuvalt kasutatavast tõrgete töötlemise mehhanismist on teenuse teostamiseks vaja <arv> kuni <arv> korda rohkem ressursse , mis teeb arhitektuurid ka selle võrra kallimaks . Näiteks Tandem Himalaya- ja Stratus Continuum-arhitektuurides on kõik moodulid dubleeritud ning lisaks sellele on tõrgete avastamise eesmärgil dubleeritud ka moodulite sisemine struktuur , mis tähendabki seda , et ühe funktsionaalse mooduli asemel kasutatakse tegelikult nelja moodulit . Sun Netra ft <arv> arhitektuuris on tänu tõrgete diagnostika kasutamisele vähendatud liiasuse taset kaheni . Niisiis pakuvad kõrge käideldavusega arhitektuurid usaldusväärset teenust , kuid on seejuures väga kallid . Samas ei ole komponentide lausdubleerimine alati õigustatud . Näiteks moodustavad protsessorite rikked ainult väga väikese protsendi kõigist komponentide riketest . Optimaalset tõrketaluvuse , jõudluse ja hinna suhet võimaldavad saavutada üldkasutatavad arhitektuurid . Liiasusega kaitstakse ainult kõige sagedamini rikkiminevaid mooduleid nagu mälu , sisend-väljundseadmed ja toiteallikad . Protsessorite rikete talumiseks ühendatakse arvutid rühmadesse , milleks on kolm põhilähenemist : andmete ( ja andmetöötluse ) hajutamine , andmete ( ja andmetöötluse ) dubleerimine ning primaar-varukoopia mudeli kasutamine . Andmete hajutamine ei võimalda tõrketaluvust tõsta , sest ühe asukoha hävimisel hävivad ka kõik selles asukohas asuvad andmed . Andmete dubleerimise korral on iga andmeühik dubleeritud kõikides asukohtades , kuid koopiate sünkroniseerimise mehhanismid on keerulised ja ressursse nõudvad , mis oluliselt vähendab süsteemi jõudlust . Taolisi probleeme ei esine primaar-varukoopia mudelis , mis on oma hea töökindluse , odavuse , lihtsuse ja hea jõudluse tõttu väga hinnatud . Primaar-varukoopia mudelil põhinevad ka mitmed rühmade haldamise tarkvara rakendused . Primaar-varukoopia mudeli kasutamisel ei pea varuserverid tegema primaarserveritega täpselt samu toiminguid , mistõttu neid saab kasutada ka teiste operatsioonide teostamiseks , mis võimaldab vähendada primaarsete serverite koormust . Peale selle võimaldab rühmade haldamise tarkvara ka mitmete arvutite varundamist , üleminekut mitmele masinale ja dünaamilist varumasina valikut , mis lubab töökoormuse jaotamist ka rikete esinemise korral . Üldkasutatavate arvutite rühmade plussiks on ka see , et rühma liikmete vaheline distants võib ulatuda kuni <arv> kilomeetrini , mis lisaks käideldavusele lubab saavutada ka katastroofitaluvust .  Ago Meister , Tartu Ülikooli informaatikaüliõpilane Õppimine lihtsates tehisnärvivõrkudes <arv>. SISSEJUHATUS Eksisteerib teatav hulk probleeme , mille lahendamiseks saab kasutada algoritme . Näiteks olgu ülesandeks lahendada lineaarvõrrandisüsteem . Seda saab teha mitmeti , millest üks võimalus on kasutada Gaussi algoritmi . Gaussi meetod on kindel eeskiri , ning realiseerides algoritmi mõnes programmeerimiskeeles , annab see võimaluse protsessorile järk-järgult öelda , milline käsk järgmisena täita , et leida lahendus . Digitaalarvuti suudab suuri võrrandisüsteeme kiiresti lahendada , inimesed aga kulutavad võrratult rohkem aega . Samas sooritavad inimesed igapäevaseid tegevusi nagu kõndimine , rääkimine ja järeldamine , mille modelleerimisega digitaalarvutid hätta jäävad . Selgub , et aju ehitus sobibki paremini just selliste ülesannete täitmiseks , mitte aritmeetiliste arvutuste tegemiseks . <arv>ndate aastate teisel poolel hakkas arenema tehisintellekti uus uurimisharu - tehisnärvivõrgud . Nimetatud valdkonnas uuritakse aju ehitust ja käitumist erinevate ülesannete lahendamisel ning püütakse koostada vastavaid matemaatilisi mudeleid . <arv>. TEHISNÄRVIVÕRGUD Kõigepealt annan lihtsustatud ülevaate aju ehitusest . Aju koosneb väga paljudest närvirakkudest , mis suhtlevad üksteisega , vahetades elektriimpulsse . Kahe raku vahelist ühenduskohta nimetatakse sünapsiks ( synapse ) , mis näitab signaali tugevust . Iga rakk ühendab need impulsid tervikuks dendriitide ( dendrite ) abil ja sõltuvalt sellest , kas tulemus on ärritav ( exciatory ) või pidurdav ( inhibitory ) , vastavalt kas väljastab signaali mööda kiudu , mida kutsutakse aksoniks ( axon ) , või ei väljasta . Samasugust põhimõtet püütaksegi realiseerida tehisnärvivõrkude juures , mis kujutavad endast bioloogiliste närvivõrkude lihtsustatud matemaatilisi mudeleid . Tehisnärvivõrkudele on antud mitmeid definitsioone , millest üks on järgmine : tehisnärvivõrk on süsteem , mis koosneb lihtsatest töötlevatest elementidest . Need elemendid töötavad paralleelselt ning nende funktsioon on määratud võrgu struktuuriga , omavaheliste seoste tugevusega ja igas sõlmes sooritatava töötlemisega . Tehisnärvivõrku võib kujutada graafina , milles on antud tipud ja nendevahelised seosed . Tippudeks on lihtsad töötlevad elemendid ( units , nodes , artifical neurons ) ; edaspidi nimetame neid sõlmedeks . Igal sõlmel on hulk sisendeid ja väljundeid . Igale seosele on omistatud seose kaal ( connection weight ) , mis kodeerib teadmist . Tehisvõrkude iga sõlm värskendab pidevalt oma olekut , genereerides aktivatsiooniväärtuse ( activation value ) , mis on funktsioon sisenditest ja sisemistest parameetritest ( tavaliselt on nende ks seoste kaalud ) . Korrektseks töötamiseks vajab tehisnärvivõrk igale seosele õiget kaalu . Õppimine närvivõrkudes tähendab seoste kaalude sellist muutmist , et tulemuseks oleksid õiged kaalud . Üldjoontes eristatakse kahte õppimismeetodit . Õpetajaga õppimine - võrgule esitatakse sisend ning oodatav väljund . Kui võrk vastab valesti , siis parandatakse seoste kaalusid . Iseseisev õppimine - võrgule oodatavat väljundit ei esitata , vaid ta peab ise leidma , millised sisendandmed on omavahel sarnased ning moodustama erinevad lahendite klassid . Mõned tehisnärvivõrkude tüüpilised omadused : teadmised on salvestatud kaaludena seostel , mitte kui programm . Kaalusid parandatakse treeningu käigus on üsna veakindlad , st pisut müra sisendandmetes ei mõjuta väljundit oskavad käsitleda tundmatuid mustreid ( pattern ) ja üldistada lahendavad hästi ülesandeid , kus on vaja tegelda 'tajumisega' ( näiteks kujundite tuvastamine ) . <arv>. PERTSEPTRONID <arv>.<arv>. LIHTPERTSEPTRON Koostame esimese bioloogilise närviraku mudeli - lihtsaima tehisneuroni . Sõlmel on kaaludega sisendid ja väljund . Kaal seosel märgib seose tugevust . Arvutades kaalude ja sisendite korrutiste summa , väljastab sõlm signaali ( vastus <arv> ) , kui summa on suurem läviväärtusest ( treshold ) , ning vaikib vastupidisel juhul ( vastus <arv> ) . Kirjeldatud sõlme nimetatakse lihtpertseptroniks ( simple perceptron ) ( vt joonis <arv>.<arv> ) . Sisendid x ( x<arv>, x <arv> , ... , xn) on binaarsed ja seoste kaalud w = ( w<arv>, w<arv>, ... , wn) on tavaliselt positiivsed või negatiivsed reaalarvud . Sõlme i väljundi oiarvutamiseks kasutatakse aktivatsioonifunktsiooni g : ( <arv>.<arv> ) kus on läviväärtus . Läviväärtuse otstarve selgub pisut hiljem . Osutub , et läviväärtust saab vaadelda kui ühte lisakaalu . Nimelt ( <arv>.<arv> ) Edasi võib defineerida uue sisendi x<arv>= -<arv> koos kaaluga wi<arv>= ja kirjutada võrrandi ( <arv>.<arv> ) kujul  Kui sisendil x i on omadus mõjutada pertseptroni vastama , siis vastava seose kaal w i on positiivne ; kui sisend x i proovib takistada vastust andmast , siis on kaal w i seosel negatiivne . Õppimine pertseptroni mõttes on tegevus , mille käigus muudetakse kaalude väärtust nii , et lõpuks vastaks pertseptron korrektselt . Uurime pisut täpsemalt , milliseid ülesandeid on pertseptron suuteline lahendama . Olgu x = ( x <arv> , x <arv> , ... , xn) sisendvektor . Defineerime nüüd sisendite summeerimisfunktsiooni h ja anname sõlme aktivatsioonifunktsiooni g(h) väärtused pertseptroni puhul : ( <arv>.<arv> ) ( <arv>.<arv> ) Funktsiooni g(h) nimetatakse sammfunktsiooniks ( step function , hardlimited function ) . Uurime , mida võib pertseptron õppida arvutama . Lihtsuse ja ülevaatlikkuse mõttes vaatleme kahe sisendiga juhtumit . Siis  Et h = <arv> korral ei tea pertseptron , kas vastata või mitte , siis uurime seda juhtu natuke lähemalt . Kui lahendame võrrandi h = <arv> , saame tulemuseks ( <arv>.<arv> ) mille üldine kuju on ( <arv>.<arv> ) Võrrand ( <arv>.<arv> ) on sirge võrrand . Kui sisendvektorit kujutav punkt tasandil asub ühel pool seda sirget , siis pertseptron väljastab <arv> ; kui see punkt asub teisel pool sirget , siis pertseptron annab väljundisse <arv>. Selline sirge , mis korrektselt eraldab treeningsisendid , vastab täiuslikult funktsioneerivale pertseptronile . Kolmemõõtmelises ruumis saame nn otsustuspinna ( decision surface ) , suurema arvu sisendite puhul nimetatakse seda ka hüpertasandiks ( vt joonis <arv>.<arv> ) . Ühtlasi öeldakse , et probleem on lineaarselt eraldatav ( linearly separable ) . Nüüd selgub , milleks ikkagi on vajalik läviväärtus . Nimelt vaadates võrrandit ( <arv>.<arv> ) näeme , et kui läviväärtus puuduks , läbiks sirge alati koordinaatide alguspunkti . Alati poleks see sugugi parim lahendus ning sellepärast kasutataksegi läviväärtust , mille sobiv väärtus leitakse treenimise käigus . Eelnevast järeldub , et sisuliselt tähendab pertseptroni õppimine sobiva otsustuspinna/hüpertasandi kindlaksmääramist . Kui pertseptron alustab tööd suvaliste kaaludega , siis on tõenäoline , et alguses ei suuda ta probleemi õigesti lahendada . Teisisõnu , pertseptron annab signaali siis , kui pole vaja , ning ei anna signaali , kui on vaja . Meie huvides on seda viga vähendada , milleks omakorda on vaja parandada jooksvaid seoste kaalusid . Kui pertseptron vastab õigesti , siis me ei tee midagi , kuid vale vastuse puhul tuleb muuta kaalusid :  Kaalude muut avaldub ( <arv>.<arv> ) kus , on sisendvektorile x(k) vastav väljund , t out ( k ) tegelikult soovitav väljund ( target value ) , P sisendvektorite arv ja n mastaabikordaja ( scale factor ) . Kaalude muutmist aitab paremini ette kujutada joonis <arv>.<arv>. Kaalude vektor on risti otsustuspinnaga , sest võrrand esitab tegelikult vektorite x = ( x<arv>, x<arv>, ... , xn) ja w = ( w<arv>, w <arv> , ... , wn) skalaarkorrutist koordinaaditi . Vektorit w muudetakse vektori x suunas . Mastaabikordaja n võrrandis ( <arv>.<arv> ) näitab , kui palju kaalusid muuta . Väike n muudab õppimise aeglasemaks , samas liiga suure n korral ei tarvitsetagi õiget kaalude vektorit leida . Võttes n konstantseks , on tulemuseks alljärgnev algoritm [ <arv> ] . Algoritm : fikseeritud sammuga pertseptronõpe Antud : n sisendit x = ( x <arv> , x <arv> , ... , xn) ning kaks väljundklassi . Tuleb arvutada kaalud w = ( w<arv>, w<arv>, w<arv>, ... , wn) , mille abil pertseptron suudaks alati vastata , kui sisend on esimesest väljundklassist . <arv>. Luua pertseptron n + <arv> sisendiga ja n + <arv> kaaluga , kus lisasisend x <arv> on alati -<arv>. <arv>. Algväärtustada kaalud ( w <arv> , w <arv> , ... , wn) juhuslikult . <arv>. Vaadata läbi treeningsisendite hulk ja koguda kõik näited , mis klassifitseeriti jooksvate kaalude poolt valesti . <arv>. Kui kõik näited klassifitseeriti õigesti , siis väljastada kaalud ja lõpetada töö . <arv>. Vastupidisel juhul arvutada valesti klassifitseeritud vektorite summa . Summa arvutamisel lisada summavektorile S vektor x , kui x on sisend , mille puhul pertseptron ei vastanud , kuigi pidi vastama , või -x , kui x on sisend , mille puhul pertseptron vastas , kuigi ei pidanud vastama . Korrutada summa mastaabikordajaga . <arv>. Muuta kaalusid ( w<arv>, w<arv>, ... , wn) , lisades neile vektori S elemendid . Minna sammule <arv>. Kirjeldatud treeningutsüklit , kus kõik isendid esitatakse võrgule ja alles kõige lõpus parandatakse kaalusid , nimetatakse epohhiks ( epoch , batch training ) . Pertseptroni puhul garanteerib tulemuse pertseptroni koonduvuse teoreem ( perceptron convergence theorem ) , mis ütleb , et kõigi nende ülesannete korral , kus saab leida sobiva otsustuspinna , pertseptron tegelikult suudab selle ka leida . Teoreemist järeldub , et pertseptron õpib klassifitseerima igat sisendite hulka , mis on lineaarselt eraldatav . Enamik probleeme kahjuks pole lineaarselt eraldatavad . Näiteks pole pertseptron suuteline õppima arvutama funktsiooni XOR ( väljund on <arv> ainult siis , kui täpselt üks sisenditest on <arv> , ning <arv> vastupidisel juhul ) . Funktsiooni XOR jaoks ei saa leida otsustuspinda . Kahe sisendiga juhu puhul tähendab see , et ei leidu sirget , mis jaotaks tasandi nii , et ühel pool oleksid need sisendid , mis annavad väljundisse <arv> , ja teisel pool need , mis annavad väljundisse <arv> ( vt joonis <arv>.<arv> ) . Funktsiooni AND puhul saab seda teha , sest väljund on <arv> , kui sisend on ( <arv>,<arv> ) . Selle punkti tasandil saab eraldada punktidest ( <arv>,<arv> ) , ( <arv>,<arv> ) ja ( <arv>,<arv> ) sirgega . XOR-probleemi puhul saaks eralduse teha siis , kui kasutada võiks ellipsikujulist joont , mille joonistaksime ümber punktide ( <arv>,<arv> ) ja ( <arv>,<arv> ) . Väljapoole seda joont jääksid siis punktid ( <arv>,<arv> ) ja ( <arv>,<arv> ) . Pertseptronid aga ei ole võimelised selliseid pindasid modelleerima . Teiseks võimaluseks on kasutada kahte sirget . Esmalt isoleerida punkt ( <arv>,<arv> ) ning siis ülejäänud kolm punkti jagada omakorda kaheks osaks . Sellist lähenemist kasutades konstrueerime tegelikult mitmekihilise pertseptroni - mitu pertseptroni on ühendatud jadasse ( vt joonis <arv>.<arv> ) . Pilt aga pole siiski nii ilus , kui paistab . Nimelt ei laiene pertseptroni koonduvuse teoreem mitmekihilisele pertseptronile . Pertseptronõppe algoritm ei suuda parandada kaalusid erinevate pertseptronide vahel . <arv>.<arv>. MITMEKIHILINE PERTSEPTRON Jadasse ühendatud pertseptronide puhul esitatakse ülesanne esimesele pertseptronile ning seejärel tema väljund koos sisenditega omakorda teisele pertseptronile . Vaadeldavat võrku , kus andmed liiguvad ainult ühes suunas , nimetatakse mitmekihiliseks pärilevivõrguks ( multi-layered feed-forward network ) . Sellel võrgul on järgmised kihid : sisendkiht peidetud kiht väljundkiht . Sisendkihi iga sõlm on ühendatud peidetud kihi sõlmedega ning viimased omakorda väljundkihi sõlmedega . Võrku saabuvad impulsid kantakse üle peidetud kihile , kus toimub töötlemine , ning edasi kanduvad impulsid peidetud kihilt väljundkihile . Joonisel <arv>.<arv> tähistavad x i sisendkihti , h i peidetud kihti ja o i väljundkihti . Sellisel võrgul on kolm kihti , kuigi mõnikord on võimalik ja sageli ka vajalik kasutada rohkem kihte . Mitmekihiline pertseptron on pärilevivõrk . Mitmekihilist pärilevivõrku õpetatakse teistsuguse algoritmiga kui lihtpertseptroni . <arv>.<arv>.PERTSEPTRONIDE TESTIMINE Siinkohal esitame näiteid tulemustest , mida sai autor pertseptroni rakendamisel mitmesugustele ülesannetele . Lahendamisel kasutati fikseeritud sammuga pertseptronõppe algoritmi . Toodud tabelites märgib w<arv>läviväärtust . Läviväärtus leitakse treenimise käigus ning see on seotud kindla sisendiga x<arv>= -<arv>. Õpikiirus on kõigis näidetes <arv>,<arv> . Vaatleme järgmisi probleeme : funktsioonide AND ja OR arvutamine kahe sisendi juhul arvu paarsuse määramine . Esimeses neist uurime , kuidas paikneb treeningu käigus punktihulka eraldav sirge . Tabelitesse on märgitud seoste kaalud . Funktsiooni AND arvutamine Kõigepealt algväärtustatakse kaalud juhuslikult . Esimene sirge ( joonis <arv>.<arv> ) kujutab algseisu . Järgmisel sammul paigutatakse ta ümber , kuid tulemus pole ikka veel õige . Kolmandal korral eraldab sirge punkti ( <arv>,<arv> ) . Kaalude muutumist treeningu käigus kirjeldab tabel <arv>.<arv>. Tabel <arv>.<arv> - Kaalude muutumine  Lõpuks saavutati seostele kaalud w <arv> = <arv>,<arv> , w <arv> = <arv>,<arv> ja w <arv> = <arv>,<arv> ( joonis <arv>.<arv> kolmas sirge ) . Seega on pertseptron õppinud arvutama AND-funktsiooni . Funktsiooni OR arvutamine Sisuliselt toimub sama tegevus mis AND-probleemigi puhul . Kaalude muutumist treeningu käigus kirjeldab tabel <arv>.<arv>. Tabel <arv>.<arv> - Kaalude muutumine  Seega on pertseptron õppinud arvutama OR-funktsiooni . Arvu paarsuse määramine Eesmärgiks on õpetada pertseptroni eristama paarituid ja paarisarve . Arvud esitati pertseptronile kahendsüsteemis . Vaatleme arve <arv> ... <arv> , kus <arv> loeme paarisarvuks . Tabel <arv>.<arv> - Kaalud treeningu alguses  Tabel <arv>.<arv> - Treeningu kulg Tabelist <arv>.<arv> on näha , et õiget teadmist kodeerivad lõpuks kaalud w<arv>= -<arv>,<arv> , w <arv> = <arv>,<arv> ja w <arv> = -<arv>,<arv> , kus w<arv>on tegelikult läviväärtus . Kui nüüd esitada pertseptronile numbrid <arv> ... <arv> , siis on tulemuseks  kus vastus <arv> tähendab , et number oli paarisarv , ning vastus <arv> märgib paaritut arvu . Järelikult suudab pertseptron kindlaks määrata , milline numbritest <arv> ... <arv> on paarisarv ja milline mitte . TERMINID aktivatsioonifunktsioon - activation function epohh - epoch iseseisev õppimine - unsupervised learning lineaarselt eraldatav probleem - linearly separable problem läviväärtus - treshold value , treshold mastaabikordaja - scale factor närvivõrk , tehisnärvivõrk - neural network , artificial neural network otsustuspind - decision surface pertseptron - perceptron , simple perceptron pertseptronõpe - perceptron learning pertseptroni koonduvuse teoreem - perceptron convergence theorem pärilevivõrk - feed-forward network seose kaal - connection weight sõlm - unit , node , artificial neuron õpetajaga õppimine - supervised learning õpikiirus - learning rate Viiteid Internetis <hyperlink> - Pertseptronid . <hyperlink> - Lühiülevaate pertseptronidest . <hyperlink> - Pakub hulga teoreetilisi uurimusi ning tehisnärvivõrkude tarkvara . <hyperlink> - Kajastab tehisnärvivõrkudealast tegevust Euroopas . Kasutatud kirjandus W. Gertsner . Supervised learning for neural networks : a tutorial with Java exercises . <hyperlink> K. Knight , E. Rich . Artificial Intelligence . McGraw-Hill , <arv> B. Kröse . An introduction to neural networks . <hyperlink> Tõlkinud Vello Hanson I.Hannula , R.Linturi / SADA NÄHTUST <arv>-<arv> / Virtuaal-Helsingi ja kübermutt <arv> Tiigri aasta Islami aasta <arv> Internetis <arv> miljardit inimest Taliolümpia Merepind on <arv> cm tõusnud , Malediividest on jäänud ainult <arv>% On-line Volvo <arv> katsesõidul - virtuaaltehnika säästab kütust Singapur teeb tundekasvatuse vanglates kohustuslikuks OMAKOKK - meisterlikud eined vähimagi vaevata Nokia koletistelefon lõpuks ometi müügil Spordimeditsiini kriis - kiiresti on levinud nanomolekulide kasutamine hapniku manustuseks Monarhi kaelas peaks kogu aeg olema silmus - see hoiab selja sirge . Robert A. Heinlein . Kass läbi müüri.<arv>. Auto Mobile - <arv>.<arv>.<arv> ON-LINE VOLVO <arv> KATSESõIDUL - VIRTUAALTEHNIKA SääSTAB KüTUST Tulemus : * * * * ( * ) Testijal on harva olukordi , kus ta tahaks autot nimetada unelmaks . Uus Volvo on aga sellele testija unistusele üsna lähedal . Katsesõidu parimaid hetki oli see , mil istusime garaažis oma kohtadel - ja vaatasime akendest möödavihisevaid maastikke või kuulasime maavaikuses lindude vidistamist . See on ainult üks näide sellest , et Volvo on õnnestunult ühendanud uusima audiovisuaaltehnika ja häid sõiduomadusi pakkuva kombi . Auto vastab oma põhivarustuselt Volvo kombi eelmisele mudelile Volvo Wagonmaster <arv> ( läbivaatuse aruanne on numbris <arv>/<arv> ) . Tehnilisi juhtimisseadmeid on edasi arendatud . Kaardisüsteemi ja satelliitlokaatori koostööd on parandatud . Ka elektroonilise vedrustuse ja teeradari programmid on selgesti senistest paremad . Seekord sujus laitmatult ka veeklaasitest . Teeradari käivitatud hädapidurdused olid samuti juba sobivalt pehmed . On-line Volvo iseärasused peituvad juhtarvutis ja auto akendes . Aknad on üleni poolläbipaistvast klaasist , millele arvuti saab suunata kuvateavet . Normaaljuhul on tuuleklaasi infoservadel nähtaval kehtivad liiklusmärgid ja kavandatud marsruudile vastavad sõidujuhised . Olukordade muutumisest teatab arvuti ka selgete kõnesõnumitega . Sõidumarsruutide harjutamiseks ja läbitavate kohtade eelkontrolliks on süsteemile lisatud simulaator , mis ületab kõik ootused . Me peaaegu unustasime , et istume üha garaažis , kui akendest vihises mööda Kesk-Euroopa alpimaastik . Elektronvedrustus matkis tõetruult alpiteede sõidutunnet ja heliefektid tekitasid usutava mulje mootori tööhäältest sellisel maastikul . Testimiskava lõpuleviimine jäi järgmisele päevale , sest osalesime , selg külmas higis , San Remo rallil . Seejärel sõitsime veel läbi mitu SatWebist laaditud virtuaalmarsruuti . Viimaseks katseks oli On-line Volvo juhtarvuti tõeline pimesõidutest . Sõitsime kesköö pimedatel ja vaiksetel tundidel kesklinna tänavail praktiliselt pimesi . Meie sõitu juhatas virtuaalmaastik , mida võis akendel satelliitnavigaatoriga sünkroniseeritud kaamerapildil näha keskpäevavalguses olevana . Ainus sõidu ajal ilmnenud probleem oli seotud liiklusmärkidega : sõiduradar peatas meid kaks korda , kui olime liikunud neile liiga lähedale . Otsustasime , et põhjusi võis olla kaks . Kas ei pidanud paika virtuaalmaastiku <arv>-sentimeetrisena reklaamitud täpsus või olid liiklusmärgid alles äsja üles seatud . Harvad vastutulijad simuleeris sõiduradar akendele ja peatas meid möödasõitude ajaks tee äärde . On-line Volvo saab selle testi eest peaaegu täielikult viis tärni . Kuigi auto on suurepärane - ehk nagu alguses öeldud , peaaegu unelm - sai viimane tärn endale hinna tõttu sulud ümber . Tänapäeval tuleb auto eriomaduste eest maksta palju rohkem kui regulaarse kaugsõidu eest . Millalgi tulevikus siirduvad Volvo eriomadused siiski tõenäoliselt ka normaalhindadega autodesse . Siis pääsevad sõidu nautijad lõpuks ometi ristlema nii nagu hing ihkab - oma koduõues . Cyber Times - <arv>.<arv>.<arv> SINGAPUR TEEB TUNDEKASVATUSE VANGLATES KOHUSTUSLIKUKS Singapur on kõigi vabaduskaotuslike karistuste üheks osaks võtnud tundeelu tingrefleksimise raalsimuleeringud . Eesmärk on parandada vangide käitumist vanglates ja normaalse eluga kohanemist pärast karistuse kandmist . Simuleerimisel pannakse kasutajale pähe virtuaalkiiver , mille kaudu ta kogeb mitmesuguseid tegeliku elu olukordi . Programm sisaldab iga olukorra jaoks mingi aktsepteeritava ja mingi taunitava käitumismalli ning rea hüvitavaid ja karistavaid kuulmis- ja nägemisaistinguid . Peale selle on simulaatoris alateadlikke seoseid tekitavaid kuvasignaale . Singapuri ametnikud oletavad , et simulatsioontreening kahandab vangidel taunitavaid käitumismalle . Vanglate eest vastutav aseminister Tung Daio paneb imeks asjast tekkinud rahvusvahelist kõmu . Tema arvates pole eriti ameeriklastel põhjust lärmi lüüa . “ Nende tobedad programmid on tekitanud sõltuvust kogu maailmas ja oma ajupesuga miljoneid inimesi moraalselt laostanud . Meie peame nüüd lappima nende jälgi . ” Tungi sõnul kasutatakse meetodit ainult vanglates . “ Vangla põhiidee on ju vabaduse ja enesemääramisõiguse äravõtmine . Näiteks koolisüsteemil on teistsugune roll . Seal ei kuulu tundeelu tingrefleksimine õpetuse ülesannete hulka . Teatavasti meie koolides - nagu teisteski maades - kiidetakse heade tulemuste eest ja laidetakse vigade eest , sest see on , otseselt või kaudselt , õppimise alus . ” UNESCO etoloog Brian Epson on hoiatanud uute simuleerimismeetodite eest . Tema sõnutsi võib nende abil panna inimese käituma täiesti ettearvamatult , eriti kui simuleeringu toimet tugevdatakse psühhoravimitega . Tingrefleksimise saab sooritada nii , et manipuleeritav inimene isegi ei märka , et teda mõjutatakse . Seetõttu teeb Epson ettepaneku võtta koolide õppeprogrammi tutvumine tingrefleksimise meetoditega , nii et laps õpiks aru saama , millal teda üritatakse mõjutada ja millal see on võimalik . “ On üsnagi murettekitav , et turustamiseks on hakatud keeldudest hoolimata kasutama eetiliselt küsitavaid refleksimismeetodeid . Näiteks peidetakse filmidesse kiireid pildivälgatusi , mida silm ei erista , kuid mis ikkagi mõjuvad alateadvusele . ” Reklaam Worldnetis - <arv>.<arv>.<arv> OMAKOKK - MEISTERLIKUD EINED VäHIMAGI VAEVATA Nüüd võid igast oma söögikorrast teha naudinguhetke - vaid paari nupuvajutusega . Hõrgu eine valmimise ajal võid kas või täies rahus telerit vaadata . Saad ka üllatada oma sõpru hõrgutistega , mida seni on pakutud vaid parimais restoranides . Kuidas see on võimalik ? Lahendus on - OMAKOKK ! OMAKOKK ühendab arvuti ja köögi . Arvuti sul juba on , ainult su köök vajab uuendamist . OMAKOKA köök on kombinatsioon , milles on toiduainete panipaigad , grill , ahjud , pliidid ning seadmete automaatpuhastus ja robootikaplokk . Kõiki neid juhid hõlpsalt oma senise arvutiga . Nii valmib toit . Tahaksid näiteks india toitu . Avad oma arvutis programmi OMAKOKK . Võtad OMAKOKA laserketta “ India köök ” ja valid sealt näiteks tanduuri kana . OMAKOKK ütleb sulle , milliseid hõrgutisi saab teha su köögis leiduvatest ainetest . Nüüd ütled veel OMAKOKALE , millal tahad süüa , vajutad klahvi ENTER ja ongi kõik . OMAKOKK valib panipaigast kanarinna , tükeldab selle , segab maitseainetest ja jogurtist marinaadi ning paneb kanatükid sellesse maitsestuma ja pehmenema . Sobivalt enne su valitud söögiaega võtab ta marineeritud kanatükid ja paneb need grilli . Samal ajal valmistab ta kõrvaltoidud , näiteks riisi , naan-leiva ja raita-kastme . Kui toit on valmis , teatab sellest helisignaal . Ja nüüd muudkui nautima ! OMAKOKA saad nii : Võta ühendust meie kodulehega ja telli meilt arhitekt omale koju . Ta kavandab su soovide järgi köögi välisilme ja ühtlasi OMAKOKA seadmete paigutuse . Valida saad enam kui <arv> sisustusvariandi ja <arv> värvikombinatsiooni hulgast . Paigaldamine toimub sulle sobival ajal ja nõuab mitte üle kuue nädala . Tuhandeid hõrgutisi . Praeguseks on valminud juba <arv> OMAKOKA ketast ja valik kasvab pidevalt . MEISTERKOKKADE GURMAANIROAD TAIMEHÕRGUTISI INDIA KÖÖK <arv>-<arv> BALTI TOITUDE PARIMAID HIINA HÕRGUTISED <arv>-<arv> TAI TOITE KERGUSEGA IDA-AAFRIKA RAHVUSTOIDUD LÄÄNE-AAFRIKA RAHVUSTOIDUD PRANTSUSE KÖÖK SOOME RAHVUSTOIDUD KALA EUROOPA MOODI CAJUN - TULINE JA MAITSEV TEX-MEX TOITUDE PARIMAD GURMAANI MAGUSTOIDUD JOOKIDE KUNINGANNAD Igal kettal on umbes <arv> retsepti ja valmistusprogrammi - kokku seega <arv> ümber ! Iga retsepti on testinud tunnustatud degustaatorid . Kõigi nende roogade läbiproovimiseks kulub sul üle kümne aasta , uusi kettaid aga ilmub iga kuu . OMAKOKK on su isiklik meisterkokk ! Telli ta kohe ja naudi ! Meie võrguaadress on wnet : omakokk.ee. Hõrgimate tervitustega OMAKOKK AS Basil Sear Müügijuht Wall Street Journal - <arv>.<arv>.<arv> NOKIA KOLETISTELEFON LõPUKS OMETI MüüGIL Nokia mälutelefon jõuab viimaks ometi müügile . See uudis pani Nokia madalseisus olnud aktsiate kursid reipalt ülespoole hüppama . Mälutelefoni iseärasus on selles , et ta kuuleb ja salvestab kõik , mis ta läheduses kõneldakse . Usk mälutelefonisse oli juba hakanud kõikuma , kui prototüübid ei läbinud ELi ja USA ühise Interneti-järelevalve komisjoni kriteeriume . Nõuete kohaselt peavad kõik Internetiga ühendatud seadmed olema ametivõimude järelevalve all . Nokia üritas viimse võimaluseni kaitsta oma klientide privaatsust , kuid oli sunnitud ehitama ametivõimude sooritatavaks järelevalveks oma telefonidesse seirepordi . Telefon kasutab gigabaidiseid mälukiipe ja suudab oma mällu talletada mitme päeva helisalvestised . Aku laadimise ajal tühjendab mobiil oma mälu dokkjaama , kust kasutaja võib otse või mobiili kaudu saada oma telefoni kuuldud vestlusi . Nokia , Geoworksi ja Digitali koostöös väljatöötatud otsiprogramm Personal AltaVista töötab nii dokkjaamas kui ka mälutelefonis . Teadlaste arvates arenevad koduarvutid peagi nii kiireteks , et juba mõne aasta pärast mahub koduarvutisse kõik , mida aparaadi omanik või ta vestluspartner oma mobiili juures eales kõneleb . Andmekaitse keelab tsentraliseeritud hääleregistri Firma AltaVista on saanud õiguse jälgida kõiki olulisi võrguraadiojaamu ning analüüsida häälenäidiseid ja linke kõigile Interneti-lehtedele . Rahvusvahelised andmekaitseseadused piiravad siiski selle materjali kasutamist . AltaVista saaks näiteks koostada inimeste häälenäidistest registri , kust mälutelefonide kasutajad võiksid küsida oma telefoni salvestatud vestluses osalejate nimesid ja linke muudesse nende võrgukõnesalvestistesse . Seda aga andmekaitseametnikud ei luba . Seetõttu jagab AltaVista mälutelefonide omanike endi kasutusse tarkvara , mis analüüsib häälenäidistest isikute nimed . Kõige innukamalt kasutavad mälutelefoni need , kellel on varem tulnud näiteks protokollida . Telefonist on abi muuhulgas ka siis , kui ostude nimekiri või muu meelespidamissedel on ununenud : tarvitseb ainult kuulata seda puudutavaid vestlusi . Ainus probleem on tuletada meelde sõnu või ütlusi , mille järgi neid vestlusi leida . Unustamisest uus kodanikuõigus ? Kõik ei ole siiski uudsusega rahul . Esimene vastuseisja ideele on tuntud soomlasest aktivist , kultuurinõunik Hannele Koivunen . Ta nimetab aparaati koletistelefoniks ja on teinud ELi ametnikele ettepaneku paigaldada telefoni sisse detektor , nii et salvestusobjektid oleksid teadlikud telefoni lähedalolust . Koivuneni sõnutsi on ka unustamine tähtis ja kõiki inimese kõnelusi ei tuleks salvestada järelpõlvedele või ametiisikutele uurimiseks . Hoolimata Koivuneni muretsemisest on telefon äratanud huvi . Esimesel müügipäeval seisti ta saamiseks innukalt järjekordades . Ka mõnedele teadlastele teeb muret mälutelefoni mõju ühiskonnale . Teisalt on tehisintellekti ja kultuuri uurijad ning ajaloolased ettevaatlikult lootusrikkad . Nad ootavad võimalust uurida vestlusi nende loomulikul kujul , mitte poliitikute , Hollywoodi või MSNBC kombel toodetuina . Õppiva arvuti Cyc väljatöötaja Douglas B. Lenat , oma ala liidreid maailmas , ütleb , et reaalajas vestluste viimine Cycorpi laiendab Cyc'i teadmusala tunduvalt . Cyc õpib pidevalt ning suudab seetõttu peagi vestelda ükskõik millises olukorras ja vastata mis tahes küsimustele . “ Me maksame iga huvipakkuva seireobjekti puhul telefoni omaniku sidearved , kui saame anda kõik ta vestlused Cyc'ile kuulata . ” Lenat usub , et maht ei tekita probleeme , sest süsteem suudab korraga kuulata mitmeid tuhandeid kõnesid . Martti Allingu , Eesti Ühispank , IT-valdkonna insener WAP-protokolli konkurendid SISSEJUHATUS WAP - avatud standard , mis tagab mobiilseadmetele lihtsa ja vahetu juurdepääsu erinevatele teenustele ja informatsioonile . Kuigi WAP-protokoll on viimastel aastatel leidnud palju toetust , ei ole see ainuke protokollistik , mis üritab standardiseerida ja optimeerida infoedastust traadita sidevõrkudes . Järgnev artikkel annabki ülevaate WAP-protokolli konkurentidest ja nende suhetest WAP-protokolliga . WAP VÕI JAVA Kuigi mobiilsete seadmete protsessori võimsus ja ekraani suurus pidevalt kasvavad , jäävad need siiski ka lähitulevikus enamikul telefonidel liiga väikseks , et täita natukenegi keerulisemaid Java-rakendusi . WAP-protokoll pakub selle asemel võimalust internetilehekülgedelt graafilist informatsiooni kõrvaldada nii , et need lehed sobiksid paremini kasutamiseks mobiilsetes seadmetes . Teisest küljest aga ilmub turule kogu aeg rohkem universaalseid seadmeid , mis kasutavad interneti brausimiseks Javat . Kui WAP-protokolli võib kasutada näiteks standardsetes mobiiltelefonides , kandmaks üle liiklus- ja ilmateateid , siis Java sobib hästi PDA ja telefoni hübriidides näiteks aktsiate hinna muutuste graafiliseks kuvamiseks . ITU ja UMTS ITU ( International Telecommunication Union ) on globaalne telekommunikatsiooni organisatsioon , kuhu kuulub <arv> liikmesriiki ja peaaegu <arv> liiget era- ning avalikest firmadest ja organisatsioonidest . ITU eesmärk on välja töötada kolmanda põlvkonna ülemaailmne mobiilse telekommunikatsiooni standard . See standardite kogu IMT-<arv> ( Rahvusvaheline Mobiilside Telekommunikatsioon <arv> ) peab pakkuma võimaluse ühtse ülemaailmse mobiilsidevõrgu loomiseks . IMT-<arv> standardid peavad olema küllalt suure potentsiaaliga , et rahuldada võimalikult hästi kõiki lähituleviku andmeülekande vajadusi . <arv>. jaanuaril <arv>. aastal defineeris ETSI ( European Telecommunication Standards Institute ) mobiilsidesüsteemi UMTS ( Universal Mobile Telephone System ) . UMTS on üks uutest kolmanda põlvkonna mobiilsidesüsteemidest , mida arendatakse ITU poolt väljatöötatud IMT-<arv> standardite raamistiku põhjal . UMTS-Foorum on rahvusvaheline ja sõltumatu organisatsioon , mis on kavandatud looma tööstuses üksmeelt , esitamaks UMTS-süsteemi ja rahuldamaks turu nõudmisi kõrge kvaliteediga ning odava mobiilside järele . UMTS-Foorum on kasumit mittetaotlev avatud organisatsioon , mis koosneb telekommunikatsiooni operaatoritest , tootjatest , reguleerivatest organitest , andmetehnoloogiaga tegelevatest firmadest ja ka paljudest muudest mobiilsidega seotud firmadest . Universaalne Mobiilse Telekommunikatsiooni Süsteem ( UMTS ) on WCDMA- ( Wideband Code Division Multiple Access ) põhine mobiilne kommunikatsiooniteenus , millest peaks saama GSM-mobiilsidesüsteemi järglane . Tänapäeval kasutatakse üksteisest erinevaid mobiilsidevõrgu tüüpe Ameerikas , Euroopas ja Jaapanis . UMTS-süsteemi eesmärk on ühendada omavahel kõik praegu kasutusel olevad teise generatsiooni mobiilsidevõrgud üheks kolmanda põlvkonna mobiilsidevõrguks , mis oleks kasutusel kogu maailmas . UMTS peaks hakkama pakkuma mobiilseid teenuseid , nagu piltide , video , graafika ja ka muu informatsiooni ( kaasa arvatud kõne ) ülekanne . UMTS-põhiste kommertsteenuste pakkumine peaks esialgse hinnangu kohaselt algama <arv>. aasta lõpus . Kasutades ära laiendatud sidekanali ribalaiust , hakkab UMTS andmete ülekandmise kiirus traadita spektris olema <arv> kbit/s ja <arv>,<arv> Mbit/s vahel . UMTS ei tee mobiilses andmeedastuses revolutsiooni , küll aga evolutsiooni . Praegu pakub GPRS ( General Packet Radio Service ) infoedastuse teenuse kiirust <arv>/<arv> <arv> bit/s ja üleminek UMTS-süsteemile märgib selles vallas kolossaalset hüpet . UMTS-süsteemi põhielement saab olema paketipõhine andmete ülekanne . Üle poole UMTS-võrgu liiklusest peaks ennustuste kohaselt tulema just andmesidest . Infoedastuse teenus GPRS ja arenenud modulatsioonitehnika EDGE on praegusel aja kaks UMTS-süsteemi põhilist konkurenti . Nad mõlemad pakuvad andmeedastuse kiirust , mis on potentsiaalselt võrreldav UMTS-süsteemi poolt pakutava andmeedastuse kiirusega . Nende põhinemine praegusel GSM-tehnoloogial lubab nad aga kasutusele võtta palju väiksemate kulutustega ja lühema aja jooksul kui UMTS-süsteemi . Paljudes riikides , nagu näiteks Skandinaaviamaad , Suurbritannia ja Saksamaa , tehakse juba praegu GRPS-süsteemi katsetusi ning kui kõik laabub , võib GRPS turule tulla juba <arv>. aasta alguses . UMTS-SÜSTEEMI VÕIMALIKUD PROBLEEMID SPEKTER On karta , et kõigile mobiilside operaatoritele ei jätku UMTS-spektrit . Siit tuleneb probleem UMTS- spektri jagamisega . Tekib küsimus , kellele ja mis tingimusel spektrit jagataks ( enampakkumine , riikide kaupa või mingi muu lahendus ) Nendel operaatoritel , kellele spektrit ei jätku , jääb üle kasutada teisi tehnoloogiaid ( GRPS , EDGE ) . TEHNOLOOGIA JA TASUVUS UMTS-standardi käivitamine nõuab nii võrgu infrastruktuuri kui kasutaja terminalide arendamist . UMTS-süsteemi kasutuselevõtmiseks nõutav investeeringute maht ja ekspluatatsioonikulud on väga määrava tähtsusega UMTS-süsteemi elujõulisuse hindamisel . Et UMTS-süsteemi juurutamine võib operaatorfirmadele minna päris kalliks , siit tekib küsimus , kas kliendid on nõus UMTS-teenuste eest küllalt palju maksma , et selline suur projekt ennast operaatorfirmadele ära tasuks . SIM-RAKENDUSTE TÖÖRIISTAKAST SIM-Rakenduste Tööriistakasti ( SIM Application Toolkit ) protokoll on juba praeguseks GSM-standardisse vastu võetud ja paljudes kohtades ka kasutusel . “ SIM ” tähendab intelligentset kaarti , mis on pandud GSM mobiiltelefoni ja sisaldab informatsiooni selle mobiiltelefoni kasutaja kohta . SIM-Rakenduste Tööriistakast pakub meile paindlikkust SIM-kaarti salvestatud informatsiooni uuendamisel ja uuemate teenuste laadimiseks üle mobiilsidekanali . Näiteks saavad võrguoperaatorid kaugjuhtimise teel modifitseerida kliendi traadita terminali , saates sinna serverist lühisõnumitesse peidetud koode - SIM-Rakenduste Tööriistakasti spetsifikatsioonis on just lühisõnumite saatmine peamine mehhanism SIM-kaardi personifitseerimisel kasutaja jaoks . SIM-Rakenduste Tööriistakast on projekteeritud kui kliendi-serveri rakendus . SIM-kaartide platvormide spetsialistid nagu Orga , Gemplus ja AU-System , on juba esitlenud oma serverilahendusi . Samamoodi on firmad nagu Siemens , Motorola ja Alcatel esitlenud telefone , mis toetavad SIM Rakenduste Tööriistakasti . Suhteliselt hiljuti hakkasid SIM-Rakenduste Tööriistakasti toetama Ericssoni telefonid . SIM-RAKENDUSTE TÖÖRIISTAKASTI HEAD OMADUSED SIM-Rakenduste Tööriistakast on viimastel aastatel leidnud täielikult kinnitust kui Globaalse Mobiiltelefonide Süsteemi ( GSM ) osa . SIM-Rakenduste Tööriistakasti toetavad mitmed mobiiltelefone tootvad firmad , nagu Alcatel , Ericsson , Siemens ja Motorola . SIM-Rakenduste Tööriistakasti toetavad mitmed kommertsvõrguteenused mobiilsest pangandusest kuni elektronpostini . On ilmne , et SIM-Rakenduste Tööriistakast on väga hea vahend SIM-kaartidele salvestatud informatsioonile ligipääsemiseks . See SIM-kaardile salvestatud personaalne informatsioon lubab palju turvalisi funktsioone ja kasutaja identifitseerimist , mis mõlemad on elektroonilise äri jaoks väga tähtsad . WAP-turvalisuse kiht ei ole kohustuslik , vaid valikuline ega kasuta ära kõiki intelligentsete kaartide võimalusi . Intelligentsete kaartide tootjad ja turvalisuse eksperdid , nagu näiteks Schlumberger ja Certicom ühinesid WAP-foorumiga , et proovida veelgi parandada WAP-protokolli turvalisust . Samal ajal jääb SIM-Rakenduste Tööriistakast praeguse aja üheks kõige paremaks protokolliks kõrget turvalisust nõudvate rakenduste jaoks . SIM-Rakenduste Tööriistakasti toetavad paljud uued ja juba olemasolevad võrguoperaatorid . Paljud neist on kokku leppinud , et kõik uued telefonid , mis nende võrku võetakse , peavad toetama SIM-Rakenduste Tööriistakasti . Võrguoperaatorite hulka , kes on selle otsuse teinud , kuuluvad näiteks Dutchtone The Netherlands , Orange UK , D<arv> T-Mobil Germany , Telecom Italia Mobile ja KPN Orange Belgias . D<arv> teatas , et alates <arv>. aasta maist on iga nende võrku ühendatud telefon ühilduv SIM-Rakenduste Tööriistakastiga . Lisaks sellele käivitas Telecom Italia Mobile <arv>. aasta mais hulga SIM-Rakenduste Tööriistakasti toetavaid teenuseid , mis sisaldavad endas informatsiooni , mobiilse panganduse ja elektronposti teenuseid . MExE MExE ( Mobile Execution Environment ) eesmärgiks on pakkuda mobiilsetes seadmetes standardiseeritud ja avarat keskkonda , et käivitada operaatorile või teenuse pakkujale spetsiifilisi rakendusi . MExE on projekteeritud kui täismahuline rakenduste käivitamise keskkond mobiilsetele terminalidele , mis ehitab kliendi mobiilsesse terminali Java virtuaalse masina . MExE kasutab arenenud ja intelligentseid kasutajamenüüsid ning intelligentse mobiilsidevõrgu ( nn GSM CAMEL ) teenuseid . MExE planeerib samuti integreerida mobiiltelefoni asukoha määramise teenuseid ja toetab väga paljusid inimese-masina liideseid , nagu kõnetunnistus , ikoonid ja pehmed nupud . MExE-keskkonnal on mitmeid sarnasusi WAP-protokolliga . Mõlemad protokollid on projekteeritud töötama koos väga paljude GSM mobiilside võrkude infoedastuse teenustega SMS-teenusest kuni GPRS-ini . Seal kus WAP-protokoll kasutab skripti keelt , graafikat , animatsiooni ja teksti , lubab MExE täielikku rakenduste programmeerimist . See nõuab MExE keskkonnale range turvalisuse raamistiku ehitamist , et ära hoida lubamatut kaugjuurdepääsu kliendiandmetele . Kuna Java rakenduste programmeerimine ja käivitamine nõuab mobiilselt kliendilt päris suurt protsessorijõudlust , siis on MExE mõeldud peamiselt järgmise põlvkonna võimsatele mobiilsetele seadmetele . Teisest küljest võivad MExE terminalideks olla ka tänapäeva mobiiltelefonid , sest MExE sisaldab jõudluse määramise meetodit nimega classmarks . MExE classmarks defineerib MExE-ga seotud teenuste taseme , mida antud terminal suudab toetada . Tulevikus hakkavad olema tasemed , mis vastavad WAP-protokolli funktsionaalsusele , ja tasemed , mis ületavad seda . MExE mobiilne klient saab informeerida MExE serverit oma tasemest , millega ta teatab oma suutlikkusest mingit teenust kasutada . MExE arendamine toimub SMGE<arv> grupis ( Euroopa Telekommunikatsiooni Standardite Instituudi ( ETSI ) GSM-standardite loomise organisatsiooni standardiseerimisgrupp ) , kes vastutab GSM-i võrgu protokollide eest . MExE toetajate hulka kuuluvad muu hulgas Motorola , Nokia , Lucent Technologies ja Nortel . MExE kasutuselevõtt peaks jääma kaugemasse tulevikus kui WAP-protokolli oma , sest nagu juba mainitud , ei oma praegused mobiilsed terminalid küllaldaselt ei protsessori võimsust ega suuri ekraanimõõtmeid Java-rakenduste täismahuliseks käivitamiseks . BLUETOOTH Bluetooth tekkis mobiilse kommunikatsiooniga ja mobiilse andmetöötlusega tegelevate kompaniide koostöös , eesmärgiga arendada lühimaakommunikatsiooni standardit , mis lubaks andmete traadita ülekannet kuni <arv> m ulatuses . Bluetooth sisaldab endas nii standardset kommunikatsioonikeskkonda kui ka odavat arvutikiipi selle keskkonna kasutamiseks . Bluetoothi spetsifikatsioonid töötati välja <arv>. aasta alguseks Nokia , Ericssoni , IBM , Inteli ja Toshiba eestvedamisel . Hiljem on kampaaniaga ühinenud veel näiteks One<arv>ONE , Motorola , Qualcomm , Compaq , Dell , <arv>Com Palm , VLSI , Xircom , Psion Dacom ja Lucent . <arv>. aasta detsembrikuus liitus Bluetoothi liiduga ka maailma suurim tarkvaratootja Microsoft . Bluetooth ei kasuta mobiilsidevõrgu transaktsioone ja tema spekter on vabalt kasutatav litsentsita spektrialas ( <arv>,<arv> gigahertsi ) . Bluetoothi andmeedastuse kiirus peaks jääma <arv> kbit/s ja <arv> Mbit/s vahele . Bluetooth hõlbustab kohaliku traadita lähivõrgu loomist , milles erinevad mobiilsed terminalid ja arvutid saavad üksteisega kommunitseeruda ja andmeid vahetada , isegi kui nad on liikumises ega asu üksteise nägemispiirkonnas . Bluetooth tähendab ka seda , et kui kasutajal on mitmeid Bluethoothi toetavaid mobiilseid seadmeid , saab ta neid koos kasutada nagu integreeritud intelligentset telefoni . Selline andmevahetus ja sünkronisatsioon on üks Bluetoothi peamisi rakendusi . Teda saab kasutada aga ka kauplustes , parkimisautomaatides , kinodes ja veel paljudes teistes kohtades elektrooniliseks maksmiseks . Bluetoothi kasutamine arvutite ja perifeeriaseadmete ( klaviatuurid , hiired , printerid ) omavaheliseks ühendamiseks lubab lahti saada tänapäeva arvutite suurest juhtmepuntrast . Bluetoothi partnerid peavad üheks tema eeliseks ka seda , et ta töötab kogu aeg taustal ega nõua spetsiaalset käivitamist . Muidugi võib selline omadus saada kasutajale koormavaks , kui seda korralikult ei kontrollita ( näiteks soovimatu reklaam ) . Bluetoothi standard sisaldab selle vältimiseks vastavaid kontrollimehhanisme . <arv>. aasta septembrinumbris kirjutati ajakirjas “ Wired ” , et kuigi Bluetoothil on infrapunaliidese ees mitu eelist , ei ilmne Bluetoothi tõelised rakendused ja tema turupotentsiaal enne , kui on olemas kriitiline mass Bluetoothi toetavaid arvuteid , mobiiltelefone ja muid kaasaskantavaid seadmeid . Ning isegi kui need seadmed on müügile tulnud , ei pruugi inimesed emotsionaalselt loobuda juba tuttavast traadiga võrgulahendusest . Bluetoothile pakuti eluiga kõige rohkem <arv> kuud . Kuigi ka enne on olnud ideid ühendada kodumasinad ja muud elektroonilised terminalid võrku , pole nende eluiga eriti pikaks kujunenud . Bluetoothi eelis on aga see , et erinevalt teistest üritajatest on ta enda seljataha kogunud palju mobiilsete terminalide ja modemite tootjaid . Samuti peaks tema eeliseks teiste traadita lühimaa-võrgulahenduste ees olema ka tema teistest sarnastest lahendustest soodsam hind . Esimesed Bluetoothi terminalid on just praegu müügile jõudnud/jõudmas . ERINEVATE PROTOKOLLIDE TÄHTSUS JA KASUTAMINE On märgata , et kõik uued mobiilsideprotokollid on väga sarnaste omadustega ja on koostatud , silmas pidades sama tüüpi rakendusi . Protokollide vahel ilmneb ka mitmeid kattuvusi , WAP-protokolli uuemad versioonid sisaldavad endas SIM-Rakenduste Tööriistakasti protokolli , WAP hakkab aga sisalduma näiteks MExE-protokollis . Kuni praeguseni on erinevad mobiiltelefonide tootjad pidanud turule tooma mobiiltelefonide mudeleid , mis toetavad erinevaid , üksteisega mitteühilduvaid protokolle - ei ole eksisteerinud ühtset standardit , mida oleks tunnustanud enamik mobiilsidega tegelevaid firmasid . Minevikus on olnud vaja arendada samast teenusest mitu erinevat versiooni , et neid saaks kasutada erinevate telefonidega ja erinevates riikides . Sellepärast on iga standardiseerimisprotokoll suur samm ühtse ülemaailmse mobiilsidevõrgu poole . WAP-protokolli elujõulisus tundub olevat väga suur . Arvata on , et peaaegu kõik uute mobiilsideprotokollide arendajad on juba ette arvestanud WAP-protokolli levikut ja ülemaailmset tunnustamist . Laialdast kasutamist on praeguseks leidnud SIM-Rakenduste Tööriistakast , mis pakub väga head võimalust mobiilse kasutaja identifitseerimiseks ja kasutajaandmete hoidmiseks ning muutmiseks mobiilses terminalis . SIM-Rakenduste Tööriistakast on väga hea täiendus WAP-protokollile just nendes rakendustes , mis nõuavad eriti kõrget turvalisust . Paljutõotav tundub olevat ka UMTS-süsteemi tulevik . See IMT-<arv> raamistikku kasutav kolmanda põlvkonna mobiilsidestandard paistab olevat saanud paljude mobiilsidega seotud firmade poolt sooja vastuvõtu . Tundub , et tal on väga suured väljavaated saada ülemaailmselt tunnustatud kolmanda põlvkonna mobiilsidesüsteemiks . Bluetoothi tulevik on paljude asjatundjate arvates veel lahtine . Siiski tundub , et ka see standard leiab laialdast vastuvõttu ( juba sellepärast , et ta pakub palju huvitavaid rakendusvõimalusi ) . Bluetoothi elujõulisust tõestavad veel faktid , et teda toetavad väga paljud riistvara- ja ka tarkvaratootjad ning juba on müügile jõudnud ka esimesed Bluetoothi tehnoloogiat kasutavad seadmed . Bluetooth on rohkem WAP-protokolli täiendus , mitte aga konkurent . Bluetooth võib pakkuda võimalust ühendada ilma juhtmeid kasutamata kõik teie mobiilsed seadmed teie mobiiltelefoniga , mis omakorda kasutab oma töös intranetti või internetti saamiseks WAP-protokolli . MExE on Javat kasutav ja WAP-protokolli sisaldav standard , mis peaks kasutusele tulema kaugemas tulevikus . MExE eeldab võimsamaid ja suurema ekraaniga mobiilsideseadmeid , kui seda tänapäeva tehnoloogia suudab mõistliku hinna eest pakkuda . MExE-standard tundub olevat lootust andev , kuid täpsemat hinnangut tema elujõulisuse kohta on veel vara anda . On väga tähtis , et mobiilsete teenuste pakkujad toetaksid ka tulevikus mitmeid võrgutehnoloogiaid ega seoks ennast ainult ühe infokandjaga . Tegelikult on üldse väga vähe tõenäoline , et kunagi hakkab olema ainult üks üldkasutatav tehnoloogia , mida kõik mobiilsidega seotud firmad kasutavad . See on tingitud mobiilside pidevast arengust - uue tehnoloogiaga on alati koos käibel ka vanem . Viimane on tingitud sellest , et uute mobiilsete terminalide ning uute võrgustruktuuride kasutuselevõtt võtab alati oma aja . WAP-protokoll sobibki väga hästi rakenduste standardiseerimiseks , et neid oleks võimalik kasutada nii uuemate kui vanemate võrgutehnoloogiatega . gap desc='references'&gt; Aleksander Keller , TTÜ informaatika instituudi magistrant ActiveX-elementide ja komponentrakenduste loomine ÜLDISED PÕHIMÕTTED Microsoft on nimetanud oma kolme põhitehnoloogiat ühise nimetusega “ aktiivne platvorm ” . Need kolm tehnoloogiat on - Active Desktop , Active Server ja ActiveX . Active Desktop koosneb teenustest , millega Microsofti väitel hakatakse varustama kõiki Windowsi versioone ja ka teisi peamisi operatsioonisüsteeme , kaasa arvatud MacOS ja Unix . See unifitseerimine hakkab toimuma MS Internet Exploreri kaudu , mis mängib trooja hobuse rolli . Muidugi , integreerumine sellel tasemel ei ole niisugune nagu otseselt operatsioonisüsteemiga . Active Server kujutab endast API-liideste kogumit MS Internet Information Serveri jaoks , mis töötab Windows NT keskkonnas . ActiveX laiendab sängitamise ja linkimise mudelit ( OLE ) ja komponentide objektmudelit ( COM ) koht- ja laivõrkudele . Analoogiliselt JavaBeans'iga , on ActiveX komponentide ühendamisel ja liitmisel raamistikuks ning selles tähenduses on need kaks tehnoloogiat ka otsesed konkurendid . ActiveX-ohjurid kujutavad endast komponente , mis paigutatakse ActiveX-konteinerisse . Neid võib sängitada paljudesse ActiveX-dokumentidesse , nii nagu Beans'id on sängitatud JavaBeans-dokumentidesse . Kuid Javas programmeerijatel on siiski teatud eelised , sest nad saavad oma keele abil luua ActiveX-elemente analoogiliselt Microsofti Visual Basic'u ( VB ) ja Visual C++ ( VC++ ) -ga . JavaBeans- ja ActiveX-tehnoloogial on ühine eesmärk - tagada tarkvara komponentide töö tarkvara konteinerites . Taolisteks konteineriteks on veebibrauserid ja teised dokumentide sirvimise vahendid . JavaBeans on integreerimise tehnoloogia ( komponentide karkass - component framework ) , mis võimaldab dokumenti sängitatud komponentidel ( nn ubadel - beans ) suhelda omavahel ja konteineriga . See tähendab , et nad võivad teha koostööd veebibrauserites ja teistes vahendites , mis toetavad JavaBeans-tehnoloogiat . Seda tehnoloogiat hakkavad tulevikus toetama ka kõik Java-põhised visuaalsed arendusvahendid . Javas programmeerijad saavad valida , kas kasutada oma rakendustes JavaBeans'e või ActiveX-elemente . Nende jaoks , kes programmeerivad Delphi's või Visual Basic'us , ei tundu selles arhitektuuris esmapilgul olevat midagi uut . Asja olemus on sama : korduvaks kasutamiseks mõeldud komponentide loomine ja nende kasutamine programmide kokkupanemiseks . Komponendikogumid võivad sisaldada lihtsaid nuppe , tekstiaknaid , loendibokse , aga ka üldisema iseloomuga elemente nagu näiteks kalender või elektrontabel . KOMPONENTIDE LOOMISE ÜLDISED PÕHIMÕTTED Iga elemendi jaoks määratakse üldjuhul järgmised karakteristikud : omadused , mida saab lugeda ja muuta meetodid , mida saab kasutada ( välja kutsuda ) sündmused , millele saab reageerida ja mida saab töödelda . Vaatleme näiteks ActiveX-elementi , mis leiab ruutvõrrandi ax<arv>+ bx + c = <arv> juured . Leitakse ainult reaalarvulised juured ning eeldatakse , et kordajad a , b ja c ei võrdu nulliga . Üheks esimeseks sammuks elemendi kavandamisel on kasutajaliidese loomine . Tüüpiliselt kujutab see endast vormi , millel võivad paikneda erinevat tüüpi ohjurid : tekstiboksid , nupud jmt. Antud elemendi võimalik kasutajaliides on toodud joonisel <arv>. Joonis <arv>. Kasutajaliides ruutvõrrandi lahendamise ActiveX-elemendi jaoks Elemendi põhiomadusteks on kordajad a , b ja c . Lisaks neile määratakse rida standardseid omadusi , mis on iseloomulikud enamikule elementidele : mõõtmed , asukoht , nähtavus , tekstide kirjatüüp , suurus jm. Elemendil on kaks meetodit : GetX<arv> ja GetX<arv> , mis tagastavad vastavalt võrrandi juured x<arv>ja x<arv>. Sündmuseks , millele element reageerib , on klõpsatus nupule Lahenda . ActiveX-elemendi omadusi saab tavaliselt muuta nii rakenduse loomise kui ka selle töötamise ajal. Meetodeid ja sündmusi saavad kasutada ainult vastavad protseduurid rakenduse töö ajal. ActiveX-komponentide loomiseks kasutatakse erinevaid programmeerimiskeeli : Visual Basic , Visual C++ ja Java . Põhimõtete tutvustamiseks kasutame siin Visual Basic'ut . Elemendi loomise põhisammud on järgmised : Luuakse uue ActiveX-elemendi projekt . Aknas UserControl luuakse elemendi visuaalne kasutajaliides , kasutades selleks tööriistakasti Toolbox elemente analoogiliselt sellega , nagu tehakse vormide loomisel . Lisatakse elemendi omadused , meetodid ja sündmused , mida teised programmid saavad kasutada . Kirjutatakse programmikood , mis realiseerib elemendi funktsionaalsuse . Lisatakse standardne EXE-programmi projekt elemendi silumiseks ja testimiseks . File-menüüst valitakse korraldus Make , mis kompileerib elemendi OCX-failiks . Protseduurid , mis on seotud omaduse a lisamisega , on toodud Listingul <arv>. Omaduste b ja c lisamine toimub analoogiliselt . Listing <arv> Kordajale a uue väärtuse omistamine see muudab automaatselt tekstiboksi txtA väärtust Public Property Let A ( newA As Single ) txtA.Text = Str ( newA ) Uuendame omaduse väärtust , mis oli määratud rakenduse loomise ajal PropertyChanged “ A ” End Property Kordaja ( omaduse ) a väärtuse lugemine Public Property Get A ( ) As Single A = Val ( txtA.Text ) End Property Selleks et omadust saaks lugeda ja muuta rakenduse loomise faasis , peab lisama sündmuste ReadProperties ja WriteProperties protseduurid ning kasutama objekti PropertyBag , mis sisaldab omaduste määranguid ( vt Listing <arv> ) . Listing <arv> Loomise faasis määratud väärtuse lugemine Private Sub UserControl_ReadProperties ( PropBag As PropertyBag ) A = PropBag.ReadProperty ( “ A ” , <arv> ) <arv> - vaikimisi võetav väärtus End Sub Säilitame loomise faasis määratud väärtuse Private Sub UserControl_WriteProperties ( PropBag As PropertyBag ) Call PropBag.WriteProperty ( “ A ” , A , <arv> ) <arv> - vaikimisi võetav väärtus End Sub Mõnevõrra teisiti määratakse kirja iseloomustavad omadused . Toome näiteks omaduse FontText , mis määrab kirja kordajate a , b ja c tekstiboksides . Listing <arv> Määrame kirja karakteristikud Public Property Get FontText ( ) As Font Set FontText = txtA.Font End Property Määrame kirja omaduse tekstiväljade txtA , txtB ja txtC jaoks : Public Property Set FontText ( ByVal newFont As Font ) Set txtA.Font = newFont Set txtB.Font = newFont Set txtC.Font = newFont PropertyChanged “ FontText ” End Property Loomise faasis määratud kirja omaduste lugemine Private Sub UserControl_ReadProperties ( PropBag As PropertyBag ) Set txtA.Font = PropBag.ReadProperty ( “ FontText ” , Ambient.Font ) Set txtB.Font = txtA.Font Set txtC.Font = txtA.Font End Sub 'Loomise faasis määratud kirja omaduste säilitamine Private Sub UserControl_WriteProperties ( PropBag As PropertyBag ) Call PropBag.WriteProperty ( “ FontText ” , txtA.Font , Ambient.Font ) Set txtB.Font = txtA.Font Set txtC.Font = txtA.Font End Sub Meetodi GetX<arv> , mis leiab ruutvõrrandi esimese juure , võib lisada Listingul <arv> toodud protseduuride abil . Listing <arv> Public Function GetX<arv> ( ) As Single Lahenda Pöördumine protseduuri Lahenda poole GetX<arv> = lblX<arv>.Caption End Function Protseduur ruutvõrrandi lahendamiseks Public Sub Lahenda ( ) Koodid ruutvõrrandi lahendamiseks ... End Sub Sündmuse Click ( klõps ) määramiseks peab kirjutama järgmise protseduuri Public Event Click ( ) RaiseEvent Click Genereerib sündmuse Click End Sub INTERNETIS KASUTAMISEKS MÕELDUD ActiveX-ELEMENDID Internetis kasutamiseks mõeldud ActiveX-elementide loomisel peab arvestama järgmisi iseärasusi : Digitaalallkiri . Igal komponendil peab olema digitaalallkiri , mis identifitseerib autorit ja kinnitab komponendi ohutust rakendustes kasutamisel . Digitaalallkirja võib saada näiteks firmalt VeriSign ( <hyperlink> ) . Harude mudel . ActiveX-element peab põhinema harude mudelil ( threading model ) , mis vastab pearakenduse struktuurile . Üheharulised rakendused võivad kasutada nii üheharulisi elemente ( single threading controls ) kui ka jaotatud harudega elemente ( apartment threading controls ) . Jaotatud harudega rakendused saavad kasutada ainult jaotatud harudega elemente . DHTML-rakendused ( Dynamic Hypertext Markup Language ) kuuluvadki viimaste hulka . Asünkroonne laadimine . Internetis laetakse vaikimisi kõik objektid asünkroonselt . Enne kui viidata oma protseduuris objektidele , peab veenduma , et need on laetud . Visual Basic'us saab objekti olemasolu kontrollida funktsiooniga IsNull . Pakkimine enne levitamist . ActiveX-elementidel , mida kasutatakse Internetis , peab olema vastav paigaldamisprogramm . Vajalike CAB- ja HTML-failide loomiseks võib kasutada Visual Studio koosseisu kuuluvat tarkvara Package and Deployment Wizard . ActiveX-elemendi paigutamiseks veebileheküljele kasutatakse märgist ≤OBJEKT≥ . Konkreetne element määratakse atribuudiga CLSID , mis kujutab endast elemendi unikaalset identifikaatorit . Näiteks toodud elemendi määramine HTML-dokumendis näeb välja järgmiselt : ≤OBJEKT classid=classid : <arv>B<arv>D<arv>-<arv>e<arv>b-<arv>d<arv>-<arv>-<arv>F<arv>FD<arv>B id=SquareEquation<arv>≥ ≤PARAM NAME= “ BackColor ” Value= “ -<arv> ” ≥ ≤PARAM NAME= “ ForeColor ” Value= “ -<arv> ” ≥ ... ≤/OBJECT≥ Siin määrab konstruktsioon id=SquareEquation<arv> objekti nime , mida võib kasutada VBScriptis ja JavaScriptis . Märgise PARAM abil määratakse objekti omaduse nimi ja väärtus . KOMPONENTRAKENDUSED INTERNETIS ActiveX-elementidel põhinevate komponentrakenduste loomine ja kasutamine tugineb Microsofti COM- ja DCOM-tehnoloogiatele ( COM - Component Object Model , DCOM - Distributed COM ) . Komponentrakendustel on palju eeliseid , võrreldes traditsioonilisel viisil loodud rakendustega . Komponendid võivad paikneda erinevatel arvutitel , mis võimaldab ühtlaselt jaotada viimaste ja ka võrgu koormust . Kulutused komponentrakenduste loomiseks on väiksemad , sest elemente saab kasutada erinevates rakendustes . Elemente võib luua erinevate programmeerimiskeelte abil . Üheks peamiseks vahendiks komponentrakenduste koostamiseks ja kasutamiseks on Transaction Server ( transaktsioonide server ) , mis kuulub Windows NT koosseisu . See tagab koostöö komponentide vahel , sõltumata sellest , kas komponendid asuvad samas arvutis või erinevates arvutites . Peamised rakenduste liigid on : DHTML-rakendused , ActiveX-dokumentidel põhinevad rakendused ja IIS-rakendused . DHTML-rakendused ( Dynamic HTML ) laetakse internetist ja täidetakse kliendi arvutis . Rakendustes kasutatakse HTML <arv>.<arv> juhtelemente , hüperlinke ja vahendeid dokumentide vormindamiseks . DHTML-rakenduse projekt sisaldab iga veebilehekülje jaoks konstruktori ning võib sisaldada klassi- ja koodimooduleid , vorme , ActiveX-elemente ja teisi täidetavaid komponente . Pärast kompileerimist paigutatakse täidetavad komponendid eraldi DLL-faili , millele viitavad kõik rakenduse HTML-failid . See võimaldab eraldada rakenduse täidetava ( aktiivse ) osa dokumentidest . DHTML-rakendus luuakse VBScript abil , mis võib kasutada Internet Exploreri laiendatud mudelit . Skriptid käivituvad vastuseks sündmustele , mida võivad tekitada veebilehekülje suvalised elemendid , sh ka ActiveX-elemendid . DHTML võimaldab skriptide abil muuta märgiseid ja määrata sündmuste kogumi , mis on seotud märgisega ja sellele vastava objektiga . DHTML võimaldab suurendada kliendipoolse rakenduse aktiivsust ka mitmete teiste vahenditega . Ta saab dünaamiliselt paigutada , muuta ja vormindada veebilehekülje erinevaid elemente . Näiteks võib asendada graafilise kujundi , muutes vastava märgise atribuute . Internet Explorer toetab ka vormi väljade sidumist serveril paikneva andmebaasiga , mis võimaldab operatiivselt lugeda ja muuta viimase andmeid . DHTML-rakendustel on aga ka üks väga oluline puudus - neid saab kasutada ainult Internet Exploreri abil , vaatamata Microsofti püüetele teha DHTML-ist avatud standard . ActiveX-dokumentidel põhinevad rakendused laetakse samuti internetist ja täidetakse kliendi arvutis . ActiveX-dokumentides saab kasutada Windowsi standardohjureid ning ActiveX-elemente . Seda tüüpi rakendus võib tagada täieliku kontrolli brauseri üle , võimaldades näiteks muuta selle akna väljanägemist , lisada kasutajamenüüsid jm. ActiveX-dokumentide loomine ja kasutamine on analoogiline Visual Basic'u vormide loomisega ja kasutamisega , kuid on ka olulisi erinevusi : Juurdepääsuks dokumendi andmetele rakenduse teistest osadest on vajalikud spetsiaalsed meetmed . Dokumendi omaduste väärtuste poole saab otse pöörduda ainult antud dokumendist . Taolise dokumendipõhise rakenduse käivitamiseks on vajalik Internet Explorer , dokumente ei saa ainult Visual Basic'u keskkonnas siluda ja testida . Kompileeritud rakenduse saab käivitada ainult HTML-failist , mis laeb rakenduse komponendid enne VBD-failide kuvamist ( VBD - Visual Basic Document ) . Office <arv> rakendusprogrammid ( Word , Excel jt ) võimaldavad salvestada oma dokumente ActiveX-dokumentide vormingus ning kasutada neid otse brauseris . IIS-rakendused töötavad veebiserveril ja vahetavad andmeid kliendi arvutiga . Nad kasutavad IIS-serveri ( Internet Information Server ) objektimudelit ja serveril paiknevaid ActiveX-komponente . IIS-rakenduse loomiseks on vajalik IIS-serveriga Windows NT või PWS-serveriga ( PWS - Personal Web Server ) varustatud Windows <arv>/<arv> . IIS-rakendustes on informatsioon salvestatud ASP-failides ( ASP - Active Server Pages ) . Need kujutavad tekstifaile laiendiga . asp ning sisaldavad HTML'i koode ja skripte . ASP-faile töötleb IIS-server , informatsioon aga saadetakse kliendi arvutisse HTML-vormingus . Rakenduse täidetavad osad asuvad DLL-failis , mida täidetakse serveris . Viimane teostab kogu töötluse , brauserites on kasutusel ainult HTML-failid . Loomisfaasis koosneb IIS-rakenduse projekt ühest veebiklassi konstruktorist ning suvalisest hulgast HTML-vormingus mallifailidest , klassi- ja üldmoodulitest . Taolistes rakendustes ei ole tavaliselt vorme , sest nad ei kuva informatsiooni otseselt kliendi arvutis . Leo Võhandu , TTÜ emeriitprofessor J-keel J-keel on kanadalase Kenneth Iversoni poolt välja mõeldud ja Roger Hui ning Eric Iversoni poolt realiseeritud moodne programmeerimiskeel . Süsteemne , võimas , põnev ning ... lihtne ja raske korraga . Miks ma A &amp; A veergudel sellest keelest räägin ? Põhjus on lihtne . Alates septembrist <arv> on J-keele süsteemi variant <arv>.<arv> vabavara ja aadressilt <hyperlink> tasuta saadaval . Kogu süsteem koos käsiraamatute , tugede , demode , laborite ja muu värgiga hõivab umbes kolm megabaiti . ComTrade'i püsikliendina saabus J-pakett veebist paari-kolme minutiga . Tavaprogrammeerimisel on meil põhiliselt tegu kolme keerukusastmega , mis on lahendatavad järgmiste tegevustega : Läbi andmemassiiv ja tee iga elemendiga midagi . Enne sordi ja siis tee iga elemendiga midagi . Ürita läbida lahenduspuu . Kui jõuad mingi lahendini , ole rahul või otsi järgmist lahendit . Kui saab selgeks , et jõudsid ummikteele , siis tagurda esimese sobiva hargnemiskohani ja katsu teist teed minna . ( Sellise lahendusmetoodika jaoks sobib suurepäraselt loogilise programmeerimise keel PROLOG ) . J- keel üritab kasutada peamiselt kahte esimest käsitlusvarianti . Oluliseks erinevuseks on see , et võrreldes näiteks hariliku struktuurprogrammeerimisega üritatakse võimalikult minimaalselt teha eeldefineerimisi . ( Vaadake suvalise Pascali või C-programmi algust ! Eellugu on parajalt pikk . ) J-keeles usutakse , et keel ja arvuti on ise piisavalt targad . Iga tühja asja ei ole vaja arvutile ette öelda . Keel on nn vahekujuga keel , mis tarbijale on pruugitav ka otseselt nö kalkulaatori kujul , s.o kirjutad , vajutad ENTER-klahvile ja saadki vastuse . Alustame ! ARVUDE KESKMINE See teema sobib sissejuhatuseks ehk kõige paremini . Lihtne ja efektne . Olgu antud andmenimistu a . <arv> <arv> <arv> <arv> <arv> <arv> Selle kirjutisega on määratud nimistu a oma kuue elemendiga . ( Ütleme “ a on ... ” ) Kui me soovime näha a sisu , siis kirjutame a ( ja vajutame enter-klahvile ) <arv> <arv> <arv> <arv> <arv> <arv> Vastus tuleb ekraanile , algtekstist veidi vasakule . Kuni sisestusklahvile pole vajutatud , on tekst ( ja sisu ) lihtsalt parandatav . ( Pärast loomulikult kah ! ) Tarbija vaatekohast on tegemist keelega , milles on nimedega varustatud objektid ( noomenid ) ja nendega tehtavad tööd ( verbid ) . Iga nimi on kas noomen või verb . Mõned verbid : a <arv> ( Loenda a elementide arv ) +/ a ( Liida kõik a elemendid ) <arv> ( +/a ) % ( #a ) Jaga a summa a elementide arvuga . <arv>.<arv> Seda avaldist saab lihtsustada : ( +/ % ) a <arv>.<arv> On kerge aru saada , et argumendi a ees olev suluavaldis ongi parajasti üks J-keele programm , mis arvutab keskmist . Soovi korral võimegi defineerida uue verbi ( programmi ) keskmine= : +/ % Sellega ongi defineeritud keskmise arvutamise programm , mis ei ole seotud argumendi nimega . Objekti , millele me verbi rakendame , võime lisada hiljem . keskmine a <arv>.<arv> Ei mingit tsükli loomist , summa algväärtustamist , elementide eraldi loendurit , tsükli lõpetamist jne. Nimepanek on J-keeles vaba : ksk = : keskmine = : +/ % ksk a <arv>.<arv> Elementideks on arvud ( nimistu puhul on eraldajaks tühik ) , ratsionaalarvud <arv>r<arv> ( =<arv>/<arv> ) , kompleksarvud <arv>j<arv> ( = <arv>+<arv>i ) , ( väga ) pikad arvud <arv>x , vektorid , maatriksid , tensorid . Ratsionaalarvudega arvutus on inimlik : <arv>r<arv> + <arv>r<arv> <arv>r <arv> Toimub ka kombekas murdude taandamine ja eritüüpide seostamine <arv>r<arv> + <arv>r<arv> <arv>.<arv> + <arv>r<arv> <arv>r<arv> <arv>.<arv> Kompleksarvudega tööks vajalikud verbid on samad . Töö on kiire ja korralik . KAHVEL JA KONKS Keskmise arvutamisel nägime ühte J-keelele ülimalt omast konstruktsiooni , nn kahvlit : ksk= : ( +/ ) ( % ) ( ) ( liida ja jaga loendatuga ) Kolm kõrvutist verbi moodustab kahvli ( fork ) Avaldis x(fgh)y tähendab pikemalt välja kirjutatuna järgmist : (xfy)g(xhy) : _g_ / f h / / x y x y Analoogiliselt ( nagu meil ) : (fgh)y on (fy)g(hy) See on hea , sest nii saab avaldisele argumendi sappa kirjutada ( ükskõik , mis seal ei oleks ! ) . Edaspidiseks peamegi meeles , et kui on tegu pikkade J-keelsete verbiavaldistega , millest on vaja aru saada , siis eraldame lõpust alates nii palju kolmikuid ( kahvleid ) kui võimalik . Mis üle jääb , on tüüpiliselt konks ( hook ) : (fg)y y(fg)y x(fg)y x(fg)y See kirjutusviis on väga kasulik nn topelttööde korral . Näiteks verb “ suurem üle “ seotuna jagamisega annab mõnusa andmete normeerimise võimaluse : norm= : % . / ( parempoolne osa otsib üle argumendi maksimaalse elemendi ja siis jagab kogu argumendi sellega läbi ) . Eelnevast lausest on ka näha , et jagamismärgina kasutatakse %-märki , üldsuskvantorina ( kõik ) aga kaldkriipsu . Akadeemik Enn Tõugu küsis alati igasuguste uute programmeerimiskeelte tegijatelt , et kas need saavad arvutada näiteks inimrühma pikkuste jaoks keskmisest pikemate inimeste pikkuste summa . J-is näeks see rehkendus välja küllaltki loomulik ( J mõttes muidugi ! ) : +/ ( a ( +/%# ) a ) #a Ma avan selle lause sisu veidi pikemalt . Liidetakse loogilises tingimuses ( a ( +/%# ) a ) tõeste elementide väärtused nimistust a. ( Trellid eraldavad a-st vasakul antud loetelus tõestel positsioonidel olevad elemendid ) . See lause on tõesti üsna harilik J-lause . Et meil on argument a defineerivas lauses otseselt oma nimega mitmes kohas sees , siis nimetatakse seda lauset otseseks definitsiooniks . Kui on aga selline lause , nagu keskmise arvutamisel esines ( +/%# ) , siis seda definitsiooni nimetatakse kaudseks ( pole ilmset nimega varustatud argumenti ! ) . Mõlemad lausekujud on kasulikud . Otsene definitsioon on tavaliselt paremini arusaadav . Kaudne on üldisem , lühem . ( Kiirus on igal juhul suur ) . Meie keskmisest pikemate inimeste pikkuste summa arvutamise verbi saab veelgi lühendada : +/ ( a ( +/%# ) a ) #a asemel teeb sama töö ära verb +/ ( ( +/%# ) a ) a ( Siin on tegemist konksuga , mis võimaldab ühe sümmeetriliselt paikneva argumendi kirjutamist vältida ( kokku hoida ! ? ) ) . Professionaalsete J-keeles programmeerijate hulgas on omamoodi hobiks selliste üherealiste programmide kirjutamine , mis muudes keeltes üpris palju ruumi võtavad . Algajale ei tohi niisugust trikitsemist küll soovitada , kuigi keelest arusaamise kiirendamiseks on selliste keeruliste avaldiste uurimine kasulik . Enne kirjuta ikka programm valmis jupp-jupilt ja alles siis mõtle , kas sellest annab teha kaudne definitsioon . ( Muide , süsteemis on kaasas eriline nõustuskäsk , mis kergendab programmeerija elu sellega , et pakub esitatud otsese definitsiooni kaudsel kujul . ) Toon veel ühe tuttava näite : Pascali kolmnurga konstrueerimine <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Alustame ülemisest reast r . <arv> Teise rea saame nii , et paneme ülemisele reale nulli ette ja siis taha ning liidame : r : ( <arv> , r ) + ( r , <arv> ) ( Kirjutis r , <arv> paneb noomenile r lõppu ühe nulli juurde ( rinnastamine ! ) ) Saame rea <arv> <arv>. Sama korrates <arv> <arv> <arv> jne. ( Kordamiseks tuleb lihtsalt kursor viia noomeni r definitsiooni lõppu ja klõpsata . ) Sellise iteratiivse ( rekursiivse ) asendamise puhul võib paremal poolel oleva r asendada märgiga ] . Kirjutis ( ] n ) tähendab n sisestamist . Meil oleks seega r : ( <arv> : , ] ) + ( ] , <arv> : ) Kirjutades nüüd r <arv> , r r <arv> , r r r <arv> , saame Pascali kolmnurga read . See on muidugi tüütu töö ja tõepoolest üpris loomulikul viisil saab jälle vaeva vähendada . Appi tuleb võtta J-keeles kasutusel olev verb i . , mis loob nulliga algavaid täisarvunimistuid , milles on parajasti niimitu elementi , kui i . taga olev arv näitab : i . <arv> - <arv> <arv> <arv> <arv> Selle verbi ja astendusmärgi abil saabki Pascali kolmnurga loomise programmi lõpliku kuju : r [ : ( i.<arv> ) <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Selle lause käsitlus on väga tüüpiline J-keele mõtteviisi jaoks . Alustuseks defineeriti lause r , mida siis lõplik arv kordi rakendatakse . Tõin meelega mõneti kummalisi näiteid , et jõuda tasapisi J-keele tavavõtete juurde . Üherealiste võimsate programmide kirjutamine nõuab treeningut , kuid on põnev ja õpetlik . J-KEELE ÜLDOMADUSI <arv>. ASCII alfabeet <arv>. Keele primitiivid on kas üks sümbol või sümbol ja lisaks punkt või koolon “ ” suurem kui “ . ” max “ : “ inkrement , so lisa väärtusele <arv> ( keele primitiivide kogu mahub ühele A<arv>-lehele ) <arv>. Verbid esitavad nii unaarseid ( monaad- ) seoseid kui binaarseid ( düaad- ) seoseid . % a on “ a pöördväärtus ” ( unaarne ) a % b on “ a jagatud b-ga ” ( binaarne ) Näiteks adverb / loob verbiga koos nn “ vahelepanemise ” +/ a “ pane plussmärk a iga kahe elemendi vahele ” . Analoogiliselt */ “ korruta kõik ” . Düaadina loob / aga tabeli eespool antud verbi abil : Olgu s= : <arv> <arv> <arv> <arv> , siis s */ s <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> &lt;./s võtab aga igast elementide paarist minimaalse ja paneb selle tabelisse : <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> Kuigi selle programmi tekst on isegi lühike , saab seda veelgi lühendada nn peegelduse abil : */~s loob ükskordühe tabeli . ( Verb ~ ( tilde , ingl. caret ) peegeldab argumendi verbi ette kah . ) VEIDI STRUKTUURIDEST J on eriti võimas vahend struktuuride käsitsemiseks . List ( nimistu ) a= : <arv> <arv> <arv> <arv> <arv> <arv> a <arv> <arv> <arv> <arv> <arv> <arv> Kirjutades <arv> + a liidame <arv> igale a elemendile . ( <arv>*a korrutab ; a%<arv> jagab jne ) MAATRIKS ( TABEL ) Võttes uuesti listi a= : <arv> <arv> <arv> <arv> <arv> <arv> , saame selle korrastada struktureerimisverbi $ kasutades ümber <arv>x<arv>-tabeliks : b= : <arv> <arv> $ a b <arv> <arv> <arv> <arv> <arv> <arv> Loomulikult on olemas ka pöördverb , ( koma ) , mis kuitahes pika ja keerulise struktuuri jälle ridu pidi ühte pikka rivisse sikutab ( ingl. ravel , harutamine , rinnastamine ) . Nii et , b annab tulemuseks jälle listi a : <arv> <arv> <arv> <arv> <arv> <arv> Lihtne on minna kuitahes kõrgete mõõtmeteni c= : <arv> <arv> <arv> $ i . <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> #c ( mitu elementi on c-s ? ) <arv> $ c ( milline struktuur on c-l ? ) <arv> <arv> <arv> VEIDI LÕBUSTUST LÕPUKS Näitamaks-ehmatamaks ja tavakeeltega võrdlemiseks toon veel ühe näite . Listi elementide indekseerimine ja loendamine : ( otsitakse üles kõik erinevad listi elemendid ja loendatakse nende sagedused ) . Vajalik verb on kaudses vormis selline : sag= : ( ] . , ) / . ~ f= : <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> | : / : sag f NB . / : sorteerib kasvavasse järjekorda ja | : transponeerib tabeli <arv> <arv> <arv> <arv> <arv> <arv> <arv> <arv> NB . aga on kommentaarimärk , mis võib olla samas reas . See programm töötab põhimõtteliselt suvalise pikkuse ja struktuuriga arvufailide peal . Tekstifailidest teeme juttu hiljem . Järgmistes lugudes näitame J-keele võimsust hoopis tõsisemate probleemide juures . Kalle Tammemäe , TTÜ arvutitehnika instituut FPL <arv> FPL <arv> ( Field Programmable Logic and Applications ) teadusseminar toimus seekord Villachis , väikeses Austria linnas , ümbritsetuna samalaadse maalilise loodusega nagu filmis “ Helisev muusika ” . Linna läbib roheka veega mägijõgi ning kokkupuutepunkt kahe naaberriigi - Serbia ja Itaaliaga on samade silmapiiril olevate kaljutippude vahel . Võrreldes möödunud aastaga oli seekordne kohtumine märksa laiaulatuslikum oma enam kui <arv> osalisega , paralleelsessioonidega ning toimumiskohaga moodsas konverentsikeskuses . Ettekandeid kuulates ei jäänud kellelegi märkamata ilmselged muudatused tehnoloogias , mis on teinud väliprogrammeeritavast loogikast millenniumi alguse peategelase . Aga alustame avakõnest , mille andis professor Tsugio Makimoto , Hitachi Ltd. Väga tuntud on Gordon Moore'i seadus , mis lubab transistoride arvu kahekordistumist pooljuhtkristallil iga <arv> kuuga . Kui Moore'i seadus on kaasajal üks tsiteeritumaid ja avaldub igaühele silmatorkavalt , vanandades arvuteid kiiremini kui rooste konservikarpi , siis Makimoto seaduse toime on oma avaldumistes vähem silmapaistev ning järelikult ka vähemtuntud . Makimoto laine kirjeldab kõige üldisemalt turumajanduses toimivaid protsesse ning küllap võib sarnaseid analoogiaid leida ka teistes valdkondades . On olemas kindlad jõud , mis keeravad arengutee spiraali või kahemõõtmeliselt vaadates sinusoidikujuliseks pendelduseks . Huvitav on arvutus , mis näitab vajalikku pendlipikkust - kellassepad peaksid seda une pealt teadma :  Jäägu see lugejatele järeleproovimiseks - vihjena võib öelda , et kinnituspunkt on lausa “ jumalikus ” kauguses . Joonis <arv> näitab küll jõude , mis mõjutavad pendli liikumist , kuid jõudude tasakaalu kaldumine ühele või teisele poole tuleneb juba sügavamatest turumajanduse reeglitest . Praegusele ajale on iseloomulik jõudmine personaalarvutite ( PC ) ajastult digitaalse tarbija ( DC ) ajastusse , mille tunnuseks on mobiilsus ehk rändav eluviis . Tänapäeva rändrahvas on harjunud omama ühesugust suhtlus- ja infotöötlusvabadust , olgu see siis töökohal või Alutaguse ürglaanes.Terve rida sidestandardeid toetab sellist eluviisi , olgu siin näiteks loetletud WAP , <arv>G , GPRS , Bluetooth jne. Milline nendest ja millisel määral saab elujõuliseks , on veel teadmata , sest olgu see läbiv mõte kuitahes innovatiivne ja kõrgelennuline , on need digitaalvidinad seotud olemasoleva tehnoloogiaga , turumajandusega ja lõppude lõpuks inimese endaga , kes ei saa kasvatada endale juurde ei silmi , kõrvu ega tundlaid . Muutuvate protokollide ja standardite maailmas on erakordselt raske tulla välja produktiga , mis müüks end lühikese aja ( umbes aasta ) jooksul sedavõrd , et teha tasa kulutused ning akumuleerida midagi arendusse . Siin sekkubki ellu väliprogrammeeritav loogika oma täies hiilguses . Tehnoloogia on küps integreerima ühele ränikristallile kõrgfunktsionaalseid standardplokke nagu mikroprotsessorite ja signaaliprotsessorite tuumasid , mälusid , analooglülitusi ja väliprogrammeerita- vat loogikat . Pildi pani paika teise päeva avaettekande tegija Jan Rabaey Berkeleyst oma võrdlusega ( joonis <arv> ) . Kõigi stiilide jaoks on eluruumi , tuleb ainult lähtuda uuele tootele esitatavatest nõuetest ning planeeritavast elueast . Kui toode peaks turul vastu pidama aastaid , siis peab otsima lahendit paindlikkuse telje kaugemas otsas . Loomulikult on protsessor kõige paindlikum - piisab vaid tarkvara ringikirjutamisest , aga energiaefektiivsus on jällegi madalaim . Rekonfigureeritav ehk väliprogrammeeritav loogika on vaid suurusjärgu võrra väiksema energiaefektiivsusega kui spetsiaalselt projekteeritud ja optimeeritud riistvara , aga paindlikkuselt väga lähedal rakendusspetsiifilistele protsessoritele . Siit järeldus - väliprogrammeeritav loogika peaks olema iga natukenegi pikema elueaga kiibi komponendiks nagu kontrolleridki . Kui muutuvad standardid , leitakse sobiv tasakaal riist- ja tarkvara vahel , laaditakse uus konfiguratsioon võrgust peale ning voila ! - elagu kolmas-neljas-viies põlvkond . Soovite teistsuguse kujuga nuppe , teist värvi korpust ? No see on juba pisiasi . Välikonfigureeritava loogika kasutamise tipuks on sellesse terve protsessorsüsteemi programmeerimine , kui peaks vaja minema paralleelsust , mida üksik kiibil olev külmutatud arhitektuuriga kontroller ei suuda täita . Ning ring ongi täis nagu yin-yang loodusfilosoofia käsitluses : “ Riistvara sisaldab tarkvara . Tarkvara sisaldab riistvara . Kõik on liikumises ” . See ei ole kohvikujutt - sarnaste omadustega kiibid ja IP-plokid on juba täna riiulikaup . Allakirjutanu oli kohal posterettekandega FPL-alasest haridusest TTÜ-s . Olles praktiliselt ainuke haridustemaatiline artikkel , pakkus käsitlus märkimisväärset huvi , algatades huvitavaid diskussioone õppemetoodika ja ülikoolide seadmetega varustatuse üle . Oli meeldiv tõdeda , et Tallinna Tehnikaülikooli varustatus projekteerimistarkvaraga ja seadmetega on paranenud kiiremini kui Ida-Euroopa ülikoolides keskmiselt ning on lähemal ajal jõudmas võrreldavale tasemele traditsioonilistes Euroopa ülikoolides nähtavaga . Aasta <arv> FPL teadusseminar toimub Belfastis , Iirimaal .